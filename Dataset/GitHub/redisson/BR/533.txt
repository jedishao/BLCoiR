Exception in using RedissonMultiLock
I have 5 independent masters and I use single server config to create Redission instance.
`
import java.util.concurrent.TimeUnit;
import org.redisson.Config;
import org.redisson.Redisson;
import org.redisson.RedissonClient;
import org.redisson.core.RLock;
import org.redisson.core.RedissonMultiLock;
public class LockTest {
static RedissonClient redisson1;
static RedissonClient redisson2;
static RedissonClient redisson3;
static RedissonClient redisson4;
static RedissonClient redisson5;

public static void main(String[] args) {
    redisson1 = createClient("192.168.223.128", 8000);
    redisson2 = createClient("192.168.223.128", 8001);
    redisson3 = createClient("192.168.223.128", 8002);
    redisson4 = createClient("192.168.223.128", 8003);
    redisson5 = createClient("192.168.223.128", 8004);

    System.out.println(lock("lock1"));

    // shout down Redis instance with port 8000 and try again
    System.out.println("try to get another lock");
    System.out.println(lock("lock2"));
}

private static RedissonClient createClient(String ip, int port) {
    Config config = new Config();
    config.useSingleServer().setAddress(ip + ":" + port);
    RedissonClient redisson = Redisson.create(config);
    return redisson;
}

private static boolean lock(String lockKey) {
    RLock lock1 = redisson1.getLock(lockKey);
    RLock lock2 = redisson2.getLock(lockKey);
    RLock lock3 = redisson3.getLock(lockKey);
    RLock lock4 = redisson4.getLock(lockKey);
    RLock lock5 = redisson5.getLock(lockKey);

    RedissonMultiLock lock = new RedissonMultiLock(lock1, lock2, lock3, lock4, lock5);

    boolean lockResult = false;

    try {
        lockResult = lock.tryLock(5, 10 * 1000, TimeUnit.MILLISECONDS);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    System.out.println("lock successfuly" + lockResult);
    return lockResult;
}

}`
The RedissonMultiLock works fine if all the redis nodes are alive.
If I shutdown one of the redis nodes, it will throw RedisConnectionException
Exception in thread "main" org.redisson.client.RedisConnectionException: Can't init enough connections amount! Only 0 from 5 were initialized. Server: /192.168.223.128:8000
According to The Redlock algorithm, it should try to lock another node but not throw exception. Do I use RedissonMultiLock correctly?
It tries to acquire the lock in all the N instances sequentially, using the same key name and random value in all the instances. During step 2, when setting the lock in each instance, the client uses a timeout which is small compared to the total lock auto-release time in order to acquire it. For example if the auto-release time is 10 seconds, the timeout could be in the ~ 5-50 milliseconds range. This prevents the client from remaining blocked for a long time trying to talk with a Redis node which is down: if an instance is not available, we should try to talk with the next instance ASAP.
