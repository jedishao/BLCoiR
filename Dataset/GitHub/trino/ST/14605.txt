Queries are occasionally getting stuck.
Manifests on the CI (for example https://pipelines.actions.githubusercontent.com/serviceHosts/127fb2d0-0ed8-42e9-b060-7c4f23b9a844/_apis/pipelines/1/runs/133247/signedlogcontent/85?urlExpires=2022-10-12T22%3A16%3A33.7329214Z&urlSigningMethod=HMACV1&urlSignature=BdhvMIRPxrk2hYFLkx7OmL9rPSLVFyQgNbLYFg8rbMo%3D).
The test that got stuck in this specific run is io.trino.faulttolerant.iceberg.TestIcebergTaskFailureRecoveryTest.testExplainAnalyze.
Stack trace:
2022-10-12T20:36:49.8702056Z "pool-3-thread-2" prio=5 Id=17 RUNNABLE (in native)
2022-10-12T20:36:49.8702457Z 	at java.base@17.0.4/sun.nio.ch.Net.poll(Native Method)
2022-10-12T20:36:49.8702923Z 	at java.base@17.0.4/sun.nio.ch.NioSocketImpl.park(NioSocketImpl.java:181)
2022-10-12T20:36:49.8703435Z 	at java.base@17.0.4/sun.nio.ch.NioSocketImpl.timedRead(NioSocketImpl.java:285)
2022-10-12T20:36:49.8703969Z 	at java.base@17.0.4/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:309)
2022-10-12T20:36:49.8704479Z 	at java.base@17.0.4/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:350)
2022-10-12T20:36:49.8704980Z 	at java.base@17.0.4/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:803)
2022-10-12T20:36:49.8705479Z 	at java.base@17.0.4/java.net.Socket$SocketInputStream.read(Socket.java:976)
2022-10-12T20:36:49.8705885Z 	at app//okio.Okio$2.read(Okio.java:140)
2022-10-12T20:36:49.8706261Z 	at app//okio.AsyncTimeout$2.read(AsyncTimeout.java:237)
2022-10-12T20:36:49.8706828Z 	at app//okio.RealBufferedSource.indexOf(RealBufferedSource.java:358)
2022-10-12T20:36:49.8707411Z 	at app//okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:230)
2022-10-12T20:36:49.8708144Z 	at app//okhttp3.internal.http1.Http1ExchangeCodec.readHeaderLine(Http1ExchangeCodec.java:242)
2022-10-12T20:36:49.8708882Z 	at app//okhttp3.internal.http1.Http1ExchangeCodec.readResponseHeaders(Http1ExchangeCodec.java:213)
2022-10-12T20:36:49.8709584Z 	at app//okhttp3.internal.connection.Exchange.readResponseHeaders(Exchange.java:115)
2022-10-12T20:36:49.8752415Z 	at app//okhttp3.internal.http.CallServerInterceptor.intercept(CallServerInterceptor.java:94)
2022-10-12T20:36:49.8753116Z 	at app//okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:142)
2022-10-12T20:36:49.8753821Z 	at app//okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:43)
2022-10-12T20:36:49.8754528Z 	at app//okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:142)
2022-10-12T20:36:49.8755204Z 	at app//okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:117)
2022-10-12T20:36:49.8755860Z 	at app//okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:94)
2022-10-12T20:36:49.8756520Z 	at app//okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:142)
2022-10-12T20:36:49.8757187Z 	at app//okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:117)
2022-10-12T20:36:49.8757830Z 	at app//okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)
2022-10-12T20:36:49.8758484Z 	at app//okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:142)
2022-10-12T20:36:49.8759238Z 	at app//okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:88)
2022-10-12T20:36:49.8759970Z 	at app//okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:142)
2022-10-12T20:36:49.8760683Z 	at app//okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:117)
2022-10-12T20:36:49.8761312Z 	at app//okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:229)
2022-10-12T20:36:49.8761821Z 	at app//okhttp3.RealCall.execute(RealCall.java:81)
2022-10-12T20:36:49.8762278Z 	at app//io.trino.client.JsonResponse.execute(JsonResponse.java:124)
2022-10-12T20:36:49.8762830Z 	at app//io.trino.client.StatementClientV1.advance(StatementClientV1.java:378)
2022-10-12T20:36:49.8763493Z 	at app//io.trino.testing.AbstractTestingTrinoClient.execute(AbstractTestingTrinoClient.java:98)
2022-10-12T20:36:49.8764188Z 	at app//io.trino.testing.DistributedQueryRunner.execute(DistributedQueryRunner.java:480)
2022-10-12T20:36:49.8764947Z 	at app//io.trino.faulttolerant.BaseFailureRecoveryTest$FailureRecoveryAssert.lambda$execute$2(BaseFailureRecoveryTest.java:594)
2022-10-12T20:36:49.8766561Z 	at app//io.trino.faulttolerant.BaseFailureRecoveryTest$FailureRecoveryAssert$$Lambda$4987/0x0000000802369a18.accept(Unknown Source)
2022-10-12T20:36:49.8767176Z 	at java.base@17.0.4/java.util.Optional.ifPresent(Optional.java:178)
2022-10-12T20:36:49.8767820Z 	at app//io.trino.faulttolerant.BaseFailureRecoveryTest$FailureRecoveryAssert.execute(BaseFailureRecoveryTest.java:594)
2022-10-12T20:36:49.8768650Z 	at app//io.trino.faulttolerant.BaseFailureRecoveryTest$FailureRecoveryAssert.executeActual(BaseFailureRecoveryTest.java:585)
2022-10-12T20:36:49.8769529Z 	at app//io.trino.faulttolerant.BaseFailureRecoveryTest$FailureRecoveryAssert.executeActualNoRetries(BaseFailureRecoveryTest.java:570)
2022-10-12T20:36:49.8770436Z 	at app//io.trino.faulttolerant.BaseFailureRecoveryTest$FailureRecoveryAssert.lambda$failsWithoutRetries$11(BaseFailureRecoveryTest.java:733)
2022-10-12T20:36:49.8771245Z 	at app//io.trino.faulttolerant.BaseFailureRecoveryTest$FailureRecoveryAssert$$Lambda$5097/0x0000000802396318.call(Unknown Source)
2022-10-12T20:36:49.8772101Z 	at app//org.assertj.core.api.ThrowableAssert.catchThrowable(ThrowableAssert.java:62)
2022-10-12T20:36:49.8772840Z 	at app//org.assertj.core.api.AssertionsForClassTypes.catchThrowable(AssertionsForClassTypes.java:877)
2022-10-12T20:36:49.8773525Z 	at app//org.assertj.core.api.Assertions.catchThrowable(Assertions.java:1306)
2022-10-12T20:36:49.8774227Z 	at app//org.assertj.core.api.Assertions.assertThatThrownBy(Assertions.java:1178)
2022-10-12T20:36:49.8774998Z 	at app//io.trino.faulttolerant.BaseFailureRecoveryTest$FailureRecoveryAssert.failsWithoutRetries(BaseFailureRecoveryTest.java:733)
2022-10-12T20:36:49.8775857Z 	at app//io.trino.faulttolerant.BaseFailureRecoveryTest$FailureRecoveryAssert.failsAlways(BaseFailureRecoveryTest.java:724)
2022-10-12T20:36:49.8776668Z 	at app//io.trino.faulttolerant.BaseFailureRecoveryTest.testNonSelect(BaseFailureRecoveryTest.java:421)
2022-10-12T20:36:49.8777501Z 	at app//io.trino.faulttolerant.BaseFailureRecoveryTest.testTableModification(BaseFailureRecoveryTest.java:400)
2022-10-12T20:36:49.8778366Z 	at app//io.trino.faulttolerant.BaseFailureRecoveryTest.testTableModification(BaseFailureRecoveryTest.java:395)
2022-10-12T20:36:49.8779223Z 	at app//io.trino.faulttolerant.BaseFailureRecoveryTest.testExplainAnalyze(BaseFailureRecoveryTest.java:359)
2022-10-12T20:36:49.8808360Z 	at java.base@17.0.4/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2022-10-12T20:36:49.8809234Z 	at java.base@17.0.4/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
2022-10-12T20:36:49.8810132Z 	at java.base@17.0.4/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2022-10-12T20:36:49.8810876Z 	at java.base@17.0.4/java.lang.reflect.Method.invoke(Method.java:568)
2022-10-12T20:36:49.8811602Z 	at app//org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:104)
2022-10-12T20:36:49.8812330Z 	at app//org.testng.internal.Invoker.invokeMethod(Invoker.java:645)
2022-10-12T20:36:49.8812964Z 	at app//org.testng.internal.Invoker.invokeTestMethod(Invoker.java:851)
2022-10-12T20:36:49.8813627Z 	at app//org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1177)
2022-10-12T20:36:49.8814347Z 	at app//org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
2022-10-12T20:36:49.8815074Z 	at app//org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
2022-10-12T20:36:49.8815803Z 	at java.base@17.0.4/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
2022-10-12T20:36:49.8816541Z 	at java.base@17.0.4/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
2022-10-12T20:36:49.8817154Z 	at java.base@17.0.4/java.lang.Thread.run(Thread.java:833)

While the test is built to validate failure recovery capabilities in fault tolerant execution the actual query that is getting stuck is not run with fault tolerant execution (see FailureRecoveryAssert.failsWithoutRetries in the stack trace). There's a chance that something is broken in the query failure path in pipelined execution.
      