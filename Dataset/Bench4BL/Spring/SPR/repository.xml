<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="SPR">
	<bug id="5016" opendate="2008-07-17 19:54:59" fixdate="2008-07-18 00:36:13" resolution="Duplicate">
		<buginformation>
			<summary>Add more properties to &lt;context:property-placeholder/&gt;</summary>
			<description>&amp;lt;context:property-placeholder/&amp;gt; only has an attribute (location). This is not enough for advance usage. Please add others like ignoreUnresolvablePlaceholders.</description>
			<version>2.5.5</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.context.config.PropertyOverrideBeanDefinitionParser.java</file>
			<file type="M">org.springframework.context.config.ContextNamespaceHandlerTests.java</file>
			<file type="M">org.springframework.context.config.PropertyPlaceholderBeanDefinitionParser.java</file>
			<file type="M">org.springframework.context.config.AbstractPropertyLoadingBeanDefinitionParser.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">4661</link>
		</links>
	</bug>
	<bug id="5171" opendate="2008-09-21 16:58:30" fixdate="2008-09-21 20:39:19" resolution="Duplicate">
		<buginformation>
			<summary>Incompatible with JUnit 4.5</summary>
			<description>Spring relies on org.junit.Assume$AssumptionViolatedException which no longer exists in JUnit 4.5</description>
			<version>2.5.5</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.test.web.AbstractModelAndViewTests.java</file>
			<file type="M">org.springframework.test.context.junit4.SpringJUnit4SuiteTests.java</file>
			<file type="M">org.springframework.test.context.junit4.FailingBeforeAndAfterMethodsTests.java</file>
			<file type="M">org.springframework.test.context.junit4.SpringJUnit4ClassRunner.java</file>
			<file type="D">org.springframework.test.context.junit4.SpringMethodRoadie.java</file>
			<file type="D">org.springframework.test.context.junit4.SpringTestMethod.java</file>
			<file type="M">org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests.java</file>
			<file type="M">org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">5145</link>
		</links>
	</bug>
	<bug id="5275" opendate="2008-11-06 10:09:58" fixdate="2008-11-20 08:07:23" resolution="Fixed">
		<buginformation>
			<summary>JmsUtils.buildExceptionMessage throws NPE if the linked exception doesn&amp;apos;t have a message</summary>
			<description>This method throws an exception if the linked exception&amp;amp;apos;s message is null.  I&amp;amp;apos;ve patched it locally as follow:
	/**

Build a descriptive exception message for the given JMSException,
incorporating a linked exception&amp;amp;apos;s message if appropriate.
@param ex the JMSException to build a message for
@return the descriptive message String
@see javax.jms.JMSException#getLinkedException()
	 */
	public static String buildExceptionMessage(JMSException ex) 
Unknown macro: {		String message = ex.getMessage();		Exception linkedEx = ex.getLinkedException();		if (linkedEx != null &amp;amp;&amp;amp; (linkedEx.getMessage() == null || message.indexOf(linkedEx.getMessage()) == -1)) {
			message = message + "; nested exception is " + linkedEx;
		}		return message;	} 

</description>
			<version>2.5.6</version>
			<fixedVersion>3.0 M1, 3.0 M2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.jms.support.JmsUtils.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">5332</link>
			<link type="Duplicate" description="is duplicated by">5402</link>
			<link type="Duplicate" description="is duplicated by">5785</link>
			<link type="Duplicate" description="is duplicated by">5958</link>
			<link type="Duplicate" description="is duplicated by">6052</link>
			<link type="Duplicate" description="is duplicated by">5470</link>
		</links>
	</bug>
	<bug id="5324" opendate="2008-11-26 04:47:48" fixdate="2008-11-28 00:05:48" resolution="Fixed">
		<buginformation>
			<summary>AnnotationSessionFactoryBean.scanPackages() creates scanning pattern incorrectly</summary>
			<description>The "scanPackages" property requires the package name to have a trailing "." which is inconsistent with the component-scan.  This feature was adding by SPR-4738
ClassPathScanningCandidateComponentProvider (used by component-scan) constructs the scanning pattern like this:
String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + resolveBasePackage(basePackage) + "/" + this.resourcePattern;
AnnotationSessionFactoryBean constructs the scanning pattern like this:
String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN;
Notice the missing "/" in the hibernate class.  This means that the resource pattern is constructed like classpath*:myPackage*/.class instead of classpath*:myPackage/*/.class
This works when all persistence classes are in the package to be scanned, but fails to scan subclasses.  AnnotationSessionFactoryBean should be changed to construct its pattern like component-scan does.
A workaround is to append a trailing "." onto the end of your package name.
</description>
			<version>2.5.6</version>
			<fixedVersion>3.0 M1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">6042</link>
		</links>
	</bug>
	<bug id="5332" opendate="2008-12-01 02:20:17" fixdate="2009-02-11 22:20:13" resolution="Duplicate">
		<buginformation>
			<summary>JmsException.getMessage throws NPE if a cause doesn&amp;apos;t have a message</summary>
			<description>Under some circumstances a JMS Exception may have a message unassigned i.e. its getMessage() returns null.
Like in SPR-5275 that fixed JmsUtils.buildExceptionMessage I can propose a fix like
	public String getMessage() {
		String message = super.getMessage();
		Throwable cause = getCause();
		if (cause instanceof JMSException) {
			Exception linkedEx = ((JMSException) cause).getLinkedException();
			if (linkedEx != null &amp;amp;&amp;amp; (cause.getMessage() != null &amp;amp;&amp;amp; cause.getMessage().indexOf(linkedEx.getMessage()) == -1 || cause.getMessage() == null)) 
{
				message = message + "; nested exception is " + linkedEx;
			}
		}
		return message;
	}</description>
			<version>2.5.6</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.jms.support.JmsUtils.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">5275</link>
		</links>
	</bug>
	<bug id="5402" opendate="2009-01-07 20:49:56" fixdate="2009-02-12 06:51:27" resolution="Duplicate">
		<buginformation>
			<summary>NullPointerException in JmsException</summary>
			<description>I saw a NullPointerException in the logs of my tomcat (started using maven cargo):






[INFO] [talledLocalContainer] java.lang.NullPointerException




[INFO] [talledLocalContainer] 	at java.lang.String.indexOf(String.java:1734)




[INFO] [talledLocalContainer] 	at java.lang.String.indexOf(String.java:1716)




[INFO] [talledLocalContainer] 	at org.springframework.jms.JmsException.getMessage(JmsException.java:87)




[INFO] [talledLocalContainer] 	at java.lang.Throwable.getLocalizedMessage(Throwable.java:267)




[INFO] [talledLocalContainer] 	at java.lang.Throwable.toString(Throwable.java:343)




[INFO] [talledLocalContainer] 	at java.lang.String.valueOf(String.java:2827)




[INFO] [talledLocalContainer] 	at java.io.PrintWriter.println(PrintWriter.java:710)




[INFO] [talledLocalContainer] 	at java.lang.Throwable.printStackTrace(Throwable.java:509)




[INFO] [talledLocalContainer] 	at org.apache.log4j.spi.ThrowableInformation.getThrowableStrRep(ThrowableInformation.java:76)




[INFO] [talledLocalContainer] 	at org.apache.log4j.spi.LoggingEvent.getThrowableStrRep(LoggingEvent.java:407)




[INFO] [talledLocalContainer] 	at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:305)




[INFO] [talledLocalContainer] 	at org.apache.log4j.WriterAppender.append(WriterAppender.java:160)




[INFO] [talledLocalContainer] 	at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:251)




[INFO] [talledLocalContainer] 	at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:66)




[INFO] [talledLocalContainer] 	at org.apache.log4j.Category.callAppenders(Category.java:206)




[INFO] [talledLocalContainer] 	at org.apache.log4j.Category.forcedLog(Category.java:391)




[INFO] [talledLocalContainer] 	at org.apache.log4j.Category.error(Category.java:322)






The problem can be seen by looking at the code of JmsMessage.java:






	public String getMessage() {




		String message = super.getMessage();




		Throwable cause = getCause();




		if (cause instanceof JMSException) {




			Exception linkedEx = ((JMSException) cause).getLinkedException();




			if (linkedEx != null &amp;amp;&amp;amp; cause.getMessage().indexOf(linkedEx.getMessage()) == -1) {




				message = message + "; nested exception is " + linkedEx;




			}




		}




		return message;




	}






The line that does the indexOf() can give a NPE if linkedEx.getMessage() returns null</description>
			<version>2.5.6</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.jms.support.JmsUtils.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">5275</link>
		</links>
	</bug>
	<bug id="5362" opendate="2008-12-15 13:28:05" fixdate="2009-02-12 20:16:48" resolution="Duplicate">
		<buginformation>
			<summary>@RequestMapping best match gives wrong Controller method when using wildcards</summary>
			<description>Reference forum message http://forum.springsource.org/showthread.php?t=64011
Given the following two methods in a Controller
@RequestMapping(value="/rest/mail/v1/ipm/*", method=RequestMethod.GET)
public ModelAndView Method1()
@RequestMapping(value="/rest/mail/v1/ipm//*", method=RequestMethod.GET)
public ModelAndView Method2()
Given the request path /rest/mail/v1/ipm/JA8AAAAAAAAAKwAB4awBIfRXAeRU it matches the first method, but then chooses the second path as a BETTER match, resulting in the wrong method being called.  This is because of the simplistic implementation of isBetterPathMatch() that decides that a longer length path is a better match regardless of the number of elements in the path.
This occurs in AnnotationMethodHandlerAdapter.ServletHandlerMethodResolver.isBetterPathMatch.  It clearly does not take account of the extra / in the second path, which is not present in the given URL.
Although it is possible to make a workaround which involves having a single method, where the code then makes decisions based on the request path, it complicates Controller implementations forcing different sets of business logic to be combined.</description>
			<version>2.5.6</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.util.AntPathMatcherTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">5367</link>
			<link type="Duplicate" description="duplicates">5924</link>
		</links>
	</bug>
	<bug id="5145" opendate="2008-09-08 12:16:48" fixdate="2009-04-29 13:47:24" resolution="Fixed">
		<buginformation>
			<summary>Spring TestContext Framework not compatible with JUnit 4.5</summary>
			<description>After upgrading to junit 4.5 my test class which uses the SpringJUnit4ClassRunner gets a NoClassDefFoundError:
org.apache.maven.surefire.booter.SurefireExecutionException: org/junit/Assume$AssumptionViolatedException; nested exception is java.lang.NoClassDefFoundError: org/junit/Assume$AssumptionViolatedException
java.lang.NoClassDefFoundError: org/junit/Assume$AssumptionViolatedException
	at org.springframework.test.context.junit4.SpringMethodRoadie.runTestMethod(SpringMethodRoadie.java:240)
	at org.springframework.test.context.junit4.SpringMethodRoadie$RunBeforesThenTestThenAfters.run(SpringMethodRoadie.java:333)
	at org.springframework.test.context.junit4.SpringMethodRoadie.runWithRepetitions(SpringMethodRoadie.java:217)
	at org.springframework.test.context.junit4.SpringMethodRoadie.runTest(SpringMethodRoadie.java:197)
	at org.springframework.test.context.junit4.SpringMethodRoadie.run(SpringMethodRoadie.java:143)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:142)
	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:59)
etc.
This is a Junit 4.5 issue.  The static class AssumptionViolatedException within org.junit.Assume that existed in 4.4 has become org.junit.internal.AssumptionViolatedException.
The file tiger/mock/org/springframework/test/context/junit4/SpringMethodRoadie.java imports org.junit.Assume.AssumptionViolatedException which is why my test is failing.
Workaround is to stick with Junit 4.4.
(Aside: are there plans to create a "SpringTEST" component?).
</description>
			<version>2.5.5</version>
			<fixedVersion>3.0 M3</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.test.web.AbstractModelAndViewTests.java</file>
			<file type="M">org.springframework.test.context.junit4.SpringJUnit4SuiteTests.java</file>
			<file type="M">org.springframework.test.context.junit4.FailingBeforeAndAfterMethodsTests.java</file>
			<file type="M">org.springframework.test.context.junit4.SpringJUnit4ClassRunner.java</file>
			<file type="D">org.springframework.test.context.junit4.SpringMethodRoadie.java</file>
			<file type="D">org.springframework.test.context.junit4.SpringTestMethod.java</file>
			<file type="M">org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests.java</file>
			<file type="M">org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">5171</link>
			<link type="Related" description="is related to">5887</link>
		</links>
	</bug>
	<bug id="5395" opendate="2009-01-05 01:38:48" fixdate="2009-05-02 18:52:05" resolution="Duplicate">
		<buginformation>
			<summary>ApplicationContext not closed when using @ContextConfiguration to implement integration tests</summary>
			<description>I am seeing side-effects in an integration test that initializes a Spring ApplicationContext using @ContextConfiguration.  Specifically, close() on the context does not appear to be being called, ever.  I noticed this because one of my DispoableBeans is not receiving a destroy() callback and that is what is causing the side-effect [which pops up when a @Test runs in another, unrelated TestCase class].
I understand a test ApplicationContext is cached between test methods, but I would still expect the context to be closed after all tests have run, before moving on to the next test class in the suite.</description>
			<version>3.0 M1</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.test.context.TestContextManager.java</file>
			<file type="M">org.springframework.test.context.testng.FailingBeforeAndAfterMethodsTests.java</file>
			<file type="M">org.springframework.test.context.junit4.FailingBeforeAndAfterMethodsTests.java</file>
			<file type="M">org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.java</file>
			<file type="M">org.springframework.test.context.TestExecutionListener.java</file>
			<file type="M">org.springframework.test.context.support.AbstractTestExecutionListener.java</file>
			<file type="M">org.springframework.test.context.junit4.SpringJUnit4ClassRunner.java</file>
			<file type="M">org.springframework.test.context.testng.ConcreteTransactionalTestNGSpringContextTests.java</file>
			<file type="M">org.springframework.test.context.testng.DirtiesContextTransactionalTestNGSpringContextTests.java</file>
			<file type="D">org.springframework.test.context.junit4.statements.RunSpringTestContextAfters.java</file>
			<file type="M">org.springframework.test.context.support.DirtiesContextTestExecutionListener.java</file>
			<file type="M">org.springframework.test.context.junit4.ClassLevelDisabledSpringRunnerTests.java</file>
			<file type="M">org.springframework.test.context.SpringRunnerContextCacheTests.java</file>
			<file type="M">org.springframework.test.annotation.DirtiesContext.java</file>
			<file type="M">org.springframework.test.context.testng.AbstractTestNGSpringContextTests.java</file>
			<file type="M">org.springframework.test.context.junit4.SpringJUnit4SuiteTests.java</file>
			<file type="D">org.springframework.test.context.junit4.statements.RunSpringTestContextBefores.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">4702</link>
			<link type="Related" description="is related to">5640</link>
			<link type="Related" description="is related to">4702</link>
		</links>
	</bug>
	<bug id="5406" opendate="2009-01-13 06:13:48" fixdate="2009-05-13 01:18:57" resolution="Fixed">
		<buginformation>
			<summary>Make Tiles 2 easier to configure in Spring MVC</summary>
			<description>Simple thing we can do:

Provide a TilesViewResolver subclass of UrlBasedViewResolver that configures the viewClass to be TilesView as a convenience

First noticed this when explaining configuring you need to configure a URL resolver for Tiles view proved quite complex.  It&amp;amp;apos;s simpler to just say configure a Tiles view resolver.</description>
			<version>3.0 M1</version>
			<fixedVersion>3.0 M4</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.core.io.ResourceEditorTests.java</file>
			<file type="M">org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.java</file>
			<file type="M">org.springframework.beans.factory.xml.XmlBeanDefinitionReaderTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">5504</link>
			<link type="Related" description="is related to">5689</link>
		</links>
	</bug>
	<bug id="5785" opendate="2009-05-25 21:27:45" fixdate="2009-05-27 21:40:44" resolution="Duplicate">
		<buginformation>
			<summary>NullPointerException in JmsUtils.buildExceptionMessage</summary>
			<description>I triggered  this by fetching an invalid JMS message from a  JMS Queue, that causes a NullPointerException exeption.
The spring framework catches this exeption and tries to handle it. But while it tries to generate the error output it triggers another NPE.
I think what happens is, that it does "message.indexOf(linkedEx.getMessage())" but "linkedEx.getMessage()" is null.
Exception in thread "OrderStateListener-2" java.lang.NullPointerException
        at java.lang.String.indexOf(String.java:1734)
        at java.lang.String.indexOf(String.java:1716)
        at org.springframework.jms.support.JmsUtils.buildExceptionMessage(JmsUtils.java:255)
        at org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerSetupFailure(DefaultMessageListenerContainer.java:745)
        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:897)
        at java.lang.Thread.run(Thread.java:619)</description>
			<version>2.5.6</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.jms.support.JmsUtils.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">5275</link>
		</links>
	</bug>
	<bug id="5854" opendate="2009-06-22 01:24:06" fixdate="2009-06-22 04:31:33" resolution="Duplicate">
		<buginformation>
			<summary>Method lookup facility doesn&amp;apos;t work properly with scope defined in parent bean</summary>
			<description>I have an abstract bean which used as a template. This bean has scope=prototype. Children declarations are real beans which are injected (as method lookup).
The problem is, that this  scope=prototype is ignore (beans are created only once). Found solution  declare scope=prototype for each &amp;amp;apos;real&amp;amp;apos; bean.






	&amp;lt;bean id="reportingService" class="com.uwiss.hr.service.impl.ReportingServiceImpl"&amp;gt;




		&amp;lt;property name="asyncTaskManager" ref="asyncTaskManager"/&amp;gt;




		&amp;lt;property name="projectBO" ref="projectBO"/&amp;gt;




		&amp;lt;property name="context" ref="asyncTaskContext"/&amp;gt;




		&amp;lt;!-- lookups --&amp;gt;




		&amp;lt;lookup-method name="createEmployeeReportTask" bean="employeeReportTask"/&amp;gt;




		&amp;lt;lookup-method name="createSummaryEmployeeReportTask" bean="summaryEmployeeReportTask"/&amp;gt;




		&amp;lt;lookup-method name="createEmployeeAllDetailReportTask" bean="employeeAllDetailReportTask"/&amp;gt;




		&amp;lt;lookup-method name="createProjectReportTask" bean="projectReportTask"/&amp;gt;




		&amp;lt;lookup-method name="createProjectDetailReportTask" bean="projectDetailReportTask"/&amp;gt;




		&amp;lt;lookup-method name="createProjectAllDetailReportTask" bean="projectAllDetailReportTask"/&amp;gt;




		&amp;lt;lookup-method name="createAllBankDataInfoCallableTask" bean="allBankDataInfoCallableTask"/&amp;gt;




		&amp;lt;lookup-method name="createInvoiceReportCallableTask" bean="invoiceReportCallableTask"/&amp;gt;




	&amp;lt;/bean&amp;gt;









         &amp;lt;!-- template --&amp;gt;




	&amp;lt;bean id="jasperReportJDBCTaskGeneric" class="com.uwiss.jenive.asynctask.server.AbstractJasperReportJDBCCallableTask" scope="prototype" abstract="true"&amp;gt;




		&amp;lt;property name="dataSource" ref="dataSource"/&amp;gt;




		&amp;lt;property name="cacheBaseDirectory" value="${jasper.cache.location}"/&amp;gt;




		&amp;lt;property name="resultProcessor" ref="asyncTaskProgressableUrlCreator"/&amp;gt;




		&amp;lt;property name="fileResolver"&amp;gt;




			&amp;lt;bean class="com.uwiss.hr.RuntimeCompilationFileResolver"&amp;gt;




				&amp;lt;constructor-arg&amp;gt;




					&amp;lt;list&amp;gt;




						&amp;lt;value&amp;gt;classpath:/fonts/&amp;lt;/value&amp;gt;




						&amp;lt;value&amp;gt;classpath:/com/uwiss/hr/report/&amp;lt;/value&amp;gt;




					&amp;lt;/list&amp;gt;




				&amp;lt;/constructor-arg&amp;gt;




				&amp;lt;property name="cacheBaseDirectory" value="${jasper.cache.location}"/&amp;gt;




			&amp;lt;/bean&amp;gt;




		&amp;lt;/property&amp;gt;




	&amp;lt;/bean&amp;gt;




        




       &amp;lt;!-- real beans: have to declare scope=target as a workaround --&amp;gt;




	&amp;lt;bean id="allBankDataInfoCallableTask" class="com.uwiss.hr.service.async.report.AllBankDataInfoCallableTask" scope="prototype" parent="jasperReportJDBCTaskGeneric"&amp;gt;




		&amp;lt;property name="reportLocation" value="classpath:/com/uwiss/hr/report/AllBankDataInfo.jrxml"/&amp;gt;




		&amp;lt;property name="employeeBO" ref="employeeBO"/&amp;gt;




	&amp;lt;/bean&amp;gt;










</description>
			<version>2.5.6</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.beans.factory.config.BeanDefinition.java</file>
			<file type="M">org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.java</file>
			<file type="M">org.springframework.beans.factory.xml.XmlBeanFactoryTests.java</file>
			<file type="M">org.springframework.beans.factory.support.AbstractBeanFactory.java</file>
			<file type="M">org.springframework.beans.factory.support.AbstractBeanDefinition.java</file>
			<file type="M">org.springframework.beans.factory.DefaultListableBeanFactoryTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">3542</link>
		</links>
	</bug>
	<bug id="4702" opendate="2008-04-14 13:06:57" fixdate="2009-07-06 05:07:47" resolution="Fixed">
		<buginformation>
			<summary>Support for @DirtiesContext at the test class level</summary>
			<description>Expected behavior:
  Context should be close()&amp;amp;apos;d after end of test class execution
Observed behavior:
  Context only closed when @DirtiesContext annotates method
Multiple test classes can re-use the same context, which allows for faster test execution, so automatically closing a context after test class execution is probably not the best mechanism.  
However, there should be a way to annotate that a context should be close()&amp;amp;apos;d after all tests in a test class are executed. 
Suggested fix:

allow @DirtiesContext to annotate class
add TestExecutionListener#destroyTestInstance

Willing to implementing, if given approval of design. </description>
			<version>3.0 M1</version>
			<fixedVersion>3.0 M4</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.test.context.TestContextManager.java</file>
			<file type="M">org.springframework.test.context.testng.FailingBeforeAndAfterMethodsTests.java</file>
			<file type="M">org.springframework.test.context.junit4.FailingBeforeAndAfterMethodsTests.java</file>
			<file type="M">org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.java</file>
			<file type="M">org.springframework.test.context.TestExecutionListener.java</file>
			<file type="M">org.springframework.test.context.support.AbstractTestExecutionListener.java</file>
			<file type="M">org.springframework.test.context.junit4.SpringJUnit4ClassRunner.java</file>
			<file type="M">org.springframework.test.context.testng.ConcreteTransactionalTestNGSpringContextTests.java</file>
			<file type="M">org.springframework.test.context.testng.DirtiesContextTransactionalTestNGSpringContextTests.java</file>
			<file type="D">org.springframework.test.context.junit4.statements.RunSpringTestContextAfters.java</file>
			<file type="M">org.springframework.test.context.support.DirtiesContextTestExecutionListener.java</file>
			<file type="M">org.springframework.test.context.junit4.ClassLevelDisabledSpringRunnerTests.java</file>
			<file type="M">org.springframework.test.context.SpringRunnerContextCacheTests.java</file>
			<file type="M">org.springframework.test.annotation.DirtiesContext.java</file>
			<file type="M">org.springframework.test.context.testng.AbstractTestNGSpringContextTests.java</file>
			<file type="M">org.springframework.test.context.junit4.SpringJUnit4SuiteTests.java</file>
			<file type="D">org.springframework.test.context.junit4.statements.RunSpringTestContextBefores.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">5395</link>
			<link type="Relate" description="is related to">5305</link>
			<link type="Related" description="is related to">5640</link>
			<link type="Related" description="is related to">2007</link>
			<link type="Related" description="is related to">5395</link>
		</links>
	</bug>
	<bug id="5924" opendate="2009-07-13 00:15:59" fixdate="2009-07-13 18:08:50" resolution="Fixed">
		<buginformation>
			<summary>REOPENED -PathVariable mappings are greedy over hard coded mappings</summary>
			<description>Hard coded request mapping values should take precedence over path variables.  Wild card patterns in a path are currently inferior to explicit values.  Path variables should be applied after explicit paths and before wild cards.
For example:
@RequestMapping(value = "/resources/new/", method = RequestMethod.GET)
is currently trumped by
@RequestMapping(value = "/resources/
{resourceName}/", method = RequestMethod.GET)

@RequestMapping(value = "/resources/new/", method = RequestMethod.GET)
currently trumps
@RequestMapping(value = "/resources/*/", method = RequestMethod.GET)


@RequestMapping(value = "/resources/new/", method = RequestMethod.GET)
should trump
@RequestMapping(value = "/resources/{resourceName}
/", method = RequestMethod.GET)
should trump
@RequestMapping(value = "/resources/*/", method = RequestMethod.GET)</description>
			<version>3.0 M1</version>
			<fixedVersion>3.0 M4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.util.AntPathMatcher.java</file>
			<file type="M">org.springframework.util.AntPathMatcherTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">5362</link>
			<link type="Related" description="is related to">5367</link>
			<link type="Related" description="is related to">5731</link>
		</links>
	</bug>
	<bug id="5958" opendate="2009-07-27 08:28:55" fixdate="2009-07-27 21:40:51" resolution="Duplicate">
		<buginformation>
			<summary>NullPointerException in JmsUtils.buildExceptionMessage()</summary>
			<description>I am currently using Spring 2.5.6 and we are using the DefaultMessageListenerContainer object.  We were doing some integration testing and noticed that when we killed the JVM hosting our JMS Topic that our Spring DefaultMessageListenerContainer would not successfully re-establish a JMS connection after the JVM hosting the JMS Topic was restarted.
We would get a stack trace that indicated a NullPointerException from this code:
	public static String buildExceptionMessage(JMSException ex) {
		String message = ex.getMessage();
		Exception linkedEx = ex.getLinkedException();
		if (linkedEx != null &amp;amp;&amp;amp; message.indexOf(linkedEx.getMessage()) == -1) 
{  // Need to check for null on linkedEx.getMessage()
			message = message + "; nested exception is " + linkedEx;
		}
		return message;
	}
You need to check for a null before calling "message.indexOf(linkedEx.getMessage())".  This NPE was causing the Spring JMS internals to not automatically re-connect to the JMS Topic.</description>
			<version>2.5.6</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.jms.support.JmsUtils.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">5275</link>
		</links>
	</bug>
	<bug id="6042" opendate="2009-08-25 21:25:50" fixdate="2009-08-25 23:26:16" resolution="Duplicate">
		<buginformation>
			<summary>AnnotationSessionFactoryBean packagesToScan in a OSGi environment</summary>
			<description>The code






String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +




    ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN;






in the AnnotationSessionFactoryBean.scanPackages() method resolves the pattern to scan to classpath:com/mycompany*/.class* for a packagesToScan="com/mycompany", but it fails to get the resources. I think a slash is missing to obtain classpath:com/mycompany/*/.class*, like the one in ClassPathScanningCandidateComponentProvider.findCandidateComponents():






String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +




    resolveBasePackage(basePackage) + "/" + this.resourcePattern;






or at least a setResourcePattern() like ClassPathScanningCandidateComponentProvider.
</description>
			<version>2.5.6</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">5324</link>
		</links>
	</bug>
	<bug id="6052" opendate="2009-08-28 20:43:06" fixdate="2009-08-31 01:38:07" resolution="Duplicate">
		<buginformation>
			<summary>NullPointerException can occur from JmsUtils.buildException</summary>
			<description>The following exception has been noted when the WL JMS drivers failed to connect:
Exception in thread "jms.jobs.messageListenerContainer.SRUpdateFromSiebel-1" java.lang.NullPointerException
	at java.lang.String.indexOf(String.java:1564)
	at java.lang.String.indexOf(String.java:1546)
	at org.springframework.jms.support.JmsUtils.buildExceptionMessage(JmsUtils.java:255)
	at org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerSetupFailure(DefaultMessageListenerContainer.java:745)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:897)
	at java.lang.Thread.run(Thread.java:595)
The problem is this line of code in JmsUtils.buildException:
		if (linkedEx != null &amp;amp;&amp;amp; message.indexOf(linkedEx.getMessage()) == -1) {
linkedEx may not be null, but the message can be null, so it simply need to be:
		if (linkedEx != null &amp;amp;&amp;amp; linkedEx.getMessage() != null &amp;amp;&amp;amp; message.indexOf(linkedEx.getMessage()) == -1) {</description>
			<version>2.5.6</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.jms.support.JmsUtils.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">5275</link>
		</links>
	</bug>
	<bug id="6070" opendate="2009-09-02 21:04:28" fixdate="2009-09-02 23:12:45" resolution="Fixed">
		<buginformation>
			<summary>Differing types for getter/setter of CookieGenerator.cookieMaxAge causes configuring to fail.</summary>
			<description>CookieGenerator.cookieMaxAge&amp;amp;apos;s setter uses the primitive type &amp;amp;apos;int&amp;amp;apos;, but the getter uses &amp;amp;apos;Integer&amp;amp;apos;.  This seems to stop this property from being configured through the spring configuration xml file.
If it&amp;amp;apos;s important, I&amp;amp;apos;m actually using a subclass of CookieGenerator.
Somebody in the forums had a similar problem:
http://forum.springsource.org/showthread.php?p=254675
Partial stacktrace:






Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property &amp;amp;apos;cookieMaxAge&amp;amp;apos; of bean class [org.jasig.cas.web.support.CookieRetrievingCookieGenerator]: Bean property &amp;amp;apos;cookieMaxAge&amp;amp;apos; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?




	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:850)




	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:701)




	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:78)




	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:60)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1330)




	... 55 more





</description>
			<version>3.0 M4</version>
			<fixedVersion>3.0 RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.util.CookieGenerator.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">6082</link>
		</links>
	</bug>
	<bug id="6082" opendate="2009-09-04 14:20:44" fixdate="2009-09-06 23:53:46" resolution="Duplicate">
		<buginformation>
			<summary>cookieMaxAge field fails in org.springframework.web.servlet.i18n.CookieLocaleResolver</summary>
			<description>upgrading a functioning 2.5 app to the most recent 3.0 (M4) release.
I have the following bean definition that fails in 3.0 M4: 
&amp;lt;bean id="localeResolver"^M
        class="org.springframework.web.servlet.i18n.CookieLocaleResolver"&amp;gt;^M
        &amp;lt;property name="cookieName" value="language" /&amp;gt;^M
        &amp;lt;property name="cookieMaxAge" value="3600" /&amp;gt;^M
        &amp;lt;property name="defaultLocale" value="en" /&amp;gt;^M
&amp;lt;/bean&amp;gt;
When I deploy this in Tomcat 6.20 I get the following error.
SEVERE: Allocate exception for servlet court
org.springframework.beans.NotWritablePropertyException: Invalid property &amp;amp;apos;cookieMaxAge&amp;amp;apos; of bean class [org.springframework.web.servlet.i18n.CookieLocaleResolver]: Bean property &amp;amp;apos;cookieMaxAge&amp;amp;apos; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
        at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:850)
        at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:701)
        at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:78)
        at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:60)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1330)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1060)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:449)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:289)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:286)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:188)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:528)
        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:716)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:383)
        at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:447)
        at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:342)
        at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:308)
        at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:127)
        at javax.servlet.GenericServlet.init(GenericServlet.java:212)
        at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1173)
        at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:809)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:129)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
I reviewed the docs on M4
http://static.springsource.org/spring/docs/3.0.0.M4/javadoc-api/org/springframework/web/servlet/i18n/CookieLocaleResolver.html
The method is inherited from org.springframework.web.util.CookieGenerator . I saw the source 
https://src.springframework.org/svn/spring-framework/tags/spring-framework-3.0.0.M4/org.springframework.web/src/main/java/org/springframework/web/util/CookieGenerator.java 
And the set and getCookieMaxAge methods appears to be there. 
Not exactly sure what is the root of this error message/bug.</description>
			<version>3.0 M4</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.util.CookieGenerator.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6070</link>
		</links>
	</bug>
	<bug id="6053" opendate="2009-08-29 14:13:40" fixdate="2009-09-07 04:36:54" resolution="Fixed">
		<buginformation>
			<summary>Cannot retrieve database metadata for Sybase</summary>
			<description>When executing a Sybase stored procedure using SimpleJdbcCall class, the database metadata is not being loaded. The logs show the following messages:
org.springframework.jdbc.core.metadata.CallMetaDataProviderFactory - SQL Server is not one of the databases fully supported for procedure calls  supported are: [Apache Derby, DB2, MySQL, Microsoft SQL Server, Oracle, Sybase]
org.springframework.jdbc.core.metadata.CallMetaDataProviderFactory - Metadata processing disabled - you must specify all parameters explicitly
org.springframework.jdbc.core.metadata.CallMetaDataProviderFactory - Using org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider
After little research, I found that our Sybase database is named "SQL Server" and the commonDatabaseName method in JdbcUtils being used to get the database name compares against the string "sql server". 
This problem gets fixed if the comparison with "sql server" is done without considering the case. </description>
			<version>2.5.6</version>
			<fixedVersion>3.0 RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.jdbc.support.JdbcUtils.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">6965</link>
			<link type="Duplicate" description="is duplicated by">6269</link>
		</links>
	</bug>
	<bug id="5120" opendate="2008-08-27 04:12:18" fixdate="2009-09-17 02:58:53" resolution="Fixed">
		<buginformation>
			<summary>Spring component scanning does not work within JBoss EJB container</summary>
			<description>The spring scanner functionality do not work when I create my ApplicationContext from a EJB managed by JBoss. I do test the same spring application context on diferents enviroments. Just on a managed EJB on a JBoos it is not workin.
EJB code
        appContext = new GenericApplicationContext();
        ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(appContext);
        scanner.scan("com");
        appContext.refresh();
Annotated class
       @Service
        public class TransactionService {
Exception
        ERROR: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named &amp;amp;apos;transactionService&amp;amp;apos; is defined</description>
			<version>2.5.5</version>
			<fixedVersion>3.0 RC1</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.core.io.support.jboss.VfsResource.java</file>
			<file type="M">org.springframework.core.io.ClassPathResource.java</file>
			<file type="M">org.springframework.core.io.support.PathMatchingResourcePatternResolver.java</file>
			<file type="M">org.springframework.core.io.UrlResource.java</file>
			<file type="M">org.springframework.util.ResourceUtils.java</file>
		</fixedFiles>
		<links>
			<link type="Depends" description="is depended on by">6146</link>
			<link type="Duplicate" description="is duplicated by">6385</link>
			<link type="Related" description="is related to">5340</link>
			<link type="Related" description="is related to">5784</link>
		</links>
	</bug>
	<bug id="6093" opendate="2009-09-09 05:23:10" fixdate="2009-09-24 19:46:24" resolution="Fixed">
		<buginformation>
			<summary>MVC Annotation Inheritance</summary>
			<description>I currently run a patched M4 build to work around problems with @ExceptionHandler methods (and @ResponseStatus on them) not functioning with overridden methods (in my case it&amp;amp;apos;s due to @Transactional CGlib proxies). While patching these issues, I also changed handling of some other annotations which were being queried using Method.getAnnotation/Method.isAnnotationPresent as opposed to AnnotationUtils.findAnnotation.
I have attached my patch as a starting point. I believe I found all instances where AnnotationUtils.findAnnotation was not being used and fixed them. However, I only updated the tests for AnnotationMethodHandlerExceptionResolver. I did not feel confident with the amount of time I had to update the tests for AnnotationMethodHandlerAdapter.
I think these changes are in line with a recent checkin (revision 1852) related to inheritance of JMX annotations (SPR-3635 SPR-5039 and SPR-5813).
</description>
			<version>3.0 M4</version>
			<fixedVersion>3.0 RC1</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolverTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">5959</link>
			<link type="Related" description="is related to">5935</link>
		</links>
	</bug>
	<bug id="6163" opendate="2009-09-29 07:55:43" fixdate="2009-09-30 22:52:52" resolution="Fixed">
		<buginformation>
			<summary>Using ignoreAcceptHeader and defaultContentType together causes problems.</summary>
			<description>Using ignore accept header and default content type causes problems. Here is my bean xml:

{code?xml}
    &amp;lt;bean id="contentNegotiatingViewResolver"
          class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"&amp;gt;
        &amp;lt;property name="order" value="1"/&amp;gt;
        &amp;lt;property name="ignoreAcceptHeader" value="true" /&amp;gt;
        &amp;lt;property name="defaultContentType" value="text/html" /&amp;gt;
        &amp;lt;property name="mediaTypes"&amp;gt;
            &amp;lt;map&amp;gt;
                &amp;lt;entry key="ftl" value="text/html"/&amp;gt;
                &amp;lt;entry key="xml" value="application/xml"/&amp;gt;
                &amp;lt;entry key="json" value="application/json"/&amp;gt;
                &amp;lt;entry key="atom" value="application/atom+xml"/&amp;gt;
                &amp;lt;entry key="rss" value="application/rss+xml"/&amp;gt;
            &amp;lt;/map&amp;gt;
        &amp;lt;/property&amp;gt;
        &amp;lt;property name="defaultViews"&amp;gt;
            &amp;lt;list&amp;gt;
                &amp;lt;bean class="org.springframework.web.servlet.view.xml.MarshallingView"&amp;gt;
                    &amp;lt;property name="contentType" value="application/xml" /&amp;gt;
                    &amp;lt;property name="marshaller"&amp;gt;
                        &amp;lt;bean class="org.springframework.oxm.xstream.XStreamMarshaller"&amp;gt;
                            &amp;lt;property name="autodetectAnnotations" value="true"/&amp;gt;
                        &amp;lt;/bean&amp;gt;
                    &amp;lt;/property&amp;gt;
                &amp;lt;/bean&amp;gt;
                &amp;lt;bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView"&amp;gt;
                    &amp;lt;property name="contentType" value="application/json" /&amp;gt;
                &amp;lt;/bean&amp;gt;
            &amp;lt;/list&amp;gt;
        &amp;lt;/property&amp;gt;
        &amp;lt;property name="viewResolvers"&amp;gt;
            &amp;lt;list&amp;gt;
                &amp;lt;bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver"&amp;gt;
                    &amp;lt;property name="contentType" value="text/html" /&amp;gt;
                    &amp;lt;property name="order" value="2"/&amp;gt;
                    &amp;lt;property name="cache" value="false"/&amp;gt;
                    &amp;lt;property name="prefix" value=""/&amp;gt;
                    &amp;lt;property name="suffix" value=".ftl"/&amp;gt;
                    &amp;lt;property name="exposeSpringMacroHelpers" value="true"/&amp;gt;
                &amp;lt;/bean&amp;gt;
            &amp;lt;/list&amp;gt;
        &amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;











Here is the exception that is generated:











SEVERE: Servlet.service() for servlet jawbs threw exception
java.lang.UnsupportedOperationException
	at java.util.AbstractList.set(AbstractList.java:115)
	at java.util.AbstractList$ListItr.set(AbstractList.java:412)
	at java.util.Collections.sort(Collections.java:121)
	at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.resolveViewName(ContentNegotiatingViewResolver.java:344)
	at org.springframework.web.servlet.DispatcherServlet.resolveViewName(DispatcherServlet.java:1105)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1052)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:808)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:726)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:636)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:545)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)













If there is a short-term fix, I&amp;amp;apos;d love to hear it.
Basically what I want to do is have no extension (like /rest/hotels/list) go to text/html and still have the json, xml, etc. views work with the extensions on any/all browsers.
Thanks!</description>
			<version>3.0 RC1</version>
			<fixedVersion>3.0 RC2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.view.ContentNegotiatingViewResolver.java</file>
			<file type="M">org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">6178</link>
		</links>
	</bug>
	<bug id="6161" opendate="2009-09-29 03:31:22" fixdate="2009-10-13 08:35:49" resolution="Fixed">
		<buginformation>
			<summary>Task namespace usage should not require concurrent backport JARs</summary>
			<description>This should not happen:
java.lang.IllegalStateException: Failed to load ApplicationContext
...
Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [...];
nested exception is org.springframework.beans.FatalBeanException: Invalid NamespaceHandler class [org.springframework.scheduling.config.TaskNamespaceHandler] for namespace http://www.springframework.org/schema/task: problem with handler class file or dependent class; nested exception is java.lang.NoClassDefFoundError: edu/emory/mathcs/backport/java/util/concurrent/ThreadPoolExecutor$AbortPolicy</description>
			<version>3.0 RC1</version>
			<fixedVersion>3.0 RC2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.scheduling.config.ExecutorBeanDefinitionParser.java</file>
		</fixedFiles>
		<links>
			<link type="Depends" description="is depended on by">810</link>
			<link type="Duplicate" description="is duplicated by">6250</link>
		</links>
	</bug>
	<bug id="6178" opendate="2009-10-02 03:51:56" fixdate="2009-10-13 10:03:01" resolution="Duplicate">
		<buginformation>
			<summary>Using defaultContentType property in ContentNegotiatingViewResolver throws java.lang.UnsupportedOperationException</summary>
			<description>In my application I have a ContentNegotiatingViewResolver set to handle html , xml and json. Following is the beans declaration:







&amp;lt;bean




    class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"




    p:order="1"&amp;gt;




    &amp;lt;property name="mediaTypes"&amp;gt;




      &amp;lt;map&amp;gt;




        &amp;lt;entry key="html" value="text/html"/&amp;gt;




        &amp;lt;entry key="xml" value="application/xml" /&amp;gt;




        &amp;lt;entry key="json" value="application/json" /&amp;gt;




      &amp;lt;/map&amp;gt;




    &amp;lt;/property&amp;gt;




    &amp;lt;property name="defaultViews"&amp;gt;




      &amp;lt;list&amp;gt;




        &amp;lt;bean class="org.springframework.web.servlet.view.xml.MarshallingView"&amp;gt;




          &amp;lt;property name="marshaller"&amp;gt;




            &amp;lt;bean class="org.springframework.oxm.xstream.XStreamMarshaller"




              p:autodetectAnnotations="true" /&amp;gt;




          &amp;lt;/property&amp;gt;




        &amp;lt;/bean&amp;gt;




        &amp;lt;bean




          class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" /&amp;gt;




      &amp;lt;/list&amp;gt;




    &amp;lt;/property&amp;gt;




    &amp;lt;property name="ignoreAcceptHeader" value="true"/&amp;gt;




    &amp;lt;property name="defaultContentType" value="application/xml"/&amp;gt;




  &amp;lt;/bean&amp;gt;









  &amp;lt;bean id="jspViewResolver"




    class="org.springframework.web.servlet.view.InternalResourceViewResolver"




    p:prefix="/WEB-INF/jsp/" p:suffix=".jsp" p:order="2" /&amp;gt;






//
As seen in the code I turned off acceptHeader and want to have a default content type of application/xml. When I access the page without an explicit extension I get a java.lang.UnsupportedOperationException:
java.lang.UnsupportedOperationException
        at java.util.AbstractList.set(AbstractList.java:115)
        at java.util.AbstractList$ListItr.set(AbstractList.java:412)
        at java.util.Collections.sort(Collections.java:121)
        at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.resolveViewName(ContentNegotiatingViewResolver.java:344)
        at org.springframework.web.servlet.DispatcherServlet.resolveViewName(DispatcherServlet.java:1105)
        at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1052)
        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:808)
        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:726)
        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:636)
        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:545)
      ...</description>
			<version>3.0 RC1</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.view.ContentNegotiatingViewResolver.java</file>
			<file type="M">org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6163</link>
		</links>
	</bug>
	<bug id="5959" opendate="2009-07-27 09:42:38" fixdate="2009-10-14 00:36:21" resolution="Duplicate">
		<buginformation>
			<summary>@ExceptionHandler on CGLib-proxied controller is ineffectual</summary>
			<description>Here is a condensed example of the problem I&amp;amp;apos;m encountering:
Controller:






package com.test;









import java.io.PrintWriter;









import org.springframework.stereotype.Controller;




import org.springframework.transaction.annotation.Transactional;




import org.springframework.web.bind.annotation.ExceptionHandler;




import org.springframework.web.bind.annotation.RequestMapping;









@Controller




@Transactional( readOnly=true )




public class Test




{




	@ExceptionHandler




	public void exception( Throwable t )




	{




		System.out.println( "In exception handler" );




	}




	




	@RequestMapping( "/" )




	public void get()




	{




		throw new RuntimeException( "foo" );




	}




}






Dispatcher servlet config:






&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;




&amp;lt;beans xmlns="http://www.springframework.org/schema/beans"




	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"




	xmlns:context="http://www.springframework.org/schema/context"




	xsi:schemaLocation="




		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd




		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd




		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd"&amp;gt;




	




	&amp;lt;tx:annotation-driven transaction-manager="transactionManager"/&amp;gt;




	&amp;lt;bean id="transactionManager" class="com.test.MockTransactionManager"/&amp;gt;




	




	&amp;lt;context:component-scan base-package="com.test"/&amp;gt;




	




&amp;lt;/beans&amp;gt;






web.xml






&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;




&amp;lt;web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"




	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_5.xsd"




	version="2.5"&amp;gt;




	




	&amp;lt;servlet&amp;gt;




		&amp;lt;servlet-name&amp;gt;action&amp;lt;/servlet-name&amp;gt;




		&amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt;




		&amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;




	&amp;lt;/servlet&amp;gt;




	&amp;lt;servlet-mapping&amp;gt;




		&amp;lt;servlet-name&amp;gt;action&amp;lt;/servlet-name&amp;gt;




		&amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;




	&amp;lt;/servlet-mapping&amp;gt;




	




&amp;lt;/web-app&amp;gt;






The exception handler is never invoked when the controller is proxied by CGLib (removing @Transactional removes the proxy and restores the exception handler). A little digging led me to org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver  where there is this iteration over methods of the controller






		ReflectionUtils.doWithMethods(handlerType, new ReflectionUtils.MethodCallback() {




			public void doWith(Method method) {




				method = ClassUtils.getMostSpecificMethod(method, handlerType);




[snip]




			}




		});






which does arrive eventually at the proper exception handler method of my controller class, but because of the call to ClassUtils.getMostSpecificMethod() it winds up back at the overridden method on the CGLib-generated class (which from what I noticed it had already visited). I haven&amp;amp;apos;t researched enough to say this is the problem though.
@RequestMapping annotations appear to work normally through a proxied controller (and the @Transactional annotation does function correctly), so I&amp;amp;apos;m hoping this can be fixed.</description>
			<version>3.0 M3</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolverTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6093</link>
			<link type="Related" description="is related to">7337</link>
		</links>
	</bug>
	<bug id="6231" opendate="2009-10-13 04:29:28" fixdate="2009-10-14 01:43:11" resolution="Duplicate">
		<buginformation>
			<summary>RESTful URLs with path variables containing dots are incorrectly mapped</summary>
			<description>The change made in SPR-5537 effectively strips any file extension in GET requests in order to exclude it from the path variable value. Unfortunately, this prevents queries that contains dots as part of the path variable, i.e. an email address. Therefore the following request:
http://localhost:8080/rest/emailaddress/email/test%40mail.com
with the following controller request mapping:
@RequestMapping(value = "/email/
{email}
", method = RequestMethod.GET)
public ModelAndView getEmail(@PathVariable("email") final String email) {
}
will map the value "test@mail" to the variable email.</description>
			<version>3.0 RC1</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.HeadersRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.RequestMappingInfo.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.ParamsRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.UriTemplateServletAnnotationControllerTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6164</link>
			<link type="Related" description="is related to">5537</link>
		</links>
	</bug>
	<bug id="6250" opendate="2009-10-19 22:16:31" fixdate="2009-10-23 04:13:01" resolution="Duplicate">
		<buginformation>
			<summary>ExecutorBeanDefinitionParser  must not directly depends on backport concurrent</summary>
			<description>If you use the &amp;amp;apos;executor&amp;amp;apos; element of the task namespace ( or simply do a  new ExecutorBeanDefinitionParser() ), there are an error :
Exception in thread "main" java.lang.NoClassDefFoundError: edu/emory/mathcs/backport/java/util/concurrent/ThreadPoolExecutor$AbortPolicy
And, even with JDK 6 or 5. But they possess java.util.currurent directly, it should not be any errors.</description>
			<version>3.0 M4</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.scheduling.config.ExecutorBeanDefinitionParser.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6161</link>
		</links>
	</bug>
	<bug id="4661" opendate="2008-04-03 20:21:13" fixdate="2009-10-27 01:39:13" resolution="Fixed">
		<buginformation>
			<summary>Improve context-property-placeholder configurablity</summary>
			<description>I was replacing our current PropertiesPlaceHolderConfigurer with a &amp;lt;context:property-placeholder but couldn&amp;amp;apos;t do that (whilst recommended by STS). 
I need the &amp;amp;apos;ignoreResourceNotFound&amp;amp;apos; property to be settable from the tag. Maybe some more options also depending on the tag (property-placholder or property-override).</description>
			<version>2.5.2</version>
			<fixedVersion>3.0 RC2</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.context.config.PropertyOverrideBeanDefinitionParser.java</file>
			<file type="M">org.springframework.context.config.ContextNamespaceHandlerTests.java</file>
			<file type="M">org.springframework.context.config.PropertyPlaceholderBeanDefinitionParser.java</file>
			<file type="M">org.springframework.context.config.AbstractPropertyLoadingBeanDefinitionParser.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">5016</link>
		</links>
	</bug>
	<bug id="3542" opendate="2007-06-01 16:21:59" fixdate="2009-11-11 10:13:20" resolution="Fixed">
		<buginformation>
			<summary>scope (&amp; similar attributes) on abstract beans should be inherited in child beans, or not permitted</summary>
			<description>Hi,
given this config:
&amp;lt;bean id="parent" scope="prototype" abstract="true"&amp;gt;
    &amp;lt;property name="prop" ref="prop" /&amp;gt;
     .....
&amp;lt;/bean&amp;gt;
&amp;lt;bean id="child1" parent="parent" class="X" /&amp;gt;
&amp;lt;bean id="child2" parent="parent" class="X" /&amp;gt;
&amp;lt;bean id="child3" parent="parent" scope="singleton" class="X" /&amp;gt;
the prototype attribute on the abstract parent does not carry down to any child beans.  So child1 &amp;amp; 2 here are scoped singleton, wouldn&amp;amp;apos;t it make sense to inherit that?  I am not sure, just throwing this out there for someone to consider.  If it does, the child beans could also override scope and the similar attributes. 
If it doesn&amp;amp;apos;t make sense, abstract="true" &amp;amp; scope="*" should probably generate an xml error since they will be a waste of typing.
</description>
			<version>2.1 M2</version>
			<fixedVersion>3.0 RC2</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.beans.factory.config.BeanDefinition.java</file>
			<file type="M">org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.java</file>
			<file type="M">org.springframework.beans.factory.xml.XmlBeanFactoryTests.java</file>
			<file type="M">org.springframework.beans.factory.support.AbstractBeanFactory.java</file>
			<file type="M">org.springframework.beans.factory.support.AbstractBeanDefinition.java</file>
			<file type="M">org.springframework.beans.factory.DefaultListableBeanFactoryTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">5854</link>
			<link type="Relate" description="is related to">12570</link>
		</links>
	</bug>
	<bug id="6234" opendate="2009-10-13 20:50:38" fixdate="2009-11-12 01:10:47" resolution="Fixed">
		<buginformation>
			<summary>Add facility to EhCacheFactorybean for registering event listeners</summary>
			<description>With EhCach you can register event listeners with individual caches. Unfortunately, Spring&amp;amp;apos;s EhCacheFactoryBean does not provide the facility for configuring these.
We still have the option of configuring the caches in ehcache.xml (see http://ehcache.org/EhcacheUserGuide.html#id.s28), but I much prefer doing this via EhCacheFactoryBean. 
I suggest being able to inject a List of CacheEventListenerFactory objects into EhCacheFactoryBean, which would then register them with the cache it creates.</description>
			<version>2.5.6</version>
			<fixedVersion>3.0 RC2</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.cache.ehcache.EhCacheFactoryBean.java</file>
			<file type="M">org.springframework.cache.ehcache.EhCacheManagerFactoryBean.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">5641</link>
		</links>
	</bug>
	<bug id="6269" opendate="2009-10-24 03:16:51" fixdate="2009-11-12 01:33:58" resolution="Duplicate">
		<buginformation>
			<summary>Include &amp;apos;ASE&amp;apos; in the list of product names recognised by JDBCUtils as Sybase</summary>
			<description>JdbcUtils#commonDatabaseName uses a number of hardcoded database product names to identify Sybase. 
public static String commonDatabaseName(String source) {
  String name = source;
  if (source != null &amp;amp;&amp;amp; source.startsWith("DB2")) 
{
    name = "DB2";
  }
  else if ("Sybase SQL Server".equals(source) ||
    "Adaptive Server Enterprise".equals(source) || "sql server".equals(source) ) 
{
    name = "Sybase";
  }
  return name;
}
Unfortunately, when using JTDS 1.2.4 against a Sybase 15.0.3 server, JtdsDatabaseMetadata will (for some server configurations) return &amp;amp;apos;ASE&amp;amp;apos; rather than &amp;amp;apos;sql server&amp;amp;apos;. 
This has knock on implications, most notably in this case in CallMetaDataProviderFactory, which uses the common database name to determine which meta data provider to use:
else if ("Sybase".equals(databaseProductName)) {
  provider = new SybaseCallMetaDataProvider((databaseMetaData));
}
The net result of this is that a generic provider is used rather than a Sybase provider. The generic provider does not function correctly with at least one stored procedure in one of our applications, which results in no parameters being passed to the server.
The proposed change would be to introduce &amp;amp;apos;ASE&amp;amp;apos; alongside the existing Sybase product name checks in JdbcUtils, so that it is identified correctly as Sybase. </description>
			<version>2.5.6</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.jdbc.support.JdbcUtils.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6053</link>
		</links>
	</bug>
	<bug id="6366" opendate="2009-11-16 18:54:14" fixdate="2009-11-16 19:52:43" resolution="Fixed">
		<buginformation>
			<summary>Cannot import bean definitions using classpath*: resource location</summary>
			<description>Cannot import bean definitions using classpath*: resource location. Somewhere between RC1 and RC2 the behaviour of &amp;lt;import resource="classpath*:..."/&amp;gt; changed so that it is now treated as a relative resource, where clearly it is not.</description>
			<version>3.0 RC2</version>
			<fixedVersion>3.0 RC3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.core.io.ResourceEditorTests.java</file>
			<file type="M">org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.java</file>
			<file type="M">org.springframework.beans.factory.xml.XmlBeanDefinitionReaderTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">5762</link>
			<link type="Duplicate" description="is duplicated by">6379</link>
			<link type="Duplicate" description="is duplicated by">6411</link>
			<link type="Duplicate" description="is duplicated by">6351</link>
			<link type="Related" description="is related to">6410</link>
		</links>
	</bug>
	<bug id="6385" opendate="2009-11-18 02:19:15" fixdate="2009-11-18 21:52:28" resolution="Duplicate">
		<buginformation>
			<summary>Context Scanning doesnt work in Jboss 5</summary>
			<description>Hi All,
When I use context scanning and deploy it on Jboss5. Spring somehow seem to have issue of finding the beans in the classpath. If the same war is dropped on Jboss 4.X it seems to Work just fine.
I tried using the newer Spring3 - m3 as well with no luck.
Any suggestions is appreciated.
-Sundar 
http://forum.springsource.org/showthread.php?p=269977</description>
			<version>2.5.6</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.core.io.support.jboss.VfsResource.java</file>
			<file type="M">org.springframework.core.io.ClassPathResource.java</file>
			<file type="M">org.springframework.core.io.support.PathMatchingResourcePatternResolver.java</file>
			<file type="M">org.springframework.core.io.UrlResource.java</file>
			<file type="M">org.springframework.util.ResourceUtils.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">5120</link>
		</links>
	</bug>
	<bug id="6379" opendate="2009-11-17 19:22:24" fixdate="2009-11-18 22:05:17" resolution="Duplicate">
		<buginformation>
			<summary>Import of XML resources with &amp;apos;classpath*:&amp;apos; URLs doesn&amp;apos;t work</summary>
			<description>it&amp;amp;apos;s probably related to SPR-5762.
I think, that the issue is in DefaultBeanDefinitionDocumentReader class. In 3.0.0.RC1 there was used call &amp;amp;apos;ResourcePatternUtils.isUrl(location)&amp;amp;apos;, in 3.0.0.RC2 it&amp;amp;apos;s changed and I think, that it&amp;amp;apos;s related to this correction. 
When the classes are unpacked, it leads to transformation of classpath* URL to file URL, which causes the problem.
Attach is simple test case, which works in 3.0.0.RC1, but fail on 3.0.0.RC2.</description>
			<version>3.0 RC2</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.core.io.ResourceEditorTests.java</file>
			<file type="M">org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.java</file>
			<file type="M">org.springframework.beans.factory.xml.XmlBeanDefinitionReaderTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6366</link>
		</links>
	</bug>
	<bug id="6356" opendate="2009-11-14 01:51:39" fixdate="2009-11-24 09:48:35" resolution="Fixed">
		<buginformation>
			<summary>NPE in AbstractApplicationContext finishRefresh when initialized via Spring DM</summary>
			<description>I&amp;amp;apos;ve just tried upgrading dm Server to run with Spring 3.0.0.RC2 and
have encountered the following NPE whenever Spring DM tries to create an
application context for a Bundle:






java.lang.NullPointerException at




org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:861) at




org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235) at




org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358) at




org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85) at




org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320) at




org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136) at




com.springsource.kernel.agent.dm.ContextPropagatingTaskExecutor$2.run(ContextPropagatingTaskExecutor.java:106) at




java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at




java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at




java.lang.Thread.run(Thread.java:637)





</description>
			<version>3.0 RC2</version>
			<fixedVersion>3.0 RC3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.context.support.AbstractApplicationContext.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">6359</link>
			<link type="Related" description="is related to">783</link>
		</links>
	</bug>
	<bug id="6359" opendate="2009-11-15 19:36:53" fixdate="2009-11-24 09:50:47" resolution="Duplicate">
		<buginformation>
			<summary>lifecycleProcessor Is NULL</summary>
			<description>Error while deploing application.
With RC1 - it was OK.
SEVERE: Application context refresh failed (OsgiBundleXmlApplicationContext(bundle=ndx.billing.DatabaseFunctions, config=osgibundle:/META-INF/spring/*.xml))                        
java.lang.NullPointerException                                                                                                                                                      
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:861)                                                        
        at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)                               
        at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)                       
        at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)                                                                    
        at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)             
        at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)                                                                                                                                                                      
        at java.lang.Thread.run(Thread.java:619)                                                                                                                                    
Nov 16, 2009 12:27:05 PM                                                                                                                                                            
SEVERE: Exception in thread "SpringOsgiExtenderThread-14"                                                                                                                           
Nov 16, 2009 12:27:05 PM                                                                                                                                                            
SEVERE: java.lang.NullPointerException                                                                                                                                              
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:861)                                                        
        at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)                               
        at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)                       
        at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)                                                                    
        at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)             
        at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)                                                                                                                                                                      
        at java.lang.Thread.run(Thread.java:619)        </description>
			<version>3.0 RC2</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.context.support.AbstractApplicationContext.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6356</link>
		</links>
	</bug>
	<bug id="6378" opendate="2009-11-17 15:52:48" fixdate="2009-11-24 21:12:35" resolution="Fixed">
		<buginformation>
			<summary>RC2: Issue with RequestMethod.GET differs from M2</summary>
			<description>I have a demo for Spring 3 Web that I&amp;amp;apos;ve been running for some time... the upgrade to RC2 broke the demo.  The code is listed below.  What we need is details on the order of requestmappings... I thought I saw that earlier this year in the forums, but I can&amp;amp;apos;t find it anymore.  Can someone please provide the details on the order of requestmappings... thanks.
The code below (which worked before) now fails for a GET request against the list method or http://localhost:8080/mvc/book/list
I had specified the GET and POST for clarification before on the create methods... after some investigation, I discovered that if I remove the method = RequestMethod.GET on the create method that the app begins to work.  So I can work around this.  What behavior should be expected?






@Controller




public class BookController {









    @Autowired




    BookDAO dao;









    // http://localhost:8080/mvc/book/list




    @RequestMapping("list")




    public List&amp;lt;Book&amp;gt; list() {




        return dao.findAllBooks();




    }









    // http://localhost:8080/mvc/book/book?id=12




    @RequestMapping("book")




    public Book book(@RequestParam(required = true) Long id) {









        Book book = dao.getBook(id);




        return book;




    }









    @RequestMapping(method = RequestMethod.GET)




    public Book create() {




        return new Book();









    }









    // http://localhost:8080/mvc/book/create (POST)




    @RequestMapping(method = RequestMethod.POST)




    public String create(@ModelAttribute Book book, BindingResult results) {









        if (book == null)




            return null;









        dao.save(book);









        return "redirect:list";




    }




}





</description>
			<version>3.0 RC2</version>
			<fixedVersion>3.0 RC3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.ServletAnnotationControllerTests.java</file>
			<file type="M">org.springframework.web.servlet.HandlerMapping.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">6475</link>
		</links>
	</bug>
	<bug id="6475" opendate="2009-11-30 06:20:55" fixdate="2009-11-30 19:23:29" resolution="Duplicate">
		<buginformation>
			<summary>Combining ControllerClassNameHandlerMapping and @RequestMapping with relative value on Controller method  doesn&amp;apos;t work anymore</summary>
			<description>The controller beans xml file contains:
---------------------------------------
&amp;lt;context:component-scan base-package="org.example.web"/&amp;gt;
&amp;lt;bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping"/&amp;gt;
The Controller class:
---------------------
package org.example.web;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
@Controller
public class ArticlesController {
  @RequestMapping("all") // all == a relative URL
  public String findAll() 
{	
    return "/WEB-INF/JSP/allArticles.jsp";
  }
}
Spring 2.5
----------
A GET request with the URL /articles/all was processed by the function findAll
Spring 3.0 RC2
--------------
A GET request with the URL /articles/all produces HTTP 404 error.</description>
			<version>3.0 RC2</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.ServletAnnotationControllerTests.java</file>
			<file type="M">org.springframework.web.servlet.HandlerMapping.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6378</link>
		</links>
	</bug>
	<bug id="6494" opendate="2009-12-01 21:18:35" fixdate="2009-12-02 22:35:59" resolution="Duplicate">
		<buginformation>
			<summary>Regression about the suppport of the tag &lt;import resource="..."/&gt;</summary>
			<description>The tag &amp;lt;import resource="..."/&amp;gt; acts differently in version 3.0.0 and 2.5.6.
For example, consider these two xml configuration files, located in a package "context".
File: dependent-context.xml
---------------------------
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&amp;gt;
	&amp;lt;bean id="myBean" class="java.lang.String" /&amp;gt;
&amp;lt;/beans&amp;gt;
File: super-context.xml
-----------------------
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&amp;gt;
	&amp;lt;import resource="dependent-context.xml" /&amp;gt;
&amp;lt;/beans&amp;gt;
We load the latter, using the following: 
new ClassPathXmlApplicationContext("context/super-context.xml");
Here is the log using Spring 2.5.6.SEC01:
-----------------------------------------
11:47:58,903 INFO  [ClassPathXmlApplicationContext] Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@19efb05: display name [org.springframework.context.support.ClassPathXmlApplicationContext@19efb05]; startup date [Wed Dec 02 11:47:58 CET 2009]; root of context hierarchy
11:47:58,949 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [context/super-context.xml]
11:47:59,027 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [context/dependent-context.xml]
11:47:59,059 INFO  [ClassPathXmlApplicationContext] Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext@19efb05]: org.springframework.beans.factory.support.DefaultListableBeanFactory@47393f
11:47:59,059 INFO  [DefaultListableBeanFactory] Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@47393f: defining beans [myBean]; root of factory hierarchy
Note that the dependent-context.xml file is loaded as "class path resource [context/dependent-context.xml]"
Here is the log using Spring 3.0.0.RC3:
-----------------------------------------
12:06:57,312 INFO  [ClassPathXmlApplicationContext] Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@8814e9: startup date [Wed Dec 02 12:06:57 CET 2009]; root of context hierarchy
12:06:57,608 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [context/super-context.xml]
12:06:57,686 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from URL file:/C:/Workspace/__Test/target/classes/context/dependent-context.xml
12:06:57,795 INFO  [DefaultListableBeanFactory] Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1a9334: defining beans [myBean]; root of factory hierarchy
Note that the dependent-context.xml file is new loaded as "URL file:/C:/Workspace/__Test/target/classes/context/dependent-context.xml"
If the two file are located in different folders on the file system, as it is often the case, the loading fails.
This difference generates several major regressions in our existing projects.</description>
			<version>3.0 RC3</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6493</link>
		</links>
	</bug>
	<bug id="6499" opendate="2009-12-02 12:10:05" fixdate="2009-12-03 02:35:36" resolution="Duplicate">
		<buginformation>
			<summary>@MVC URI Template Variable Regression - Matching values containing . (dot)</summary>
			<description>Given the URI Template:
http://www.example.com/users/
{username}
/blah.html
In M1 - M3 and RC1 the username could be "bill" or "bill.smith" and everything would work.
Starting with RC3 (I never got around to using RC2) "bill" still works fine, but "bill.smith" causes a HTTP 404 to be returned due to:
DispatcherServlet.noHandlerFound(962) | No mapping found for HTTP request with URI
</description>
			<version>3.0 RC3</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.util.AntPathStringMatcher.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.UriTemplateServletAnnotationControllerTests.java</file>
			<file type="M">org.springframework.util.AntPathMatcher.java</file>
			<file type="M">org.springframework.util.AntPathMatcherTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6482</link>
		</links>
	</bug>
	<bug id="6525" opendate="2009-12-06 02:01:30" fixdate="2009-12-06 09:20:58" resolution="Fixed">
		<buginformation>
			<summary>SpEL context is wrong in method parameter resolution</summary>
			<description>SpEL context is wrong in method parameter resolution.  Instead of using the current context for the stack (which refers to the method target), parameters should have a current context equal to the context root.  This test would fail in EvaluationTests():






	@Test




	public void testNestedMethod() {




		evaluate("placeOfBirth.doubleIt(inventions.length)", 18, Integer.class);




	}





</description>
			<version>3.0 RC3</version>
			<fixedVersion>3.0 GA</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.expression.spel.ast.MethodReference.java</file>
			<file type="M">org.springframework.expression.spel.EvaluationTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">5584</link>
		</links>
	</bug>
	<bug id="6493" opendate="2009-12-01 21:10:31" fixdate="2009-12-07 01:19:46" resolution="Fixed">
		<buginformation>
			<summary>Regression about the suppport of the tag &lt;import resource="..."/&gt;</summary>
			<description>The tag &amp;lt;import resource="..."/&amp;gt; acts differently in version 3.0.0 and 2.5.6.
For example, consider these two xml configuration files, located in a package "context".
File: dependent-context.xml
---------------------------
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&amp;gt;
	&amp;lt;bean id="myBean" class="java.lang.String" /&amp;gt;
&amp;lt;/beans&amp;gt;
File: super-context.xml
-----------------------
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&amp;gt;
	&amp;lt;import resource="dependent-context.xml" /&amp;gt;
&amp;lt;/beans&amp;gt;
We load the latter, using the following: 
new ClassPathXmlApplicationContext("context/super-context.xml");
Here is the log using Spring 2.5.6.SEC01:
-----------------------------------------
11:47:58,903 INFO  [ClassPathXmlApplicationContext] Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@19efb05: display name [org.springframework.context.support.ClassPathXmlApplicationContext@19efb05]; startup date [Wed Dec 02 11:47:58 CET 2009]; root of context hierarchy
11:47:58,949 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [context/super-context.xml]
11:47:59,027 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [context/dependent-context.xml]
11:47:59,059 INFO  [ClassPathXmlApplicationContext] Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext@19efb05]: org.springframework.beans.factory.support.DefaultListableBeanFactory@47393f
11:47:59,059 INFO  [DefaultListableBeanFactory] Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@47393f: defining beans [myBean]; root of factory hierarchy
Note that the dependent-context.xml file is loaded as "class path resource [context/dependent-context.xml]"
Here is the log using Spring 3.0.0.RC3:
-----------------------------------------
12:06:57,312 INFO  [ClassPathXmlApplicationContext] Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@8814e9: startup date [Wed Dec 02 12:06:57 CET 2009]; root of context hierarchy
12:06:57,608 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [context/super-context.xml]
12:06:57,686 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from URL file:/C:/Workspace/__Test/target/classes/context/dependent-context.xml
12:06:57,795 INFO  [DefaultListableBeanFactory] Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1a9334: defining beans [myBean]; root of factory hierarchy
Note that the dependent-context.xml file is new loaded as "URL file:/C:/Workspace/__Test/target/classes/context/dependent-context.xml"
If the two file are located in different folders on the file system, as it is often the case, the loading fails.
This difference generates several major regressions in our existing projects.</description>
			<version>3.0 RC3</version>
			<fixedVersion>3.0 GA</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">6494</link>
		</links>
	</bug>
	<bug id="6560" opendate="2009-12-13 18:19:08" fixdate="2009-12-13 19:51:11" resolution="Duplicate">
		<buginformation>
			<summary>Requests URIs containing . cannot be mapped correctly using @RequestMapping in RC3 </summary>
			<description>I have the following request mapping.
@RequestMapping(value = "/
{username}
/
{domain}
/
{theme}
/
{locale}
/
{documenttype}
", method = RequestMethod.GET)
In RC1 it works like a breeze, regardless the values of the different elements. In RC3, however, whenever a path element contains a . (dot), the URI is not mapped correctly.
In this project, we&amp;amp;apos;re using email addresses as usernames, and this is a major problem for us now.</description>
			<version>3.0 RC3</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.util.AntPathStringMatcher.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.UriTemplateServletAnnotationControllerTests.java</file>
			<file type="M">org.springframework.util.AntPathMatcher.java</file>
			<file type="M">org.springframework.util.AntPathMatcherTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6482</link>
		</links>
	</bug>
	<bug id="6656" opendate="2010-01-07 19:55:06" fixdate="2010-01-08 01:55:40" resolution="Fixed">
		<buginformation>
			<summary>ScheduledAnnotationBeanPostProcessor registers schedules twice in web application</summary>
			<description>ScheduledAnnotationBeanPostProcessor.onApplicationEvent is first run when the Root WebApplicationContext initializes. Then run again when the FrameworkServlet initializes. Each time onApplicationEvent runs a new schedule is registered.
I have modified the task-basic sample from https://src.springframework.org/svn/spring-samples/task-basic/trunk/ to run as a web application for verification. Will attach the source and war file.
This is the console output of task-basic in jetty. It&amp;amp;apos;s the same in tomcat. Notice the "processing next 10..." text that shows up twice every 30 seconds. When the application runs from a main class outside a web server the "processing next 10..." text only shows up once every 30 seconds.






2010-01-08 10:38:22.612::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog




2010-01-08 10:38:22.738::INFO:  jetty-6.1.17




2010-01-08 10:38:23.212:/task-basic:INFO:  Initializing Spring root WebApplicationContext




INFO : org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization started




INFO : org.springframework.web.context.support.XmlWebApplicationContext - Refreshing Root WebApplicationContext: startup date [Fri Jan 08 10:38:23 CET 2010]; root of context hierarchy




INFO : org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from class path resource [org/springframework/samples/task/basic/annotation/config.xml]




INFO : org.springframework.beans.factory.support.DefaultListableBeanFactory - Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@144b9ff: defining beans [scheduledProcessor,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.scheduling.annotation.internalAsyncAnnotationProcessor,org.springframework.scheduling.annotation.internalScheduledAnnotationProcessor]; root of factory hierarchy




INFO : org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 13801 ms




processing next 10 at Fri Jan 08 10:38:37 CET 2010




INFO : org.springframework.web.servlet.DispatcherServlet - FrameworkServlet &amp;amp;apos;SpringServlet&amp;amp;apos;: initialization started




INFO : org.springframework.web.context.support.XmlWebApplicationContext - Refreshing WebApplicationContext for namespace &amp;amp;apos;SpringServlet-servlet&amp;amp;apos;: startup date [Fri Jan 08 10:38:37 CET 2010]; parent: Root WebApplicationContext




INFO : org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from ServletContext resource [/servlet-context.xml]




2010-01-08 10:38:37.139:/task-basic:INFO:  Initializing Spring FrameworkServlet &amp;amp;apos;SpringServlet&amp;amp;apos;




INFO : org.springframework.beans.factory.support.DefaultListableBeanFactory - Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@fffa61: defining beans []; parent: org.springframework.beans.factory.support.DefaultListableBeanFactory@144b9ff




INFO : org.springframework.web.servlet.DispatcherServlet - FrameworkServlet &amp;amp;apos;SpringServlet&amp;amp;apos;: initialization completed in 4407 ms




processing next 10 at Fri Jan 08 10:38:41 CET 2010




2010-01-08 10:38:41.557::INFO:  Opened C:\Users\Christian\Programmer\jetty-6.1.17\logs\2010_01_08.request.log




2010-01-08 10:38:41.641::INFO:  Started SelectChannelConnector@0.0.0.0:8080




processing next 10 at Fri Jan 08 10:39:07 CET 2010




processing next 10 at Fri Jan 08 10:39:11 CET 2010




processing next 10 at Fri Jan 08 10:39:37 CET 2010




processing next 10 at Fri Jan 08 10:39:41 CET 2010





</description>
			<version>3.0 GA</version>
			<fixedVersion>3.0.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">6663</link>
			<link type="Duplicate" description="is duplicated by">6859</link>
			<link type="Relate" description="is related to">12039</link>
		</links>
	</bug>
	<bug id="6663" opendate="2010-01-08 09:51:54" fixdate="2010-01-09 04:36:06" resolution="Duplicate">
		<buginformation>
			<summary>@Scheduled tasks scheduled multiple times when a child application context is refreshed</summary>
			<description>Just switched to the new @Scheduled, configured only with the default &amp;lt;task:annotation-driven/&amp;gt;.  I noticed that my @Scheduled task was being executed more frequently than expected. I have Spring/Struts integration that creates a child web app context on init of ActionServlet.  Looks like when the child app context is created, an event is published to the parent root WAC.  This event causes the ScheduledAnnotationBeanPostProcessor in the root WAC to execute ScheduledTaskRegistrar.afterPropertiesSet again, which schedules all tasks again.  So I end up with the same task scheduled to execute at a fixed rate twice.
Stack trace on init of the Struts ActionServlet:
ScheduledTaskRegistrar.afterPropertiesSet() line: 107	
ScheduledAnnotationBeanPostProcessor.onApplicationEvent(ContextRefreshedEvent) line: 135	
ScheduledAnnotationBeanPostProcessor.onApplicationEvent(ApplicationEvent) line: 1	
SimpleApplicationEventMulticaster.multicastEvent(ApplicationEvent) line: 97	
XmlWebApplicationContext(AbstractApplicationContext).publishEvent(ApplicationEvent) line: 294	
XmlWebApplicationContext(AbstractApplicationContext).publishEvent(ApplicationEvent) line: 296	
XmlWebApplicationContext(AbstractApplicationContext).finishRefresh() line: 858	
XmlWebApplicationContext(AbstractApplicationContext).refresh() line: 419	
ContextLoaderPlugIn.createWebApplicationContext(WebApplicationContext) line: 356	
ContextLoaderPlugIn.initWebApplicationContext() line: 297	
ContextLoaderPlugIn.init(ActionServlet, ModuleConfig) line: 227	
ActionServlet.initModulePlugIns(ModuleConfig) line: 871	
ActionServlet.init() line: 359	
ActionServlet(GenericServlet).init(ServletConfig) line: 212	</description>
			<version>3.0 GA</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6656</link>
		</links>
	</bug>
	<bug id="6858" opendate="2010-02-17 03:34:41" fixdate="2010-02-17 08:19:50" resolution="Fixed">
		<buginformation>
			<summary>Push the Java 5 simplifications in SimpleJdbcTemplate up to JdbcTemplate</summary>
			<description>Since Spring 3 targets Java 5, I wouldn&amp;amp;apos;t expect to need SimpleJdbcTemplate anymore.  I&amp;amp;apos;d expect Java 5 functionality to be incorporated in the base JdbcTemplate so I could take advantage of simplifications there without having to bring in another class.  Then I would only ever want to work with JdbcTemplate.
The most useful feature of SimpleJdbcTemplate not in JdbcTemplate is the ability to specify args using var args.</description>
			<version>3.0 GA</version>
			<fixedVersion>3.0.1</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.jdbc.core.JdbcOperations.java</file>
			<file type="M">org.springframework.jdbc.core.JdbcTemplate.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">6856</link>
		</links>
	</bug>
	<bug id="6871" opendate="2010-02-18 20:38:30" fixdate="2010-02-20 01:57:17" resolution="Complete">
		<buginformation>
			<summary>Spring MVC regression: binding to indexed properties is broken</summary>
			<description>When you submit a form, with databinding on a command object with indexed properties, the indexed properties of the command object are not filled in.
I think this bug is related to the correction that happened in SPR-6840.
The characters [ and ] are not only removed from the id attrbute of the HTML elements, but also (unnessesary) from the name attribute of the HTML elements.
You can see it happening via next example.
When you type 10 and 20 in the input fields, the output to the console is: 
{Belgium=null, Switzerland=null}
while the output should have been 
{Belgium=10, Switzerland=20}

The class that acts as command object:
--------------------------------------
package org.example.entities;
import java.util.LinkedHashMap;
import java.util.Map;
public class Continent {
  // key = name of country
  // Integer= number of inhabitants
  private Map&amp;lt;String, Integer&amp;gt; countries = new LinkedHashMap&amp;lt;String, Integer&amp;gt;();
  public Continent() 
{
    countries.put("Belgium", null);
    countries.put("Switzerland", null);
  }

  public void setCountries(Map&amp;lt;String, Integer&amp;gt; countries) 
{
    this.countries = countries;
  }

  public Map&amp;lt;String, Integer&amp;gt; getCountries() 
{
    return countries;
  }
}
The Controller class:
---------------------
package org.example.web;
import org.example.entities.Continent;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
@Controller
public class ContinentController {
  @RequestMapping(value = "/continent.htm", method = RequestMethod.GET)
  public String continentForm(Model model) 
{
    Continent continent = new Continent();
    model.addAttribute(continent);
    return "continent.jsp";
  }

  @RequestMapping(value = "/continent.htm", method = RequestMethod.POST)
  public String continentForm(@ModelAttribute Continent continent,
      BindingResult bindingResult) 
{
    System.out.println(continent.getCountries()); // Here you can see the bug
    return "continent.jsp";
  }
}
continent.jsp
-------------
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;%@page contentType="text/html" pageEncoding="UTF-8" session="false"%&amp;gt;
&amp;lt;%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%&amp;gt;
&amp;lt;%@taglib prefix="form" uri="http://www.springframework.org/tags/form"%&amp;gt;
&amp;lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&amp;gt;
&amp;lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="nl" lang="nl"&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Continent example&amp;lt;/title&amp;gt;
&amp;lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;form:form commandName="continent"&amp;gt;
&amp;lt;c:forEach items="$
{continent.countries}
" var="entry"&amp;gt;
&amp;lt;div&amp;gt;
&amp;lt;form:label path="countries[$
{entry.key}]"&amp;gt;${entry.key}
&amp;lt;/form:label&amp;gt;	
&amp;lt;form:input path="countries[$
{entry.key}]" /&amp;gt;
&amp;lt;form:errors path="countries[${entry.key}
]" /&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/c:forEach&amp;gt; 
&amp;lt;div&amp;gt;&amp;lt;input type="submit" /&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/form:form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;</description>
			<version>3.0.1</version>
			<fixedVersion>3.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.java</file>
			<file type="M">org.springframework.web.servlet.tags.form.CheckboxTagTests.java</file>
			<file type="M">org.springframework.web.servlet.tags.form.AbstractCheckedElementTag.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">6921</link>
			<link type="Duplicate" description="is duplicated by">7040</link>
			<link type="Related" description="is related to">6840</link>
			<link type="Related" description="is related to">5382</link>
		</links>
	</bug>
	<bug id="6921" opendate="2010-03-01 23:46:13" fixdate="2010-03-02 00:17:13" resolution="Duplicate">
		<buginformation>
			<summary>Indexed properties not set correctly in form tags</summary>
			<description>Since 3.0.1 the input form tag generates a different html code for indexed properties:
Example:
&amp;lt;form:input path="searchValues[author]" /&amp;gt;
searchValues is a Map&amp;lt;String, String&amp;gt; object in the model.
In 3.0.0 the resulting html was:
&amp;lt;input id="searchValuesauthor" name="searchValues[author]" type="text" value=""/&amp;gt;
3.0.1 now generates:
&amp;lt;input id="searchValuesauthor" name="searchValuesauthor" type="text" value=""/&amp;gt;
This results in unset properties in the model property searchValues.
When I modify the parameter name in the request manually to the old form, the values are set correctly.
</description>
			<version>3.0.1</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.java</file>
			<file type="M">org.springframework.web.servlet.tags.form.CheckboxTagTests.java</file>
			<file type="M">org.springframework.web.servlet.tags.form.AbstractCheckedElementTag.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6871</link>
		</links>
	</bug>
	<bug id="6955" opendate="2010-03-07 19:37:31" fixdate="2010-03-07 22:15:14" resolution="Duplicate">
		<buginformation>
			<summary>TaskExecutor created with task:executor not shutdown when context closes</summary>
			<description>TaskExecutorFactoryBean does not implement DisposableBean, so there is no callback for the shutdown to happen.  It is easy to verify that the executor is not shut down (you expect to see a log message from it and don&amp;amp;apos;t).  I have no idea why, but the problem seems to be particularly acute in a webapp because for some reason there it prevents the lifecycle processor from completing the shutdown (before timing out).</description>
			<version>3.0 GA</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.scheduling.config.TaskExecutorFactoryBean.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">6901</link>
			<link type="Related" description="is related to">6901</link>
		</links>
	</bug>
	<bug id="6965" opendate="2010-03-09 23:51:24" fixdate="2010-03-11 00:21:13" resolution="Duplicate">
		<buginformation>
			<summary>Sybase isn&amp;apos;t detected by metadata when using WebLogic JDBC Driver</summary>
			<description>When trying to use Spring JDBC classes with Sybase through WebLogic JDBC driver, you get exception like "SQL Server is not one of the databases fully supported for procedure calls...".
Research shows that WebLogic driver returns "SQL Server" to "getDatabaseProductName" metadata call, unlike JConnect driver which returns "Sybase SQL Server". I also found corresponding issue CR120330 in documentation.</description>
			<version>2.5.6</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.jdbc.support.JdbcUtils.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6053</link>
		</links>
	</bug>
	<bug id="7040" opendate="2010-03-26 04:27:59" fixdate="2010-03-26 09:09:12" resolution="Duplicate">
		<buginformation>
			<summary>form:select 3.0.1 regression bug when binding to a map</summary>
			<description>I found a bug that surfaced in Spring 3.0.1. The problem is with binding a value to a map with the form select tag.
In my JSP I have the following select tag. This will bind to a Map&amp;lt;String, String&amp;gt; field in my command object.
&amp;lt;form:select path="questions[$
{question.key}]" cssClass="${question.key}
" items="$
{question.answers}
" itemValue="key" itemLabel="name"/&amp;gt;
If I do a view source I can clearly see the problem.
In Spring 3.0 I have this:
&amp;lt;select id="questionsARTISAN_ARMOIRE_WOOD" name="questions[ARTISAN_ARMOIRE_WOOD]" class="ARTISAN_ARMOIRE_WOOD"&amp;gt;&amp;lt;option value="001" selected="selected"&amp;gt;Cherry&amp;lt;/option&amp;gt;&amp;lt;option value="002"&amp;gt;Walnut&amp;lt;/option&amp;gt;&amp;lt;/select&amp;gt;
In Spring 3.0.1 I have this:
&amp;lt;select id="questionsARTISAN_ARMOIRE_WOOD" name="questionsARTISAN_ARMOIRE_WOOD" class="ARTISAN_ARMOIRE_WOOD"&amp;gt;&amp;lt;option value="001" selected="selected"&amp;gt;Cherry&amp;lt;/option&amp;gt;&amp;lt;option value="002"&amp;gt;Walnut&amp;lt;/option&amp;gt;&amp;lt;/select&amp;gt;
Notice how the name is "questionsARTISAN_ARMOIRE_WOOD" instead of "questions[ARTISAN_ARMOIRE_WOOD]". The brackets got dropped in 3.0.1.
</description>
			<version>3.0.1</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.java</file>
			<file type="M">org.springframework.web.servlet.tags.form.CheckboxTagTests.java</file>
			<file type="M">org.springframework.web.servlet.tags.form.AbstractCheckedElementTag.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6871</link>
		</links>
	</bug>
	<bug id="6981" opendate="2010-03-14 15:10:54" fixdate="2010-03-30 20:08:33" resolution="Duplicate">
		<buginformation>
			<summary>Spring TaskScheduler not accurate</summary>
			<description>I got the latest task-basic spring samples from svn. I have tried to changed the cron expression to "0/10 * * * * ?" and verify the triggering time. I found that the triggering time is not exactly every ONCE for every 10 seconds. It might execute twice and have some time variation.
Mon Mar 15 11:00:40 CST 2010 &amp;lt;-- correct
Mon Mar 15 11:00:49 CST 2010 &amp;lt;-- incorrect time and also should not trigger, as it is incorrect trigger time
Mon Mar 15 11:00:50 CST 2010 &amp;lt;-- trigger twice??
Mon Mar 15 11:01:00 CST 2010 &amp;lt;-- correct again</description>
			<version>3.0.1</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.scheduling.support.CronTriggerTests.java</file>
			<file type="M">org.springframework.scheduling.support.CronSequenceGenerator.java</file>
			<file type="M">org.springframework.scheduling.support.CronTrigger.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">7004</link>
		</links>
	</bug>
	<bug id="7084" opendate="2010-04-09 06:17:47" fixdate="2010-04-13 23:07:13" resolution="Complete">
		<buginformation>
			<summary>IllegalArgumentException thrown for simple java.lang.String prototype bean </summary>
			<description>Code
====
import org.springframework.context.support.GenericApplicationContext;
import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;
import org.springframework.core.io.ClassPathResource;
/**
 */
public class IllegalArgumentProblem {
    public static void main(String[] args) 
{
         GenericApplicationContext parent = new GenericApplicationContext();
        XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(parent);
        reader.loadBeanDefinitions(new ClassPathResource("app.xml", IllegalArgumentProblem.class));
        parent.refresh();

        String bean = (String) parent.getBean("x");
        String bean2 = (String) parent.getBean("x"); // second access throws the exception.
    }

}
Configuration
=============
&amp;lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&amp;gt;
    &amp;lt;bean id="x" class="java.lang.String" scope="prototype"&amp;gt;
        &amp;lt;constructor-arg&amp;gt;&amp;lt;value&amp;gt;PARENT value&amp;lt;/value&amp;gt;&amp;lt;/constructor-arg&amp;gt;
    &amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
Error
=====
log4j:WARN No appenders could be found for logger (org.springframework.core.CollectionFactory).
log4j:WARN Please initialize the log4j system properly.
Exception in thread "main" org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;x&amp;amp;apos; defined in class path resource [app.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [java.lang.String]: Illegal arguments for constructor; nested exception is java.lang.IllegalArgumentException: argument type mismatch
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:254)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:925)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:823)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:440)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:283)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:881)
	at IllegalArgumentProblem.main(IllegalArgumentProblem.java:21)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)
Caused by: org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [java.lang.String]: Illegal arguments for constructor; nested exception is java.lang.IllegalArgumentException: argument type mismatch
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:111)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:87)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:248)
	... 16 more
Caused by: java.lang.IllegalArgumentException: argument type mismatch
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:100)
	... 18 more
Process finished with exit code 1</description>
			<version>2.5.5</version>
			<fixedVersion>3.0.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.beans.factory.support.ConstructorResolver.java</file>
			<file type="M">org.springframework.beans.factory.DefaultListableBeanFactoryTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">5569</link>
		</links>
	</bug>
	<bug id="7004" opendate="2010-03-18 03:24:23" fixdate="2010-05-26 07:35:43" resolution="Complete">
		<buginformation>
			<summary>CronTrigger is not triggered at correct time</summary>
			<description>When running CronTrigger on short interval I get the task triggered sooner then requested and also get duplicates.
public void initScheduler() {
    	System.out.println("Got initScheduler");
    	taskExecutor = new ThreadPoolTaskScheduler();
    	taskExecutor.initialize();
    	taskExecutor.schedule(new Runnable() {
			@Override
			public void run() 
{
				System.out.println(new Date());				
			}
		},new CronTrigger("0/5 * * * * ?"));
}  
The output is:
Got initScheduler
Thu Mar 18 17:08:19 IST 2010
Thu Mar 18 17:08:24 IST 2010
Thu Mar 18 17:08:24 IST 2010
Thu Mar 18 17:08:25 IST 2010
Thu Mar 18 17:08:29 IST 2010
Thu Mar 18 17:08:30 IST 2010</description>
			<version>3.0.1</version>
			<fixedVersion>3.0.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.scheduling.support.CronTriggerTests.java</file>
			<file type="M">org.springframework.scheduling.support.CronSequenceGenerator.java</file>
			<file type="M">org.springframework.scheduling.support.CronTrigger.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">6981</link>
			<link type="Related" description="is related to">6859</link>
		</links>
	</bug>
	<bug id="6901" opendate="2010-02-24 01:01:22" fixdate="2010-06-06 22:26:42" resolution="Complete">
		<buginformation>
			<summary>Tomcat does not shutdown correctly when using task:scheduled-taks</summary>
			<description>Using the regular task:scheduler element in conjunction with the task:scheduled-tasks element, results, at least with Tomcat, in a server that is unable to shut down.
The server hangs after having logged the following statement:
Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@d81cda: defining beans []; parent: org.springframework.beans.factory.support.DefaultListableBeanFactory@1d49247
Manually defining a task scheduler and setting the threads to run as daemon provides a workaround:
	&amp;lt;task:scheduled-tasks scheduler="taskScheduler"&amp;gt;
		&amp;lt;task:scheduled ref="myTask" method="run" cron="0 0 0 * * ?"/&amp;gt;
	&amp;lt;/task:scheduled-tasks&amp;gt;
	&amp;lt;bean id="taskScheduler" class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler"&amp;gt;
		&amp;lt;property name="daemon" value="true"/&amp;gt;
	&amp;lt;/bean&amp;gt;
However this is only a workaround, and the default behavior should work out of the box. As you can see from the forum post reference, I am not the only one facing this issue.</description>
			<version>3.0.1</version>
			<fixedVersion>3.0.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.scheduling.config.ScheduledTaskRegistrar.java</file>
			<file type="M">org.springframework.scheduling.config.TaskExecutorFactoryBean.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6955</link>
			<link type="Related" description="is related to">6955</link>
			<link type="Related" description="is related to">7231</link>
		</links>
	</bug>
	<bug id="7289" opendate="2010-06-16 01:19:49" fixdate="2010-06-23 04:30:36" resolution="Complete">
		<buginformation>
			<summary>StackOverflowError when converting nested Lists</summary>
			<description>The following simple unit test demonstrates the problem:
ConversionService service = ConversionServiceFactory.createDefaultConversionService();
List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; list = Collections.singletonList(Collections.singletonList("Foo"));
Assert.assertNotNull(service.convert(list, String.class));
Most probably the problem stems from the changed method in TypeDescriptor
public synchronized TypeDescriptor getElementTypeDescriptor() {
	if (this.elementType == null) 
{
		this.elementType = forElementType(resolveElementType());
	}
	return this.elementType;
}
and the fact that forElementType returns this in this case.</description>
			<version>3.0.3</version>
			<fixedVersion>3.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.core.convert.support.GenericConversionService.java</file>
			<file type="M">org.springframework.core.convert.support.ObjectToObjectConverter.java</file>
			<file type="M">org.springframework.core.convert.support.CollectionToStringConverter.java</file>
			<file type="M">org.springframework.core.convert.support.CollectionToCollectionConverter.java</file>
			<file type="M">org.springframework.core.convert.support.GenericConversionServiceTests.java</file>
			<file type="M">org.springframework.core.convert.support.MapToMapConverter.java</file>
			<file type="M">org.springframework.core.convert.TypeDescriptor.java</file>
			<file type="M">org.springframework.core.convert.support.ConversionUtils.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">7562</link>
		</links>
	</bug>
	<bug id="6567" opendate="2009-12-15 15:12:31" fixdate="2010-08-24 07:59:46" resolution="Duplicate">
		<buginformation>
			<summary>Annotation configuration based TestContext</summary>
			<description>Why don&amp;amp;apos;t you add AnnotationContextLoader that supports annotation configuration based TestContext.
for example. If there is an annotation configuration like this
@Configuration
public class SpringAnnotationConfigTestAppConfig {
    @Bean
    public String name()
{
        return "keesun";
    }

}
and, at the same package, I can make test like this.
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(loader = AnnotationContextLoader.class, locations = 
{"."})
public class SpringAnnotationConfigTest {

    @Autowired ApplicationContext ac;
    @Autowired String name;

    @Test
    public void di(){
        assertNotNull(ac);
        assertThat(name, is("keesun"));
    }

}

then, conventionally SpringJUnit4ClassRunner finds SpringAnnotationConfigTest + "AppConfig.java" for an annotation configuration.

Of course, It makes sence that we sould use &amp;amp;apos;locations&amp;amp;apos; attribute of @ContextConfigruation like these.

@ContextConfiguration(loader = AnnotationContextLoader.class, locations = {"/sandbox/springtest/sample/SpringAnnotationConfigTestAppConfig.java"})
@ContextConfiguration(loader = AnnotationContextLoader.class, locations = {"/sandbox/springtest/sample/"})
@ContextConfiguration(loader = AnnotationContextLoader.class, locations = {"/sandbox/springtest/sample"})
@ContextConfiguration(loader = AnnotationContextLoader.class, locations = {"./SpringAnnotationConfigTestAppConfig.java"})
@ContextConfiguration(loader = AnnotationContextLoader.class, locations = {"./"})
@ContextConfiguration(loader = AnnotationContextLoader.class, locations = {"."}
)
with &amp;amp;apos;.Java&amp;amp;apos; locations can be used to AnnotationConfigurationApplicationContext.regist(), and without &amp;amp;apos;.java&amp;amp;apos; locations will be used to AnnotationConfigurationApplicationContext.scan().
What do you think about this?</description>
			<version>3.0 RC3</version>
			<fixedVersion></fixedVersion>
			<type>New Feature</type>
		</buginformation>
		<fixedFiles>
			<file type="D">org.springframework.test.context.testng.AnnotationConfigTransactionalTestNGSpringContextTestsConfig.java</file>
			<file type="M">org.springframework.test.context.testng.AnnotationConfigTransactionalTestNGSpringContextTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.BeanOverridingDefaultConfigClassesInheritedTestsConfig.java</file>
			<file type="M">org.springframework.test.context.support.AnnotationConfigContextLoader.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.DefaultConfigClassesInheritedTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.ExplicitConfigClassesInheritedTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.DefaultConfigClassesBaseTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.BeanOverridingDefaultConfigClassesInheritedTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.ExplicitConfigClassesBaseTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassesBaseTestsConfig.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.BeanOverridingExplicitConfigClassesInheritedTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassesInheritedTestsConfig.java</file>
			<file type="M">org.springframework.test.context.ContextLoaderUtils.java</file>
			<file type="M">org.springframework.test.context.support.AbstractGenericContextLoader.java</file>
			<file type="M">org.springframework.test.context.ResourceTypeAwareContextLoader.java</file>
			<file type="M">org.springframework.test.context.ContextLoader.java</file>
			<file type="M">org.springframework.test.context.ContextConfiguration.java</file>
			<file type="M">org.springframework.test.context.support.GenericPropertiesContextLoader.java</file>
			<file type="M">org.springframework.test.context.support.GenericXmlContextLoader.java</file>
			<file type="M">org.springframework.test.context.testng.ConcreteTransactionalTestNGSpringContextTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassBaseTestsConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassInheritedTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassInheritedTestsConfig.java</file>
			<file type="M">org.springframework.test.context.junit4.SpringJUnit4SuiteTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.AnnotationConfigTestSuite.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassBaseTests.java</file>
			<file type="M">org.springframework.test.context.support.AbstractContextLoader.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.AnnotationConfigSpringJUnit4ClassRunnerAppCtxTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.AnnotationConfigSuiteTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.PojoAndStringConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassAnnotationConfigTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassAnnotationConfigTestsConfig.java</file>
			<file type="M">org.springframework.test.context.TestContext.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.AnnotationConfigSpringJUnit4ClassRunnerAppCtxTestsConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.AnnotationConfigSpringJUnit4ClassRunnerAppCtxTestsConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.AnnotationConfigSpringJUnit4ClassRunnerAppCtxTests.java</file>
			<file type="D">org.springframework.test.context.junit4.ConfigurationClassSpringJUnit4ClassRunnerAppCtxTestsConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.ConfigurationClassSpringJUnit4ClassRunnerAppCtxTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6184</link>
		</links>
	</bug>
	<bug id="7478" opendate="2010-08-20 03:23:50" fixdate="2010-09-01 05:09:20" resolution="Complete">
		<buginformation>
			<summary>Setup of JMS message listener invoker failed for destination when upgrading from 3.0.2 to 3.0.4</summary>
			<description>Hi. I just upgraded from 3.0.2 to 3.0.4 and my log is flooded with WARN messages. The app still seems to work, but jms communication seems to take some extra time...
Looking at the code in the debugger, and the error message, a session seems to be null where expected not to. Is there a workaround, or something that I have missed in my config that is exposed now in 3.0.4, or is this a bug?
&amp;lt;bean id="transactionalMessageListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer" abstract="true"&amp;gt;
    	&amp;lt;property name="cacheLevelName" value="CACHE_NONE"/&amp;gt;
    	&amp;lt;property name="concurrentConsumers" value="1"/&amp;gt;
    	&amp;lt;property name="connectionFactory" ref="connectionFactory"/&amp;gt;
    	&amp;lt;property name="sessionTransacted" value="true"/&amp;gt;
    	&amp;lt;property name="transactionManager" ref="transactionManager"/&amp;gt;
        &amp;lt;property name="autoStartup" value="false" /&amp;gt;
    &amp;lt;/bean&amp;gt;
&amp;lt;bean id="addressDefectTrackerContainer" parent="transactionalMessageListenerContainer"&amp;gt;
        &amp;lt;property name="concurrentConsumers" value="#
{settings.addressDefectTracker.messageListener.concurrentConsumers}
" /&amp;gt;
        &amp;lt;property name="maxConcurrentConsumers" value="#
{settings.addressDefectTracker.messageListener.maxConcurrentConsumers}
" /&amp;gt;
        &amp;lt;property name="idleTaskExecutionLimit" value="#
{settings.addressDefectTracker.messageListener.idleTaskExecutionLimit}
" /&amp;gt;
        &amp;lt;property name="maxMessagesPerTask" value="#
{settings.addressDefectTracker.messageListener.maxMessagesPerTask}
" /&amp;gt;
        &amp;lt;property name="destination" ref="jmsAddressDefectTrackerChannel" /&amp;gt;
    &amp;lt;/bean&amp;gt;
&amp;lt;si-jms:message-driven-channel-adapter 
		channel="defectTrackerChannel" container="addressDefectTrackerContainer" acknowledge="transacted" connection-factory="connectionFactory"/&amp;gt;
2010-08-20 12:00:44,312 [addressDefectTrackerContainer-2] DEBUG Initiating transaction rollback on listener exception at org.springframework.jms.listener.DefaultMessageListenerContainer.rollbackOnException(AbstractPollingMessageListenerContainer.java:388)
java.lang.NullPointerException
	at org.springframework.jms.listener.AbstractMessageListenerContainer.commitIfNecessary(AbstractMessageListenerContainer.java:571)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:354)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:241)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1056)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1048)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
	at java.lang.Thread.run(Thread.java:619)
2010-08-20 12:00:49,349 [addressDefectTrackerContainer-2] WARN Setup of JMS message listener invoker failed for destination &amp;amp;apos;Queue[LM.UTV_maghei.ORIGO.GEODATA.ADDRESS.DEFECTTRACKER]&amp;amp;apos; - trying to recover. Cause: null at org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerSetupFailure(DefaultMessageListenerContainer.java:818)
java.lang.NullPointerException
	at org.springframework.jms.listener.AbstractMessageListenerContainer.commitIfNecessary(AbstractMessageListenerContainer.java:571)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:354)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:241)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1056)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1048)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
	at java.lang.Thread.run(Thread.java:619)
2010-08-20 12:00:49,350 [addressDefectTrackerContainer-2] INFO  Successfully refreshed JMS Connection at org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful(DefaultMessageListenerContainer.java:862)
</description>
			<version>3.0.4</version>
			<fixedVersion>3.0.5</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.jms.listener.AbstractPollingMessageListenerContainer.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">7650</link>
			<link type="Duplicate" description="is duplicated by">7603</link>
			<link type="Related" description="is related to">7366</link>
		</links>
	</bug>
	<bug id="7482" opendate="2010-08-21 09:03:38" fixdate="2010-09-01 07:21:48" resolution="Complete">
		<buginformation>
			<summary>Exception (SpelEvaluationException: EL1021E) when using spring:eval with Jetty</summary>
			<description>I have a JSP page using spring:eval tag as below






&amp;lt;spring:eval expression="command.products" var="items" /&amp;gt;






When run the mvn jetty:run command (both jetty 6.1.22 and jetty 6.1.25), I always receive the below NullPointerException (see the stacktrace at the bottom) when I access JSP page on the second time (I don&amp;amp;apos;t receive any error for the first time).After debugging the code, I find out that sometimes EvalTag reuses instance variable evaluationContext for the next requests, which was initialized with the PageContext of the some previous request. Here is the code which caching evaluationContext through many requests






EvalTag.java






if (this.evaluationContext == null) {




    this.evaluationContext = createEvaluationContext(pageContext);




}




.... 




String result = this.expression.getValue(this.evaluationContext, String.class);




...






Here are the steps which lead to the exception:
1. User sends a request to page
2. Jetty creates EvalTag#1, which will initialize EvalTag#1.evaluationContext using PageContextImpl#1 (at the moment, PageContextImpl#1.request=HttpServletRequest#1). The tag will be called successfully.
3. Result is returned to user. 
4. Jetty recycles PageContextImpl#1 by calling release() method. PageContextImpl#1.request=null
Jetty recycles EvalTag#1 by calling release() method. But EvalTag#1.evaluationContext still != null.  EvalTag#1.evaluationContext still have references to PageContextImpl#1 indirectly
6. User clicks Refresh button to reload the page
7. Jetty reuses EvalTag#1 to evaluate expression and as a result, the old value of EvalTag#1.evaluationContext is also be reused. This time Jetty creates a new object PageContextImpl#2 (note: somehow Jetty doesn&amp;amp;apos;t reuse the PageContextImpl#1 here on my page). At the moment, Jetty will throw NPE when EvalTag#1.doEndTag() is called because EvalTag#1.evaluationContext...PageContextImpl#1.request is null (it should be EvalTag#1.evaluationContext...PageContextImpl#2.request)
For other pages (which this NPE doesn&amp;amp;apos;t happen), at step 7 the PageContextImpl#1 is reused by Jetty and PageContextImpl#1.request is initialized correctly by Jetty so the NPE doesn&amp;amp;apos;t happen. 
I think EvalTag.evaluationContext should NOT be cached to avoid this error.






2010-08-21 21:40:13,093 [501538@qtp-18977449-3] ERROR [org.mortbay.log] - Nested in org.apache.jasper.JasperException: org.springframework.expression.spel.SpelEvaluationException: EL1021E:(pos 0): A problem occurred whilst attempting to access the property &amp;amp;apos;command&amp;amp;apos;: &amp;amp;apos;Unexpected exception occurred accessing &amp;amp;apos;command&amp;amp;apos; as an implicit variable&amp;amp;apos;:




org.springframework.expression.spel.SpelEvaluationException: EL1021E:(pos 0): A problem occurred whilst attempting to access the property &amp;amp;apos;command&amp;amp;apos;: &amp;amp;apos;Unexpected exception occurred accessing &amp;amp;apos;command&amp;amp;apos; as an implicit variable&amp;amp;apos;




	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:199)




	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:71)




	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:52)




	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:93)




	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:88)




	at org.springframework.web.servlet.tags.EvalTag.doEndTag(EvalTag.java:108)




	at org.apache.jsp.search_jsp._jspx_meth_spring_eval_3(org.apache.jsp.search_jsp:320)




	at org.apache.jsp.search_jsp._jspService(org.apache.jsp.search_jsp:120)




	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109)




	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)




	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389)




	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486)




	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380)




	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)




	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)




	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)




	at com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:59)




	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)




	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388)




	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)




	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)




	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)




	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:440)




	at org.mortbay.jetty.servlet.Dispatcher.forward(Dispatcher.java:327)




	at org.mortbay.jetty.servlet.Dispatcher.forward(Dispatcher.java:126)




	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)




	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250)




	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1031)




	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:815)




	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:717)




	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644)




	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:560)




	at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)




	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)




	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)




	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)




	at com.opensymphony.sitemesh.webapp.SiteMeshFilter.obtainContent(SiteMeshFilter.java:129)




	at com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:77)




	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)




	at org.tuckey.web.filters.urlrewrite.RuleChain.handleRewrite(RuleChain.java:176)




	at org.tuckey.web.filters.urlrewrite.RuleChain.doRules(RuleChain.java:145)




	at org.tuckey.web.filters.urlrewrite.UrlRewriter.processRequest(UrlRewriter.java:92)




	at org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:381)




	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)




	at net.sf.ehcache.constructs.web.filter.GzipFilter.doFilter(GzipFilter.java:80)




	at net.sf.ehcache.constructs.web.filter.Filter.doFilter(Filter.java:86)




	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)




	at myapp.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:83)




	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)




	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)




	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:343)




	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:109)




	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83)




	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355)




	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:97)




	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355)




	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:100)




	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355)




	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:78)




	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355)




	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54)




	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355)




	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:35)




	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355)




	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:177)




	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355)




	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:91)




	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355)




	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:187)




	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355)




	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105)




	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355)




	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:79)




	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355)




	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:149)




	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:237)




	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:167)




	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)




	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)




	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)




	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)




	at org.springframework.web.multipart.support.MultipartFilter.doFilterInternal(MultipartFilter.java:113)




	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)




	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)




	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)




	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)




	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)




	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388)




	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)




	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)




	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)




	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:440)




	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)




	at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)




	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)




	at org.mortbay.jetty.Server.handle(Server.java:326)




	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)




	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:943)




	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:756)




	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)




	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)




	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:410)




	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)




Caused by: org.springframework.expression.AccessException: Unexpected exception occurred accessing &amp;amp;apos;command&amp;amp;apos; as an implicit variable




	at org.springframework.web.servlet.tags.EvalTag$JspPropertyAccessor.resolveImplicitVariable(EvalTag.java:186)




	at org.springframework.web.servlet.tags.EvalTag$JspPropertyAccessor.canRead(EvalTag.java:159)




	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:189)




	... 102 more




Caused by: java.lang.NullPointerException




	at org.apache.jasper.runtime.PageContextImpl.doFindAttribute(PageContextImpl.java:541)




	at org.apache.jasper.runtime.PageContextImpl.findAttribute(PageContextImpl.java:527)




	at javax.servlet.jsp.el.ScopedAttributeELResolver.getValue(ScopedAttributeELResolver.java:123)




	at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:175)




	at org.apache.jasper.runtime.VariableResolverImpl.resolveVariable(VariableResolverImpl.java:97)




	at org.springframework.web.servlet.tags.EvalTag$JspPropertyAccessor.resolveImplicitVariable(EvalTag.java:183)




	... 104 more





</description>
			<version>3.0.4</version>
			<fixedVersion>3.0.5</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.tags.RequestContextAwareTag.java</file>
			<file type="M">org.springframework.web.servlet.tags.EvalTag.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">7638</link>
		</links>
	</bug>
	<bug id="1461" opendate="2005-11-10 20:03:53" fixdate="2010-09-13 22:58:32" resolution="Complete">
		<buginformation>
			<summary>ClassLoader set on a WebApplicationContext is used to load beans but not to inject Class properties which uses the current thread&amp;apos;s context ClassLoader</summary>
			<description>Set a ClassLoader set on a WebApplicationContext that is NOT the current thread&amp;amp;apos;s ClassLoader.
This ClassLoader is used to load beans.
But if you try to inject Class properties into those beans then it uses the current thread&amp;amp;apos;s context ClassLoader.
The same ClassLoader should be used in both cases - ideally the one set on the WebApplicationContext.
org.springframework.beans.propertyeditors.ClassEditor.setAsText calls ClassUtils.forName(String className).
This method is hardwired to use the current thread&amp;amp;apos;s context ClassLoader.
Any call to ClassUtils.forName(String className)  should be changed to the version that accepts a ClassLoader.
Thanks.</description>
			<version>1.2.5</version>
			<fixedVersion>3.0.5</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.beans.support.ResourceEditorRegistrar.java</file>
			<file type="M">org.springframework.beans.propertyeditors.ClassArrayEditor.java</file>
			<file type="M">org.springframework.beans.propertyeditors.ClassEditor.java</file>
		</fixedFiles>
	</bug>
	<bug id="7562" opendate="2010-09-15 10:00:15" fixdate="2010-09-15 23:36:06" resolution="Duplicate">
		<buginformation>
			<summary>TypeDescriptor.forElementType() is broken for nested collections</summary>
			<description>The start of forElementType() is defined as:
if (getType().equals(elementType)) {
  return this;
}
Unfortunately, this fails when the TypeDescriptor represents a List&amp;lt;List&amp;lt;...&amp;gt;&amp;gt;
When calling getElementType(), the call stack will be getElementType() -&amp;gt; getElementTypeDescriptor() -&amp;gt; forElementType()
at which point, the elementType field will still be null.
The equality check will therefore see that List&amp;lt;null&amp;gt; == List&amp;lt;null&amp;gt;, and so the TypeDescriptor will be returned as its own element descriptor.
This leads to a recursive definition, where the descriptor now represents a List&amp;lt;List&amp;lt;List&amp;lt;...&amp;lt;List&amp;lt;List&amp;lt;... etc.
</description>
			<version>3.0.3</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.core.convert.support.GenericConversionService.java</file>
			<file type="M">org.springframework.core.convert.support.ObjectToObjectConverter.java</file>
			<file type="M">org.springframework.core.convert.support.CollectionToStringConverter.java</file>
			<file type="M">org.springframework.core.convert.support.CollectionToCollectionConverter.java</file>
			<file type="M">org.springframework.core.convert.support.GenericConversionServiceTests.java</file>
			<file type="M">org.springframework.core.convert.support.MapToMapConverter.java</file>
			<file type="M">org.springframework.core.convert.TypeDescriptor.java</file>
			<file type="M">org.springframework.core.convert.support.ConversionUtils.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">7289</link>
		</links>
	</bug>
	<bug id="7603" opendate="2010-09-30 04:34:56" fixdate="2010-09-30 10:48:49" resolution="Duplicate">
		<buginformation>
			<summary>NPE in AbstractPollingMessageListenerContainer when committing transaction after message receive timeout</summary>
			<description>We use AbstractPollingMessageListenerContainer with default receiveTimeout. When timeout expires the following code executes:






noMessageReceived(invoker, sessionToUse);




// Nevertheless call commit, in order to reset the transaction timeout (if any).




commitIfNecessary(session, message);






but session is null, causing NPE in commitIfNecessary(). Shouldn&amp;amp;apos;t it be commitIfNecessary(sessionToUse, message) instead?</description>
			<version>3.0.4</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.jms.listener.AbstractPollingMessageListenerContainer.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">7478</link>
		</links>
	</bug>
	<bug id="7638" opendate="2010-10-10 14:40:01" fixdate="2010-10-10 15:05:12" resolution="Duplicate">
		<buginformation>
			<summary>spring:eval causes SpelEvaluationException when page is opened in second user-session</summary>
			<description>I want to display a java.util.Date value from the model using the spring:eval-tag like this:
&amp;lt;spring:eval expression="dateOfBirth" /&amp;gt;
Now I start Tomcat and open the page let&amp;amp;apos;s say in Firefox. It works fine, the page displays as expected. Now I start another web-browser, let&amp;amp;apos;s say Safari, to simulate another user-session. When I try to open the page with Safari, I get the following Exception:
org.apache.jasper.JasperException: 
org.springframework.expression.spel.SpelEvaluationException: 
EL1021E:(pos 0): A problem occurred whilst attempting to access the 
property &amp;amp;apos;dateOfBirth&amp;amp;apos;: &amp;amp;apos;Unexpected exception occurred accessing 
&amp;amp;apos;dateOfBirth&amp;amp;apos; as an implicit variable&amp;amp;apos;
When I refresh the page in Safari the exception continues to show up.
When I refresh the page in Firefox, it works without any problem.
It seems to me, that spring:eval only works in the first user-session in this case but not in any further user-sessions.
This problem exists since version 3.0.4.
Steps to reproduce:
-------------------
1. With STS create a new Spring Template Project of type MVC.
2. Open pom.xml and change the spring-version to 3.0.4.
3. Change the welcome()-method in WelcomeController.java to:
public void welcome(Model model) {
   model.addAttribute("dateOfBirth", new Date());
}
4. Open the welcome.jsp file and add this spring:eval-tag below the h1-tag:
&amp;lt;spring:eval expression="dateOfBirth" /&amp;gt;
5. Start Tomcat and try to open the site with to different web-browsers. In the second browser the exception is shown.
I have attached the sample-project to reproduce the problem.
The complete exception shown:
----------------------------
org.apache.jasper.JasperException: org.springframework.expression.spel.SpelEvaluationException: EL1021E:(pos 0): A problem occurred whilst attempting to access the property &amp;amp;apos;dateOfBirth&amp;amp;apos;: &amp;amp;apos;Unexpected exception occurred accessing &amp;amp;apos;dateOfBirth&amp;amp;apos; as an implicit variable&amp;amp;apos;
	org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:527)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:419)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:313)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)
	org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250)
	org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1031)
	org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:815)
	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:717)
	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644)
	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:617)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	org.tuckey.web.filters.urlrewrite.NormalRewrittenUrl.doRewrite(NormalRewrittenUrl.java:195)
	org.tuckey.web.filters.urlrewrite.RuleChain.handleRewrite(RuleChain.java:159)
	org.tuckey.web.filters.urlrewrite.RuleChain.doRules(RuleChain.java:141)
	org.tuckey.web.filters.urlrewrite.UrlRewriter.processRequest(UrlRewriter.java:90)
	org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:417)
root cause
org.springframework.expression.spel.SpelEvaluationException: EL1021E:(pos 0): A problem occurred whilst attempting to access the property &amp;amp;apos;dateOfBirth&amp;amp;apos;: &amp;amp;apos;Unexpected exception occurred accessing &amp;amp;apos;dateOfBirth&amp;amp;apos; as an implicit variable&amp;amp;apos;
	org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:199)
	org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:71)
	org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:102)
	org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:97)
	org.springframework.web.servlet.tags.EvalTag.doEndTag(EvalTag.java:113)
	org.apache.jsp.WEB_002dINF.views.welcome_jsp._jspx_meth_spring_005feval_005f0(welcome_jsp.java:99)
	org.apache.jsp.WEB_002dINF.views.welcome_jsp._jspService(welcome_jsp.java:69)
	org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:377)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:313)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)
	org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250)
	org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1031)
	org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:815)
	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:717)
	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644)
	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:617)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	org.tuckey.web.filters.urlrewrite.NormalRewrittenUrl.doRewrite(NormalRewrittenUrl.java:195)
	org.tuckey.web.filters.urlrewrite.RuleChain.handleRewrite(RuleChain.java:159)
	org.tuckey.web.filters.urlrewrite.RuleChain.doRules(RuleChain.java:141)
	org.tuckey.web.filters.urlrewrite.UrlRewriter.processRequest(UrlRewriter.java:90)
	org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:417)
root cause
org.springframework.expression.AccessException: Unexpected exception occurred accessing &amp;amp;apos;dateOfBirth&amp;amp;apos; as an implicit variable
	org.springframework.web.servlet.tags.EvalTag$JspPropertyAccessor.resolveImplicitVariable(EvalTag.java:186)
	org.springframework.web.servlet.tags.EvalTag$JspPropertyAccessor.canRead(EvalTag.java:159)
	org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:189)
	org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:71)
	org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:102)
	org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:97)
	org.springframework.web.servlet.tags.EvalTag.doEndTag(EvalTag.java:113)
	org.apache.jsp.WEB_002dINF.views.welcome_jsp._jspx_meth_spring_005feval_005f0(welcome_jsp.java:99)
	org.apache.jsp.WEB_002dINF.views.welcome_jsp._jspService(welcome_jsp.java:69)
	org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:377)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:313)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)
	org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250)
	org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1031)
	org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:815)
	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:717)
	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644)
	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:617)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	org.tuckey.web.filters.urlrewrite.NormalRewrittenUrl.doRewrite(NormalRewrittenUrl.java:195)
	org.tuckey.web.filters.urlrewrite.RuleChain.handleRewrite(RuleChain.java:159)
	org.tuckey.web.filters.urlrewrite.RuleChain.doRules(RuleChain.java:141)
	org.tuckey.web.filters.urlrewrite.UrlRewriter.processRequest(UrlRewriter.java:90)
	org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:417)
root cause
java.lang.NullPointerException
	org.apache.jasper.runtime.PageContextImpl.doFindAttribute(PageContextImpl.java:467)
	org.apache.jasper.runtime.PageContextImpl.findAttribute(PageContextImpl.java:457)
	javax.servlet.jsp.el.ScopedAttributeELResolver.getValue(ScopedAttributeELResolver.java:53)
	javax.el.CompositeELResolver.getValue(CompositeELResolver.java:54)
	org.apache.jasper.el.VariableResolverImpl.resolveVariable(VariableResolverImpl.java:32)
	org.springframework.web.servlet.tags.EvalTag$JspPropertyAccessor.resolveImplicitVariable(EvalTag.java:183)
	org.springframework.web.servlet.tags.EvalTag$JspPropertyAccessor.canRead(EvalTag.java:159)
	org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:189)
	org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:71)
	org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:102)
	org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:97)
	org.springframework.web.servlet.tags.EvalTag.doEndTag(EvalTag.java:113)
	org.apache.jsp.WEB_002dINF.views.welcome_jsp._jspx_meth_spring_005feval_005f0(welcome_jsp.java:99)
	org.apache.jsp.WEB_002dINF.views.welcome_jsp._jspService(welcome_jsp.java:69)
	org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:377)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:313)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)
	org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250)
	org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1031)
	org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:815)
	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:717)
	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644)
	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:617)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	org.tuckey.web.filters.urlrewrite.NormalRewrittenUrl.doRewrite(NormalRewrittenUrl.java:195)
	org.tuckey.web.filters.urlrewrite.RuleChain.handleRewrite(RuleChain.java:159)
	org.tuckey.web.filters.urlrewrite.RuleChain.doRules(RuleChain.java:141)
	org.tuckey.web.filters.urlrewrite.UrlRewriter.processRequest(UrlRewriter.java:90)
	org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:417)
note The full stack trace of the root cause is available in the Apache Tomcat/6.0.26 logs.</description>
			<version>3.0.4</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.tags.RequestContextAwareTag.java</file>
			<file type="M">org.springframework.web.servlet.tags.EvalTag.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">7482</link>
		</links>
	</bug>
	<bug id="5367" opendate="2008-12-16 06:57:03" fixdate="2010-10-13 08:09:00" resolution="Fixed">
		<buginformation>
			<summary>PathVariable mappings are greedy over hard coded mappings</summary>
			<description>Hard coded request mapping values should take precedence over path variables.  Wild card patterns in a path are currently inferior to explicit values.  Path variables should be applied after explicit paths and before wild cards.
For example:
@RequestMapping(value = "/resources/new/", method = RequestMethod.GET)
is currently trumped by
@RequestMapping(value = "/resources/
{resourceName}/", method = RequestMethod.GET)

@RequestMapping(value = "/resources/new/", method = RequestMethod.GET)
currently trumps
@RequestMapping(value = "/resources/*/", method = RequestMethod.GET)


@RequestMapping(value = "/resources/new/", method = RequestMethod.GET)
should trump
@RequestMapping(value = "/resources/{resourceName}
/", method = RequestMethod.GET)
should trump
@RequestMapping(value = "/resources/*/", method = RequestMethod.GET)</description>
			<version>3.0 M1</version>
			<fixedVersion>3.0.5</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.java</file>
			<file type="D">org.springframework.web.servlet.mvc.annotation.RequestMappingInfoComparatorTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.ServletAnnotationControllerTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.UriTemplateServletAnnotationControllerTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">5362</link>
			<link type="Related" description="is related to">5731</link>
			<link type="Related" description="is related to">5924</link>
			<link type="Related" description="is related to">7525</link>
		</links>
	</bug>
	<bug id="6844" opendate="2010-02-15 03:34:03" fixdate="2010-10-31 10:48:37" resolution="Duplicate">
		<buginformation>
			<summary>improve annotation based invocations</summary>
			<description>The code path for annotation-based servlet and portlet controllers has some "hot spots" that could be improved.</description>
			<version>3.0 GA</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.portlet.mvc.annotation.AnnotationMethodHandlerAdapter.java</file>
			<file type="M">org.springframework.web.portlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">7703</link>
		</links>
	</bug>
	<bug id="7703" opendate="2010-10-31 10:42:17" fixdate="2010-10-31 10:50:43" resolution="Fixed">
		<buginformation>
			<summary>improve the process of finding actual methods for servlet and portlet handlers</summary>
			<description>The process of finding the methods to be invoked for each http dispatch could be improved. While it has been already addressed in a previous released, there are still some minor improvements to be made.</description>
			<version>3.0 GA</version>
			<fixedVersion>3.0.6, 3.1 M1</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.portlet.mvc.annotation.AnnotationMethodHandlerAdapter.java</file>
			<file type="M">org.springframework.web.portlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6844</link>
		</links>
	</bug>
	<bug id="7688" opendate="2010-10-26 13:43:02" fixdate="2010-12-16 12:20:44" resolution="Duplicate">
		<buginformation>
			<summary>NullPointerException could be thrown on  synchronized (pvs) in InjectionMetadata.checkPropertySkipping</summary>
			<description>IBM JVM does not allow synchronized on "null"</description>
			<version>3.0.5</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.beans.factory.annotation.InjectionMetadata.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">7686</link>
		</links>
	</bug>
	<bug id="7706" opendate="2010-11-01 14:32:23" fixdate="2010-12-20 08:36:59" resolution="Fixed">
		<buginformation>
			<summary>304 responses should not have non-0 Content-Length</summary>
			<description>ServletWebRequest#checkNotModified will set a 304 response code, but doesn&amp;amp;apos;t set the Content-Length header to 0. This leads to exception on WebLogic, which gets all worked up about the fact that there&amp;amp;apos;s no response body even though the Content-Length headers claims there is:
&amp;lt;Error&amp;gt; &amp;lt;HTTP&amp;gt; &amp;lt;BEA-101104&amp;gt; &amp;lt;Servlet execution in servlet context "ServletContext@26118573[app:MP24MotorPrototype module:MP24 path:/MP24 spec-version:2.5]" failed, java.net.ProtocolException: Didn&amp;amp;apos;t meet stated Content-Length, wrote: &amp;amp;apos;0&amp;amp;apos; bytes instead of stated: &amp;amp;apos;3291&amp;amp;apos; bytes.. 
java.net.ProtocolException: Didn&amp;amp;apos;t meet stated Content-Length, wrote: &amp;amp;apos;0&amp;amp;apos; bytes instead of stated: &amp;amp;apos;3291&amp;amp;apos; bytes. 
        at weblogic.servlet.internal.ServletOutputStreamImpl.ensureContentLength(ServletOutputStreamImpl.java:425) 
        at weblogic.servlet.internal.ServletResponseImpl.ensureContentLength(ServletResponseImpl.java:1451) 
        at weblogic.servlet.internal.ServletResponseImpl.send(ServletResponseImpl.java:1494) 
        at weblogic.servlet.internal.ServletRequestImpl.run(ServletRequestImpl.java:1441) 
        at weblogic.work.ExecuteThread.execute(ExecuteThread.java:201)</description>
			<version>3.0.5</version>
			<fixedVersion>3.0.6, 3.1 M1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.filter.ShallowEtagHeaderFilterTests.java</file>
			<file type="M">org.springframework.web.filter.ShallowEtagHeaderFilter.java</file>
			<file type="M">org.springframework.web.servlet.resource.ResourceHttpRequestHandler.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">8013</link>
		</links>
	</bug>
	<bug id="7686" opendate="2010-10-26 07:41:27" fixdate="2011-01-05 08:50:00" resolution="Complete">
		<buginformation>
			<summary>NullPointerException in InjectionMetadata</summary>
			<description>When using SpringBeanAutowiringSupport.processInjectionBasedOnServletContext() 
a NullPointerException is raised in 
InjectionMetadata.checkPropertySkipping(PropertyValues pvs)






protected boolean checkPropertySkipping(PropertyValues pvs) {




  if (this.skip == null) {




    synchronized (pvs) { // &amp;lt;-- NullPointerException




      if (this.skip == null) {






in AutowiredAnnotationBeanPostProcessor.processInjection(Object bean)
metadata inject is called with null for PropertyValues






public void processInjection(Object bean) throws BeansException {




  Class&amp;lt;?&amp;gt; clazz = bean.getClass();




  InjectionMetadata metadata = findAutowiringMetadata(clazz);




  try {




    metadata.inject(bean, null, null); // &amp;lt;-- pvs is null




  }




  catch (Throwable ex) {




    throw new BeanCreationException("Injection of autowired dependencies failed for class [" + clazz + "]", ex);




  }




}






Here is the stack trace:






java.lang.NullPointerException




 	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.checkPropertySkipping(InjectionMetadata.java:171)




 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:526)




 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:84)




 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.processInjection(AutowiredAnnotationBeanPostProcessor.java:300)




 	at org.springframework.web.context.support.SpringBeanAutowiringSupport.processInjectionBasedOnServletContext(SpringBeanAutowiringSupport.java:110)





</description>
			<version>3.0.5</version>
			<fixedVersion>3.0.6, 3.1 M1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.beans.factory.annotation.InjectionMetadata.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">7688</link>
			<link type="Relate" description="is related to">7635</link>
		</links>
	</bug>
	<bug id="6902" opendate="2010-02-24 02:46:12" fixdate="2011-01-10 05:09:29" resolution="Fixed">
		<buginformation>
			<summary>@ResponseBody does not work with @ExceptionHandler</summary>
			<description>When this method is executed






@ExceptionHandler




@ResponseBody




public String dummyExceptionHandler(Exception e) {




    return e.getMessage();




}






Spring mvc tries to resolve the view using the method output --&amp;gt; 404.
As the method is annotated with @ResponseBody, it should directly write the method output to the response.</description>
			<version>3.0.1</version>
			<fixedVersion>3.1 M1</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser.java</file>
			<file type="M">org.springframework.web.servlet.config.MvcNamespaceTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolverTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">7190</link>
			<link type="Duplicate" description="is duplicated by">7820</link>
			<link type="Related" description="is related to">6961</link>
		</links>
	</bug>
	<bug id="7190" opendate="2010-05-11 12:56:12" fixdate="2011-01-12 01:33:59" resolution="Duplicate">
		<buginformation>
			<summary>AnnotationMethodHandlerAdapter and AnnotationMethodHandlerExceptionResolver should supports MappingJacksonHttpMessageConverter by default</summary>
			<description>The AnnotationMethodHandlerAdapter and AnnotationMethodHandlerExceptionResolver should supports MappingJacksonHttpMessageConverter (and other HttpMessageConverter, such as Jaxb2RootElementHttpMessageConverter etc if the libraries are found in classpath) by default, to make it consistent with the class AnnotationDrivenBeanDefinitionParser that used internally for mvc:annotation-driven / &amp;gt;</description>
			<version>3.0.2</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser.java</file>
			<file type="M">org.springframework.web.servlet.config.MvcNamespaceTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolverTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6902</link>
		</links>
	</bug>
	<bug id="7820" opendate="2010-12-15 02:54:52" fixdate="2011-01-12 01:34:46" resolution="Duplicate">
		<buginformation>
			<summary>Add support for @Request-/@ResponseBody to @ExceptionHandler methods</summary>
			<description>During a consultancy gig this came up: customer wants to be able to throw a custom exception from @Controller methods where the exception will contain an object that needs to be marshalled back to the client as JSON, since these methods respond to AJAX requests and thus the response will not be rendered directly by the browser.
I tried to do this by adding a method to an abstract parent class of the relevant controllers that looked like this:






@ExceptionHandler(MyCustomValidationErrorsException.class)




@ResponseBody




public MyCustomValidationErrors handleValidationErrors(MyCustomValidationErrorsException e) {




    return e.getValidationErrors();




}






This prevents regular methods from having to specify Object as the return type, since they would otherwise need to return either a regular domain object or a MyCustomValidationErrors instance in the case of validation errors.
However, at the moment @ResponseBody is not supported for @ExceptionHandler methods, so this will simply ignore the annotation and render a view using the default view name resolution algorithm. I think this would be a very useful addition for the sketched use case, so I was wondering if this support could be added to the framework. 
I understand that there are other ways to achieve the desired functionality, but AFAICT it would require a relatively large amount of custom code that would duplicate much of the Spring MVC-provided functionality.</description>
			<version>3.0.5</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser.java</file>
			<file type="M">org.springframework.web.servlet.config.MvcNamespaceTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolverTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6902</link>
		</links>
	</bug>
	<bug id="7795" opendate="2010-12-06 14:21:59" fixdate="2011-01-26 12:09:44" resolution="Complete">
		<buginformation>
			<summary>ServletRequestDataBinder does not bind MultipartFile with HiddenHttpMethodFilter and Multipart Request</summary>
			<description>I have setup a MultipartFilter and HtmlHiddenMethodFilter following the instructions in SPR-6594 and the javadoc.  
I have a java bean that has a org.springframework.web.multipart.MultipartFile property. I attempt to bind my bean with the standard @ModelAttribute annotation. The rest of its properties get resolved correctly but the MultipartFile property is set to null. 
I believe the issue is that on line 106 of the ServletRequestDataBinder it does an instanceof check: "request instanceof MultipartRequest" which will return false because its the HttpMethodRequestWrapper class from the HtmlHiddenMethodFilter. 
However, if I move the property out of my javabean and bind it via a RequestParam annoation, it works correctly. 
public ModelAndView uploadFile(@RequestParam("file") MultipartFile file) {
   // code
}</description>
			<version>3.0.4</version>
			<fixedVersion>3.0.6, 3.1 M1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.context.request.ServletWebRequest.java</file>
			<file type="M">org.springframework.web.portlet.context.PortletWebRequest.java</file>
			<file type="M">org.springframework.web.portlet.util.PortletUtils.java</file>
			<file type="M">org.springframework.web.util.WebUtils.java</file>
			<file type="M">org.springframework.web.portlet.bind.PortletRequestDataBinder.java</file>
			<file type="M">org.springframework.web.bind.ServletRequestDataBinder.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">8040</link>
			<link type="Relate" description="relates to">6594</link>
		</links>
	</bug>
	<bug id="7645" opendate="2010-10-11 13:03:37" fixdate="2011-02-07 02:22:17" resolution="Duplicate">
		<buginformation>
			<summary>Provide support for Http Client 4 now that it is available</summary>
			<description>The Commons Http Client project has been promoted to a top-level project called "Http Components" and released a major new version at http://hc.apache.org.  It is now recommended that those using Http Client 3.x upgrade to version 4.x.  It would be great to see support for Http Client 4.x in Spring Framework for use with RestTemplate.
As a side note, we&amp;amp;apos;ve also noticed some resourcing issues with Http Client 3.1 reported by tc Server on app shutdown:






11-Oct-2010 19:20:21.156 SEVERE org.apache.catalina.loader.WebappClassLoader.clearReferencesThreads The web application [] appears to have started a thread named [MultiThreadedHttpConnectionManager cleanup] but has failed to stop it. This is very likely to create a memory leak.






When I was troubleshooting this leak I noticed the Http Client library has had a major upgrade.</description>
			<version>3.0.4</version>
			<fixedVersion></fixedVersion>
			<type>New Feature</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.http.client.CommonsClientHttpResponse.java</file>
			<file type="M">org.springframework.web.client.RestTemplateIntegrationTests.java</file>
			<file type="M">org.springframework.http.client.CommonsClientHttpRequest.java</file>
			<file type="M">org.springframework.http.client.CommonsClientHttpRequestFactory.java</file>
			<file type="M">org.springframework.http.client.AbstractHttpRequestFactoryTestCase.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6180</link>
		</links>
	</bug>
	<bug id="5641" opendate="2009-03-31 17:54:16" fixdate="2011-03-07 23:35:31" resolution="Duplicate">
		<buginformation>
			<summary>EhCacheFactoryBean should support CacheEventListener</summary>
			<description>Actually, EhCacheFactoryBean doesn&amp;amp;apos;t allow instanciate EhCache caches with CacheEventListeners. This forbids for instance to instanciate caches that supports distribution over a cluster, because the way ehcache runs needs the cache to be fully setup before adding it to the CacheManager (see net.sf.ehcache.distribution.RMICacheManagerPeerListener.notifyCacheAdded(String)).
I wrote an extended version of EhCacheFactoryBean so that I can provide cacheEventListeners to the factory in order to have distribution works.
Now I think you can backport my class to spring-core so that evereybody can use it. As I can&amp;amp;apos;t find the url of spring scm, I can&amp;amp;apos;t provide patch, although I wish I could.
Here is what you have to setup in your bean definition :
&amp;lt;bean id="eventListenersFactory" class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
		scope="singleton" /&amp;gt;
&amp;lt;bean class="com.dexia.sofaxis.common.cache.ExtendedEhCacheFactoryBean"&amp;gt;
				&amp;lt;property name="diskPersistent"&amp;gt;
					&amp;lt;value&amp;gt;false&amp;lt;/value&amp;gt;
				&amp;lt;/property&amp;gt;
				&amp;lt;property name="cacheName"&amp;gt;
					&amp;lt;value&amp;gt;itemsReferenceData&amp;lt;/value&amp;gt;
				&amp;lt;/property&amp;gt;
				&amp;lt;property name="cacheManager"&amp;gt;
					&amp;lt;ref bean="globalCacheManager" /&amp;gt;
				&amp;lt;/property&amp;gt;
				&amp;lt;property name="eternal"&amp;gt;
					&amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt;
				&amp;lt;/property&amp;gt;
				&amp;lt;property name="maxElementsInMemory"&amp;gt;
					&amp;lt;value&amp;gt;10000&amp;lt;/value&amp;gt;
				&amp;lt;/property&amp;gt;
				&amp;lt;property name="overflowToDisk"&amp;gt;
					&amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt;
				&amp;lt;/property&amp;gt;
				&amp;lt;property name="cacheEventListeners"&amp;gt;
					&amp;lt;list&amp;gt;
						&amp;lt;bean factory-bean="eventListenersFactory" factory-method="createCacheEventListener"&amp;gt;
							&amp;lt;constructor-arg&amp;gt;
								&amp;lt;null /&amp;gt;
							&amp;lt;/constructor-arg&amp;gt;
						&amp;lt;/bean&amp;gt;
					&amp;lt;/list&amp;gt;
				&amp;lt;/property&amp;gt;
			&amp;lt;/bean&amp;gt;
</description>
			<version>2.5.1</version>
			<fixedVersion></fixedVersion>
			<type>New Feature</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.cache.ehcache.EhCacheFactoryBean.java</file>
			<file type="M">org.springframework.cache.ehcache.EhCacheManagerFactoryBean.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">6234</link>
		</links>
	</bug>
	<bug id="7769" opendate="2010-11-28 11:40:27" fixdate="2011-03-10 07:22:38" resolution="Duplicate">
		<buginformation>
			<summary>SpringJUnit4ClassRunner is not compatible with java context configuration</summary>
			<description>have test:






@RunWith(SpringJUnit4ClassRunner.class)




@Import(SomeTestContext.class)




public class SomeTest {




 ....




}






get exception:






Caused by: java.lang.IllegalArgumentException: Can not load an ApplicationContext with a NULL &amp;amp;apos;contextLoader&amp;amp;apos;. Consider annotating your test class with @ContextConfiguration.




	at org.springframework.util.Assert.notNull(Assert.java:112)




	at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:276)




	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:304)




	... 24 more





</description>
			<version>3.0.2</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="D">org.springframework.test.context.testng.AnnotationConfigTransactionalTestNGSpringContextTestsConfig.java</file>
			<file type="M">org.springframework.test.context.testng.AnnotationConfigTransactionalTestNGSpringContextTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.BeanOverridingDefaultConfigClassesInheritedTestsConfig.java</file>
			<file type="M">org.springframework.test.context.support.AnnotationConfigContextLoader.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.DefaultConfigClassesInheritedTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.ExplicitConfigClassesInheritedTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.DefaultConfigClassesBaseTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.BeanOverridingDefaultConfigClassesInheritedTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.ExplicitConfigClassesBaseTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassesBaseTestsConfig.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.BeanOverridingExplicitConfigClassesInheritedTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassesInheritedTestsConfig.java</file>
			<file type="M">org.springframework.test.context.ContextLoaderUtils.java</file>
			<file type="M">org.springframework.test.context.support.AbstractGenericContextLoader.java</file>
			<file type="M">org.springframework.test.context.ResourceTypeAwareContextLoader.java</file>
			<file type="M">org.springframework.test.context.ContextLoader.java</file>
			<file type="M">org.springframework.test.context.ContextConfiguration.java</file>
			<file type="M">org.springframework.test.context.support.GenericPropertiesContextLoader.java</file>
			<file type="M">org.springframework.test.context.support.GenericXmlContextLoader.java</file>
			<file type="M">org.springframework.test.context.testng.ConcreteTransactionalTestNGSpringContextTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassBaseTestsConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassInheritedTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassInheritedTestsConfig.java</file>
			<file type="M">org.springframework.test.context.junit4.SpringJUnit4SuiteTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.AnnotationConfigTestSuite.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassBaseTests.java</file>
			<file type="M">org.springframework.test.context.support.AbstractContextLoader.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.AnnotationConfigSpringJUnit4ClassRunnerAppCtxTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.AnnotationConfigSuiteTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.PojoAndStringConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassAnnotationConfigTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassAnnotationConfigTestsConfig.java</file>
			<file type="M">org.springframework.test.context.TestContext.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.AnnotationConfigSpringJUnit4ClassRunnerAppCtxTestsConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.AnnotationConfigSpringJUnit4ClassRunnerAppCtxTestsConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.AnnotationConfigSpringJUnit4ClassRunnerAppCtxTests.java</file>
			<file type="D">org.springframework.test.context.junit4.ConfigurationClassSpringJUnit4ClassRunnerAppCtxTestsConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.ConfigurationClassSpringJUnit4ClassRunnerAppCtxTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6184</link>
		</links>
	</bug>
	<bug id="6180" opendate="2009-10-02 22:33:04" fixdate="2011-04-11 06:15:15" resolution="Fixed">
		<buginformation>
			<summary>Upgrade Apache HttpClient to version 4.0</summary>
			<description>Folks,
Please consider upgrading HttpClient to version 4.0 which is the latest stable (GA) version of the library. Commons HttpClient 3.1 is very likely to be deprecated / officially declared end of life very soon (3 - 6 months). There have been no bug fixes in the 3.x branch for over a year. 
Patch attached. Unfortunately I was unable to fix the Ivy build which I am not very familiar with.
Oleg </description>
			<version>3.0 RC1</version>
			<fixedVersion>3.1 M2</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.http.client.CommonsClientHttpResponse.java</file>
			<file type="M">org.springframework.web.client.RestTemplateIntegrationTests.java</file>
			<file type="M">org.springframework.http.client.CommonsClientHttpRequest.java</file>
			<file type="M">org.springframework.http.client.CommonsClientHttpRequestFactory.java</file>
			<file type="M">org.springframework.http.client.AbstractHttpRequestFactoryTestCase.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">7645</link>
			<link type="Duplicate" description="is duplicated by">6719</link>
			<link type="Relate" description="is related to">10728</link>
		</links>
	</bug>
	<bug id="6922" opendate="2010-03-02 04:16:01" fixdate="2011-04-14 11:45:23" resolution="Complete">
		<buginformation>
			<summary>Deprecate SimpleJdbcTemplate in favor of JdbcTemplate</summary>
			<description>also add public int[] batchUpdate(String sql, List&amp;lt;Object[]&amp;gt; batchArgs) as well as any other methods that exist only on SimpleJdbcTemplate at that time.</description>
			<version>3.0 RC2</version>
			<fixedVersion>3.1 M2</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.jdbc.core.simple.SimpleJdbcTemplate.java</file>
			<file type="M">org.springframework.jdbc.core.JdbcOperations.java</file>
			<file type="M">org.springframework.jdbc.core.simple.SimpleJdbcDaoSupport.java</file>
			<file type="M">org.springframework.jdbc.core.JdbcTemplate.java</file>
			<file type="M">org.springframework.jdbc.core.namedparam.SqlParameterSourceUtils.java</file>
			<file type="M">org.springframework.jdbc.core.simple.SimpleJdbcOperations.java</file>
			<file type="M">org.springframework.jdbc.core.JdbcTemplateTests.java</file>
			<file type="M">org.springframework.jdbc.core.metadata.CallMetaDataProvider.java</file>
			<file type="M">org.springframework.jdbc.core.simple.package-info.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">6440</link>
			<link type="Relate" description="relates to">9235</link>
			<link type="Relate" description="is related to">11895</link>
			<link type="Relate" description="is related to">8990</link>
		</links>
	</bug>
	<bug id="6184" opendate="2008-11-05 19:05:42" fixdate="2011-06-01 09:07:08" resolution="Complete">
		<buginformation>
			<summary>Provide TestContext support for @Configuration classes</summary>
			<description>Currently, JavaConfig integrates with the TestContext framework via its ContextLoader implementation, JavaConfigContextLoader:






@RunWith(SpringJUnit4ClassRunner.class)




@ContextConfiguration(locations="com.bank.TransferAppConfig",




                      loader=JavaConfigContextLoader.class)




public class TransferServiceTests {




    // @Test methods ...




}






This integration works well enough but is not refactoring-friendly due to the requirement that @ContextConfiguration imposes that locations must be a String[]. It forces the fully-qualified class name to be expressed as a string, when it would clearly be superior to be able to pass it around by Class literal.
Implementing this change would require a change to core, either by adding an attribute to @ContextConfiguration that takes a Class[] (not likely), or otherwise devising a way of proving a customized annotation (e.g., @JavaConfigContextConfiguration).</description>
			<version>3.0 GA</version>
			<fixedVersion>3.1 M2</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="D">org.springframework.test.context.testng.AnnotationConfigTransactionalTestNGSpringContextTestsConfig.java</file>
			<file type="M">org.springframework.test.context.testng.AnnotationConfigTransactionalTestNGSpringContextTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.BeanOverridingDefaultConfigClassesInheritedTestsConfig.java</file>
			<file type="M">org.springframework.test.context.support.AnnotationConfigContextLoader.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.DefaultConfigClassesInheritedTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.ExplicitConfigClassesInheritedTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.DefaultConfigClassesBaseTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.BeanOverridingDefaultConfigClassesInheritedTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.ExplicitConfigClassesBaseTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassesBaseTestsConfig.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.BeanOverridingExplicitConfigClassesInheritedTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassesInheritedTestsConfig.java</file>
			<file type="M">org.springframework.test.context.ContextLoaderUtils.java</file>
			<file type="M">org.springframework.test.context.support.AbstractGenericContextLoader.java</file>
			<file type="M">org.springframework.test.context.ResourceTypeAwareContextLoader.java</file>
			<file type="M">org.springframework.test.context.ContextLoader.java</file>
			<file type="M">org.springframework.test.context.ContextConfiguration.java</file>
			<file type="M">org.springframework.test.context.support.GenericPropertiesContextLoader.java</file>
			<file type="M">org.springframework.test.context.support.GenericXmlContextLoader.java</file>
			<file type="M">org.springframework.test.context.testng.ConcreteTransactionalTestNGSpringContextTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassBaseTestsConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassInheritedTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassInheritedTestsConfig.java</file>
			<file type="M">org.springframework.test.context.junit4.SpringJUnit4SuiteTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.AnnotationConfigTestSuite.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassBaseTests.java</file>
			<file type="M">org.springframework.test.context.support.AbstractContextLoader.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.AnnotationConfigSpringJUnit4ClassRunnerAppCtxTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.AnnotationConfigSuiteTests.java</file>
			<file type="M">org.springframework.test.context.junit4.annotation.PojoAndStringConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassAnnotationConfigTests.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.DefaultConfigClassAnnotationConfigTestsConfig.java</file>
			<file type="M">org.springframework.test.context.TestContext.java</file>
			<file type="D">org.springframework.test.context.junit4.annotation.AnnotationConfigSpringJUnit4ClassRunnerAppCtxTestsConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.AnnotationConfigSpringJUnit4ClassRunnerAppCtxTestsConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.AnnotationConfigSpringJUnit4ClassRunnerAppCtxTests.java</file>
			<file type="D">org.springframework.test.context.junit4.ConfigurationClassSpringJUnit4ClassRunnerAppCtxTestsConfig.java</file>
			<file type="D">org.springframework.test.context.junit4.ConfigurationClassSpringJUnit4ClassRunnerAppCtxTests.java</file>
		</fixedFiles>
		<links>
			<link type="Depend" description="is depended on by">8386</link>
			<link type="Depend" description="is depended on by">8240</link>
			<link type="Duplicate" description="is duplicated by">7769</link>
			<link type="Duplicate" description="is duplicated by">6567</link>
			<link type="Duplicate" description="is duplicated by">272</link>
			<link type="Relate" description="relates to">8395</link>
			<link type="Relate" description="is related to">7960</link>
			<link type="Relate" description="is related to">7937</link>
			<link type="Related" description="is related to">5682</link>
			<link type="Related" description="is related to">7420</link>
		</links>
	</bug>
	<bug id="8375" opendate="2011-05-25 06:21:35" fixdate="2011-06-13 17:23:28" resolution="Duplicate">
		<buginformation>
			<summary>Can make an OutOfMemoryException by sending a modified form list property with an high index</summary>
			<description>How to reproduce the problem
With a ModelAttribute such as :






class Model {




    List&amp;lt;String&amp;gt; getItems();




}






With a JSP such as :






&amp;lt;form:input path="items[0]" /&amp;gt;






within an HTML form.
POST the form with modified items attribute :






items[100000000]=foo






and wait, wait, wait until the OutOfMemoryException.
Incriminated code
org.springframework.validation.DataBinder.autoGrowNestedPaths is default true, it should be false instead.
Workarounds
In a controller : 






@InitBinder




public void initBinder(WebDataBinder binder) {




    binder.setAutoGrowNestedPaths(false);




}






or using an implementation of WebBindingInitializer :






public void initBinder(WebDataBinder binder, WebRequest request) {




    binder.setAutoGrowNestedPaths(false);




}






</description>
			<version>3.0.5</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.beans.BeanWrapper.java</file>
			<file type="M">org.springframework.beans.BeanWrapperAutoGrowingTests.java</file>
			<file type="M">org.springframework.beans.BeanWrapperImpl.java</file>
			<file type="M">org.springframework.validation.BeanPropertyBindingResult.java</file>
			<file type="M">org.springframework.validation.DataBinder.java</file>
			<file type="M">org.springframework.validation.DataBinderTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">7842</link>
		</links>
	</bug>
	<bug id="7931" opendate="2011-02-02 10:18:28" fixdate="2011-06-14 02:52:15" resolution="Fixed">
		<buginformation>
			<summary>Checking for @XmlRootElement annotation should be made optional in Jaxb2Marshaller </summary>
			<description>The Jaxb2Marshaller is only supporting classes annotated with @XmlRootElement currently and there&amp;amp;apos;s no way to override that behaviour as supportsInternal(Class, boolean) is private. There are cases when you want to (un)marshal classes that are @XmlType annotated only. Especially when working with XJC, you get the @XmlRootElement annotation only for classes that have their xsd:simpleType or xsd:complexType nested inside the xsd:element declaration (see this blog entry for why that&amp;amp;apos;s the case). However, if you have a type that can be reused and used as a root element&amp;amp;apos;s type, XJC will not create the @XmlRootElement annotation but rather a factory method inside the ObjectFactory class. To get those classes (un)marshalled, you currently have to copy large parts of Jaxb2Marshaller as there&amp;amp;apos;s no way to disable the check for the annotation. So it would be cool if this was configurable through a bean property or at least changeable so that a subclass could potentially call supportsInternal(clazz, false).</description>
			<version>3.0.7</version>
			<fixedVersion>3.1 RC1</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2MarshallerTests.java</file>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2Marshaller.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">9742</link>
		</links>
	</bug>
	<bug id="8124" opendate="2011-03-31 12:30:42" fixdate="2011-06-17 06:20:56" resolution="Duplicate">
		<buginformation>
			<summary>@ExceptionHandler doesn&amp;apos;t handle exceptions from other controllers</summary>
			<description>The fact that a method annotated with @ExceptionHandler can only handle exceptions from the same controller is a restrictive issue. The better behavior would be if the annotated method would be able to handle all exceptions of that particular type, regardless of their source. </description>
			<version>3.0.2</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">7278</link>
			<link type="Duplicate" description="is duplicated by">8178</link>
		</links>
	</bug>
	<bug id="6164" opendate="2009-09-29 08:12:07" fixdate="2011-06-21 04:59:11" resolution="Complete">
		<buginformation>
			<summary>a Uri Value is incorrectly extracted if it contains &amp;apos;.&amp;apos;.</summary>
			<description>Suppose we have the controller request mapping as the following
 @RequestMapping(value = "/my/
{vari}", method = RequestMethod.GET)
 @ResponseBody
    public String getVari(@PathVariable String vari) {
        System.out.println("vari=" + vari);
        return vari;
    }


If a request such as  "http://localhost/myapp/my/abc.mycontroller.com" is submitted, the actually value of &amp;amp;apos;vari&amp;amp;apos; obtained by Spring API only returns &amp;amp;apos;abc.mycontroller&amp;amp;apos;.  

Further investigation turns out the issue is at line 564 in https://src.springframework.org/svn/spring-framework/tags/spring-framework-3.0.0.RC1/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java. The pattern generated by the line results in "{vari}
.*". With  the &amp;amp;apos;pathMatcher&amp;amp;apos; (the matcher used at line 565) object created by AntPathStringMatcher("
{vari}
.*", "abc.mycontroller.com", map), the value of &amp;amp;apos;vari&amp;amp;apos; will be &amp;amp;apos;abc.mycontroller&amp;amp;apos; in the &amp;amp;apos;map&amp;amp;apos; variable after executing line 566.</description>
			<version>3.0 M4</version>
			<fixedVersion>3.1 RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.HeadersRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.RequestMappingInfo.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.ParamsRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.UriTemplateServletAnnotationControllerTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">6231</link>
			<link type="Duplicate" description="is duplicated by">10026</link>
			<link type="Duplicate" description="is duplicated by">14678</link>
			<link type="Relate" description="relates to">7632</link>
			<link type="Related" description="is related to">5537</link>
		</links>
	</bug>
	<bug id="8040" opendate="2011-03-12 03:02:40" fixdate="2011-06-28 03:40:45" resolution="Duplicate">
		<buginformation>
			<summary>ServletRequestDataBinder.bind should also consider wrapped ServletRequests when checking for Multipart,  to comply with HiddenHttpMethodFilter.</summary>
			<description>When using HiddenHttpMethodFilter, like for example Spring Roo generated apps do, the ServletRequest is wrappd into a HttpMethodRequestWrapper (at least in cases, where wrapping is necessary, for example for PUT requests emulated with POST and httpMethod parameter).
Later, when it comes to data binding the ServletRequestDataBinder.bind method checks for multipart requests:






MutablePropertyValues mpvs = new ServletRequestParameterPropertyValues(request);




		if (request instanceof MultipartRequest) {




			MultipartRequest multipartRequest = (MultipartRequest) request;




			bindMultipart(multipartRequest.getMultiFileMap(), mpvs);




		}




		doBind(mpvs);






But if the multipart request has been wrapped into a HttpMethodRequestWrapper , this won&amp;amp;apos;t work anymore, since it is not an instance of MultipartRequest. Thus, no databinding for the Multipart files occurs.
NOTE: My setup ist the following:

I am using a MultipartFilter in front of the WebMethodFilter, as suggested in bold letters in  the Javadoc of HiddenHttpMethodFilter
I am using binding for the uploaded files, instead of "injecting" them as parameters in the controller mehtods. For this, I register an according converter / bean editor from MultipartFile to byte array
For POST request, this setup works fine. For PUT (emulated by POST and httpMethod parameter), the problem described above arises.

</description>
			<version>3.0.5</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.context.request.ServletWebRequest.java</file>
			<file type="M">org.springframework.web.portlet.context.PortletWebRequest.java</file>
			<file type="M">org.springframework.web.portlet.util.PortletUtils.java</file>
			<file type="M">org.springframework.web.util.WebUtils.java</file>
			<file type="M">org.springframework.web.portlet.bind.PortletRequestDataBinder.java</file>
			<file type="M">org.springframework.web.bind.ServletRequestDataBinder.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">7795</link>
		</links>
	</bug>
	<bug id="7842" opendate="2010-12-28 11:14:33" fixdate="2011-07-03 12:24:33" resolution="Complete">
		<buginformation>
			<summary>DataBinder should be able to define a different strategy for BeanWrapperImpl how autogrowing should handle gaps in collection properties</summary>
			<description>DataBinder which is used by WebRequestDataBinder and ServletRequestDataBinder grows automatically collections when "autoGrowNestedPaths" is on (AFAIK this is the default for the DataBinder).
The behaviour of DataBinder when "autoGrowNestedPaths" is that a property with a given index N will result in growing a collection to size N if the collection is not large enough. Collection elements with index &amp;lt; N will be initialized with default objects of the collection&amp;amp;apos;s type.
Based on WebRequestDataBinder it&amp;amp;apos;s therefore easily possible to DoS a web application if it&amp;amp;apos;s allowed to bind against a collection property and the client POSTs a single property using a very large index.
Sending a single request containing a parameter for a collection property with index 99999999 caused an OOM on a JVM on MacOsX with default memory settings (64MB?). The list type in this case contained 7 String properties and 2 Longs.
I think there are several things to follow-up:
1) It would be safer to set autoGrowNestedPaths to false by default. Use of DataBinder and autoGrowNestedPaths then would be more restrictive by default and require explicit action to enable autoGrowing.
2) The creation of "default" values in BeanWrapperImpl should be more flexible. A strategy for creating default values would allow clients to define how such default values should be created. In the case of WebRequestDataBinder creating empty (null) collection elements instead of default objects is certainly safer to fill the gaps in the collection - especially for exposed applications to the public. Furthermore this does not expose unwanted restrictions like a maximum allowed index limitation etc.
3) Presumably this could be solved with CustomPropertyEditors. However the majority of developers probably tries to stick with what is available out-of-the box and as the DataBinding in general for "standard" use-cases works fine dealing with the described issue is not obvious and could lead to wide-spread holes.</description>
			<version>3.0.5</version>
			<fixedVersion>3.0.6, 3.1 RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.beans.BeanWrapper.java</file>
			<file type="M">org.springframework.beans.BeanWrapperAutoGrowingTests.java</file>
			<file type="M">org.springframework.beans.BeanWrapperImpl.java</file>
			<file type="M">org.springframework.validation.BeanPropertyBindingResult.java</file>
			<file type="M">org.springframework.validation.DataBinder.java</file>
			<file type="M">org.springframework.validation.DataBinderTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">8375</link>
			<link type="Relate" description="is related to">6033</link>
			<link type="Relate" description="is related to">10229</link>
		</links>
	</bug>
	<bug id="6482" opendate="2009-12-01 02:15:27" fixdate="2011-07-11 00:51:14" resolution="Complete">
		<buginformation>
			<summary>@RequestMapping handled incorrectly when value contains "." (dot) character</summary>
			<description>At the moment in my code exist method with such signature:






@RequestMapping(value = "/projects/{filter}/{order}-{direction}", method = RequestMethod.GET)




public String filteredProjectListing(@PathVariable("filter") String filter, @PathVariable("order") String order,




            @PathVariable("direction") String direction, ModelMap model) {




 ...




}






order is String variable containing ognl-like expresssion ie. "raging.result" (which I later use for BeanComparator) but this mapping is in version RC3 is not found, which is different behaviour from RC2 where there is no such problem.
Log message with example of given fault result is:






2009-12-01 16:38:02,459 WARN [org.springframework.web.servlet.PageNotFound] - &amp;lt;No mapping found for HTTP request with URI [/Example/projects/all/rate.result-asc.html] in DispatcherServlet with name &amp;amp;apos;Example&amp;amp;apos;&amp;gt;






There is no problem with handling path which doesn&amp;amp;apos;t contain more &amp;amp;apos;.&amp;amp;apos; (dot) characters, so this can probably help you with analysis of the problem. </description>
			<version>3.0 RC3</version>
			<fixedVersion>3.0 GA</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.util.AntPathStringMatcher.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.UriTemplateServletAnnotationControllerTests.java</file>
			<file type="M">org.springframework.util.AntPathMatcher.java</file>
			<file type="M">org.springframework.util.AntPathMatcherTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">6560</link>
			<link type="Duplicate" description="is duplicated by">6499</link>
			<link type="Related" description="is related to">6280</link>
		</links>
	</bug>
	<bug id="6464" opendate="2009-11-27 15:03:38" fixdate="2011-09-16 10:08:23" resolution="Complete">
		<buginformation>
			<summary>Flash Scope  for Spring MVC (Without Spring Web Flow)</summary>
			<description>Geert Pante submitted the codes for this issue at: MOD-458.</description>
			<version>3.0 RC2</version>
			<fixedVersion>3.1 RC1</fixedVersion>
			<type>New Feature</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.bind.annotation.RequestMapping.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.RedirectAttributesMethodArgumentResolver.java</file>
			<file type="M">org.springframework.web.servlet.view.RedirectView.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.java</file>
			<file type="M">org.springframework.web.servlet.view.RedirectViewTests.java</file>
			<file type="M">org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser.java</file>
			<file type="M">org.springframework.web.method.support.HandlerMethodArgumentResolver.java</file>
			<file type="M">org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.java</file>
			<file type="M">org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.ServletResponseMethodArgumentResolver.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.ServletRequestMethodArgumentResolverTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.RequestResponseBodyMethodProcessorTests.java</file>
			<file type="M">org.springframework.web.servlet.support.DefaultFlashMapManager.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.ViewMethodReturnValueHandler.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.DefaultMethodReturnValueHandlerTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.HttpEntityMethodProcessor.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.ModelAndViewMethodReturnValueHandlerTests.java</file>
			<file type="M">org.springframework.web.util.WebUtils.java</file>
			<file type="M">org.springframework.web.method.support.HandlerMethodReturnValueHandler.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.RequestPartMethodArgumentResolverTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.ServletResponseMethodArgumentResolverTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.java</file>
			<file type="M">org.springframework.web.servlet.FlashMapTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.RequestResponseBodyMethodProcessor.java</file>
			<file type="M">org.springframework.web.servlet.support.DefaultFlashMapManagerTests.java</file>
			<file type="M">org.springframework.web.method.support.ModelAndViewContainer.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.ModelAndViewMethodReturnValueHandler.java</file>
			<file type="M">org.springframework.web.util.WebUtilsTests.java</file>
			<file type="M">org.springframework.web.servlet.FlashMapManager.java</file>
			<file type="M">org.springframework.web.servlet.FlashMap.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.java</file>
			<file type="M">org.springframework.web.method.annotation.ModelFactory.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.HttpEntityMethodProcessorTests.java</file>
			<file type="M">org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParserTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.support.RedirectAttributesModelMapTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.support.RedirectAttributes.java</file>
			<file type="M">org.springframework.web.servlet.SmartView.java</file>
			<file type="M">org.springframework.web.servlet.support.RequestContextUtils.java</file>
			<file type="M">org.springframework.web.servlet.DispatcherServlet.java</file>
			<file type="M">org.springframework.web.servlet.view.RedirectViewUriTemplateTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.ParamsRequestCondition.java</file>
			<file type="D">org.springframework.web.servlet.mvc.support.RedirectModel.java</file>
			<file type="D">org.springframework.web.servlet.mvc.support.RedirectModelTests.java</file>
			<file type="D">org.springframework.web.servlet.mvc.method.annotation.support.RedirectModelMethodArgumentResolver.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.ViewMethodReturnValueHandlerTests.java</file>
			<file type="D">org.springframework.web.servlet.mvc.method.support.ResponseContext.java</file>
			<file type="D">org.springframework.web.servlet.mvc.method.support.RedirectResponse.java</file>
			<file type="M">org.springframework.web.method.annotation.SessionAttributesHandler.java</file>
			<file type="D">org.springframework.web.servlet.mvc.method.support.ViewResponse.java</file>
			<file type="M">org.springframework.web.method.annotation.InitBinderDataBinderFactoryTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver.java</file>
			<file type="D">org.springframework.web.servlet.support.FlashMapTests.java</file>
			<file type="M">org.springframework.web.method.annotation.support.ModelMethodProcessor.java</file>
			<file type="D">org.springframework.web.servlet.mvc.method.annotation.FlashAttributesServletTests.java</file>
			<file type="M">org.springframework.web.method.annotation.ModelFactoryTests.java</file>
			<file type="M">org.springframework.web.method.annotation.support.ModelAttributeMethodProcessor.java</file>
			<file type="D">org.springframework.web.bind.support.SimpleFlashStatus.java</file>
			<file type="D">org.springframework.web.method.annotation.FlashAttributesHandler.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.DefaultMethodReturnValueHandler.java</file>
			<file type="D">org.springframework.web.bind.support.FlashStatus.java</file>
			<file type="D">org.springframework.web.bind.annotation.FlashAttributes.java</file>
			<file type="D">org.springframework.web.method.annotation.HandlerSessionAttributeStoreTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests.java</file>
			<file type="D">org.springframework.web.servlet.mvc.method.annotation.ServletHandlerMethodTests.java</file>
			<file type="D">org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletHandlerMethodTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">2657</link>
			<link type="Supersede" description="supersedes">1068</link>
		</links>
	</bug>
	<bug id="8766" opendate="2011-10-12 13:15:51" fixdate="2011-10-17 12:55:57" resolution="Duplicate">
		<buginformation>
			<summary>Impossible to set SimpleMappingExceptionResolver.statusCodes</summary>
			<description>Bean property &amp;amp;apos;statusCodes&amp;amp;apos; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
indeed :
public void setStatusCodes(Properties statusCodes)
Map&amp;lt;String, Integer&amp;gt; getStatusCodes()
Probably a regression due to SPR-8452. Works with 3.1.0.M2. Maybe works on jdk7 as Introspector was modified.
Why not make statusCodes a Map instead of Properties?</description>
			<version>3.1 RC1</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.handler.SimpleMappingExceptionResolver.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">8759</link>
		</links>
	</bug>
	<bug id="8759" opendate="2011-10-12 06:26:46" fixdate="2011-11-02 12:57:11" resolution="Complete">
		<buginformation>
			<summary>SimpleMappingExceptionResolver: setStatusCodes getter return not same as setter. Makes override impossible</summary>
			<description>The getter return type (Map) is not the same as setter (Properties). Since Spring 3.1, this is a problem. I get 
org.springframework.beans.NotWritablePropertyException: Invalid property &amp;amp;apos;statusCodes&amp;amp;apos; of bean class [nl.project.interceptor.MySimpleExceptionResolver]: Bean property &amp;amp;apos;statusCodes&amp;amp;apos; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1057)
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:920)
This makes it impossible to configure properties for &amp;amp;apos;statusCodes&amp;amp;apos; in dispatcher-servlet.xml</description>
			<version>3.1 RC1</version>
			<fixedVersion>3.1 RC2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.handler.SimpleMappingExceptionResolver.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">8766</link>
		</links>
	</bug>
	<bug id="8808" opendate="2011-10-31 14:11:19" fixdate="2011-11-28 13:39:35" resolution="Complete">
		<buginformation>
			<summary>Allow @Configuration classes to self-@ComponentScan</summary>
			<description>I am using AnnotationConfigWebApplicationContext and XML-free testing support with @ContextConfiguration(classes=...). When pointed @Configuration class contains @ComponentScan with a package containing that class:






package com.example.foo;









@Configuration




@ComponentScan(basePackages = "com.example.foo")




public class Config { }






I get unexpected exception:






org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name &amp;amp;apos;config&amp;amp;apos; for bean class [com.example.foo.Config] conflicts with existing, non-compatible bean definition of same name and class [com.example.foo.Config]






While I understand why it happens, IMHO Spring should handle this case and simply ignore @Configuration found in scanned package if it has already been provided in AnnotationConfigWebApplicationContext.
Test case attached. On branch master you&amp;amp;apos;ll find a test case failing, branch fix fixes the problem by simply @Config to another package.</description>
			<version>3.1 RC1</version>
			<fixedVersion>3.1 RC2</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.config.annotation.EnableWebMvc.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">8880</link>
			<link type="Relate" description="relates to">8307</link>
		</links>
	</bug>
	<bug id="8880" opendate="2011-11-29 00:38:31" fixdate="2011-11-29 10:40:28" resolution="Duplicate">
		<buginformation>
			<summary>Default @ComponentScan&amp;apos;s exclude filter to exclude @Configuration annotated classes</summary>
			<description>Suppose you have an application with a base package of com.acme with an @Configuration class located in this package. Now suppose you use this configuration class as basePackageClass inside @ComponentScan. This will result in an exception saying the class is registered twice. So you pretty much end up with always adding this exclude.
Would it make sense to default the excludeFilters attribute of the @ComponentScan annotation as follows?






@Filter(type = FilterType.ANNOTATION, value = Configuration.class)





</description>
			<version>3.1 RC2</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.config.annotation.EnableWebMvc.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">8808</link>
		</links>
	</bug>
	<bug id="8674" opendate="2011-09-08 12:27:56" fixdate="2011-12-01 10:37:52" resolution="Complete">
		<buginformation>
			<summary>Collection Binding broken - TypeConverterDelegate does bind Collection Elements to Collection type instead of the collection elements Type</summary>
			<description>Please look at the attached Testcase. Conversion does work for String -&amp;gt; Set in 3.0.5 but fails in 3.0.6. Elements are converted to the collection type rather than their Collections elements type.
The revision and bug which causes this is mentioned in the forum thread.</description>
			<version>3.0.6</version>
			<fixedVersion>3.0.7</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.core.convert.support.GenericConversionService.java</file>
			<file type="M">org.springframework.core.convert.support.MapToMapConverterTests.java</file>
			<file type="M">org.springframework.core.convert.support.ArrayToObjectConverter.java</file>
			<file type="M">org.springframework.core.convert.support.ArrayToCollectionConverter.java</file>
			<file type="M">org.springframework.core.convert.support.CollectionToCollectionConverterTests.java</file>
			<file type="M">org.springframework.core.convert.TypeDescriptor.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">8665</link>
			<link type="Relate" description="is related to">8714</link>
		</links>
	</bug>
	<bug id="8665" opendate="2011-09-03 08:29:42" fixdate="2011-12-01 10:38:40" resolution="Duplicate">
		<buginformation>
			<summary>Did spring framework 3.0.6 break property editor support for List&amp;apos;s? If so, here&amp;apos;s a new bug that was created.</summary>
			<description>I have an application that I&amp;amp;apos;ve recently upgraded to 3.0.6 from 3.0.5. The application used a property editor to convert a String to a List of objects, back and forth.
I am positive this code used to work. In fact, the unit tests for the property editor continue to work as expected.
However, whenever a controller uses the property editor, it wraps the List of objects with ANOTHER list, which is absolutely not what we want to happen. Did they change how property editors work? How do I fix it?
My init binder method looks like this:






	@InitBinder




	public void initBinder(WebDataBinder binder) {




		binder.registerCustomEditor(List.class, new UsernamesToRecipientsEditor(userAccountDao));




	}






Because java is weakly typed when it comes to List, I want you to know that this is really a `List&amp;lt;Recipient&amp;gt;` and not just a List of any random object. Here is the property editor code:






    public class UsernamesToRecipientsEditor extends PropertyEditorSupport {




    




    	private UserAccountDao dao;




    




    	public UsernamesToRecipientsEditor(UserAccountDao dao) {




    		this.dao = dao;




    	}




    




    	@Override




    	public String getAsText() {




    		Object obj = getValue();




    		if(obj == null) {




    			return "";




    		}




    




    		if(obj instanceof List) {




    			List&amp;lt;Recipient&amp;gt; recipients = (List&amp;lt;Recipient&amp;gt;) obj;




    




    			StringBuilder builder = new StringBuilder();




    			for(Iterator&amp;lt;Recipient&amp;gt; iterator = recipients.iterator(); iterator.hasNext();) {




    				Recipient recipient = iterator.next();




    				builder.append(recipient.getUserAccount().getUsername());




    




    				if(iterator.hasNext()) {




    					builder.append(", ");




    				}




    			}




    




    			return builder.toString();




    		}




    




    		throw new IllegalArgumentException("Value must be a UserAccount");




    	}




    




    	@Override




    	public void setAsText(String text) {




    		List&amp;lt;Recipient&amp;gt; recipients = new ArrayList&amp;lt;Recipient&amp;gt;();




    




    		if(!StringUtils.hasText(text)) {




    			setValue(recipients);




    			return;




    		}




    




    		for(String username : StringUtils.commaDelimitedListToSet(text)) {




    			UserAccount userAccount = dao.findByUsername(username.trim());




    			if(userAccount != null) {




    				Recipient recipient = new Recipient(userAccount);




    				if(!containsRecipient(recipients, recipient)) {




    					recipients.add(recipient);




    				}




    			}




    		}




    




    		setValue(recipients);




    	}




    




    	private boolean containsRecipient(List&amp;lt;Recipient&amp;gt; recipients, Recipient recipient) {




    		for(Recipient r : recipients) {




    			if(r.getUserAccount().getId() == recipient.getUserAccount().getId()) return true;




    		}




    




    		return false;




    	}




    




    }






Basically what this code does is it converts a string containing a bunch of username&amp;amp;apos;s separated by commas and converts them to the actual user objects, back and forth between them. It works in unit tests, and this worked in the past.
Unfortunately, after Spring MVC calls into this property editor, it wraps the result from `setValue(recipients)` inside of ANOTHER List... so the end result is a "List of a List of Recipients". This isn&amp;amp;apos;t what I want.
Since this code above USED TO work, I have to conclude that some bug or behavioral change has happened. Please help.</description>
			<version>3.0.6</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.core.convert.support.GenericConversionService.java</file>
			<file type="M">org.springframework.core.convert.support.MapToMapConverterTests.java</file>
			<file type="M">org.springframework.core.convert.support.ArrayToObjectConverter.java</file>
			<file type="M">org.springframework.core.convert.support.ArrayToCollectionConverter.java</file>
			<file type="M">org.springframework.core.convert.support.CollectionToCollectionConverterTests.java</file>
			<file type="M">org.springframework.core.convert.TypeDescriptor.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">8674</link>
		</links>
	</bug>
	<bug id="6373" opendate="2009-11-17 04:43:39" fixdate="2011-12-03 07:47:37" resolution="Complete">
		<buginformation>
			<summary>Support for validation groups in @Valid used by spring MVC</summary>
			<description>It would be useful to be able to use validation groups in spring MVC as specified by JSR-303. With the improvement it should be possible to write something like: 
@RequestMapping("/foo", method=RequestMethod.POST)
public void processFoo(@Valid(groups=
{Default.class, MyValidationGroup.class}
) Foo foo) 
{ ... }


</description>
			<version>3.0 RC2</version>
			<fixedVersion>3.1 GA</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.method.annotation.support.ModelAttributeMethodProcessor.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.ServletAnnotationControllerTests.java</file>
			<file type="M">org.springframework.web.bind.annotation.support.HandlerMethodInvoker.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.RequestResponseBodyMethodProcessor.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.RequestPartMethodArgumentResolver.java</file>
			<file type="M">org.springframework.validation.beanvalidation.SpringValidatorAdapter.java</file>
			<file type="M">org.springframework.validation.DataBinder.java</file>
			<file type="M">org.springframework.web.method.annotation.support.ModelAttributeMethodProcessorTests.java</file>
			<file type="M">org.springframework.web.servlet.config.MvcNamespaceTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">6369</link>
			<link type="Duplicate" description="is duplicated by">7062</link>
			<link type="Relate" description="is related to">7847</link>
		</links>
	</bug>
	<bug id="6369" opendate="2009-11-16 23:03:58" fixdate="2011-12-03 07:48:03" resolution="Duplicate">
		<buginformation>
			<summary>Support for &amp;apos;groups&amp;apos; in addition to @Valid for @MVC Controllers</summary>
			<description>I want to be able to specify the JSR303 validation group when specifying @Valid in @Controller-s.
I don&amp;amp;apos;t want the validation to be run against the default group every time.
I guess currently I can inject a javax.validation.Validator reference in the @Controller and handle this programmatically. Would be nice if this can be driven through an annotation as well.
But @Valid doesn&amp;amp;apos;t support a "group" attribute though.
What do you guys think?</description>
			<version>3.0 RC2</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.method.annotation.support.ModelAttributeMethodProcessor.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.ServletAnnotationControllerTests.java</file>
			<file type="M">org.springframework.web.bind.annotation.support.HandlerMethodInvoker.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.RequestResponseBodyMethodProcessor.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.RequestPartMethodArgumentResolver.java</file>
			<file type="M">org.springframework.validation.beanvalidation.SpringValidatorAdapter.java</file>
			<file type="M">org.springframework.validation.DataBinder.java</file>
			<file type="M">org.springframework.web.method.annotation.support.ModelAttributeMethodProcessorTests.java</file>
			<file type="M">org.springframework.web.servlet.config.MvcNamespaceTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6373</link>
		</links>
	</bug>
	<bug id="7062" opendate="2010-04-01 08:35:05" fixdate="2011-12-03 07:48:40" resolution="Duplicate">
		<buginformation>
			<summary>Add Group Class support to JSR-303 Validation using @Valid</summary>
			<description>Would like a replacement for @Valid that could take group classes for JSR-303 validation. Right now only the default group class of JSR-303 Constraints is run for the @Valid.  
Please refer to this forum thread for more detail: http://forum.springsource.org/showthread.php?p=292566 </description>
			<version>3.0 RC2</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.method.annotation.support.ModelAttributeMethodProcessor.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.ServletAnnotationControllerTests.java</file>
			<file type="M">org.springframework.web.bind.annotation.support.HandlerMethodInvoker.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.RequestResponseBodyMethodProcessor.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.RequestPartMethodArgumentResolver.java</file>
			<file type="M">org.springframework.validation.beanvalidation.SpringValidatorAdapter.java</file>
			<file type="M">org.springframework.validation.DataBinder.java</file>
			<file type="M">org.springframework.web.method.annotation.support.ModelAttributeMethodProcessorTests.java</file>
			<file type="M">org.springframework.web.servlet.config.MvcNamespaceTests.java</file>
		</fixedFiles>
		<links>
			<link type="Depend" description="is depended on by">1453</link>
			<link type="Duplicate" description="duplicates">6373</link>
		</links>
	</bug>
	<bug id="8013" opendate="2011-03-02 05:40:09" fixdate="2011-12-06 14:33:50" resolution="Duplicate">
		<buginformation>
			<summary>ResourceHttpRequestHandler status code 304 setting Content-Length header</summary>
			<description>I&amp;amp;apos;ve been debugging an issue while using the Jetty ProxyServlet to proxy all requests to a backend server which uses the mvc:resources namespace element. I finally tracked the issue down to Jetty&amp;amp;apos;s ProxyServlet hanging while waiting for content from the backend server. Originally I thought this was a Jetty issue, but as I look at the HTTP headers, I think it is an issue with ResourceHttpRequestHandler.
ResourceHttpRequestHandler, at line 124 always sets the HTTP headers of Content-Length and Content-Type. Immediately after this call, at line 125, the response is returned if it is found that the resource hasn&amp;amp;apos;t changed and a 304 can be returned. What this means is that a "304 Not Modified" status is returned but the Content-Length header is also set.
I&amp;amp;apos;ve found conflicting reports as to who is in the wrong here, but RFC 2616 section 10.3.5 says,
"If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers."
of course, RFC 2616 section 4.4 says,
"Any response message which "MUST NOT" include a message-body (such as the 1xx, 204, and 304 responses and any response to a HEAD request) is always terminated by the first empty line after the header fields, regardless of the entity-header fields present in the message."
So, in either case (strong or weak validators), it seems like the ResourceHttpRequestHandler should not be setting a Content-Length header because clients could hang waiting for the content. However, clients should be smart enough to ignore content-length header on a 304. This is probably something that should be fixed on both sides!
The forum thread contains a simple workaround where the content length is reset to 0 if a 304 status is set.</description>
			<version>3.0.5</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.filter.ShallowEtagHeaderFilterTests.java</file>
			<file type="M">org.springframework.web.filter.ShallowEtagHeaderFilter.java</file>
			<file type="M">org.springframework.web.servlet.resource.ResourceHttpRequestHandler.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">7706</link>
		</links>
	</bug>
	<bug id="8887" opendate="2011-11-30 04:57:20" fixdate="2011-12-21 04:37:11" resolution="Duplicate">
		<buginformation>
			<summary>QuartzJobBean throws IncompatibleClassChangeError when using Quartz 2.x</summary>
			<description>This is the exception we get when using the latest Spring 3.1 RC2 together with Quartz 2.1.1
[ERROR] 2011-11-29 14:33:57 [JobRunShell-scheduler_Worker-1] - Job DEFAULT.deviceIndexerJob threw an unhandled Exception: 
java.lang.IncompatibleClassChangeError: Found interface org.quartz.JobExecutionContext, but class was expected
at org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:79)
at org.quartz.core.JobRunShell.run(JobRunShell.java:213)
at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:557)
[ERROR] 2011-11-29 14:33:57 [JobRunShell-scheduler_Worker-2] - Job DEFAULT.shortCodeIndexerJob threw an unhandled Exception: 
java.lang.IncompatibleClassChangeError: Found interface org.quartz.JobExecutionContext, but class was expected
at org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:79)
at org.quartz.core.JobRunShell.run(JobRunShell.java:213)
at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:557)
The source for QuartzJobBean does not seem to indicate any kind of problem. Even though JobExecutionContext was a class in Quartz 1.x and is now an interface in Quartz 2.x, the methods invoked on it are present in both.
The problem is that the Spring binary has been compiled against Quartz 1.x, and changing a class into an interface (or viceversa) is an incompatible change according to the Java spec, so we get IncompatibleClassChangeError even if the source compiles fine against both Quartz versions.
Recompiling QuartzJobBean against Quartz 2.x solves the issue, however this is an undesirable solution. I guess the solution would be to invoke the offending methods using reflection.
Our workaround was simply creating an alternative MethodInvokingJobDetailFactoryBean simplified for our use and compiled directly against Quartz 2.x, but this should be solved for the general public.
BTW, SPR-8435 is somehow related but is clearly a different issue, which in fact has already been solved in 3.1 RC2</description>
			<version>3.1 RC2</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.java</file>
			<file type="M">org.springframework.scheduling.quartz.QuartzJobBean.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">8889</link>
		</links>
	</bug>
	<bug id="8986" opendate="2012-01-03 14:53:36" fixdate="2012-01-20 07:28:10" resolution="Fixed">
		<buginformation>
			<summary>Add the ability to Scan Packages for JAXB Marshalling (java example provided)</summary>
			<description>Hi,
In our application we have a rapidly growing number of JAXB2 annotated classes. It is a right pain to add these classes manually to the "classesToBeBound" property in the Jaxb2Marshaller. Given that other components (I&amp;amp;apos;m looking at you Hibernate : AnnotationSessionFactoryBean) have the ability to automatically add classes from packages that match annotations, why not then for the Jaxb2Marshaller (having to key in the classes manually is so old skool).
I&amp;amp;apos;ve extended Jaxb2Marshaller (file attached) that scans on the classpath for appropriately annotated classes. Please do review and I hope that this can be incorporated into the next release. I&amp;amp;apos;m happy to make changes to the codebase if required to bring it up to Spring coding standards.
It&amp;amp;apos;s a pity that afterPropertiesSet is marked as Final in Jaxb2Marshaller since I can&amp;amp;apos;t override that method to set up the setClassesToBeBound before then calling the super afterPropertiesSet. Currently as the code stands, I have to provide a dummy setClassesToBeBound and setLazyInit to be true. This dummy is then replaced by overriding the getJaxbContext. I think this needs rewriting.
An example of use:






&amp;lt;bean id="marshaller" class="foo.bar.AnnotationJaxb2Marshaller"&amp;gt;




    &amp;lt;property name="lazyInit" value="true" /&amp;gt;




    &amp;lt;property name="classesToBeBound"&amp;gt;




       &amp;lt;list&amp;gt;




           &amp;lt;value&amp;gt;foo.bar.Class&amp;lt;/value&amp;gt;




       &amp;lt;/list&amp;gt;




    &amp;lt;/property&amp;gt;




    &amp;lt;property name="packagesToScan"&amp;gt;




        &amp;lt;list&amp;gt;




            &amp;lt;value&amp;gt;foo.bar.jaxb.model&amp;lt;/value&amp;gt;




        &amp;lt;/list&amp;gt;




    &amp;lt;/property&amp;gt;




&amp;lt;/bean&amp;gt;






=david=</description>
			<version>3.1 GA</version>
			<fixedVersion>3.1.1</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.http.client.HttpComponentsClientHttpResponse.java</file>
			<file type="M">org.springframework.http.client.SimpleClientHttpResponse.java</file>
			<file type="M">org.springframework.http.client.BufferingClientHttpResponseWrapper.java</file>
			<file type="M">org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.java</file>
			<file type="M">org.springframework.http.client.ClientHttpResponse.java</file>
			<file type="M">org.springframework.http.client.CommonsClientHttpResponse.java</file>
			<file type="M">org.springframework.http.HttpStatusTests.java</file>
			<file type="M">org.springframework.http.HttpStatus.java</file>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2MarshallerTests.java</file>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2Marshaller.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">9197</link>
			<link type="Duplicate" description="is duplicated by">9206</link>
		</links>
	</bug>
	<bug id="6752" opendate="2010-01-22 03:04:38" fixdate="2012-01-23 05:33:25" resolution="Fixed">
		<buginformation>
			<summary>RestTemplate throws IllegalArgumentException when HTTP status is not in the HttpStatus enum </summary>
			<description>Using RestTemplate to connect to a server that occasionally throws HTTP Status of 420, I am getting IllegalArgumentExceptions when accessing the HttpStatus object in my implementation of the ResponseErrorHandler interface.  When I removed that, and started pulling the status from the Headers directly, RestTemplate started throwing errors due to the logger.warn call in RestTemplate.handleResponseError().  I&amp;amp;apos;ve gotten around this by not using the HttpStatus enum (getting status from the HttpHeaders directly) and by turning up the log level for RestTemplate to ERROR.  Shouldn&amp;amp;apos;t this support any HTTP status value?</description>
			<version>3.0 GA</version>
			<fixedVersion>3.0.1, 3.1.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.http.HttpStatus.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">9068</link>
			<link type="Duplicate" description="is duplicated by">9311</link>
			<link type="Relate" description="relates to">9406</link>
		</links>
	</bug>
	<bug id="9068" opendate="2012-01-29 09:46:16" fixdate="2012-01-30 06:08:41" resolution="Duplicate">
		<buginformation>
			<summary>Implementation of HttpStatus as an enumeration precludes other status codes</summary>
			<description>I&amp;amp;apos;m trying to implement RFC 2324 but cannot return HTTP response code 418 because it&amp;amp;apos;s not defined in the HttpStatus enumeration.
More generally, the enumeration of specific status values precludes the use of any others.</description>
			<version>3.1 GA</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.http.HttpStatus.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6752</link>
		</links>
	</bug>
	<bug id="9074" opendate="2012-01-30 23:00:17" fixdate="2012-02-02 09:01:27" resolution="Duplicate">
		<buginformation>
			<summary>Spring MVC resources handler generates a 500 internal error when accessing a directory resource</summary>
			<description>Would expect a 404 not a 500. Here is an example:






java.io.FileNotFoundException: Could not open ServletContext resource [/static/libs/webshims/1.8.7]




	at org.springframework.web.context.support.ServletContextResource.getInputStream(ServletContextResource.java:118)




	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.writeContent(ResourceHttpRequestHandler.java:240)




	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:141)




	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:49)




	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:900)





</description>
			<version>3.1 GA</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.context.support.ServletContextResource.java</file>
			<file type="M">org.springframework.web.portlet.context.PortletContextResource.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">9067</link>
		</links>
	</bug>
	<bug id="9067" opendate="2012-01-29 06:09:07" fixdate="2012-02-07 01:41:50" resolution="Complete">
		<buginformation>
			<summary>ServletContextResource.isReadable() returns "true" for directories</summary>
			<description>Consider this configuration:






&amp;lt;mvc:resources mapping="/static/**" location="/WEB-INF/resources/immutable/"/&amp;gt;






The resource directory /WEB-INF/resources/immutable/ contains several files and subdirectories. One subdirectory is called images.
A browser request to /static/nonexistingfile.png results in a 404 HTTP error. But a request to /static/images (existing directory, without a file name specified) results in a FileNotFoundException:






java.io.FileNotFoundException: Could not open ServletContext resource [/WEB-INF/resources/immutable/images]




        at org.springframework.web.context.support.ServletContextResource.getInputStream(ServletContextResource.java:118) ~[spring-web-3.1.0.RELEASE.jar:3.1.0.RELEASE]




        at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.writeContent(ResourceHttpRequestHandler.java:240) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]




        at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:141) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]




        at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:49) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]




        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:900) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]




        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]




        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]




        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]




        at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) ~[servlet-api.jar:na]




        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722) ~[servlet-api.jar:na]






I think the getResource(HttpServletRequest) method in ResourceHttpRequestHandler should also check if the requested resources is a File.
On a high volume website this can cause tons of FileNotFoundExceptions due to robot visits. This is why I classified this issue with major priority.</description>
			<version>3.1 GA</version>
			<fixedVersion>3.1.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.context.support.ServletContextResource.java</file>
			<file type="M">org.springframework.web.portlet.context.PortletContextResource.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">9074</link>
		</links>
	</bug>
	<bug id="9030" opendate="2012-01-16 07:32:16" fixdate="2012-02-08 07:28:35" resolution="Complete">
		<buginformation>
			<summary>javax.Provider Spring support doesn&amp;apos;t work for collections</summary>
			<description>Let&amp;amp;apos;s have this following class:






@Component




public class TestClass {




    private List&amp;lt;RelatedClass2&amp;gt; propertyRelatedClasses;














    public List&amp;lt;RelatedClass2&amp;gt; getPropertyRelatedClasses() {




        return propertyRelatedClasses;




    }














    @Inject




    public void setPropertyRelatedClasses(Provider&amp;lt;List&amp;lt;RelatedClass2&amp;gt;&amp;gt; propertyRelatedClassesProvider) {




        this.propertyRelatedClasses = propertyRelatedClassesProvider.get();




    }




}









I want to inject a {{List}} of all existing instances of type {{RelatedClass2}} using a Provider. What I get is:











...
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [java.lang.Object] is defined: expected single matching bean but found 15: relatedClass1, 2b, 2a, org.springframework.context.annotation.internalConfigurationAnnotationProcessor, org.springframework.context.annotation.internalAutowiredAnnotationProcessor, org.springframework.context.annotation.internalRequiredAnnotationProcessor, org.springframework.context.annotation.internalCommonAnnotationProcessor, org.springframework.context.annotation.internalPersistenceAnnotationProcessor, org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0, environment, systemProperties, systemEnvironment, importRegistry, messageSource, applicationEventMulticaster
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:800)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectFactory.getObject(DefaultListableBeanFactory.java:1023)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyProvider.get(DefaultListableBeanFactory.java:1038)
        at com.gooddata.connectors.restapi.controller.springtest.TestClass.setPropertyRelatedClasses(TestClass.java:25)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)











The 





2a





 and 





2b











 beans are of type RelatedClass2.</description>
			<version>3.1 GA</version>
			<fixedVersion>3.1.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.core.MethodParameter.java</file>
			<file type="M">org.springframework.beans.factory.config.DependencyDescriptor.java</file>
			<file type="M">org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.java</file>
			<file type="M">org.springframework.beans.factory.support.DefaultListableBeanFactory.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">9092</link>
		</links>
	</bug>
	<bug id="9092" opendate="2012-02-06 03:45:24" fixdate="2012-02-09 06:42:25" resolution="Duplicate">
		<buginformation>
			<summary>Injecting / autowiring collection provider doen&amp;apos;t work</summary>
			<description>I implement contributions for my application and I found inconsistent behaviour for Provider/ObjectFactory. There are defined classes for different contributions:






@Contribute("rest")




@Named("bean-contrib2a")




public class Contrib2A implements ContribRest { ... }









@Contribute("rest")




@Named("bean-contrib2b")




public class Contrib2B { ... }









@Contribute("non-rest")




@Named("bean-contrib3a")




public class Contrib3A implements ContribRest { ... }









@Contribute("non-rest")




@Named("bean-contrib3b")




public class Contrib3B { ... }






Code to show injecting scenario looks like that:






@Named("applicationRest")




public class ApplicationRest extends Application {









    private List&amp;lt;ContribRest&amp;gt; contrib2;




    private List&amp;lt;ContribRest&amp;gt; contrib4;









    private ObjectFactory&amp;lt;List&amp;lt;ContribRest&amp;gt;&amp;gt; ofContrib2;




    private ObjectFactory&amp;lt;List&amp;lt;ContribRest&amp;gt;&amp;gt; ofContrib4;









    private Provider&amp;lt;List&amp;lt;ContribRest&amp;gt;&amp;gt; pvdContrib2;




    private Provider&amp;lt;List&amp;lt;ContribRest&amp;gt;&amp;gt; pvdContrib4;









    @Inject




    public void setContrib2(@Contribute("rest") List&amp;lt;ContribRest&amp;gt; contrib2) {




        this.contrib2 = contrib2;




    }









    @Autowired(required = false)




    public void setContrib4(@Contribute("other") List&amp;lt;ContribRest&amp;gt; contrib4) {




        this.contrib4 = contrib4;




    }









    @Inject




    public void setOfContrib2(@Contribute("rest") ObjectFactory&amp;lt;List&amp;lt;ContribRest&amp;gt;&amp;gt; ofContrib2) {




        this.ofContrib2 = ofContrib2;




    }









    @Autowired(required = false)




    public void setOfContrib4(@Contribute("other") ObjectFactory&amp;lt;List&amp;lt;ContribRest&amp;gt;&amp;gt; ofContrib4) {




        this.ofContrib4 = ofContrib4;




    }









    @Inject




    public void setPvdContrib2(@Contribute("rest") Provider&amp;lt;List&amp;lt;ContribRest&amp;gt;&amp;gt; pvdContrib2) {




        this.pvdContrib2 = pvdContrib2;




    }









    @Autowired(required = false)




    public void setPvdContrib4(@Contribute("other") Provider&amp;lt;List&amp;lt;ContribRest&amp;gt;&amp;gt; pvdContrib4) {




        this.pvdContrib4 = pvdContrib4;




    }






Injection finish with that result:






INFO contrib2=[Contrib2A@51a19458] -




INFO contrib4=null




ERROR ofContrib2=No unique bean of type [java.lang.Object] is defined: expected single matching bean but found 2: [bean-contrib2b, bean-contrib2a]




INFO ofContrib4=null




ERROR pvdContrib2=No unique bean of type [java.lang.Object] is defined: expected single matching bean but found 2: [bean-contrib2b, bean-contrib2a] - 




INFO pvdContrib4=null











Injecting list looks correct - classes with other contribution and type are filtered and only Contrib2A is injected. 
Unfortunately injecting Provider or ObjectFactory tries to inject List a not all beans for this list and it looks as a bug.
Maybe you can provide alternative way to how can I provide this list with all instances contributed (scanned) without manually defining list in XML.</description>
			<version>3.1 GA</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.core.MethodParameter.java</file>
			<file type="M">org.springframework.beans.factory.config.DependencyDescriptor.java</file>
			<file type="M">org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.java</file>
			<file type="M">org.springframework.beans.factory.support.DefaultListableBeanFactory.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">9030</link>
		</links>
	</bug>
	<bug id="8992" opendate="2012-01-04 09:24:44" fixdate="2012-02-09 10:33:21" resolution="Complete">
		<buginformation>
			<summary>@ActiveProfiles are not cascaded down to contexts loaded via @ImportResource</summary>
			<description>Given:






@RunWith(SpringJUnit4ClassRunner.class)




@ActiveProfiles(profiles = "test")




@ContextConfiguration(classes = MyClass.class)




@ImportResource("/appContext.xml")




public class MyClass {




  @Autowired




  private ProfileSpecificResource resource;









  @Bean




  public String aBean() {...}









  @Test




  public void aTest() {...}




}






Spring is not cascading/passing through the active profile(s) down to the imported resource (where profile specific beans are defined).
If the tests are invoked with the -Dspring.profiles.active=test argument, the tests run as expected.</description>
			<version>3.1 GA</version>
			<fixedVersion>3.1.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.context.annotation.ConfigurationClassPostProcessor.java</file>
			<file type="M">org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">9046</link>
			<link type="Relate" description="relates to">8393</link>
		</links>
	</bug>
	<bug id="8889" opendate="2011-11-30 15:41:04" fixdate="2012-02-14 05:03:55" resolution="Complete">
		<buginformation>
			<summary>QuartzJobBean doesn&amp;apos;t work with Quartz 2.0 at runtime</summary>
			<description>Having put RC2 to work and testing out the fix for SPR-8775 I now realise there&amp;amp;apos;s another problem. When the job I configured fires, I get the following exception2011-11-30 23:30:00,073 ERROR [JobRunShell] Job DEFAULT.job.reload.profiles threw an unhandled Exception: 
java.lang.IncompatibleClassChangeError: Found interface org.quartz.JobExecutionContext, but class was expected
        at org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:79)
        at org.quartz.core.JobRunShell.run(JobRunShell.java:213)
        at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:557)
2011-11-30 23:30:00,075 ERROR [ErrorLogger] Job (DEFAULT.job.reload.profiles threw an exception.
org.quartz.SchedulerException: Job threw an unhandled exception. [See nested exception: java.lang.IncompatibleClassChangeError: Found interface org.quartz.JobExecutionContext, but class was expected]
        at org.quartz.core.JobRunShell.run(JobRunShell.java:224)
        at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:557)
Caused by: java.lang.IncompatibleClassChangeError: Found interface org.quartz.JobExecutionContext, but class was expected
        at org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:79)
        at org.quartz.core.JobRunShell.run(JobRunShell.java:213)
        ... 1 more
Configuration for the job is:&amp;lt;bean id="profileService.schedulerFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"&amp;gt;
		&amp;lt;property name="triggers"&amp;gt;
			&amp;lt;list&amp;gt;
                &amp;lt;bean class="org.quartz.impl.triggers.CronTriggerImpl"&amp;gt;
                    &amp;lt;property name="name" value="job.reload.profiles.trigger" /&amp;gt;
                    &amp;lt;property name="jobName" value="job.reload.profiles"/&amp;gt;
                    &amp;lt;property name="jobGroup" value="DEFAULT" /&amp;gt;
                    &amp;lt;!-- run every 10 mins --&amp;gt;
                    &amp;lt;property name="cronExpression" value="0 0,10,20,30,40,50 * * * ?" /&amp;gt;
                &amp;lt;/bean&amp;gt;
			&amp;lt;/list&amp;gt;
		&amp;lt;/property&amp;gt;
        &amp;lt;property name="jobDetails"&amp;gt;
            &amp;lt;list&amp;gt;
                &amp;lt;bean class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"&amp;gt;
                    &amp;lt;property name="targetObject" ref="profileService"/&amp;gt;
                    &amp;lt;property name="targetMethod" value="reloadProfiles"/&amp;gt;
                    &amp;lt;property name="concurrent" value="false"/&amp;gt;
                    &amp;lt;property name="name" value="job.reload.profiles"/&amp;gt;
                    &amp;lt;property name="group" value="DEFAULT" /&amp;gt;
                &amp;lt;/bean&amp;gt;
            &amp;lt;/list&amp;gt;
        &amp;lt;/property&amp;gt;
	&amp;lt;/bean&amp;gt;
I assume that this is a build issue for the Spring framework? Will there need to be a separate package and so on for Quartz 2, like Hibernate4</description>
			<version>3.1 RC2</version>
			<fixedVersion>3.1.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.java</file>
			<file type="M">org.springframework.scheduling.quartz.QuartzJobBean.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">8887</link>
		</links>
	</bug>
	<bug id="9046" opendate="2012-01-23 05:22:36" fixdate="2012-02-20 08:10:46" resolution="Duplicate">
		<buginformation>
			<summary>@ActiveProfiles not taken into account for @ImportResource-imported XML context definitions from an @Configuration context definition</summary>
			<description>When using @ActiveProfiles to activate certain profiles in a test that uses AnnotationConfigContextLoader to load a @Configuration context definition which imports XML application context definitions using @ImportResource, the active profiles are not considered when loading the XML context definition.
See the attached files for a test reproducing the problem. This test fails with the following error:
org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [test.ContextLoadingProblem$Bar] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: 
{@org.springframework.beans.factory.annotation.Autowired(required=true)}

Note that if you use XML throughout (i.e. import one XML context definition from another), the problem does not arise.</description>
			<version>3.1 GA</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.context.annotation.ConfigurationClassPostProcessor.java</file>
			<file type="M">org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">8992</link>
			<link type="Relate" description="relates to">8393</link>
		</links>
	</bug>
	<bug id="5569" opendate="2009-03-12 04:49:14" fixdate="2012-02-21 11:21:45" resolution="Duplicate">
		<buginformation>
			<summary>not singleton StringBeans</summary>
			<description>Bean definition:
&amp;lt;bean id="test" singleton="false" class="java.lang.String"&amp;gt;
   &amp;lt;constructor-arg&amp;gt;
        &amp;lt;value&amp;gt;test&amp;lt;/value&amp;gt;
   &amp;lt;/constructor-arg&amp;gt;
&amp;lt;/bean&amp;gt;
code:
Object stringBean1 = ctx.getBean("test")
Object stringBean2 = ctx.getBean("test")
The first reading of the bean is ok.
The second reading fails because the system interprets the bean as java.lang.StringBuilder.</description>
			<version>2.0.4</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.beans.factory.support.ConstructorResolver.java</file>
			<file type="M">org.springframework.beans.factory.DefaultListableBeanFactoryTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">7084</link>
		</links>
	</bug>
	<bug id="9197" opendate="2012-03-04 03:13:44" fixdate="2012-03-08 09:09:53" resolution="Duplicate">
		<buginformation>
			<summary>HTTP response code 308</summary>
			<description>RestTemplate cannot return HTTP response code 308 because it&amp;amp;apos;s not defined in the HttpStatus enumeration.
It&amp;amp;apos;s required for resumable POST/PUT HTTP requests in HTTP/1.0 (http://code.google.com/p/gears/wiki/ResumableHttpRequestsProposal)</description>
			<version>3.1 GA</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.http.client.HttpComponentsClientHttpResponse.java</file>
			<file type="M">org.springframework.http.client.SimpleClientHttpResponse.java</file>
			<file type="M">org.springframework.http.client.BufferingClientHttpResponseWrapper.java</file>
			<file type="M">org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.java</file>
			<file type="M">org.springframework.http.client.ClientHttpResponse.java</file>
			<file type="M">org.springframework.http.client.CommonsClientHttpResponse.java</file>
			<file type="M">org.springframework.http.HttpStatusTests.java</file>
			<file type="M">org.springframework.http.HttpStatus.java</file>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2MarshallerTests.java</file>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2Marshaller.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">8986</link>
		</links>
	</bug>
	<bug id="9206" opendate="2012-03-06 06:33:12" fixdate="2012-03-08 09:11:31" resolution="Duplicate">
		<buginformation>
			<summary>Add ClasspathScanningJaxb2Marshaller for spring OXM</summary>
			<description>Having to define every annotated class with 
&amp;lt;oxm:class-to-be-bound 
is tedious.  Would it be possible to add something like the following as part of the framework?
http://springinpractice.com/2011/12/29/its-back-the-classpathscanningjaxb2marshaller/
http://www.walgemoed.org/2010/12/jaxb2-spring-ws/</description>
			<version>3.1.1</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.http.client.HttpComponentsClientHttpResponse.java</file>
			<file type="M">org.springframework.http.client.SimpleClientHttpResponse.java</file>
			<file type="M">org.springframework.http.client.BufferingClientHttpResponseWrapper.java</file>
			<file type="M">org.springframework.http.client.InterceptingClientHttpRequestFactoryTests.java</file>
			<file type="M">org.springframework.http.client.ClientHttpResponse.java</file>
			<file type="M">org.springframework.http.client.CommonsClientHttpResponse.java</file>
			<file type="M">org.springframework.http.HttpStatusTests.java</file>
			<file type="M">org.springframework.http.HttpStatus.java</file>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2MarshallerTests.java</file>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2Marshaller.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">8986</link>
		</links>
	</bug>
	<bug id="5584" opendate="2009-03-19 10:27:06" fixdate="2012-03-08 09:16:58" resolution="Duplicate">
		<buginformation>
			<summary>Spel parser is not able to resolve bean id variable when it is passed as parameter to a static method.</summary>
			<description>&amp;lt;bean id="A" class="..."&amp;gt;
   &amp;lt;property name="a" value="4"/&amp;gt;
&amp;lt;/bean&amp;gt;
&amp;lt;bean id="B" class="..."&amp;gt;
   &amp;lt;property name="b" value=" #
{T(Math).sqrt(4)}
"/&amp;gt;
&amp;lt;/bean&amp;gt;
The above bean definition works as expected resolving value of the property "b" to 2.
However, the following definition fails on expression parsing:
&amp;lt;bean id="B" class="..."&amp;gt;
   &amp;lt;property name="b" value=" #
{T(Math).sqrt(A.a)}
"/&amp;gt;
&amp;lt;/bean&amp;gt;
The error is:
Field or property &amp;amp;apos;A&amp;amp;apos; cannot be found on object of type &amp;amp;apos;java.lang.Math&amp;amp;apos; 
</description>
			<version>3.0 M2</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.expression.spel.ast.MethodReference.java</file>
			<file type="M">org.springframework.expression.spel.EvaluationTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6525</link>
		</links>
	</bug>
	<bug id="8178" opendate="2011-04-02 18:45:07" fixdate="2012-03-19 04:01:28" resolution="Duplicate">
		<buginformation>
			<summary>Expose handler method when BindException is thrown from HandlerMethodInvoker</summary>
			<description>When using RequestMapping annotated controller methods, you can only have have access to the handler method if you have an Errors object as one of the method arguments, and perform error handling within the method.
This is not ideal for use cases where you want to remove boiler plate code and delegate handling of BindExceptions, but need to have access to the method that (would have been) executed. For example, we have an annotation on the controller method indicating what view the bind errors should be displayed on when a BindExcpetion occurs.
Since the annotation is on the controller method, we&amp;amp;apos;re currently having to perform some ugly reflection in the HandlerExceptionResolver that handles the BindException in order to extract the controller method for the request from the HandlerAdapter.
It would be preferable if we could have one of:

The handler method that would have been called exposed in the BindException (or even a subclassed "HandlerMethodBindException" or the like for the case when it fails from HandlerMethodInvoker)
Or the handler method exposed to the HandlerExceptionResolver itself (Though admittedly have no idea how this would work).
Or a (thread-bound) accessor method on AnnotationMethodHandlerAdapter that would return the last resolved controller method.
Or a public method in AnnotationMethodHandlerAdapter that accepts Object handler and HttpServletRequest request, and returns the Method object for the request (what we&amp;amp;apos;re currently doing, just with reflection).

</description>
			<version>3.0.3</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.format.support.FormattingConversionServiceTests.java</file>
			<file type="M">org.springframework.format.number.NumberFormattingTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">8124</link>
		</links>
	</bug>
	<bug id="6440" opendate="2009-11-24 20:08:41" fixdate="2012-03-20 06:29:29" resolution="Duplicate">
		<buginformation>
			<summary>Merge JdbcTemplate and SimpleJdbcTemplate, deprecate SimpleJdbcTemplate</summary>
			<description>Now that RowMapper offers parameterized types can we please abandon SimpleJdbcTemplate? It still lacks some functionality (e.g. fetch size) over JdbcTemplate so sometimes both are used.</description>
			<version>3.0 RC2</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.jdbc.core.simple.SimpleJdbcTemplate.java</file>
			<file type="M">org.springframework.jdbc.core.JdbcOperations.java</file>
			<file type="M">org.springframework.jdbc.core.simple.SimpleJdbcDaoSupport.java</file>
			<file type="M">org.springframework.jdbc.core.JdbcTemplate.java</file>
			<file type="M">org.springframework.jdbc.core.namedparam.SqlParameterSourceUtils.java</file>
			<file type="M">org.springframework.jdbc.core.simple.SimpleJdbcOperations.java</file>
			<file type="M">org.springframework.jdbc.core.JdbcTemplateTests.java</file>
			<file type="M">org.springframework.jdbc.core.metadata.CallMetaDataProvider.java</file>
			<file type="M">org.springframework.jdbc.core.simple.package-info.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6922</link>
		</links>
	</bug>
	<bug id="6856" opendate="2010-02-17 03:16:17" fixdate="2012-03-20 06:31:37" resolution="Duplicate">
		<buginformation>
			<summary>Could SimpleJdbcTemplate/Operations/DaoSupport be deprecated now?</summary>
			<description>The types SimpleJdbcDaoSupport (which extends JdbcDaoSupport), SimpleJdbcTemplate and SimpleJdbcOperations were introduced in Spring 2.0 to make life easier for Java 5 users.
Now that Spring 3.0 is Java5+ only, would it be worthwhile moving the methods and code from the SimpleJdbcXYZ types into the corresponding JbcXYZ types, and then deprecating the SimpleJdbcXYZ versions? Assuming that this can done in a backwards-compatible way, then the reasons for the separation are now purely historical.</description>
			<version>3.0 GA</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.jdbc.core.JdbcOperations.java</file>
			<file type="M">org.springframework.jdbc.core.JdbcTemplate.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6858</link>
		</links>
	</bug>
	<bug id="9051" opendate="2012-01-24 06:35:33" fixdate="2012-05-11 15:50:06" resolution="Cannot Reproduce">
		<buginformation>
			<summary>spring-test allows you to reference configuration classes that aren&amp;apos;t annotated with @Configuration</summary>
			<description>When a @ContextConfiguration test class references a config class missing a @Configuration annotation, @Bean dependencies are wired successfully but the bean lifecycle is not applied (no init methods are invoked, for example). Adding the missing @Configuration annotation solves the problem, however the problem and solution isn&amp;amp;apos;t obvious since wiring/injection appeared to work.
It would be better if an integration test failed-fast if you reference a config class with no @Configuration annotation.</description>
			<version>3.1 GA</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.test.context.junit4.profile.importresource.DefaultProfileAnnotationConfigTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">9479</link>
			<link type="Relate" description="is related to">9425</link>
			<link type="Relate" description="is related to">10369</link>
			<link type="Relate" description="is related to">10971</link>
			<link type="Supersede" description="is superseded by">9401</link>
		</links>
	</bug>
	<bug id="9479" opendate="2012-06-06 21:14:01" fixdate="2012-06-09 18:12:34" resolution="Duplicate">
		<buginformation>
			<summary>Missing @Configuration annotation will cause transaction not working</summary>
			<description>The Spring reference didn&amp;amp;apos;t mention that I MUST use @Configuration for the configuration class being imported. And I found that the bean could be created normally most of the time.
The case I found that if @Configuration is missing, transaction is not behave normally in some cases.
I have setup a simple program to illustrate this. Please refer to "readme.txt" for the running procedures. From the log, I have checked that the transaction commit command has been issued, but the end result is the value is not committed.
In the example, I have already used SingleConnectionDataSource, to avoid multiple database connection issue.
I have also tried to move the @EnableTransactionManagement and transactionManager() to other Spring Java Config class (no matter with/without @Configuration), but the problem still occurs.</description>
			<version>3.1.1</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.test.context.junit4.profile.importresource.DefaultProfileAnnotationConfigTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">9051</link>
		</links>
	</bug>
	<bug id="7278" opendate="2010-06-10 20:05:30" fixdate="2012-06-19 03:18:55" resolution="Won&apos;t Fix">
		<buginformation>
			<summary>@ResponseBody usage limitations</summary>
			<description>The recommended way to develop REST-style webservices is the usage of @ResponseBody annotation and HttpMessageConverter instead of generating a model and a view (ContentNegotiatingViewResolver etc.).
But there are some limitations, that make things hard to handle:

ExceptionResolver support
	
@RequestBody is only supported with @ExceptionHandler annotation. I need a centralized exception handling to generate a special error object as the return value. So I must wrote a method in each controller class to delegate to the centralized exception handler. I think the ExceptionResolver-interface is more like an AOP-approach, with no glue code.
ExceptionResolver also have some nice standard implementations like SimpleMappingExceptionResolver, where I can handle the returned HTTP status code very easy. This is also not supported by @ExceptionHandler out of the box


&amp;amp;apos;useNotAcceptableStatusCode&amp;amp;apos; from ContentNegotiatingViewResolver (so for some features, I must also configure view-handling)
	
simple and easy to use attribute to enable NOT_ACCEPTABLE Http Status code


missing option for enabling global @ResponseBody-like handling instead of annotate all methods (e.g. in AnnotationMethodHandlerAdapter)

I also would recommend the full HttpMessageConverter way (@RequestBody &amp;amp; @ResponseBody) without view handling, so it would be nice, if @ResponseBody has fewer limitations. Additionaly it would be great, if the documentation have some notes about the recommended way for webservice-only REST-style applications (with hints to the limitations above)</description>
			<version>3.0.2</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">8124</link>
			<link type="Related" description="is related to">7353</link>
		</links>
	</bug>
	<bug id="7650" opendate="2010-10-13 02:01:33" fixdate="2012-06-19 03:22:28" resolution="Duplicate">
		<buginformation>
			<summary>NPE in DefaultMessageListenerContainer while committing and no message was received</summary>
			<description>In the class AbstractPollingMessageListenerContainer used by DefaultMessageListenerContainer, if no message is received, the commit is called (this was added in 3.0.4)
But the session passed to 
                               commitIfNecessary(session, message);
is the wrong one.
Instead, the variable sessionToUse should be passed:
                               commitIfNecessary(sessionToUse, message);
This is the diff.
 3.0.4/AbstractPollingMessageListenerContainer.java       2010-08-18 13:41:34.000000000 +0200
+++ 3.0.5/AbstractPollingMessageListenerContainer.java        2010-10-13 10:12:38.505882405 +0200
@@ -351,7 +351,7 @@
                                }
                                noMessageReceived(invoker, sessionToUse);
                                // Nevertheless call commit, in order to reset the transaction timeout (if any).

commitIfNecessary(session, message);
+                               commitIfNecessary(sessionToUse, message);
                                // Indicate that no message has been received.
                                return false;
                        }

</description>
			<version>3.0.4</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.jms.listener.AbstractPollingMessageListenerContainer.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">7478</link>
		</links>
	</bug>
	<bug id="7191" opendate="2010-05-11 13:06:53" fixdate="2012-06-19 03:22:28" resolution="Duplicate">
		<buginformation>
			<summary>&lt;mvc:annotation-driven / &gt; should supports the attributes of setting customized HttpMessageConverter bean list</summary>
			<description>Currently, the &amp;lt;mvc:annotation-driven / &amp;gt; doesn&amp;amp;apos;t allow the HttpMessageConverters be customizable (It is read-only in AnnotationDrivenBeanDefinitionParser).
It is recommended to allow the MessageConverters be reference by external HttpMessageConverter beans list.</description>
			<version>3.0 GA</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.format.FormatterRegistry.java</file>
			<file type="M">org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser.java</file>
			<file type="M">org.springframework.format.support.FormattingConversionServiceFactoryBean.java</file>
			<file type="M">org.springframework.format.support.FormattingConversionService.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="relates to">7504</link>
			<link type="Relate" description="is related to">7091</link>
		</links>
	</bug>
	<bug id="9742" opendate="2012-08-30 03:05:37" fixdate="2012-09-05 02:52:19" resolution="Duplicate">
		<buginformation>
			<summary>Jaxb2Marshaller should support JaxbElement&lt;T&gt;</summary>
			<description>





private boolean supportsInternal(Class&amp;lt;?&amp;gt; clazz, boolean checkForXmlRootElement) {






requires elements with @XmlRootElement - it should check for JaxbElement/support instances too, which carry the QName which provides the same info as a XmlRootElement.</description>
			<version>3.0.7</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2MarshallerTests.java</file>
			<file type="M">org.springframework.oxm.jaxb.Jaxb2Marshaller.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">7931</link>
		</links>
	</bug>
	<bug id="10026" opendate="2012-11-24 14:29:05" fixdate="2012-11-26 08:28:25" resolution="Duplicate">
		<buginformation>
			<summary>Spring eats @PathVariable part after last dot</summary>
			<description>@RequestMapping(value = "/
{var}
", method = RequestMethod.GET)
public String show(@PathVariable String var, Model m) {
    System.out.println(var);
}
for url: "/hello.anything" outputs "hello"
for url: "/hello.anything.else" outputs "hello.anything"</description>
			<version>3.1 GA</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.HeadersRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.RequestMappingInfo.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.ParamsRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.UriTemplateServletAnnotationControllerTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6164</link>
		</links>
	</bug>
	<bug id="6719" opendate="2010-01-19 11:09:35" fixdate="2013-07-09 03:05:45" resolution="Duplicate">
		<buginformation>
			<summary>CommonsClientHttpRequestFactory getHttpClient() returns HttpClient from Commons HttpClient 3.x which has been EOL&amp;apos;d</summary>
			<description>I need to extend CommonsClientHttpRequestFactory and override getHttpClient() in order to use RestTemplate(ClientHttpRequestFactory requestFactory) to make authenticated restful web service calls.  Unfortunately, getHttpClient() returns HttpClient from Commons HttpClient 3.x which has been end-of-life&amp;amp;apos;d (EOL) and is no longer supported.  The CommonsClientHttpRequestFactory and in turn RestTemplate need to use the supported HttpCore 4.x and HttpClient 4.x libraries.</description>
			<version>3.0 GA</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.http.client.CommonsClientHttpResponse.java</file>
			<file type="M">org.springframework.web.client.RestTemplateIntegrationTests.java</file>
			<file type="M">org.springframework.http.client.CommonsClientHttpRequest.java</file>
			<file type="M">org.springframework.http.client.CommonsClientHttpRequestFactory.java</file>
			<file type="M">org.springframework.http.client.AbstractHttpRequestFactoryTestCase.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6180</link>
			<link type="Duplicate" description="is duplicated by">7383</link>
			<link type="Duplicate" description="is duplicated by">7424</link>
			<link type="Related" description="is related to">7331</link>
		</links>
	</bug>
	<bug id="2657" opendate="2006-09-29 00:01:15" fixdate="2014-05-15 01:45:47" resolution="Duplicate">
		<buginformation>
			<summary>There is no way to display success message(s).</summary>
			<description>There is no way to display success message(s) like struts&amp;amp;apos; ActionMessage. Spring should provide Messages inteface in a similar way of Errors and related tag libraries.</description>
			<version>3.0 RC2</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.bind.annotation.RequestMapping.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.RedirectAttributesMethodArgumentResolver.java</file>
			<file type="M">org.springframework.web.servlet.view.RedirectView.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.java</file>
			<file type="M">org.springframework.web.servlet.view.RedirectViewTests.java</file>
			<file type="M">org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser.java</file>
			<file type="M">org.springframework.web.method.support.HandlerMethodArgumentResolver.java</file>
			<file type="M">org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests.java</file>
			<file type="M">org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.ServletResponseMethodArgumentResolver.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.ServletRequestMethodArgumentResolverTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.RequestResponseBodyMethodProcessorTests.java</file>
			<file type="M">org.springframework.web.servlet.support.DefaultFlashMapManager.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.ViewMethodReturnValueHandler.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.DefaultMethodReturnValueHandlerTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.HttpEntityMethodProcessor.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.ModelAndViewMethodReturnValueHandlerTests.java</file>
			<file type="M">org.springframework.web.util.WebUtils.java</file>
			<file type="M">org.springframework.web.method.support.HandlerMethodReturnValueHandler.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.RequestPartMethodArgumentResolverTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.ServletResponseMethodArgumentResolverTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.java</file>
			<file type="M">org.springframework.web.servlet.FlashMapTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.RequestResponseBodyMethodProcessor.java</file>
			<file type="M">org.springframework.web.servlet.support.DefaultFlashMapManagerTests.java</file>
			<file type="M">org.springframework.web.method.support.ModelAndViewContainer.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.ModelAndViewMethodReturnValueHandler.java</file>
			<file type="M">org.springframework.web.util.WebUtilsTests.java</file>
			<file type="M">org.springframework.web.servlet.FlashMapManager.java</file>
			<file type="M">org.springframework.web.servlet.FlashMap.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.java</file>
			<file type="M">org.springframework.web.method.annotation.ModelFactory.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.HttpEntityMethodProcessorTests.java</file>
			<file type="M">org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParserTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.support.RedirectAttributesModelMapTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.support.RedirectAttributes.java</file>
			<file type="M">org.springframework.web.servlet.SmartView.java</file>
			<file type="M">org.springframework.web.servlet.support.RequestContextUtils.java</file>
			<file type="M">org.springframework.web.servlet.DispatcherServlet.java</file>
			<file type="M">org.springframework.web.servlet.view.RedirectViewUriTemplateTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.ParamsRequestCondition.java</file>
			<file type="D">org.springframework.web.servlet.mvc.support.RedirectModel.java</file>
			<file type="D">org.springframework.web.servlet.mvc.support.RedirectModelTests.java</file>
			<file type="D">org.springframework.web.servlet.mvc.method.annotation.support.RedirectModelMethodArgumentResolver.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.ViewMethodReturnValueHandlerTests.java</file>
			<file type="D">org.springframework.web.servlet.mvc.method.support.ResponseContext.java</file>
			<file type="D">org.springframework.web.servlet.mvc.method.support.RedirectResponse.java</file>
			<file type="M">org.springframework.web.method.annotation.SessionAttributesHandler.java</file>
			<file type="D">org.springframework.web.servlet.mvc.method.support.ViewResponse.java</file>
			<file type="M">org.springframework.web.method.annotation.InitBinderDataBinderFactoryTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver.java</file>
			<file type="D">org.springframework.web.servlet.support.FlashMapTests.java</file>
			<file type="M">org.springframework.web.method.annotation.support.ModelMethodProcessor.java</file>
			<file type="D">org.springframework.web.servlet.mvc.method.annotation.FlashAttributesServletTests.java</file>
			<file type="M">org.springframework.web.method.annotation.ModelFactoryTests.java</file>
			<file type="M">org.springframework.web.method.annotation.support.ModelAttributeMethodProcessor.java</file>
			<file type="D">org.springframework.web.bind.support.SimpleFlashStatus.java</file>
			<file type="D">org.springframework.web.method.annotation.FlashAttributesHandler.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.support.DefaultMethodReturnValueHandler.java</file>
			<file type="D">org.springframework.web.bind.support.FlashStatus.java</file>
			<file type="D">org.springframework.web.bind.annotation.FlashAttributes.java</file>
			<file type="D">org.springframework.web.method.annotation.HandlerSessionAttributeStoreTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests.java</file>
			<file type="D">org.springframework.web.servlet.mvc.method.annotation.ServletHandlerMethodTests.java</file>
			<file type="D">org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletHandlerMethodTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">6464</link>
		</links>
	</bug>
	<bug id="12661" opendate="2015-01-23 18:44:10" fixdate="2015-01-24 09:20:46" resolution="Duplicate">
		<buginformation>
			<summary>@TestExecutionListeners is not fully supported as a meta-annotation</summary>
			<description>Status Quo
When using TestNG and deriving a test from AbstractTestNGSpringContextTests, @TestExecutionListeners as a meta-annotation doesn&amp;amp;apos;t seem to be working.
Here&amp;amp;apos;s a little 3-class test:






Composed.java






@Target({TYPE, ANNOTATION_TYPE})




@Retention(RUNTIME)




@Documented




@TestExecutionListeners(listeners=MyTestExecutionListener.class, mergeMode=MergeMode.MERGE_WITH_DEFAULTS)




public @interface Composed {




}












MyTestExecutionListener.java






public class MyTestExecutionListener extends AbstractTestExecutionListener {




	private static final Logger logger = LoggerFactory.getLogger( MyTestExecutionListener.class );




	




	@Override




	public void prepareTestInstance( final TestContext testContext ) throws Exception {




		logger.trace( "prepareTestInstance()" );




	}









}












Experiment.java






@ContextConfiguration




@Composed




public class Experiment extends AbstractTestNGSpringContextTests {




	@Configuration




	static class Configurer {




		@Bean




		public Object object() {




			return new Object();




		}




	}




	




	@Test




	public void aTest() {




	}




}






Here&amp;amp;apos;s some output when this is run:






Output






[org.springframework.test.context.BootstrapUtils] - Instantiating TestContextBootstrapper from class [org.springframework.test.context.support.DefaultTestContextBootstrapper]




[org.springframework.test.context.support.ContextLoaderUtils] - Retrieved @ContextConfiguration attributes [{name=, value=[], classes=[], loader=interface org.springframework.test.context.ContextLoader, locations=[], initializers=[], inheritLocations=true, inheritInitializers=true}] for declaring class [com.comcast.cpt.test.Experiment].




[org.springframework.test.context.support.ContextLoaderUtils] - Resolved context configuration attributes: [ContextConfigurationAttributes@5a49cb8c declaringClass = &amp;amp;apos;com.comcast.cpt.test.Experiment&amp;amp;apos;, classes = &amp;amp;apos;{}&amp;amp;apos;, locations = &amp;amp;apos;{}&amp;amp;apos;, inheritLocations = true, initializers = &amp;amp;apos;{}&amp;amp;apos;, inheritInitializers = true, name = [null], contextLoaderClass = &amp;amp;apos;org.springframework.test.context.ContextLoader&amp;amp;apos;]




[org.springframework.test.context.support.DefaultTestContextBootstrapper] - Resolving ContextLoader for context configuration attributes [ContextConfigurationAttributes@5a49cb8c declaringClass = &amp;amp;apos;com.comcast.cpt.test.Experiment&amp;amp;apos;, classes = &amp;amp;apos;{}&amp;amp;apos;, locations = &amp;amp;apos;{}&amp;amp;apos;, inheritLocations = true, initializers = &amp;amp;apos;{}&amp;amp;apos;, inheritInitializers = true, name = [null], contextLoaderClass = &amp;amp;apos;org.springframework.test.context.ContextLoader&amp;amp;apos;]




[org.springframework.test.context.support.DefaultTestContextBootstrapper] - Using ContextLoader class [org.springframework.test.context.support.DelegatingSmartContextLoader] for test class [com.comcast.cpt.test.Experiment]




[org.springframework.test.context.support.DefaultTestContextBootstrapper] - Processing locations and classes for context configuration attributes [ContextConfigurationAttributes@5a49cb8c declaringClass = &amp;amp;apos;com.comcast.cpt.test.Experiment&amp;amp;apos;, classes = &amp;amp;apos;{}&amp;amp;apos;, locations = &amp;amp;apos;{}&amp;amp;apos;, inheritLocations = true, initializers = &amp;amp;apos;{}&amp;amp;apos;, inheritInitializers = true, name = [null], contextLoaderClass = &amp;amp;apos;org.springframework.test.context.ContextLoader&amp;amp;apos;]




[org.springframework.test.context.support.AbstractDelegatingSmartContextLoader] - Delegating to GenericXmlContextLoader to process context configuration [ContextConfigurationAttributes@5a49cb8c declaringClass = &amp;amp;apos;com.comcast.cpt.test.Experiment&amp;amp;apos;, classes = &amp;amp;apos;{}&amp;amp;apos;, locations = &amp;amp;apos;{}&amp;amp;apos;, inheritLocations = true, initializers = &amp;amp;apos;{}&amp;amp;apos;, inheritInitializers = true, name = [null], contextLoaderClass = &amp;amp;apos;org.springframework.test.context.ContextLoader&amp;amp;apos;].




[org.springframework.test.context.support.AbstractContextLoader] - Did not detect default resource location for test class [com.comcast.cpt.test.Experiment]: class path resource [com/comcast/cpt/test/Experiment-context.xml] does not exist




[org.springframework.test.context.support.AbstractContextLoader] - Could not detect default resource locations for test class [com.comcast.cpt.test.Experiment]: no resource found for suffixes {-context.xml}.




[org.springframework.test.context.support.AbstractDelegatingSmartContextLoader] - Delegating to AnnotationConfigContextLoader to process context configuration [ContextConfigurationAttributes@5a49cb8c declaringClass = &amp;amp;apos;com.comcast.cpt.test.Experiment&amp;amp;apos;, classes = &amp;amp;apos;{}&amp;amp;apos;, locations = &amp;amp;apos;{}&amp;amp;apos;, inheritLocations = true, initializers = &amp;amp;apos;{}&amp;amp;apos;, inheritInitializers = true, name = [null], contextLoaderClass = &amp;amp;apos;org.springframework.test.context.ContextLoader&amp;amp;apos;].




[org.springframework.test.context.support.AbstractDelegatingSmartContextLoader] - AnnotationConfigContextLoader detected default configuration classes for context configuration [ContextConfigurationAttributes@5a49cb8c declaringClass = &amp;amp;apos;com.comcast.cpt.test.Experiment&amp;amp;apos;, classes = &amp;amp;apos;{class com.comcast.cpt.test.Experiment$Configurer}&amp;amp;apos;, locations = &amp;amp;apos;{}&amp;amp;apos;, inheritLocations = true, initializers = &amp;amp;apos;{}&amp;amp;apos;, inheritInitializers = true, name = [null], contextLoaderClass = &amp;amp;apos;org.springframework.test.context.ContextLoader&amp;amp;apos;].




[org.springframework.test.context.support.ApplicationContextInitializerUtils] - Processing context initializers for context configuration attributes [ContextConfigurationAttributes@5a49cb8c declaringClass = &amp;amp;apos;com.comcast.cpt.test.Experiment&amp;amp;apos;, classes = &amp;amp;apos;{class com.comcast.cpt.test.Experiment$Configurer}&amp;amp;apos;, locations = &amp;amp;apos;{}&amp;amp;apos;, inheritLocations = true, initializers = &amp;amp;apos;{}&amp;amp;apos;, inheritInitializers = true, name = [null], contextLoaderClass = &amp;amp;apos;org.springframework.test.context.ContextLoader&amp;amp;apos;]




[org.springframework.test.context.support.ActiveProfilesUtils] - Could not find an &amp;amp;apos;annotation declaring class&amp;amp;apos; for annotation type [org.springframework.test.context.ActiveProfiles] and class [com.comcast.cpt.test.Experiment]









// notice this interesting line ...




[org.springframework.test.context.support.DefaultTestContextBootstrapper] - Retrieved @TestExecutionListeners attributes [{value=[class org.springframework.test.context.web.ServletTestExecutionListener,class org.springframework.test.context.support.DependencyInjectionTestExecutionListener,class org.springframework.test.context.support.DirtiesContextTestExecutionListener], listeners=[], inheritListeners=true, mergeMode=REPLACE_DEFAULTS}] for declaring class [com.comcast.cpt.test.Composed].









[org.springframework.test.context.support.DefaultTestContextBootstrapper] - Retrieved @TestExecutionListeners attributes [{value=[class org.springframework.test.context.web.ServletTestExecutionListener,class org.springframework.test.context.support.DependencyInjectionTestExecutionListener,class org.springframework.test.context.support.DirtiesContextTestExecutionListener], listeners=[], inheritListeners=true, mergeMode=REPLACE_DEFAULTS}] for declaring class [org.springframework.test.context.testng.AbstractTestNGSpringContextTests].




[org.springframework.test.context.support.DefaultTestContextBootstrapper] - Could not instantiate TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener]. Specify custom listener classes or make the default listener classes (and their required dependencies) available. Offending class: [javax/servlet/ServletContext]




[org.springframework.test.context.support.DefaultTestContextBootstrapper] - Could not instantiate TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener]. Specify custom listener classes or make the default listener classes (and their required dependencies) available. Offending class: [javax/servlet/ServletContext]




[org.springframework.test.context.support.DefaultTestContextBootstrapper] - Using TestExecutionListeners: [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@223dd567, org.springframework.test.context.support.DirtiesContextTestExecutionListener@9856ec1, org.springframework.test.context.support.DependencyInjectionTestExecutionListener@172a45c9, org.springframework.test.context.support.DirtiesContextTestExecutionListener@584b9b00]




[org.springframework.test.context.TestContextManager] - Registering TestExecutionListener: org.springframework.test.context.support.DependencyInjectionTestExecutionListener@223dd567




[org.springframework.test.context.TestContextManager] - Registering TestExecutionListener: org.springframework.test.context.support.DirtiesContextTestExecutionListener@9856ec1




[org.springframework.test.context.TestContextManager] - Registering TestExecutionListener: org.springframework.test.context.support.DependencyInjectionTestExecutionListener@172a45c9




[org.springframework.test.context.TestContextManager] - Registering TestExecutionListener: org.springframework.test.context.support.DirtiesContextTestExecutionListener@584b9b00




[TestNG] Running:




  /private/var/folders/h1/s64jf53x51gcgns7trlqc230074rk5/T/testng-eclipse--225524899/testng-customsuite.xml









[org.springframework.test.context.TestContextManager] - beforeTestClass(): class [com.comcast.cpt.test.Experiment]




[org.springframework.test.context.TestContextManager] - prepareTestInstance(): instance [com.comcast.cpt.test.Experiment@44875666]




[org.springframework.test.context.support.DependencyInjectionTestExecutionListener] - Performing dependency injection for test context [[DefaultTestContext@19264fa9 testClass = Experiment, testInstance = com.comcast.cpt.test.Experiment@44875666, testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@2237ed25 testClass = Experiment, locations = &amp;amp;apos;{}&amp;amp;apos;, classes = &amp;amp;apos;{class com.comcast.cpt.test.Experiment$Configurer}&amp;amp;apos;, contextInitializerClasses = &amp;amp;apos;[]&amp;amp;apos;, activeProfiles = &amp;amp;apos;{}&amp;amp;apos;, propertySourceLocations = &amp;amp;apos;{}&amp;amp;apos;, propertySourceProperties = &amp;amp;apos;{}&amp;amp;apos;, contextLoader = &amp;amp;apos;org.springframework.test.context.support.DelegatingSmartContextLoader&amp;amp;apos;, parent = [null]]]].




[org.springframework.test.context.support.AbstractDelegatingSmartContextLoader] - Delegating to AnnotationConfigContextLoader to load context from [MergedContextConfiguration@2237ed25 testClass = Experiment, locations = &amp;amp;apos;{}&amp;amp;apos;, classes = &amp;amp;apos;{class com.comcast.cpt.test.Experiment$Configurer}&amp;amp;apos;, contextInitializerClasses = &amp;amp;apos;[]&amp;amp;apos;, activeProfiles = &amp;amp;apos;{}&amp;amp;apos;, propertySourceLocations = &amp;amp;apos;{}&amp;amp;apos;, propertySourceProperties = &amp;amp;apos;{}&amp;amp;apos;, contextLoader = &amp;amp;apos;org.springframework.test.context.support.DelegatingSmartContextLoader&amp;amp;apos;, parent = [null]].




[org.springframework.test.context.support.AbstractGenericContextLoader] - Loading ApplicationContext for merged context configuration [[MergedContextConfiguration@2237ed25 testClass = Experiment, locations = &amp;amp;apos;{}&amp;amp;apos;, classes = &amp;amp;apos;{class com.comcast.cpt.test.Experiment$Configurer}&amp;amp;apos;, contextInitializerClasses = &amp;amp;apos;[]&amp;amp;apos;, activeProfiles = &amp;amp;apos;{}&amp;amp;apos;, propertySourceLocations = &amp;amp;apos;{}&amp;amp;apos;, propertySourceProperties = &amp;amp;apos;{}&amp;amp;apos;, contextLoader = &amp;amp;apos;org.springframework.test.context.support.DelegatingSmartContextLoader&amp;amp;apos;, parent = [null]]].




[org.springframework.test.context.support.AnnotationConfigContextLoader] - Registering annotated classes: {class com.comcast.cpt.test.Experiment$Configurer}




[org.springframework.core.io.support.SpringFactoriesLoader] - Loaded [org.springframework.beans.BeanInfoFactory] names: [org.springframework.beans.ExtendedBeanInfoFactory]




[org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate] - Storing ApplicationContext in cache under key [[MergedContextConfiguration@2237ed25 testClass = Experiment, locations = &amp;amp;apos;{}&amp;amp;apos;, classes = &amp;amp;apos;{class com.comcast.cpt.test.Experiment$Configurer}&amp;amp;apos;, contextInitializerClasses = &amp;amp;apos;[]&amp;amp;apos;, activeProfiles = &amp;amp;apos;{}&amp;amp;apos;, propertySourceLocations = &amp;amp;apos;{}&amp;amp;apos;, propertySourceProperties = &amp;amp;apos;{}&amp;amp;apos;, contextLoader = &amp;amp;apos;org.springframework.test.context.support.DelegatingSmartContextLoader&amp;amp;apos;, parent = [null]]]




[org.springframework.test.context.cache] - Spring test ApplicationContext cache statistics: [ContextCache@50b7c740 size = 1, hitCount = 0, missCount = 1, parentContextCount = 0]




[org.springframework.test.context.support.DependencyInjectionTestExecutionListener] - Performing dependency injection for test context [[DefaultTestContext@19264fa9 testClass = Experiment, testInstance = com.comcast.cpt.test.Experiment@44875666, testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@2237ed25 testClass = Experiment, locations = &amp;amp;apos;{}&amp;amp;apos;, classes = &amp;amp;apos;{class com.comcast.cpt.test.Experiment$Configurer}&amp;amp;apos;, contextInitializerClasses = &amp;amp;apos;[]&amp;amp;apos;, activeProfiles = &amp;amp;apos;{}&amp;amp;apos;, propertySourceLocations = &amp;amp;apos;{}&amp;amp;apos;, propertySourceProperties = &amp;amp;apos;{}&amp;amp;apos;, contextLoader = &amp;amp;apos;org.springframework.test.context.support.DelegatingSmartContextLoader&amp;amp;apos;, parent = [null]]]].




[org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate] - Retrieved ApplicationContext from cache with key [[MergedContextConfiguration@2237ed25 testClass = Experiment, locations = &amp;amp;apos;{}&amp;amp;apos;, classes = &amp;amp;apos;{class com.comcast.cpt.test.Experiment$Configurer}&amp;amp;apos;, contextInitializerClasses = &amp;amp;apos;[]&amp;amp;apos;, activeProfiles = &amp;amp;apos;{}&amp;amp;apos;, propertySourceLocations = &amp;amp;apos;{}&amp;amp;apos;, propertySourceProperties = &amp;amp;apos;{}&amp;amp;apos;, contextLoader = &amp;amp;apos;org.springframework.test.context.support.DelegatingSmartContextLoader&amp;amp;apos;, parent = [null]]]




[org.springframework.test.context.cache] - Spring test ApplicationContext cache statistics: [ContextCache@50b7c740 size = 1, hitCount = 1, missCount = 1, parentContextCount = 0]




[org.springframework.test.context.TestContextManager] - beforeTestMethod(): instance [com.comcast.cpt.test.Experiment@44875666], method [public void com.comcast.cpt.test.Experiment.aTest()]




[org.springframework.test.context.TestContextManager] - afterTestMethod(): instance [com.comcast.cpt.test.Experiment@44875666], method [public void com.comcast.cpt.test.Experiment.aTest()], exception [null]




[org.springframework.test.context.support.DirtiesContextTestExecutionListener] - After test method: context [DefaultTestContext@19264fa9 testClass = Experiment, testInstance = com.comcast.cpt.test.Experiment@44875666, testMethod = aTest@Experiment, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@2237ed25 testClass = Experiment, locations = &amp;amp;apos;{}&amp;amp;apos;, classes = &amp;amp;apos;{class com.comcast.cpt.test.Experiment$Configurer}&amp;amp;apos;, contextInitializerClasses = &amp;amp;apos;[]&amp;amp;apos;, activeProfiles = &amp;amp;apos;{}&amp;amp;apos;, propertySourceLocations = &amp;amp;apos;{}&amp;amp;apos;, propertySourceProperties = &amp;amp;apos;{}&amp;amp;apos;, contextLoader = &amp;amp;apos;org.springframework.test.context.support.DelegatingSmartContextLoader&amp;amp;apos;, parent = [null]]], class dirties context [false], class mode [null], method dirties context [false].




[org.springframework.test.context.support.DirtiesContextTestExecutionListener] - After test method: context [DefaultTestContext@19264fa9 testClass = Experiment, testInstance = com.comcast.cpt.test.Experiment@44875666, testMethod = aTest@Experiment, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@2237ed25 testClass = Experiment, locations = &amp;amp;apos;{}&amp;amp;apos;, classes = &amp;amp;apos;{class com.comcast.cpt.test.Experiment$Configurer}&amp;amp;apos;, contextInitializerClasses = &amp;amp;apos;[]&amp;amp;apos;, activeProfiles = &amp;amp;apos;{}&amp;amp;apos;, propertySourceLocations = &amp;amp;apos;{}&amp;amp;apos;, propertySourceProperties = &amp;amp;apos;{}&amp;amp;apos;, contextLoader = &amp;amp;apos;org.springframework.test.context.support.DelegatingSmartContextLoader&amp;amp;apos;, parent = [null]]], class dirties context [false], class mode [null], method dirties context [false].




[org.springframework.test.context.TestContextManager] - afterTestClass(): class [com.comcast.cpt.test.Experiment]




[org.springframework.test.context.support.DirtiesContextTestExecutionListener] - After test class: context [DefaultTestContext@19264fa9 testClass = Experiment, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@2237ed25 testClass = Experiment, locations = &amp;amp;apos;{}&amp;amp;apos;, classes = &amp;amp;apos;{class com.comcast.cpt.test.Experiment$Configurer}&amp;amp;apos;, contextInitializerClasses = &amp;amp;apos;[]&amp;amp;apos;, activeProfiles = &amp;amp;apos;{}&amp;amp;apos;, propertySourceLocations = &amp;amp;apos;{}&amp;amp;apos;, propertySourceProperties = &amp;amp;apos;{}&amp;amp;apos;, contextLoader = &amp;amp;apos;org.springframework.test.context.support.DelegatingSmartContextLoader&amp;amp;apos;, parent = [null]]], dirtiesContext [false].




[org.springframework.test.context.support.DirtiesContextTestExecutionListener] - After test class: context [DefaultTestContext@19264fa9 testClass = Experiment, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@2237ed25 testClass = Experiment, locations = &amp;amp;apos;{}&amp;amp;apos;, classes = &amp;amp;apos;{class com.comcast.cpt.test.Experiment$Configurer}&amp;amp;apos;, contextInitializerClasses = &amp;amp;apos;[]&amp;amp;apos;, activeProfiles = &amp;amp;apos;{}&amp;amp;apos;, propertySourceLocations = &amp;amp;apos;{}&amp;amp;apos;, propertySourceProperties = &amp;amp;apos;{}&amp;amp;apos;, contextLoader = &amp;amp;apos;org.springframework.test.context.support.DelegatingSmartContextLoader&amp;amp;apos;, parent = [null]]], dirtiesContext [false].







Analysis
In the above log output, it&amp;amp;apos;s clear that the listeners declared via @TestExecutionListeners on @Composed are somehow getting set to the listeners declared via @TestExecutionListeners on AbstractTestNGSpringContextTests.
</description>
			<version>4.1 GA</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.core.annotation.AnnotatedElementUtilsTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">11598</link>
		</links>
	</bug>
	<bug id="11598" opendate="2014-03-25 11:32:24" fixdate="2015-05-13 07:20:33" resolution="Complete">
		<buginformation>
			<summary>Favor more locally declared composed annotations over inherited annotations</summary>
			<description>Background
This issue picks up where SPR-11475 left off.

Status Quo
The implementations of AnnotatedElementUtils and (potentially) Spring&amp;amp;apos;s ASM-based annotation processing currently favor inherited annotations and inherited composed annotations over composed annotations that are declared closer to the starting class passed to getAnnotationAttributes(), getAllAnnotationAttributes(), isAnnotated(), etc.
See the examples and related discussion in SPR-11475 for details.

Deliverables

 Determine which use cases require special treatment with regard to annotation inheritance.
	
Known cases: @Profile and @Conditional


 Reinstate the changes originally introduced in AnnotatedElementUtils for SPR-11475 (i.e., set the searchClassHierarchy to true for all invocations of the internal process() method).
	
Search for SPR-11598 in source code for TODOs.


 Introduce special handling for the known special cases determined in deliverable #1, in order to ensure proper backwards compatibility.

</description>
			<version>4.0 GA</version>
			<fixedVersion>4.2 RC1</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.core.annotation.AnnotatedElementUtilsTests.java</file>
		</fixedFiles>
		<links>
			<link type="Depend" description="depends on">11475</link>
			<link type="Duplicate" description="is duplicated by">12661</link>
			<link type="Relate" description="relates to">10840</link>
			<link type="Relate" description="relates to">11511</link>
			<link type="Relate" description="is related to">13748</link>
			<link type="Relate" description="is related to">11595</link>
			<link type="Relate" description="is related to">12738</link>
			<link type="Relate" description="is related to">12749</link>
		</links>
	</bug>
	<bug id="14080" opendate="2016-03-22 23:24:59" fixdate="2016-03-24 13:17:04" resolution="Complete">
		<buginformation>
			<summary>DefaultCorsProcessor&amp;apos;s origin comparison is restrictive and inefficient</summary>
			<description>This plays in part with SPR-13691 but is more do to the nature of how DefaultCorsProcessor does its checks.
With the DefaultCorsProcessor auto on. It will always trip the check at line 71 "WebUtils.isSameOrigin(serverRequest)" of DefaultCorsProcessor even if I&amp;amp;apos;ve already dealt with CORS headers within my own filter beforehand. 
However this is not the core issue, an issue that I&amp;amp;apos;m dealing with now. Because this check uses the java.net.URI class to do its parsing its now requiring super strict Request URIs against the webapp. Which is resulting in a number of rejected requests against our app.
The other issue here isn&amp;amp;apos;t just the strict nature of URI but just the general use of it in the first place. Its way to overweight for a large number of things its being used for and results in slowness within the app.  As well as its suffers from the Charset lock issue at high concurrency. (Nice write-up from the Evernote team on that issue here https://blog.evernote.com/tech/2011/06/21/fast-string-handling-a-frayed-knot/)
Currently the only work around to this is to wrap the HttpServletRequest and hide the Origin header from above. So that the check on line 64 "!CorsUtils.isCorsRequest(request)" will pass and stop further processing. 
Ideally it would be great to be able to disable DefaultCorsProcessor at the very least. If anything for the nature of giving the developer the choice not making it for them. However the true solution would be to stop using URI for parsing just a host and port and use a simple regex or string token. As this would still let DefaultCorsProcessor be used.  </description>
			<version>4.2.5</version>
			<fixedVersion>4.2.6, 4.3 RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.util.UriComponentsBuilder.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">14248</link>
			<link type="Relate" description="relates to">13691</link>
			<link type="Relate" description="is related to">14305</link>
		</links>
	</bug>
	<bug id="14248" opendate="2016-05-04 22:26:16" fixdate="2016-05-05 15:01:10" resolution="Duplicate">
		<buginformation>
			<summary>Recent ServletServerHttpRequest.getURI() change breaks CORS requests with encoded characters</summary>
			<description>This change:  https://jira.spring.io/browse/SPR-13876  introduced a defect where request&amp;amp;apos;s with an origin header and where the request url contains query parameter character&amp;amp;apos;s that are typically encoded, trigger a URI formatting exception.
A plain Spring Web project with a no-op controller will reproduce this issue.  You must pass the origin header though, as this triggers the DefaultCorsProcessor to fully execute.  The call will work with a plain url and fail with a url with special characters:
works:  http://127.0.0.1:8080/demo/test?param=plain
fails:  http://127.0.0.1:8080/demo/test?param=^
The root exception:






java.net.URISyntaxException: Illegal character in query at index 39: http://127.0.0.1:8080/demo/test?param={}




	at java.net.URI$Parser.fail(URI.java:2848)




	at java.net.URI$Parser.checkChars(URI.java:3021)




	at java.net.URI$Parser.parseHierarchical(URI.java:3111)




	at java.net.URI$Parser.parse(URI.java:3053)




	at java.net.URI.&amp;lt;init&amp;gt;(URI.java:588)




	at org.springframework.http.server.ServletServerHttpRequest.getURI(ServletServerHttpRequest.java:96)




	at org.springframework.web.util.UriComponentsBuilder.fromHttpRequest(UriComponentsBuilder.java:282)




	at org.springframework.web.util.WebUtils.isSameOrigin(WebUtils.java:814)




	at org.springframework.web.cors.DefaultCorsProcessor.processRequest(DefaultCorsProcessor.java:71)




	at org.springframework.web.servlet.handler.AbstractHandlerMapping$CorsInterceptor.preHandle(AbstractHandlerMapping.java:503)




	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:134)




	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:954)




	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)




	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:968)




	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:859)




	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)




	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:844)




	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)






I tested this with Jetty 9.3.2 and 9.3.8, and it reproduced in both versions.
The exception is generated when the query parameter contains a curly brace or carat, but many other characters seem to work.  I assume that is simply an aspect of the URI encoding spec that I&amp;amp;apos;m less familiar with.</description>
			<version>4.2.5</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.util.UriComponentsBuilder.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">14080</link>
		</links>
	</bug>
	<bug id="14678" opendate="2016-09-08 09:32:04" fixdate="2016-09-08 13:08:20" resolution="Duplicate">
		<buginformation>
			<summary>@PathVariable will cut off the last point</summary>
			<description>When use @PathVariable like






 @RequestMapping(value = "/test/{test}", method = RequestMethod.GET)




    @ResponseBody




    public String test(@PathVariable("test") String test, HttpServletResponse response) throws IOException {




        System.out.println(test);




        return test;




    }






if let the test like 1.0.0.0.1  the test wil be 1.0.0.0 not expect </description>
			<version>4.2.5</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.HeadersRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.RequestMappingInfo.java</file>
			<file type="M">org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.ParamsRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition.java</file>
			<file type="M">org.springframework.web.servlet.mvc.annotation.UriTemplateServletAnnotationControllerTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">7632</link>
			<link type="Duplicate" description="duplicates">6164</link>
		</links>
	</bug>
</bugrepository>