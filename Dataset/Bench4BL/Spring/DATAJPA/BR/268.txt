LockModePopulatingMethodInterceptor leak causes OutOfMemoryError: PermGen spaceIn cases where locking is not externally set (like when invoking it form a non @Transactional call stack) org.springframework.data.jpa.repository.support.LockModeRepositoryPostProcessor.LockModePopulatingMethodIntercceptor.invoke(MethodInvocation) is registering the locking mode itself (with the target method as key) using org.springframework.transaction.support.TransactionSynchronizationManager.bindResource(Object, Object), but is not calling org.springframework.transaction.support.TransactionSynchronizationManager#unbindResource(Object) afterwards.
In environments where the classloaders are discarded but the threads are reused, like in any application or web server with a service thread pool and hot redeployments, the VM ends up running out of PermGen space since 
{@link java.lang.Thread#threadLocals} will keep a strong reference to the bound method keeping alive the otherwise unused class loader and all its, classes and objects graph.
Sorry about the test case, it was written in a rush.
Heap dump can be found here (18Mb): https://dl.dropbox.com/u/1249691/LockModeRepositoryPostProcessor_LockModePopulatingMethodIntercceptorMemoryLeakTest.zip