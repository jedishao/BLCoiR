<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="SGF">
	<bug id="46" opendate="2011-04-27 02:14:46" fixdate="2011-04-27 03:20:21" resolution="Duplicate">
		<buginformation>
			<summary>In the InstantiatorFactoryBean provide a way to disable registration distribution</summary>
			<description>The InstantiatorFactoryBean contains the following 
if (autoRegister) {
            for (Instantiator instantiator : list) 
{
                Instantiator.register(instantiator);
            }
        }
could this be changed so that we can provide a distribute flag to the Instantiator.register like so,
if (autoRegister) {
            for (Instantiator instantiator : list) 
{
                Instantiator.register(instantiator, distribute);
            }
        }</description>
			<version>1.0.0</version>
			<fixedVersion>1.0.1</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.serialization.InstantiatorFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.serialization.WiringInstantiator.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">39</link>
		</links>
	</bug>
	<bug id="81" opendate="2012-01-18 08:09:08" fixdate="2012-01-18 08:50:53" resolution="Fixed">
		<buginformation>
			<summary>use-bean-factory-locator attribute not parsed from the namespace</summary>
			<description>The use-bean-factory-locator attribute is not parsed from the namespace resulting in inability to disable BeanFactory lookup.</description>
			<version>1.1.0</version>
			<fixedVersion>1.1.1, 1.2.0.M1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.CacheParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.CacheNamespaceTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="89" opendate="2012-05-04 09:50:14" fixdate="2012-05-07 03:12:03" resolution="Fixed">
		<buginformation>
			<summary>Spring Gemfire Continuous Query Container Fails When Implementing the ContinuousQueryListener Interface</summary>
			<description>The Continuous Query Container calls the implementing class twice.  Once for the interface method and again for the handleEvent method (which doesn&amp;amp;apos;t exist)
Attached is a STS project that demonstrates the issue.
First start the quickstart.CacheServerApp continuous-query-cache-context.xml
Second start the quickstart.CqClientApp then follow the direction on screen. 
Snippet of expected output:
*************************************
This client will update the server cache and its CQ listener will
get events for any changes to the CQ result set.
CQ events provide the base operation (the change to the server&amp;amp;apos;s cache),
and the query operation (the change to the CQ&amp;amp;apos;s result set).
Press Enter to continue.
___________________________________________________________________
CQ looking for entries whose value is &amp;amp;apos;ClientFirstValue&amp;amp;apos;...
Putting key1 with value &amp;amp;apos;ClientFirstValue&amp;amp;apos;
This satisfies the query, so the CqListener will report a query
creation event from the server cache.
    CqListener:
    Received cq event for entry: key1, ClientFirstValue
    With BaseOperation = Create and QueryOperation = Create
May 4, 2012 11:39:22 AM org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter handleListenerException
SEVERE: Listener execution failed
java.lang.IllegalArgumentException: Cannot find a suitable method named quickstart.ContinuousQueryListenerImpl#handleEvent - is the method public and has the proper arguments?
	at org.springframework.util.Assert.isTrue(Assert.java:65)
	at org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter$MethodInvoker.&amp;lt;init&amp;gt;(ContinuousQueryListenerAdapter.java:136)
	at org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter.onEvent(ContinuousQueryListenerAdapter.java:278)
	at org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer.executeListener(ContinuousQueryListenerContainer.java:234)
	at org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer$1.run(ContinuousQueryListenerContainer.java:416)
	at java.lang.Thread.run(Thread.java:680)</description>
			<version>1.1.1</version>
			<fixedVersion>1.2.0.RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter.java</file>
			<file type="M">org.springframework.data.gemfire.listener.adapter.QueryListenerAdapterTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="92" opendate="2012-05-07 04:02:06" fixdate="2012-05-07 04:17:23" resolution="Fixed">
		<buginformation>
			<summary>GemfireRepositoryFactory should report missing Region configuration</summary>
			<description>GemfireRepositoryFactory currently throws a NullPointerException in case no Region instance can be found for the domain class the repository shall be created for. We should throw a more meaningful exception here to indicate the region configuration is missing.</description>
			<version>1.2.0.M1</version>
			<fixedVersion>1.2.0.RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryIntegrationTests.java</file>
			<file type="M">org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory.java</file>
		</fixedFiles>
	</bug>
	<bug id="101" opendate="2012-06-29 09:50:09" fixdate="2012-07-24 10:24:12" resolution="Complete">
		<buginformation>
			<summary>The repository deleteall() method only works for replicated regions</summary>
			<description>The repository deleteAll() method calls the gemfire region clear() method which is unsupported for partitioned regions.  As there does not yet exist a removeAll() in GemFire, the proper implementation should be to individually delete all entries in the region specified by the repository.</description>
			<version>1.2.0.M1</version>
			<fixedVersion>1.2.0.RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.repository.support.AbstractGemfireRepositoryFactoryIntegrationTests.java</file>
			<file type="M">org.springframework.data.gemfire.repository.sample.Person.java</file>
			<file type="M">org.springframework.data.gemfire.repository.sample.PersonRepository.java</file>
			<file type="M">org.springframework.data.gemfire.repository.support.SimpleGemfireRepository.java</file>
		</fixedFiles>
	</bug>
	<bug id="22" opendate="2010-10-04 15:56:50" fixdate="2012-08-09 08:34:29" resolution="Duplicate">
		<buginformation>
			<summary>Error when using Region with keyConstraint = int and @Autowire by type</summary>
			<description>When you set the keyConstraint on a region, like this:






&amp;lt;bean class="org.springframework.data.gemfire.RegionFactoryBean" name="data"&amp;gt;




  ...




  &amp;lt;property name="attributes"&amp;gt;




	  &amp;lt;bean class="org.springframework.data.gemfire.RegionAttributesFactory"&amp;gt;




		  &amp;lt;property name="keyConstraint" value="java.lang.Integer" /&amp;gt;




			...




    &amp;lt;/bean&amp;gt;




  &amp;lt;/property&amp;gt;




&amp;lt;/bean&amp;gt;






and try to autowire that region BY TYPE into a test, like so:






@Autowired




Region region;






Then you get the exception (from DefaultListableBeanFactory, line 761 in Spring 3.0.4)






Key type [class java.lang.Integer] of map [com.gemstone.gemfire.cache.Region] must be assignable to [java.lang.String]






This is because the bean factory thinks that the Region is a Map (well, it is) but for some reason needs the key type to be assignable from string. This error message is really confusing, so maybe we should do something about it?</description>
			<version>1.0.0.M1</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.ParsingUtils.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.PartitionedRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionNamespaceTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="121" opendate="2012-08-29 07:20:03" fixdate="2012-08-29 10:41:16" resolution="Fixed">
		<buginformation>
			<summary>Client Region data-policy attribute not working</summary>
			<description></description>
			<version>1.2.0.RC1</version>
			<fixedVersion>1.2.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.LocalRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionParser.java</file>
		</fixedFiles>
	</bug>
	<bug id="124" opendate="2012-09-11 07:20:21" fixdate="2012-09-27 14:52:18" resolution="Fixed">
		<buginformation>
			<summary>Gateway configuration issues</summary>
			<description>Gateway support has a few problems. The Gateway is not automatically started which it should be by default. Also if the Gateway queue includes a disk-store-ref, I get an error that the disk store does not exist (since Spring hasn&amp;amp;apos;t created it yet.</description>
			<version>1.2.0.RC1</version>
			<fixedVersion>1.2.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.GatewayHubParser.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewayProxy.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewayHubFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="127" opendate="2012-09-26 07:54:49" fixdate="2012-09-27 14:53:22" resolution="Fixed">
		<buginformation>
			<summary>Repository section in documents references the wrong namespace</summary>
			<description></description>
			<version>1.2.0.RC1</version>
			<fixedVersion>1.2.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.mapping.MappingPdxSerializerUnitTests.java</file>
			<file type="M">org.springframework.data.gemfire.mapping.MappingPdxSerializer.java</file>
			<file type="M">org.springframework.data.gemfire.mapping.MappingPdxSerializerIntegrationTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="90" opendate="2012-05-04 14:49:39" fixdate="2012-09-27 14:59:17" resolution="Fixed">
		<buginformation>
			<summary>Documentation Error - Configuring a GemFire CacheServer</summary>
			<description>http://static.springsource.org/spring-gemfire/docs/current/reference/bootstrap.html
"To avoid initialization problems, the CacheServers started by SGF will start after the container has been fully initialized. This allows potential regions, listener, writers or instantiators defined declaratively to be fully initialized and registered before the server starts accepting connections. Keep this in mind when doing programmatic configuration of the items above as the server might start before your components and thus not be seen by the clients connecting right away."
Shouldn&amp;amp;apos;t the marked area above (before) be "after"?</description>
			<version>1.1.1</version>
			<fixedVersion>1.2.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.mapping.MappingPdxSerializerUnitTests.java</file>
			<file type="M">org.springframework.data.gemfire.mapping.MappingPdxSerializer.java</file>
			<file type="M">org.springframework.data.gemfire.mapping.MappingPdxSerializerIntegrationTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="131" opendate="2012-09-28 06:05:42" fixdate="2012-09-28 06:37:44" resolution="Fixed">
		<buginformation>
			<summary>Repository count() returns the incorrect value for client regions. </summary>
			<description>Should use OQL select count from /region to return consistent results</description>
			<version>1.2.0.RC1</version>
			<fixedVersion>1.2.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.repository.support.SimpleGemfireRepository.java</file>
		</fixedFiles>
	</bug>
	<bug id="145" opendate="2013-01-03 23:25:19" fixdate="2013-01-04 05:35:38" resolution="Fixed">
		<buginformation>
			<summary>It should be valid to configure a disk store with a non-persistent region for overflow</summary>
			<description>Currently it appears that (from RegionFactoryBean.java) "it is invalid to specify a disk store if &amp;amp;apos;persistent&amp;amp;apos; is set to false." In GemFire, this is not always the case, partition_overflow and replicate_overflow regions, though not persistent, can use a user configured disk store. This effect of this limitation in Spring GemFire is that non-persistent regions with overflow are forced to use the default disk store.</description>
			<version>1.2.2</version>
			<fixedVersion>1.3.0.M1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="156" opendate="2013-02-23 05:22:49" fixdate="2013-02-23 07:58:21" resolution="Fixed">
		<buginformation>
			<summary>Repository query results in Region  not found when Region name is plural of domain class name</summary>
			<description>For example
@Region("Accounts")
class Account {}</description>
			<version>1.2.0.RC1</version>
			<fixedVersion>1.3.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.repository.support.AbstractGemfireRepositoryFactoryIntegrationTests.java</file>
			<file type="M">org.springframework.data.gemfire.repository.query.QueryStringUnitTests.java</file>
			<file type="M">org.springframework.data.gemfire.repository.query.QueryString.java</file>
			<file type="M">org.springframework.data.gemfire.function.execution.AbstractFunctionTemplate.java</file>
		</fixedFiles>
	</bug>
	<bug id="169" opendate="2013-03-24 21:37:52" fixdate="2013-04-17 06:00:23" resolution="Fixed">
		<buginformation>
			<summary>Unidirectional Gateway hubs cannot be created and fail with an exception</summary>
			<description>For the following uni-directional gateway (this is receiver config)
    &amp;lt;gfe:gateway-hub id="ReceiverHub" manual-start="false" port="22222" cache-ref="cache-with-xml" startup-policy="none"&amp;gt;
    &amp;lt;/gfe:gateway-hub&amp;gt;
Fails with the following exception
org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;ReceiverHub&amp;amp;apos;: Invocation of init method failed; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1455)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:587)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:925)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:472)
	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:93)
	at com.anz.markets.luxor.commons.ApplicationContextProvider.createApplicationContext(ApplicationContextProvider.java:124)
	at com.anz.markets.luxor.commons.ApplicationContextProvider.initContext(ApplicationContextProvider.java:72)
	at com.anz.markets.luxor.commons.ApplicationContextProvider.getInstance(ApplicationContextProvider.java:79)
	at com.anz.markets.luxor.server.TestServerLauncher.main(TestServerLauncher.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
Caused by: java.lang.NullPointerException
	at org.springframework.data.gemfire.wan.GatewayHubFactoryBean.doInit(GatewayHubFactoryBean.java:105)
	at org.springframework.data.gemfire.wan.AbstractWANComponentFactoryBean.afterPropertiesSet(AbstractWANComponentFactoryBean.java:71)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1514)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452)
	... 20 more</description>
			<version>1.2.2</version>
			<fixedVersion>1.3.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.wan.GatewayHubFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="173" opendate="2013-04-17 06:48:18" fixdate="2013-04-17 07:19:03" resolution="Fixed">
		<buginformation>
			<summary>Function Execution throws exception on void return. </summary>
			<description></description>
			<version>1.3.0</version>
			<fixedVersion>1.3.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.function.execution.GemfireOnMemberFunctionTemplate.java</file>
			<file type="M">org.springframework.data.gemfire.function.execution.AbstractFunctionTemplate.java</file>
			<file type="M">org.springframework.data.gemfire.function.execution.GemfireOnRegionOperations.java</file>
			<file type="M">org.springframework.data.gemfire.function.execution.GemfireOnRegionFunctionTemplate.java</file>
			<file type="M">org.springframework.data.gemfire.function.execution.AbstractFunctionExecution.java</file>
			<file type="M">org.springframework.data.gemfire.function.execution.GemfireFunctionOperations.java</file>
			<file type="M">org.springframework.data.gemfire.function.execution.FunctionIntegrationTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="159" opendate="2013-02-27 17:18:34" fixdate="2013-04-18 09:28:43" resolution="Fixed">
		<buginformation>
			<summary>isRollbackOnCommitFailure flag is ignored by GemfireTransactionManager when transaction fails.</summary>
			<description>Bug was found with version 1.2.2.RELEASE of spring-data-gemfire, gemfire 7.0 and Spring framework 3.2.0.RELEASE.
Method doCommit of GemfireTransactionManager catches org.springframework.transaction.TransactionException while com.gemstone.gemfire.cache.CacheTransactionManager.commit() throws com.gemstone.gemfire.cache.TransactionException when commit fails.
So gemfire exception is ignored by GemfireTransactionManager and is caught in
org.springframework.transaction.support.AbstractPlatformTransactionManager (line 779) as RuntimeException and isRollbackOnCommitFailure is ignored.
Roll back attempt fails with "java.lang.IllegalStateException: Thread does not have an active transaction" exception.
Here are code fragments from AbstractPlatformTransactionManager:
-------------
                        catch (TransactionException ex) {
                                // can only be caused by doCommit
                                if (isRollbackOnCommitFailure()) 
{
                                        doRollbackOnCommitException(status, ex);
                                }
                                else 
{
                                        triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);
                                }
                                throw ex;
                        }
                        catch (RuntimeException ex) {
                                if (!beforeCompletionInvoked) 
{
                                        triggerBeforeCompletion(status);
                                }
                                doRollbackOnCommitException(status, ex);
                                throw ex;
                        }
-------------
and GemfireTransactionManager:
        @Override
        protected void doCommit(DefaultTransactionStatus status) throws TransactionException {
                // CacheTransactionObject txObject = (CacheTransactionObject)
                // status.getTransaction();
                if (status.isDebug()) 
{
                        logger.debug("Committing Gemfire local transaction on Cache [" + cache + "]");
                }
                try 
{
                        cache.getCacheTransactionManager().commit();
                }
                catch (IllegalStateException ex) 
{
                        throw new NoTransactionException(
                                        "No transaction associated with the current thread; are there multiple transaction managers ?", ex);
                }
                catch (TransactionException ex) 
{
                        throw new GemfireTransactionCommitException("Unexpected failure on commit of Cache local transaction", ex);
                }
        }</description>
			<version>1.2.2</version>
			<fixedVersion>1.3.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.GemfireTransactionManager.java</file>
		</fixedFiles>
	</bug>
	<bug id="177" opendate="2013-06-13 09:39:29" fixdate="2013-06-13 11:14:00" resolution="Fixed">
		<buginformation>
			<summary>Property placeholder for total-buckets in partitioned region is not working</summary>
			<description>I was able to use property placeholder for other attributes like: location in disk store-&amp;gt;disk-dir,port in cache-server...
It seems like it does not work for partitioned-region buckets - I got an error
 java.lang.NumberFormatException: For input string: "$
{total-buckets}
"
at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)
	at java.lang.Integer.parseInt(Integer.java:449)
	at java.lang.Integer.valueOf(Integer.java:554)
	at org.springframework.data.gemfire.config.PartitionedRegionParser.doParseRegion(PartitionedRegionParser.java:97)
...
It seems like there is some validation which happens before spring context is able to replace placeholders with actual values</description>
			<version>1.3.0</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.PartitionedRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.PartitionedRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.PartitionAttributesFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="192" opendate="2013-08-05 08:30:05" fixdate="2013-08-06 04:31:09" resolution="Complete">
		<buginformation>
			<summary>client region ignores destroy and close settings</summary>
			<description>&amp;lt;client-region .../&amp;gt; parser ignores close and destroy attributes. By default they are both false.</description>
			<version>1.3.1</version>
			<fixedVersion>1.3.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.client.ClientCacheTest.java</file>
			<file type="M">org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.MultipleCacheTest.java</file>
			<file type="M">org.springframework.data.gemfire.client.PoolFactoryBean.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="is related to">598</link>
		</links>
	</bug>
	<bug id="189" opendate="2013-08-04 18:29:57" fixdate="2013-08-06 04:31:41" resolution="Complete">
		<buginformation>
			<summary>Spring Gemfire does not allow persistence for a local region even though this is supported in Gemfire</summary>
			<description>The LocalRegionFactoryBean.setPersistent method throws an UnsupportedOperationException.  However, persistence is supported for local regions in Gemfire, so Spring Gemfire should allow persistence.</description>
			<version>1.3.1</version>
			<fixedVersion>1.3.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.LocalRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.LocalRegionFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="185" opendate="2013-07-10 14:22:54" fixdate="2013-08-06 07:32:48" resolution="Fixed">
		<buginformation>
			<summary>@OnServers fails when pool attribute is set - cannot specify both pool and cache</summary>
			<description>The problem arises because the OnServers annotation defaults the cache attribute to "gemfireCache". Setting the pool attribute causes the error. The default should be removed.  Meanwhile the workaround is 






@OnServers(cache="",pool="somePool")





</description>
			<version>1.3.1</version>
			<fixedVersion>1.3.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.function.config.ServerBasedExecutionBeanDefinitionBuilder.java</file>
			<file type="M">org.springframework.data.gemfire.function.annotation.OnServers.java</file>
		</fixedFiles>
	</bug>
	<bug id="199" opendate="2013-09-16 11:43:58" fixdate="2013-09-16 15:34:34" resolution="Fixed">
		<buginformation>
			<summary>manual-start property on a gateway sender has no effect.</summary>
			<description>We are trying to configure gateway senders to start automatically to connect to remote sites, however even though the Gemfire documentation says that the manual-start property is false by default, Spring Gemfire is making that true for all cases regardless of what is mentioned for that property on a gateway sender by XML.</description>
			<version>1.3.2</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.test.StubGatewaySenderFactory.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewaySenderFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.GemfireV7GatewayNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="195" opendate="2013-08-21 10:06:06" fixdate="2013-09-18 08:51:40" resolution="Fixed">
		<buginformation>
			<summary>colocated-with fails on partition region</summary>
			<description>The colocated-with attribute on the &amp;lt;partitioned-region&amp;gt; element fails with the following exception:
Region specified in &amp;amp;apos;colocated-with&amp;amp;apos; is not present. It should be created before setting &amp;amp;apos;colocated-with&amp;amp;apos; to this region.
This is due to the order in which the regions are created.  The colocated-with attribute specifies a region name, but the order in which the regions are created is dependent on the injection order, which may be different than the order in which the regions appear in the context file.  This can happen when the regions are injected into a class using @Resource(name="")
The colocated-with attribute should specify the region bean name as a reference rather than the region name itself.  This would ensure that the order in which the region beans are created is consistent with the dependency order that Gemfire requires when creating colocated regions.
Test project is attached.</description>
			<version>1.3.2</version>
			<fixedVersion>1.3.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.PartitionedRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.AliasReplacingBeanDefinitionParser.java</file>
		</fixedFiles>
	</bug>
	<bug id="197" opendate="2013-09-05 14:29:08" fixdate="2013-10-18 14:09:34" resolution="Fixed">
		<buginformation>
			<summary>A Cache (Region) created using Spring configuration with persistent PDX keys fails to start.</summary>
			<description>Using Spring GemFire&amp;amp;apos;s XML namespace to create and configure a Cache containing a persistent Region with PDX keys fails to start with a PdxInitializationException (shown below).
From Tim...

The Region tries to deserialize the PDX key before the PDX disk store containing the type meta-data has been created. I can get this same exception using the GemFire API if I create the disk stores in the wrong order (data disk store first, then PDX disk store). It works fine using cache.xml since the PDX disk store is always created first (in CacheCreation.create).
Steps to reproduce:
1. Using PDX with persistence.
2. Dedicated disk store for PDX.
3. Starts fine with empty directory.
4. Kill JVM
5. Next time the server is started I get this error.
If I delete all the persistence files the server will start fine.
The stack trace on startup is...







Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;diskStore&amp;amp;apos;: Invocation of init method failed; nested exception is com.gemstone.gemfire.pdx.PdxInitializationException: PDX registry could not be initialized because the disk store pdxDiskStore was not created.




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1482)




  ...




	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:83)




	at com.gopivotal.gemfire.pdx.test.TestSpring.main(TestSpring.java:16)




Caused by: com.gemstone.gemfire.pdx.PdxInitializationException: PDX registry could not be initialized because the disk store pdxDiskStore was not created.




	at com.gemstone.gemfire.pdx.internal.PeerTypeRegistration.getIdToType(PeerTypeRegistration.java:126)




	at com.gemstone.gemfire.pdx.internal.PeerTypeRegistration.suspendTX(PeerTypeRegistration.java:596)




	at com.gemstone.gemfire.pdx.internal.PeerTypeRegistration.getType(PeerTypeRegistration.java:400)




	at com.gemstone.gemfire.pdx.internal.TypeRegistry.getType(TypeRegistry.java:114)




	at com.gemstone.gemfire.internal.InternalDataSerializer.readPdxSerializable(InternalDataSerializer.java:2971)




	at com.gemstone.gemfire.internal.InternalDataSerializer.basicReadObject(InternalDataSerializer.java:2793)




	at com.gemstone.gemfire.DataSerializer.readObject(DataSerializer.java:3212)




	at com.gemstone.gemfire.internal.util.BlobHelper.deserializeBlob(BlobHelper.java:81)




	at com.gemstone.gemfire.internal.cache.EntryEventImpl.deserialize(EntryEventImpl.java:1388)




	at com.gemstone.gemfire.internal.cache.Oplog.deserializeKey(Oplog.java:7461)




	at com.gemstone.gemfire.internal.cache.Oplog.readKrf(Oplog.java:1779)




	at com.gemstone.gemfire.internal.cache.Oplog.recoverCrf(Oplog.java:2200)




	at com.gemstone.gemfire.internal.cache.DiskStoreImpl.recoverRegionsThatAreReady(DiskStoreImpl.java:2348)




	at com.gemstone.gemfire.internal.cache.DiskStoreImpl.initializeIfNeeded(DiskStoreImpl.java:2271)




	at com.gemstone.gemfire.internal.cache.DiskStoreImpl.doInitialRecovery(DiskStoreImpl.java:2275)




	at com.gemstone.gemfire.internal.cache.DiskStoreFactoryImpl.create(DiskStoreFactoryImpl.java:129)




	at org.springframework.data.gemfire.DiskStoreFactoryBean.afterPropertiesSet(DiskStoreFactoryBean.java:115)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1541)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1479)





</description>
			<version>1.2.2</version>
			<fixedVersion>1.3.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.PdxDiskStoreAwareBeanFactoryPostProcessor.java</file>
			<file type="M">org.springframework.data.gemfire.config.PdxDiskStoreAwareBeanFactoryPostProcessorTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.CacheParser.java</file>
			<file type="M">org.springframework.data.gemfire.test.MockCacheFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="194" opendate="2013-08-13 06:49:00" fixdate="2013-11-05 09:36:23" resolution="Fixed">
		<buginformation>
			<summary>Nested region do not work</summary>
			<description>Both client and server configurations for sub regions do not work. Although the server configuration will run it does not create the actual sub regions in the cluster as can be seen from the gemfire logs, gfsh and pulse.
The client xsd configuration does not allow for sub regions either.
All of this functionality is critical to a client delivery as we are using SI and SGF extensively.  </description>
			<version>1.3.2</version>
			<fixedVersion>1.3.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.LookupRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.test.StubGatewayReceiverFactory.java</file>
			<file type="M">org.springframework.data.gemfire.config.AbstractRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.SubRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.SubRegionFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="198" opendate="2013-09-12 08:32:32" fixdate="2013-11-06 16:02:46" resolution="Fixed">
		<buginformation>
			<summary>BeanCurrentlyInCreationException when injecting async-event-queue to a Gemfire replicated region</summary>
			<description>Getting BeanCurrentlyInCreationException when injecting a async-event-queue to a region such as the following.
Error:
org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name &amp;amp;apos;async-event-queue&amp;amp;apos;: Requested bean is currently in creation: Is there an unresolvable circular reference?
Gemfire region configuration:
&amp;lt;gfe:async-event-queue id="async-event-queue" 
    batch-size="10" 
    persistent="true" 
    disk-store-ref="gemfirePersistenceStore" 
    maximum-queue-memory="50" 
    parallel="true"
    batch-conflation-enabled="true"
    batch-time-interval="3"
    dispatcher-threads="4"
    disk-synchronous="true"
    order-policy="KEY"&amp;gt;
        &amp;lt;gfe:async-event-listener&amp;gt;
          &amp;lt;bean class="some.AsyncCacheEventListener"/&amp;gt;
        &amp;lt;/gfe:async-event-listener&amp;gt;
    &amp;lt;/gfe:async-event-queue&amp;gt;
&amp;lt;gfe:partitioned-region id="policy" persistent="true" disk-store-ref="gemfirePersistenceStore" disk-synchronous="true"
recovery-delay="6000"&amp;gt;
&amp;lt;gfe:async-event-queue-ref bean="async-event-queue"/&amp;gt;
&amp;lt;/gfe:partitioned-region&amp;gt;</description>
			<version>1.3.1</version>
			<fixedVersion>1.3.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.AsyncEventQueueParser.java</file>
		</fixedFiles>
	</bug>
	<bug id="247" opendate="2014-01-15 13:16:12" fixdate="2014-01-21 18:33:19" resolution="Fixed">
		<buginformation>
			<summary>boolean based repository queries generate UnsupportedOperationException in non PDX serialized entities</summary>
			<description>Without using PDX serialization, boolean based queries throw on unsupported operation out of Predicates.getOperator. The type:Type parameter to the method comes in as TRUE or FALSE, however neither of these are supported in the getOperator method.
I have attached a patch file that I believe corrects the issue completely as well as a test project to replicate the issue.
Exact error messages are:</description>
			<version>1.3.1</version>
			<fixedVersion>1.3.3, 1.4 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.repository.query.PredicatesUnitTests.java</file>
			<file type="M">org.springframework.data.gemfire.repository.query.Predicates.java</file>
		</fixedFiles>
	</bug>
	<bug id="231" opendate="2013-11-15 10:23:09" fixdate="2014-01-21 18:44:02" resolution="Fixed">
		<buginformation>
			<summary>Unable to specify Ordering Policy for Serial GW Sender</summary>
			<description>When a Serial GW Sender has more than 1 dispatcher-threads configured, order-policy is needed to assure correct queue selection of updates (thus assuring ordered delivery over the WAN based on application requirements).  The GemFire documentation (http://pubs.vmware.com/vfabric53/index.jsp?topic=/com.vmware.vfabric.gemfire.7.0/topologies_and_comm/multi_site_configuration/setting_up_a_multisite_system.html) states: 
"(For serial gateway senders only.) Whether to use multiple dispatcher threads on each gateway queue to process the queue&amp;amp;apos;s events. The dispatcher-threads attribute of the gateway sender determines whether multiple threads process the queue. If you use multiple dispatcher threads, also configure the ordering policy to use for dispatching the events."
Startup Error is:
Error creating bean with name &amp;amp;apos;toGrid2SenderSerial&amp;amp;apos;: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: specifying an order policy requires the parallel property to be true
Configuration Tested is:
&amp;lt;gfe:gateway-sender id="toGrid2SenderSerial" remote-distributed-system-id="$
{rti.distgrid.distributed-system-id}
" batch-size="$
{rti.ingestgrid.gateway-sender.batch-size}
" batch-time-interval="$
{rti.ingestgrid.gateway-sender.batch-time-interval}
" maximum-queue-memory="$
{rti.ingestgrid.gateway-sender.maximum-queue-memory}
" parallel="false" dispatcher-threads="$
{rti.ingestgrid.gateway-sender.dispatcher-threads}
" alert-threshold="$
{rti.ingestgrid.gateway-sender.alert-threshold}
" enable-batch-conflation="false" persistent="false" socket-buffer-size="1048576" socket-read-timeout="10000" order-policy="KEY" manual-start="false"&amp;gt;</description>
			<version>1.3.3</version>
			<fixedVersion>1.3.3, 1.4 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.GemfireV7GatewayNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewaySenderFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewaySenderFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.wan.AbstractWANComponentFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="230" opendate="2013-11-15 09:55:18" fixdate="2014-01-21 18:44:48" resolution="Fixed">
		<buginformation>
			<summary>Cannot specify a Disk Store to be used for overflow on a Gateway Sender without enabling persistence.</summary>
			<description>Getting the exception pasted below trying to specify the Disk Store for a Gateway Sender for overflow purposes ONLY.  Note that GW Sender Queue overflow is implicit, and reverts to using the "default" disk store if none is specified.  This can lead to unexpected disk usage in the GemFire process&amp;amp;apos; runtime directory, and, on the case of RTI, data being written where security policies do not permit.  There should be an option to specify the overflow disk store without having to also enable persistence.  This would also match the way Region configuration works.
WORKAROUND to a enable custom-configured Disk Store for GW Sender overflow-to-disk when persistence for recovery (persistent="false") is not enabled: 

Define the "DEFAULT" (named as such) Disk Store explicitly, which allows full control in specifying related attributes/elements such as target Disk Directories.


Exclude the disk-store-ref from the gateway-sender configuration.


The shortfall of this work-around is that GW Sender queue overflow must share the same disk store configuration as other SDG persistent elements that also revert to using the DEFAULT disk store.

Exception is:
java.lang.IllegalArgumentException: specifying a disk store requires persistent property to be true
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1512)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:628)
        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)
        at org.springframework.context.support.GenericXmlApplicationContext.&amp;lt;init&amp;gt;(GenericXmlApplicationContext.java:70)
        at com.gopivotal.rti.boot.spring.AbstractXmlSpringInitializer.initSpring(AbstractXmlSpringInitializer.java:48)
        at com.gopivotal.rti.boot.spring.AbstractSpringInitializer.init(AbstractSpringInitializer.java:49)
        at com.gopivotal.rti.boot.AbstractInitializer.init(AbstractInitializer.java:52)
        at com.gopivotal.rti.boot.impl.SimpleLifecycle.doStart(SimpleLifecycle.java:97)
Configuration that caused the Exception is:
	&amp;lt;gfe:gateway-sender id="toGrid2SenderSerial" remote-distributed-system-id="$
{rti.distgrid.distributed-system-id}
"
	    batch-size="$
{rti.ingestgrid.gateway-sender.batch-size}
"
	    batch-time-interval="$
{rti.ingestgrid.gateway-sender.batch-time-interval}
"
	    maximum-queue-memory="$
{rti.ingestgrid.gateway-sender.maximum-queue-memory}
"
	    parallel="false"
	    dispatcher-threads="$
{rti.ingestgrid.gateway-sender.dispatcher-threads}
"
	    alert-threshold="$
{rti.ingestgrid.gateway-sender.alert-threshold}
"
	    enable-batch-conflation="false"
	    persistent="false"
	    disk-store-ref="refgw"
	    socket-buffer-size="1048576"
	    socket-read-timeout="10000"
	    order-policy="KEY"
	    manual-start="false"&amp;gt;</description>
			<version>1.3.3</version>
			<fixedVersion>1.3.3, 1.4 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewaySenderFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewaySenderFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="225" opendate="2013-11-13 04:15:15" fixdate="2014-01-21 18:45:29" resolution="Fixed">
		<buginformation>
			<summary>Inconsistent data policy defaults for subregions that are replicated regions</summary>
			<description>When defining replicated regions that are subregions, the same data-policy heuristics that are used for top-level replicated regions should be applied. Eg.
&amp;lt;gfe:replicated-region id="FOO"&amp;gt;
   &amp;lt;gfe:replicated-region
	name="BAR"
        scope="distributed-ack" /&amp;gt;
For the FOO region, the heuristics in ReplicatedRegionFactoryBean#resolveDataPolicy will figure out a data-policy. But, for the /FOO/BAR subregion, the raw SubRegionFactoryBean is used, which does not have the same logic in it.</description>
			<version>1.3.3</version>
			<fixedVersion>1.4 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionUsingDataPolicyAndShortcutTest.java</file>
			<file type="M">org.springframework.data.gemfire.RegionLookupFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.ParsingUtils.java</file>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.test.MockRegionFactory.java</file>
			<file type="M">org.springframework.data.gemfire.config.ReplicatedRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.GemfireNamespaceHandler.java</file>
			<file type="M">org.springframework.data.gemfire.config.SubRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.PartitionedRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.ReplicatedRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.LocalRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.SubRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.AbstractRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.LookupRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionParser.java</file>
		</fixedFiles>
	</bug>
	<bug id="280" opendate="2014-04-18 22:52:57" fixdate="2014-04-18 23:24:13" resolution="Fixed">
		<buginformation>
			<summary>The ContinuousQueryListenerContainer class is not Thread-safe!</summary>
			<description>The ContinuousQueryListenerContainer class does not have proper synchronization around the start() and stop() methods in addition to the running instance variable.</description>
			<version>1.0.0</version>
			<fixedVersion>1.4 RC1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.fork.CacheServerProcess.java</file>
			<file type="M">org.springframework.data.gemfire.listener.adapter.ContainerXmlSetupTest.java</file>
			<file type="M">org.springframework.data.gemfire.listener.ContinuousQueryListener.java</file>
			<file type="M">org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter.java</file>
			<file type="M">org.springframework.data.gemfire.config.GemfireListenerContainerParser.java</file>
			<file type="M">org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer.java</file>
			<file type="M">org.springframework.data.gemfire.listener.ContinuousQueryDefinition.java</file>
		</fixedFiles>
	</bug>
	<bug id="279" opendate="2014-04-18 22:43:41" fixdate="2014-04-18 23:25:21" resolution="Fixed">
		<buginformation>
			<summary>The &lt;cq-listener-container&gt; element is missing the &amp;apos;error-handler&amp;apos; attribute.</summary>
			<description>The SDG XSD &amp;lt;cq-listener-container element is missing the error-handler attribute, thus making it impossible to set a Spring ErrorHandler on CQ execution failures and errors.</description>
			<version>1.0.0</version>
			<fixedVersion>1.4 RC1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.fork.CacheServerProcess.java</file>
			<file type="M">org.springframework.data.gemfire.listener.adapter.ContainerXmlSetupTest.java</file>
			<file type="M">org.springframework.data.gemfire.listener.ContinuousQueryListener.java</file>
			<file type="M">org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter.java</file>
			<file type="M">org.springframework.data.gemfire.config.GemfireListenerContainerParser.java</file>
			<file type="M">org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer.java</file>
			<file type="M">org.springframework.data.gemfire.listener.ContinuousQueryDefinition.java</file>
		</fixedFiles>
	</bug>
	<bug id="275" opendate="2014-04-17 12:35:18" fixdate="2014-04-18 23:26:24" resolution="Fixed">
		<buginformation>
			<summary>The &lt;cq-listener-container&gt; element&amp;apos;s &amp;apos;phase&amp;apos; attribute is ignored.</summary>
			<description>The &amp;lt;cq-listener-container&amp;gt; element&amp;amp;apos;s phase attribute is parsed but is unable to be set and used by the SDG ContinuousQueryListenerContainer class.</description>
			<version>1.0.0</version>
			<fixedVersion>1.4 RC1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.fork.CacheServerProcess.java</file>
			<file type="M">org.springframework.data.gemfire.listener.adapter.ContainerXmlSetupTest.java</file>
			<file type="M">org.springframework.data.gemfire.listener.ContinuousQueryListener.java</file>
			<file type="M">org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter.java</file>
			<file type="M">org.springframework.data.gemfire.config.GemfireListenerContainerParser.java</file>
			<file type="M">org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer.java</file>
			<file type="M">org.springframework.data.gemfire.listener.ContinuousQueryDefinition.java</file>
		</fixedFiles>
	</bug>
	<bug id="271" opendate="2014-04-11 21:07:27" fixdate="2014-04-18 23:26:39" resolution="Fixed">
		<buginformation>
			<summary>The &lt;cq-listener-container&gt; element is missing the &amp;apos;auto-startup&amp;apos; attribute.</summary>
			<description>ContinuousQueryListenerContainer implements SmartLifecycle but the XML schema only has phase; there is no way to configure autoStartup=false.
It needs an auto-startup attribute.</description>
			<version>1.0.0</version>
			<fixedVersion>1.4 RC1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.fork.CacheServerProcess.java</file>
			<file type="M">org.springframework.data.gemfire.listener.adapter.ContainerXmlSetupTest.java</file>
			<file type="M">org.springframework.data.gemfire.listener.ContinuousQueryListener.java</file>
			<file type="M">org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter.java</file>
			<file type="M">org.springframework.data.gemfire.config.GemfireListenerContainerParser.java</file>
			<file type="M">org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer.java</file>
			<file type="M">org.springframework.data.gemfire.listener.ContinuousQueryDefinition.java</file>
		</fixedFiles>
		<links>
			<link type="Depend" description="is depended on by">3104</link>
		</links>
	</bug>
	<bug id="277" opendate="2014-04-18 21:12:55" fixdate="2014-04-21 15:10:05" resolution="Fixed">
		<buginformation>
			<summary>OQL Join in Repository interface</summary>
			<description>Does Spring Data Gemfire Repository abstraction support OQL joins across regions ?






Person.java












// getter, setter omitted




@Region("Person")




public class Person extends Entity {




    private String firstName;




    private String secondName;




    private String carVIN;




}












Car.java












// getter and setter omitted




@Region("Car")




public class Car extends Entity {









    private String vin;




    private String manufacturer;




    private String model;




    private int year;




    private UUID ownerId;




}












public interface PersonRepository extends GemfireRepository&amp;lt;Person, UUID&amp;gt; {









    @Query("&amp;lt;trace&amp;gt; select p from /Person p, /Car c where p.carVIN = c.vin")




    public List&amp;lt;Person&amp;gt; findCarOwners();









}






On the server, the trace shows up as 






&amp;lt;trace&amp;gt; select p from /Person p, /Person c where p.carVIN = c.vin






If i directly use the QueryService from the Pool, i do get results with the same query






Pool gemfirePool = (Pool) applicationContext.getBean("gemfirePool");




QueryService queryService = gemfirePool.getQueryService();




SelectResults&amp;lt;Person&amp;gt; results = (SelectResults&amp;lt;Person&amp;gt;) queryService.newQuery("&amp;lt;trace&amp;gt; select p from /Person p, /Car c where p.carVIN = c.vin").execute();




for ( Person p : results.asList()) {




  System.out.println(p);




}






On the server, i see the trace as 






&amp;lt;trace&amp;gt; select p from /Person p, /Car c where p.carVIN = c.vin






Is a feature for something like this planned ?
At the very least, the documentation should mention known limitations.
Thank you.
Adil.</description>
			<version>1.0.0</version>
			<fixedVersion>1.4 RC1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.repository.sample.CatRepository.java</file>
			<file type="M">org.springframework.data.gemfire.repository.query.QueryString.java</file>
			<file type="M">org.springframework.data.gemfire.repository.sample.DogRepository.java</file>
			<file type="M">org.springframework.data.gemfire.repository.query.PartTreeGemfireRepositoryQuery.java</file>
			<file type="M">org.springframework.data.gemfire.repository.sample.AnimalRepositoryTest.java</file>
			<file type="M">org.springframework.data.gemfire.repository.sample.PersonRepository.java</file>
			<file type="M">org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory.java</file>
			<file type="M">org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery.java</file>
		</fixedFiles>
	</bug>
	<bug id="304" opendate="2014-07-30 06:35:31" fixdate="2014-08-11 16:47:52" resolution="Fixed">
		<buginformation>
			<summary>OnMembers function execution with Gemfire Group calls onMember (wrong method)</summary>
			<description>In class GroupMemberFunctionExecution, line 40:
	@Override
	protected Execution getExecution() 
{
		return FunctionService.onMember(this.groups);
	}

The problem is that it is calling the SINGULAR version of the function, the right one is the PLURAL onMembers method.</description>
			<version>1.4.1 (Dijkstra SR1)</version>
			<fixedVersion>1.4.4 (Dijkstra SR4), 1.5 RC1 (Evans)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.function.execution.GroupMembersFunctionExecution.java</file>
			<file type="M">org.springframework.data.gemfire.function.execution.GemfireOnMembersFunctionTemplate.java</file>
			<file type="M">org.springframework.data.gemfire.function.execution.GroupMemberFunctionExecution.java</file>
			<file type="M">org.springframework.data.gemfire.function.execution.GemfireOnMemberFunctionTemplate.java</file>
		</fixedFiles>
	</bug>
	<bug id="238" opendate="2013-12-05 01:34:02" fixdate="2014-09-03 13:00:36" resolution="Fixed">
		<buginformation>
			<summary>"jndi-prop" is not parced correctly</summary>
			<description>According to schema definition jndi-prop element should be a child of jndi-binding one. Though CacheParser.parseJndiBindings expects this element to be a child of cache (on the same level as indi-binding). 
See line 186 in CacheParser.java:
List&amp;lt;Element&amp;gt; jndiProps = DomUtils.getChildElementsByTagName(element, "jndi-prop");
element here is the reference to cache, not jndi-binding</description>
			<version>1.3.3</version>
			<fixedVersion>1.3.4, 1.4 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.CacheParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.JndiBindingsTest.java</file>
			<file type="M">org.springframework.data.gemfire.CacheFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="239" opendate="2013-12-06 01:28:14" fixdate="2014-09-03 13:01:05" resolution="Fixed">
		<buginformation>
			<summary>The value "XaPooledDataSource" of jndi-binding "type" attribute should be changed to "XAPooledDataSource"</summary>
			<description>Gemfire expects "XAPooledDataSource" JNDI binding type but schema defines "XaPooledDataSource" enumeration value (I am wondering how does this work for you and whether this functionality was tested at all?).
A workaround could be to turn off validation before refreshing Spring context.</description>
			<version>1.3.3</version>
			<fixedVersion>1.3.4, 1.4 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.CacheParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.JndiBindingsTest.java</file>
			<file type="M">org.springframework.data.gemfire.CacheFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="249" opendate="2014-01-23 16:35:49" fixdate="2014-09-03 13:02:58" resolution="Fixed">
		<buginformation>
			<summary>The SDG XSD is restricting the use of property placeholder values on &lt;gfe:disk-store/&gt;, compaction-threshold attributes given the attribute type is a short and not string.</summary>
			<description>Current the Spring Data GemFire XML Schema (XSD) restricts the value of the compaction-threshold attribute on the &amp;lt;gfe:disk-store/&amp;gt; element as type &amp;amp;apos;short&amp;amp;apos;, with valid values between 0 and 100, rather than using a type of &amp;amp;apos;string&amp;amp;apos; thereby allowing the use of property placeholder values.
The XSD should be changed so that the GemFire Disk Store, compaction-threshold attribute is of type &amp;amp;apos;xsd:string&amp;amp;apos;, allowing the use of property placeholder values.</description>
			<version>1.0.0</version>
			<fixedVersion>1.3.4, 1.4 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.DiskStoreParser.java</file>
			<file type="M">org.springframework.data.gemfire.DiskStoreFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="310" opendate="2014-08-27 01:59:46" fixdate="2014-09-03 15:05:29" resolution="Fixed">
		<buginformation>
			<summary>The &lt;gfe:client-region&gt; element is missing the &amp;apos;concurrency-level&amp;apos; attribute, which is supported by GemFire&amp;apos;s ClientRegionFactory API.</summary>
			<description>The &amp;lt;gfe:client-region&amp;gt; element is missing an attribute for &amp;amp;apos;concurrency-level&amp;amp;apos;, which is a property of GemFire&amp;amp;apos;s {{CientRegionFactory} API.</description>
			<version>1.5 M1 (Evans)</version>
			<fixedVersion>1.5 GA (Evans)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.test.MockRegionFactory.java</file>
			<file type="M">org.springframework.data.gemfire.config.SubRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.ReplicatedRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.DiskStoreAndEvictionRegionParsingTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionParser.java</file>
		</fixedFiles>
	</bug>
	<bug id="338" opendate="2014-10-03 13:48:12" fixdate="2014-12-10 20:56:38" resolution="Fixed">
		<buginformation>
			<summary>Both &lt;gfe:custom-entry-ttl&gt; and &lt;gfe:custom-entry-tti&gt; SDG XML namespace elements allow for more than one &amp;apos;CustomExpiry&amp;apos; bean to be set in the Region Expiration Attributes although GemFire only allows one!</summary>
			<description>The &amp;amp;apos;&amp;lt;gfe:custom-entry-ttl&amp;gt;&amp;amp;apos; and &amp;amp;apos;&amp;lt;gfe:custom-entry-tti&amp;gt;&amp;amp;apos; SDG XML namespace elements allow for more than one inner, nested bean definition, for example...






&amp;lt;gfe:replicated-region id="Example" statistics="true"&amp;gt;




  &amp;lt;gfe:custom-entry-tti&amp;gt;




    &amp;lt;bean class=com.example.MyClass"/&amp;gt;




    &amp;lt;bean class=com.example.AnotherClass"/&amp;gt;




    &amp;lt;bean class=com.example.YetAnotherClass"/&amp;gt;




    ...




  &amp;lt;/gfe:custom-entry-tti&amp;gt;




&amp;lt;/gfe:replicated-region&amp;gt;






However, the GemFire com.gemstone.gemfire.cache.RegionFactory interface only allows one CustomExpiry to be specified for both Region Entry TTL (Time-To-Live) as well as Entry TTI (Idle-Timeout).  






  RegionFactory&amp;lt;K,V&amp;gt; setCustomEntryTimeToLive(CustomExpiry&amp;lt;K,V&amp;gt; custom);









  RegionFactory&amp;lt;K,V&amp;gt; setCustomEntryIdleTimeout(CustomExpiry&amp;lt;K,V&amp;gt; custom);






As well, the com.gemstone.gemfire.cache.RegionAttributes interface only return a single CustomExpiry from...






  CustomExpiry&amp;lt;K,V&amp;gt; getCustomEntryTimeToLive()









  CustomExpiry&amp;lt;K,V&amp;gt; getCustomEntryIdleTimeout()






Therefore, SDG&amp;amp;apos;s XML namespace and schema (XSD) need to be changed.</description>
			<version>1.4.4 (Dijkstra SR4)</version>
			<fixedVersion>1.6 M1 (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.RegionEvictionAttributesNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.ParsingUtils.java</file>
		</fixedFiles>
	</bug>
	<bug id="360" opendate="2014-12-11 07:39:57" fixdate="2014-12-11 21:52:41" resolution="Fixed">
		<buginformation>
			<summary>Failures in SubRegionNamespaceTests when built with Java 8.</summary>
			<description>1.5.1.RELEASE fails to build with Java 8 due to four failures in SubRegionNamespaceTests
testMixedNestedRegions:






org.junit.ComparisonFailure: expected:&amp;lt;/replicated[Parent/replicated]Child/partitionedGra...&amp;gt; but was:&amp;lt;/replicated[]Child/partitionedGra...&amp;gt;




	at org.junit.Assert.assertEquals(Assert.java:115)




	at org.junit.Assert.assertEquals(Assert.java:144)




	at org.springframework.data.gemfire.config.SubRegionNamespaceTest.testMixedNestedRegions(SubRegionNamespaceTest.java:93)






testNestedRegionsCreated:






java.lang.AssertionError




	at org.junit.Assert.fail(Assert.java:86)




	at org.junit.Assert.assertTrue(Assert.java:41)




	at org.junit.Assert.assertNotNull(Assert.java:621)




	at org.junit.Assert.assertNotNull(Assert.java:631)




	at org.springframework.data.gemfire.config.SubRegionNamespaceTest.testNestedRegionsCreated(SubRegionNamespaceTest.java:63)






testNestedRegionsWithSiblings:






org.junit.ComparisonFailure: expected:&amp;lt;/[parentWithSiblings/]child1/grandChild11&amp;gt; but was:&amp;lt;/[]child1/grandChild11&amp;gt;




	at org.junit.Assert.assertEquals(Assert.java:115)




	at org.junit.Assert.assertEquals(Assert.java:144)




	at org.springframework.data.gemfire.config.SubRegionNamespaceTest.testNestedRegionsWithSiblings(SubRegionNamespaceTest.java:107)






testNestedReplicatedRegions:






org.junit.ComparisonFailure: expected:&amp;lt;/[parent/]child/grandchild&amp;gt; but was:&amp;lt;/[]child/grandchild&amp;gt;




	at org.junit.Assert.assertEquals(Assert.java:115)




	at org.junit.Assert.assertEquals(Assert.java:144)




	at org.springframework.data.gemfire.config.SubRegionNamespaceTest.testNestedReplicatedRegions(SubRegionNamespaceTest.java:78)





</description>
			<version>1.5.1 (Evans SR1)</version>
			<fixedVersion>1.5.2 (Evans SR2), 1.6 RC1 (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.test.MockRegionFactory.java</file>
			<file type="M">org.springframework.data.gemfire.test.GemfireTestBeanPostProcessor.java</file>
			<file type="M">org.springframework.data.gemfire.config.SubRegionNamespaceTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="328" opendate="2014-09-17 22:51:40" fixdate="2015-01-28 16:21:51" resolution="Fixed">
		<buginformation>
			<summary>Add missing &amp;apos;hostname-for-senders&amp;apos; attribute on the &lt;gfe:gateway-receiver&gt; element in the SDG XML namespace (XSD).</summary>
			<description>Currently, the Spring Data GemFire XML namespace (XSD) &amp;lt;gfe:gateway-receiver/&amp;gt; element is missing the &amp;amp;apos;hostname-for-senders&amp;amp;apos; attribute, which allows developers to set the hostname the GatewaySenders will use to connect to the remote host (cluster) on the receiving side of the WAN Gateway.</description>
			<version>1.4.4 (Dijkstra SR4)</version>
			<fixedVersion>1.4.5 (Dijkstra SR5), 1.5.1 (Evans SR1), 1.6 M1 (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.test.StubGatewayReceiverFactory.java</file>
			<file type="M">org.springframework.data.gemfire.config.GatewayReceiverNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.GatewayReceiverParser.java</file>
		</fixedFiles>
	</bug>
	<bug id="330" opendate="2014-09-17 23:29:20" fixdate="2015-01-28 16:29:13" resolution="Fixed">
		<buginformation>
			<summary>Add missing &amp;apos;disk-synchronous&amp;apos; attribute to the &lt;gfe:gateway-sender&gt; element in the SDG XML namespace (XSD)</summary>
			<description>The Spring Data GemFire XML namespace (XSD) &amp;lt;gfe:gateway-sender&amp;gt; element is missing the &amp;amp;apos;disk-synchronous&amp;amp;apos; attribute.</description>
			<version>1.4.4 (Dijkstra SR4)</version>
			<fixedVersion>1.4.5 (Dijkstra SR5), 1.5.1 (Evans SR1), 1.6 M1 (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.test.StubGatewaySenderFactory.java</file>
			<file type="M">org.springframework.data.gemfire.config.GemfireV7GatewayNamespaceTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="366" opendate="2015-01-12 12:12:13" fixdate="2015-01-28 17:12:24" resolution="Fixed">
		<buginformation>
			<summary>Unable to create local-only, client-based Region Indexes using SDG&amp;apos;s &lt;gfe:index&gt; and corresponding IndexFactoryBean functionality.</summary>
			<description>When a developer attempts to create a "local-only", client-based Region Index using &amp;lt;gfe:index .. /&amp;gt; tag element in the Spring Data GemFire&amp;amp;apos;s XML namespace configuration meta-data, or directly through the SDG API using the IndexFactoryBean, an UnsupportedOperationException is thrown...






Exception in thread "main" org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;clientIndex&amp;amp;apos;: Invocation of init method failed; nested exception is java.lang.UnsupportedOperationException: Index Operation is not supported on the Server Region.




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1513)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293)




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:191)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:615)




	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)




	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)




	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:139)




	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:83)




	at io.pivotal.gemfire.MyFirstGemClient.main(MyFirstGemClient.java:136)




Caused by: java.lang.UnsupportedOperationException: Index Operation is not supported on the Server Region.




	at com.gemstone.gemfire.cache.query.internal.DefaultQueryService.getIndexes(DefaultQueryService.java:367)




	at com.gemstone.gemfire.cache.query.internal.DefaultQueryService.getIndexes(DefaultQueryService.java:353)




	at org.springframework.data.gemfire.IndexFactoryBean.createIndex(IndexFactoryBean.java:79)




	at org.springframework.data.gemfire.IndexFactoryBean.afterPropertiesSet(IndexFactoryBean.java:72)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1572)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1510)




	... 12 more






Spring Data GemFire&amp;amp;apos;s IndexFactoryBean should introspect the GemFire Cache instance and determine whether the "cache" is an instance of ClientCache, and if so, use the ClientCache.getLocalQueryService() to create the Index.</description>
			<version>1.4.4 (Dijkstra SR4)</version>
			<fixedVersion>1.5.2 (Evans SR2), 1.6 RC1 (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.IndexFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="289" opendate="2014-06-04 23:50:42" fixdate="2015-02-03 11:58:28" resolution="Fixed">
		<buginformation>
			<summary>Enumeration restrictions (xsd:enumeration) should be avoided in the XML schema.</summary>
			<description>Enumeration restrictions (xsd:enumeration) should be avoided in the XML schema. Otherwise validation fails when placeholders are used.</description>
			<version>1.4 GA (Dijkstra)</version>
			<fixedVersion>1.6 RC1 (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.IndexNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.CustomEditorRegistrationBeanFactoryPostProcessor.java</file>
			<file type="M">org.springframework.data.gemfire.config.ReplicatedRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.ParsingUtils.java</file>
			<file type="M">org.springframework.data.gemfire.config.CustomEditorRegistrationBeanFactoryPostProcessorTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.IndexParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.CacheParser.java</file>
			<file type="M">org.springframework.data.gemfire.IndexTypeConverter.java</file>
			<file type="M">org.springframework.data.gemfire.IndexTypeConverterTest.java</file>
			<file type="M">org.springframework.data.gemfire.CacheFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.CacheServerParser.java</file>
			<file type="M">org.springframework.data.gemfire.server.CacheServerFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.server.SubscriptionEvictionPolicy.java</file>
			<file type="M">org.springframework.data.gemfire.ExpirationActionTypeTest.java</file>
			<file type="M">org.springframework.data.gemfire.InterestPolicyTypeTest.java</file>
			<file type="M">org.springframework.data.gemfire.EvictionPolicyTypeTest.java</file>
			<file type="M">org.springframework.data.gemfire.EvictionActionTypeTest.java</file>
			<file type="M">org.springframework.data.gemfire.InterestPolicyType.java</file>
			<file type="M">org.springframework.data.gemfire.test.MockClientCacheFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.IndexMaintenancePolicyConverterTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.client.Interest.java</file>
			<file type="M">org.springframework.data.gemfire.InterestPolicyConverterTest.java</file>
			<file type="M">org.springframework.data.gemfire.IndexTypeTest.java</file>
			<file type="M">org.springframework.data.gemfire.ExpirationActionConverterTest.java</file>
			<file type="M">org.springframework.data.gemfire.IndexMaintenancePolicyTypeTest.java</file>
			<file type="M">org.springframework.data.gemfire.test.MockCacheFactoryBean.java</file>
			<file type="D">org.springframework.data.gemfire.IndexMaintenanceTypeTest.java</file>
			<file type="D">org.springframework.data.gemfire.EvictionTypeTest.java</file>
			<file type="D">org.springframework.data.gemfire.EvictionTypeConverterTest.java</file>
			<file type="M">org.springframework.data.gemfire.RegionAttributesFactoryBean.java</file>
			<file type="D">org.springframework.data.gemfire.IndexMaintenanceTypeConverterTest.java</file>
			<file type="D">org.springframework.data.gemfire.EvictionTypeConverter.java</file>
			<file type="D">org.springframework.data.gemfire.IndexMaintenanceType.java</file>
			<file type="D">org.springframework.data.gemfire.IndexMaintenanceTypeConverter.java</file>
			<file type="M">org.springframework.data.gemfire.EvictionAttributesFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.EvictionAttributesFactoryBeanTest.java</file>
			<file type="D">org.springframework.data.gemfire.EvictionType.java</file>
			<file type="D">org.springframework.data.gemfire.SubscriptionTypeConverter.java</file>
			<file type="D">org.springframework.data.gemfire.SubscriptionTypeTest.java</file>
			<file type="M">org.springframework.data.gemfire.SubscriptionAttributesFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.SubscriptionAttributesFactoryBean.java</file>
			<file type="D">org.springframework.data.gemfire.SubscriptionTypeConverterTest.java</file>
			<file type="D">org.springframework.data.gemfire.SubscriptionType.java</file>
			<file type="M">org.springframework.data.gemfire.ExpirationAttributesFactoryBeanTest.java</file>
			<file type="D">org.springframework.data.gemfire.ExpirationActionTypeConverter.java</file>
			<file type="D">org.springframework.data.gemfire.ExpirationActionTypeConverterTest.java</file>
			<file type="M">org.springframework.data.gemfire.ExpirationActionType.java</file>
			<file type="M">org.springframework.data.gemfire.ExpirationAttributesFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.DataPolicyConverter.java</file>
		</fixedFiles>
	</bug>
	<bug id="290" opendate="2014-06-16 19:56:50" fixdate="2015-02-23 10:45:44" resolution="Fixed">
		<buginformation>
			<summary>SDG&amp;apos;s Repository extension does not properly handle custom @Query annotated Repository methods returning non-Collection, non-Entity-based return values.</summary>
			<description>If a Repository method is annotated with the @Query annotation specifying a custom Query/OQL statement, such as ...
@Query(SELECT count FROM /Users u WHERE u.username LIKE $1")
Integer countUsersByUsernameLike(String username);
SDG throws an IllegalStateException...






Caused by: java.lang.IllegalStateException: Unsupported query: select count(*) from /users




       at org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery.execute(StringBasedGemfireRepositoryQuery.java:136)




       at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:384)




       at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:344)




       at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)




       at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)




       at com.sun.proxy.$Proxy53.totalSubscriberEntries(Unknown Source)




       at com.gopivotal.vodafone.geopoc.service.SubscriberService.findTotalSubscriberEntries(SubscriberService.java:69)




       at com.gopivotal.vodafone.geopoc.GeoApplication.test(GeoApplication.java:176)




       at com.gopivotal.vodafone.geopoc.GeoApplication.run(GeoApplication.java:135)




       at org.springframework.boot.SpringApplication.runCommandLineRunners(SpringApplication.java:669)




       ... 5 common frames omitted





</description>
			<version>1.4 GA (Dijkstra)</version>
			<fixedVersion>1.4.1 (Dijkstra SR1), 1.5 M1 (Evans)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.repository.sample.UserRepositoryQueriesIntegrationTest.java</file>
			<file type="M">org.springframework.data.gemfire.repository.query.StringBasedGemfireRepositoryQuery.java</file>
			<file type="M">org.springframework.data.gemfire.repository.sample.UserRepository.java</file>
		</fixedFiles>
	</bug>
	<bug id="295" opendate="2014-07-02 17:53:22" fixdate="2015-02-23 10:47:49" resolution="Fixed">
		<buginformation>
			<summary>Enable Local Region Eviction action to be set to &amp;apos;LOCAL_DESTROY&amp;apos;, which is allowed in GemFire using the public API or in cache.xml.</summary>
			<description>Currently, SDG "fixes" the Eviction action policy to "OVERFLOW_TO_DISK", on Local (client) Regions, however GemFire does support "LOCAL_DESTROY" for Local (client) Regions as well.</description>
			<version>1.4 GA (Dijkstra)</version>
			<fixedVersion>1.4.2 (Dijkstra SR2), 1.5 M1 (Evans)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.LocalRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.test.MockRegionFactory.java</file>
		</fixedFiles>
	</bug>
	<bug id="297" opendate="2014-07-07 23:14:46" fixdate="2015-02-23 10:48:53" resolution="Fixed">
		<buginformation>
			<summary>Executing SDG Function annotated POJO methods from Gfsh does not work when "injecting" arguments during Function argument resolution.</summary>
			<description>When executing a SDG Function annotated POJO method from Gfsh, Gfsh will pass all arguments erroneously in a String[] to the Function invocation.  When SDG tries to inject the FunctionContext into the POJO method during Function execution, an Exception occurs...






[severe 2014/07/07 23:21:37.970 PDT server1 &amp;lt;Function Execution Processor2&amp;gt; tid=0x62] UnExpected exception during function execution local member




java.lang.ArrayStoreException: com.gemstone.gemfire.internal.cache.execute.FunctionContextImpl




        at org.springframework.data.gemfire.util.ArrayUtils.insert(ArrayUtils.java:43)




        at org.springframework.data.gemfire.function.FunctionContextInjectingArgumentResolver.resolveFunctionArguments(FunctionContextInjectingArgumentResolver.java:100)




        at org.springframework.data.gemfire.function.PojoFunctionWrapper.execute(PojoFunctionWrapper.java:107)




        at com.gemstone.gemfire.internal.cache.execute.AbstractExecution.executeFunctionLocally(AbstractExecution.java:356)




        at com.gemstone.gemfire.internal.cache.execute.AbstractExecution$2.run(AbstractExecution.java:320)




        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)




        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)




        at com.gemstone.gemfire.distributed.internal.DistributionManager.runUntilShutdown(DistributionManager.java:717)




        at com.gemstone.gemfire.distributed.internal.DistributionManager$9$1.run(DistributionManager.java:1174)




        at java.lang.Thread.run(Thread.java:695)





</description>
			<version>1.4.1 (Dijkstra SR1)</version>
			<fixedVersion>1.4.2 (Dijkstra SR2), 1.5 M1 (Evans)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.function.DefaultFunctionArgumentResolver.java</file>
			<file type="M">org.springframework.data.gemfire.function.FunctionArgumentResolverTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="311" opendate="2014-08-27 02:09:52" fixdate="2015-02-23 10:50:45" resolution="Fixed">
		<buginformation>
			<summary>ClientRegionFactoryBean does not properly set the &amp;apos;concurrency-checks-enabled&amp;apos; attribute and property of GemFire&amp;apos;s ClientRegionFactory class.</summary>
			<description>The Spring Data GemFire ClientRegionFactoryBean does not properly set the &amp;amp;apos;concurrencyChecksEnabled&amp;amp;apos; property (corresponding to the &amp;amp;apos;concurrency-checks-enabled&amp;amp;apos; attribute of the &amp;lt;gfe:client-region&amp;gt; element in the SDG XSD) of GemFire&amp;amp;apos;s ClientRegionFactory class.</description>
			<version>1.5 M1 (Evans)</version>
			<fixedVersion>1.5 GA (Evans)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.test.MockRegionFactory.java</file>
			<file type="M">org.springframework.data.gemfire.config.SubRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.ReplicatedRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.DiskStoreAndEvictionRegionParsingTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionParser.java</file>
		</fixedFiles>
	</bug>
	<bug id="312" opendate="2014-08-27 02:24:22" fixdate="2015-02-23 10:51:05" resolution="Fixed">
		<buginformation>
			<summary>The &lt;gfe:partitioned-region&gt; element in the SDG XSD does not properly support multiple PartitionListener bean definitions or references.</summary>
			<description>The &amp;amp;apos;&amp;lt;gfe:partitioned-region&amp;gt;&amp;amp;apos; element in the SDG XSD does not properly support and register multiple PartitionListener bean definitions on a PARTITION Region.</description>
			<version>1.5 M1 (Evans)</version>
			<fixedVersion>1.5 GA (Evans)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.test.MockRegionFactory.java</file>
			<file type="M">org.springframework.data.gemfire.config.SubRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.ReplicatedRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.DiskStoreAndEvictionRegionParsingTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.PartitionedRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.ParsingUtils.java</file>
			<file type="M">org.springframework.data.gemfire.PartitionAttributesFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.PartitionedRegionNamespaceTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="374" opendate="2015-02-18 16:50:13" fixdate="2015-02-25 18:07:46" resolution="Fixed">
		<buginformation>
			<summary>Specifying a disk-store on a GatewayHub forces the GatewayHub to be persistent.</summary>
			<description>Currently, SDG&amp;amp;apos;s GatewayHubFactoryBean class is forcing the GemFire Gateway Queue to be &amp;amp;apos;persistent&amp;amp;apos; if a DiskStore was explicitly referenced (named).
However, this behavior fails to take into account the fact that a GemFire Gateway Queue can overflow it&amp;amp;apos;s contents to disk in order to reduce memory pressure.</description>
			<version>1.4.5 (Dijkstra SR5)</version>
			<fixedVersion>1.5.3 (Evans SR3), 1.6 RC1 (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.GatewayHubNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.test.support.ThrowableUtils.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewayHubFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewayHubFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.test.StubCache.java</file>
		</fixedFiles>
	</bug>
	<bug id="375" opendate="2015-02-18 17:03:02" fixdate="2015-02-25 18:08:52" resolution="Fixed">
		<buginformation>
			<summary>The &lt;gfe:gateway-hub&gt; XML namespace element is missing the &amp;apos;max-time-between-pings&amp;apos; attribute.</summary>
			<description>The Spring Data GemFire XML namespace (XSD) &amp;lt;gfe:gateway-hub&amp;gt; element is missing the &amp;amp;apos;max-time-between-pings&amp;amp;apos; attribute corresponding to GemFire&amp;amp;apos;s GatewayHub.setMaximumTimeBetweenPings(:int) property.
This property and configuration attribute has been present since 4.2.3.
Note, however, the corresponding Spring Data GemFire GatewayHubFactoryBean class currently allows the GemFire GatewayHub &amp;amp;apos;maximumTimeBetweenPings&amp;amp;apos; property to be set using the &amp;amp;apos;setMaximumTimeBetweenPings(:int)&amp;amp;apos; FactoryBean method.</description>
			<version>1.4.5 (Dijkstra SR5)</version>
			<fixedVersion>1.5.3 (Evans SR3), 1.6 RC1 (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.GatewayHubParser.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewayHubFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.GatewayHubNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.test.MockGatewayHubFactory.java</file>
		</fixedFiles>
	</bug>
	<bug id="378" opendate="2015-02-23 16:57:04" fixdate="2015-02-25 18:10:53" resolution="Fixed">
		<buginformation>
			<summary>SDG completely ignores the &amp;apos;socket-read-timeout&amp;apos; attribute on the Gateway element nested in a GatewayHub.</summary>
			<description>The value of the &amp;amp;apos;socket-read-timeout&amp;amp;apos; attribute on the &amp;lt;gfe:gateway&amp;gt; element nested inside the &amp;lt;gfe:gateway-hub&amp;gt; element is read/parsed but ignored and not set on the corresponding, resulting GemFire Gateway that is created by Spring Data GemFire&amp;amp;apos;s GatewayHubFactoryBean.</description>
			<version>1.5.2 (Evans SR2)</version>
			<fixedVersion>1.5.3 (Evans SR3), 1.6 RC1 (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.wan.GatewayHubFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewayHubFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.GatewayHubNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewayProxy.java</file>
		</fixedFiles>
	</bug>
	<bug id="258" opendate="2014-02-27 21:22:06" fixdate="2015-03-02 11:25:36" resolution="Fixed">
		<buginformation>
			<summary>The SDG XML namespace &lt;partitioned-region&gt; element is missing the &amp;apos;data-policy&amp;apos; attribute.</summary>
			<description>The &amp;lt;gfe:partitioned-region/&amp;gt; element in the Spring Data GemFire XML namespace is missing the data-policy attribute, which should be added for  consistency with the &amp;lt;gfe:local-region/&amp;gt; and &amp;lt;gfe:replicated-region/&amp;gt; XML namespace peer Cache Region types.</description>
			<version>1.0.0</version>
			<fixedVersion>1.4 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.LocalRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.ParsingUtils.java</file>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.ReplicatedRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.AbstractRegionParserTest.java</file>
			<file type="M">org.springframework.data.gemfire.ReplicatedRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.PartitionedRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.SubRegionWithInvalidDataPolicyTest.java</file>
			<file type="M">org.springframework.data.gemfire.mapping.MappingPdxSerializer.java</file>
			<file type="M">org.springframework.data.gemfire.LocalRegionFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.AbstractRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.PartitionedRegionFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.PartitionedRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.LocalRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.ReplicatedRegionFactoryBeanTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="263" opendate="2014-03-21 00:27:33" fixdate="2015-03-02 11:26:53" resolution="Fixed">
		<buginformation>
			<summary>The &amp;apos;disk-synchronous&amp;apos; Region attribute does not get successfully applied when explicitly set to false.</summary>
			<description>Currently, when a user sets the disk-synchronous attribute when defining a GemFire Region using Spring Data GemFire XML namespace meta-data, the value is ignored if explicitly set to false.  GemFire defaults the value of diskSynchronous RegionAttributes property to true, which effectively has no affect.
Furthermore, the disk-synchronous attribute on the baseReadOnlyRegionType in the SDG XML schema currently defaults the value to false.  However, this will have not effect since the attribute is not properly parsed, thus resulting in Regions always being defined with synchronous disk access when using the SDG XML namespace.</description>
			<version>1.0.0</version>
			<fixedVersion>1.4 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.LocalRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.ParsingUtils.java</file>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.ReplicatedRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.AbstractRegionParserTest.java</file>
			<file type="M">org.springframework.data.gemfire.ReplicatedRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.PartitionedRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.SubRegionWithInvalidDataPolicyTest.java</file>
			<file type="M">org.springframework.data.gemfire.mapping.MappingPdxSerializer.java</file>
			<file type="M">org.springframework.data.gemfire.LocalRegionFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.AbstractRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.PartitionedRegionFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.PartitionedRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.LocalRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.ReplicatedRegionFactoryBeanTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="273" opendate="2014-04-16 23:42:19" fixdate="2015-03-02 11:27:56" resolution="Fixed">
		<buginformation>
			<summary>OrderBy (static) and Sort parameter (dynamic) Repository Queries do not work!</summary>
			<description>Presently, when a Spring Data GemFire user defines a GemFire Repository interface extension query, such as...






List&amp;lt;Person&amp;gt; findDistinctByFirstNameEqualOrderByLastNameAsc(String firstName);






The OrderBy clause is completely ignored and the "statically" generated Sort meta-data is not applied to the generated GemFire OQL Select Query.
Furthermore, if a user defines a query interface method with a org.springframework.data.domain.Sort parameter, like so...






List&amp;lt;Person&amp;gt; findDistinctByLastName(String lastName, Sort orderBy);






The Sort parameter is ignored and not used when generating the OQL Select Query.</description>
			<version>1.4 M1 (Dijkstra)</version>
			<fixedVersion>1.4 RC1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.repository.query.QueryStringUnitTests.java</file>
			<file type="M">org.springframework.data.gemfire.repository.query.QueryString.java</file>
			<file type="M">org.springframework.data.gemfire.repository.query.PartTreeGemfireRepositoryQuery.java</file>
			<file type="M">org.springframework.data.gemfire.repository.query.GemfireQueryCreator.java</file>
			<file type="M">org.springframework.data.gemfire.repository.sample.PersonRepository.java</file>
			<file type="M">org.springframework.data.gemfire.repository.sample.SubRegionRepositoryIntegrationTest.java</file>
			<file type="M">org.springframework.data.gemfire.repository.query.QueryBuilder.java</file>
			<file type="M">org.springframework.data.gemfire.repository.support.SimpleGemfireRepository.java</file>
		</fixedFiles>
	</bug>
	<bug id="278" opendate="2014-04-18 22:21:35" fixdate="2015-03-02 11:28:55" resolution="Fixed">
		<buginformation>
			<summary>The ContinuousQueryListenerContainer class&amp;apos;s &amp;apos;taskExecutor&amp;apos; property is not set properly by the GemfireListenerContainerParser.</summary>
			<description>The GemfireListenerContainerParser class does not appropriately set the taskExecutor property reference of the ContinuousQueryListenerContainer class, erroneously referring to the property using the name of the attribute, task-executor.
When specifying the task-executor attribute on the cq-listener-container element, like so...






&amp;lt;task:executor id="testTaskExecutor"/&amp;gt;









&amp;lt;gfe:cq-listener-container id="testContainerId" cache="gemfireCache" pool-name="clientPool" 




        task-executor="testTaskExecutor"&amp;gt;




    &amp;lt;gfe:listener ref="testQueryListener" query="SELECT * FROM /test-cq" name="Q1"/&amp;gt;




&amp;lt;/gfe:cq-listener-container&amp;gt;






The following Exception is thrown by the Spring container on startup...






java.lang.IllegalStateException: Failed to load ApplicationContext




	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:99)




	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:122)




	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109)




	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75)




	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:307)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:211)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:288)




	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:284)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88)




	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)




	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)




	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)




	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)




	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)




	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)




	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)




	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)




	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)




	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)




	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)




	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:76)




	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:195)




	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63)




	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)




	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)




Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;testContainerId&amp;amp;apos;: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property &amp;amp;apos;task-executor&amp;amp;apos; of bean class [org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer]: Bean property &amp;amp;apos;task-executor&amp;amp;apos; is not writable or has an invalid setter method. Did you mean &amp;amp;apos;taskExecutor&amp;amp;apos;?




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1453)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1158)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296)




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:628)




	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)




	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)




	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:120)




	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60)




	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:100)




	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:248)




	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:64)




	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:91)




	... 30 more




Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property &amp;amp;apos;task-executor&amp;amp;apos; of bean class [org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer]: Bean property &amp;amp;apos;task-executor&amp;amp;apos; is not writable or has an invalid setter method. Did you mean &amp;amp;apos;taskExecutor&amp;amp;apos;?




	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1043)




	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:903)




	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:75)




	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1450)




	... 46 more





</description>
			<version>1.0.0</version>
			<fixedVersion>1.4 RC1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.fork.CacheServerProcess.java</file>
			<file type="M">org.springframework.data.gemfire.listener.adapter.ContainerXmlSetupTest.java</file>
			<file type="M">org.springframework.data.gemfire.listener.ContinuousQueryListener.java</file>
			<file type="M">org.springframework.data.gemfire.listener.adapter.ContinuousQueryListenerAdapter.java</file>
			<file type="M">org.springframework.data.gemfire.config.GemfireListenerContainerParser.java</file>
			<file type="M">org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer.java</file>
			<file type="M">org.springframework.data.gemfire.listener.ContinuousQueryDefinition.java</file>
		</fixedFiles>
	</bug>
	<bug id="282" opendate="2014-04-25 16:49:53" fixdate="2015-03-02 11:29:50" resolution="Fixed">
		<buginformation>
			<summary>The Eviction &amp;apos;action&amp;apos;, other than the default, for a PARTITION Region is not properly passed to the GemFire EvictionAttributes.createLRUEntryAttributes(..) factory method when the &amp;apos;threshold&amp;apos; is not set.</summary>
			<description>When specifying LRU Entry Count Eviction attributes on a PARTITION Region, the value for the action attribute is ignored if the threshold attribute (corresponding to the GemFire EvictionAttributes class&amp;amp;apos;s maximum property) is not also set.</description>
			<version>1.3.3</version>
			<fixedVersion>1.4 RC1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.test.MockRegionFactory.java</file>
			<file type="M">org.springframework.data.gemfire.config.LocalRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.ReplicatedRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.PartitionedRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.test.StubCache.java</file>
			<file type="M">org.springframework.data.gemfire.config.EvictionAttributesFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.LocalRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.EvictionAttributesFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="232" opendate="2013-11-15 23:36:24" fixdate="2015-03-02 11:35:30" resolution="Fixed">
		<buginformation>
			<summary>Unable to specify Order Policy for Serial Async Event Queue</summary>
			<description>This problem is similar to SGF-231 where the user is unable to set the Order Policy for Serial Gateway Senders.</description>
			<version>1.3.3</version>
			<fixedVersion>1.3.3, 1.4 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.GemfireV7GatewayNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewaySenderFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewaySenderFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.wan.AbstractWANComponentFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="233" opendate="2013-11-16 13:05:50" fixdate="2015-03-02 11:35:52" resolution="Fixed">
		<buginformation>
			<summary>Cannot specify a Disk Store to be used for overflow on an Async Event Queue without enabling persistence.</summary>
			<description>This problem is the same issue as the problem described in SGF-230 and has the same/similar resolution.</description>
			<version>1.3.3</version>
			<fixedVersion>1.3.3, 1.4 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewaySenderFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewaySenderFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.wan.AsyncEventQueueFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="235" opendate="2013-11-20 08:42:42" fixdate="2015-03-02 11:36:18" resolution="Fixed">
		<buginformation>
			<summary>NPE in DefaultFunctionArgumentResolver.resolveFunctionArguments(30) when a Function has no arguments and none are provided.</summary>
			<description>Encountered a NullPointerException in the DefaultFunctionArgumentResolver class when executing a GemFire Function declared without arguments and not explicitly passing any arguments (as any dev would expect).






com.gemstone.gemfire.cache.execute.FunctionException: java.lang.NullPointerException




	at com.gemstone.gemfire.internal.cache.execute.LocalResultCollectorImpl.setException(LocalResultCollectorImpl.java:189)




	at com.gemstone.gemfire.internal.cache.execute.DistributedRegionFunctionResultSender.setException(DistributedRegionFunctionResultSender.java:228)




	at com.gemstone.gemfire.internal.cache.execute.AbstractExecution.handleException(AbstractExecution.java:607)




	at com.gemstone.gemfire.internal.cache.execute.AbstractExecution.executeFunctionLocally(AbstractExecution.java:378)




	at com.gemstone.gemfire.internal.cache.execute.AbstractExecution$2.run(AbstractExecution.java:316)




	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)




	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)




	at com.gemstone.gemfire.distributed.internal.DistributionManager.runUntilShutdown(DistributionManager.java:692)




	at com.gemstone.gemfire.distributed.internal.DistributionManager$8$1.run(DistributionManager.java:1116)




	at java.lang.Thread.run(Thread.java:695)




Caused by: java.lang.NullPointerException




	at org.springframework.data.gemfire.function.DefaultFunctionArgumentResolver.resolveFunctionArguments(DefaultFunctionArgumentResolver.java:30)




	at org.springframework.data.gemfire.function.FunctionContextInjectingArgumentResolver.resolveFunctionArguments(FunctionContextInjectingArgumentResolver.java:86)




	at org.springframework.data.gemfire.function.PojoFunctionWrapper.execute(PojoFunctionWrapper.java:107)




	at com.gemstone.gemfire.internal.cache.execute.AbstractExecution.executeFunctionLocally(AbstractExecution.java:352)




	... 6 more











The workaround to avoiding this NPE is simple, a developer just needs to pass an empty Object array to the Execution.withArgs(..) method like so...






FunctionService.onRegion(appData).withArgs(new Object[0]);






Unfortunately, GemFire&amp;amp;apos;s FunctionContext implementing class returns NULL instead of an empty Object array (as it should) when no arguments were specified, or rather when the Function takes no arguments.</description>
			<version>1.3.3</version>
			<fixedVersion>1.3.4, 1.4 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.function.DefaultFunctionArgumentResolver.java</file>
			<file type="M">org.springframework.data.gemfire.function.FunctionArgumentResolverTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="242" opendate="2013-12-06 13:59:31" fixdate="2015-03-02 11:37:21" resolution="Fixed">
		<buginformation>
			<summary>When defining "membership-attributes" for a Region, the bean definition "required-roles" attribute is required and, when specified, causes a BeanCreationException in the Spring container during initialization.</summary>
			<description>When a Region bean has been defined in the Spring application context with MembershipAttributes like so...






  &amp;lt;gfe:replicated-region name="MyRegion" ...&amp;gt;




    &amp;lt;gfe:membership-attributes loss-action="limited-access" required-roles="TEST" resumption-action="reinitialize"/&amp;gt;




    ...




  &amp;lt;/gfe:replicated-region&amp;gt;






The following IllegalStateException/BeanCreationException is thrown...






java.lang.IllegalStateException: Failed to load ApplicationContext




	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:99)




	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:122)




	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109)




	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75)




	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:312)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:211)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:288)




	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:284)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88)




	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)




	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)




	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)




	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)




	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)




	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)




	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)




	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)




	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)




	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:76)




	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:195)




	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63)




	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)




	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)




Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;/Customers/Accounts&amp;amp;apos;: Cannot create inner bean &amp;amp;apos;(inner bean)&amp;amp;apos; of type [org.springframework.data.gemfire.RegionAttributesFactoryBean] while setting bean property &amp;amp;apos;attributes&amp;amp;apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;(inner bean)&amp;amp;apos;: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: array element type mismatch




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:282)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:126)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1417)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1158)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296)




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:610)




	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)




	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)




	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:120)




	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60)




	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:100)




	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:248)




	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:64)




	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:91)




	... 28 more




Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;(inner bean)&amp;amp;apos;: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: array element type mismatch




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:529)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:271)




	... 46 more




Caused by: java.lang.IllegalArgumentException: array element type mismatch




	at java.lang.reflect.Array.set(Native Method)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedArray(BeanDefinitionValueResolver.java:341)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:150)




	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:623)




	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:148)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1075)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:979)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:487)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:271)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:126)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1417)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1158)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)




	... 48 more






The required-roles attribute of the membership-attributes element in a Region bean definition is required.  When membership-attributes are specified and the subsequent com.gemstone.gemfire.cache.MembershipAttributes object is constructed, Spring Data GemFire attempts to create the instance of MembershipAttributes using the constructor by passing the list of "Roles" by name in using a Spring ManagedList, where as a String[] is expected by the appropriate constructor instead.  This leads to the underlying cause IllegalArgumentException, array element type mismatch.
</description>
			<version>1.0.0</version>
			<fixedVersion>1.4 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionUsingDataPolicyAndShortcutTest.java</file>
			<file type="M">org.springframework.data.gemfire.RegionLookupFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.ParsingUtils.java</file>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.test.MockRegionFactory.java</file>
			<file type="M">org.springframework.data.gemfire.config.ReplicatedRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.GemfireNamespaceHandler.java</file>
			<file type="M">org.springframework.data.gemfire.config.SubRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.PartitionedRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.ReplicatedRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.LocalRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.SubRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.AbstractRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.LookupRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionParser.java</file>
		</fixedFiles>
	</bug>
	<bug id="244" opendate="2013-12-19 11:22:32" fixdate="2015-03-02 11:37:46" resolution="Fixed">
		<buginformation>
			<summary>The nested &lt;gfe:gateway-sender/&gt;, &lt;gfe:event-filter/&gt; element is missing the ref attribute in the XSD.</summary>
			<description>&amp;lt;gfe:gateway-sender id="modelTransferAlpha"
                        remote-distributed-system-id="$
{alpha.dsi}
"
                        batch-size="1"
                        batch-time-interval="10"
                        persistent="false"&amp;gt;
        &amp;lt;gfe:event-filter ref="alphaSenderFilter"/&amp;gt;
    &amp;lt;/gfe:gateway-sender&amp;gt;
Doesn&amp;amp;apos;t like the ref attribute.</description>
			<version>1.3.3</version>
			<fixedVersion>1.4 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.GemfireV7GatewayNamespaceTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="251" opendate="2014-02-03 16:01:24" fixdate="2015-03-02 11:38:48" resolution="Fixed">
		<buginformation>
			<summary>Creating and using GemFire Repositories based on the Spring Data Commons Repository abstraction does not work properly for domain objects stored in Subregions. </summary>
			<description>When a user implements an application domain object associated with a GemFire Subregion, by way of the @Region annotation on the domain object class, along with a corresponding Repository/GemfireRepository interface extension for basic data access and query operations, Spring Data GemFire fails to properly find the Subregion bean defined in the Spring ApplicationContext, and results in the following Exception...







org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;org.spring.data.gemfire.cache.SubRegionRepositoryTest&amp;amp;apos;: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.spring.data.gemfire.app.dao.repo.ProgrammerRepository org.spring.data.gemfire.cache.SubRegionRepositoryTest.programmersRepo; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;programmerRepository&amp;amp;apos;: FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: No region &amp;amp;apos;/Users/Programmers&amp;amp;apos; found for domain class class org.spring.data.gemfire.app.beans.Programmer! Make sure you have configured a Gemfire region of that name in your application context!




	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1146)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:376)




	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:110)




	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75)




	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:312)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:211)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:288)




	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:284)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88)




	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)




	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)




	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)




	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)




	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)




	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)




	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)




	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)




	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)




	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:76)




	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:195)




	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63)




	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)




	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)




Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.spring.data.gemfire.app.dao.repo.ProgrammerRepository org.spring.data.gemfire.cache.SubRegionRepositoryTest.programmersRepo; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;programmerRepository&amp;amp;apos;: FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: No region &amp;amp;apos;/Users/Programmers&amp;amp;apos; found for domain class class org.spring.data.gemfire.app.beans.Programmer! Make sure you have configured a Gemfire region of that name in your application context!




	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:517)




	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)




	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:286)




	... 29 more




Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;programmerRepository&amp;amp;apos;: FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: No region &amp;amp;apos;/Users/Programmers&amp;amp;apos; found for domain class class org.spring.data.gemfire.app.beans.Programmer! Make sure you have configured a Gemfire region of that name in your application context!




	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:149)




	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:102)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1468)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:249)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:912)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:855)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:770)




	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:489)




	... 31 more




Caused by: java.lang.IllegalStateException: No region &amp;amp;apos;/Users/Programmers&amp;amp;apos; found for domain class class org.spring.data.gemfire.app.beans.Programmer! Make sure you have configured a Gemfire region of that name in your application context!




	at org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory.getTemplate(GemfireRepositoryFactory.java:111)




	at org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory.getTargetRepository(GemfireRepositoryFactory.java:98)




	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:136)




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject(RepositoryFactoryBeanSupport.java:153)




	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject(RepositoryFactoryBeanSupport.java:43)




	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:142)




	... 39 more





</description>
			<version>1.0.0</version>
			<fixedVersion>1.4 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.repository.query.QueryStringUnitTests.java</file>
			<file type="M">org.springframework.data.gemfire.repository.query.QueryString.java</file>
			<file type="M">org.springframework.data.gemfire.repository.sample.User.java</file>
			<file type="M">org.springframework.data.gemfire.repository.sample.UserRepository.java</file>
		</fixedFiles>
	</bug>
	<bug id="252" opendate="2014-02-06 14:54:23" fixdate="2015-03-02 11:39:14" resolution="Fixed">
		<buginformation>
			<summary>Spring GemFire&amp;apos;s Repository extension does not properly handle multiple, identically named Subregions for persisting corresponding application domain objects associated by way of the @Region annotation.</summary>
			<description>When an application defines 2 or more different application domain objects, for instance...






@Region("Users")




public class AdminUser extends User {




  ...




}









@Region("Users")




public class GuestUser extends User {




  ...




}






Where each domain object is stored in multiple different, but identically named Subregions in GemFire, where the SDG XML namespace-based configuration meta-data might look like the following...






&amp;lt;gfe:replicated-region id="Local" persistent="false"&amp;gt;




  &amp;lt;gfe:replicated-region name="Admin" persistent="false"&amp;gt;




    &amp;lt;gfe:replicated-region name="Users" persistent="false"/&amp;gt;




  &amp;lt;/gfe:replicated-region&amp;gt;




  &amp;lt;gfe:replicated-region name="Guest" persistent="false"&amp;gt;




    &amp;lt;gfe:replicated-region name="Users" persistent="false"/&amp;gt;




  &amp;lt;/gfe:replicated-region&amp;gt;




&amp;lt;/gfe:replicated-region&amp;gt;






Then Spring Data GemFire&amp;amp;apos;s Repository extension support infrastructure fails to properly associate the corresponding application domain object to the appropriate Subregion, i.e. ...
AdminUser to /Local/Admin/Users
and...
GuestUser to /Local/Guest/Users</description>
			<version>1.0.0</version>
			<fixedVersion>1.4 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.repository.query.QueryStringUnitTests.java</file>
			<file type="M">org.springframework.data.gemfire.repository.query.QueryString.java</file>
			<file type="M">org.springframework.data.gemfire.repository.sample.Programmer.java</file>
			<file type="M">org.springframework.data.gemfire.mapping.Regions.java</file>
			<file type="M">org.springframework.data.gemfire.mapping.Region.java</file>
			<file type="M">org.springframework.data.gemfire.repository.sample.SubRegionRepositoryIntegrationTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="255" opendate="2014-02-24 17:25:12" fixdate="2015-03-02 11:39:38" resolution="Fixed">
		<buginformation>
			<summary>The &lt;gfe:eviction&gt; element&amp;apos;s &amp;apos;threshold&amp;apos; attribute is required even when the Eviction type is &amp;apos;HEAP_PERCENTAGE&amp;apos;.</summary>
			<description>Currently, the Spring Data GemFire XML schema (XSD) requires the threshold attribute on the &amp;lt;gfe:eviction&amp;gt; element in SDG XML namespace configuration meta-data.  The &amp;lt;gfe:eviction&amp;gt; is used to set Evictions settings on a Region such as (maximums, action and algorithm/type) where the threshold corresponds to the maximum value for ENTRY_COUNT and MEMORY_SIZE.  However, the threshold has no meaning for the HEAP_PERCENTAGE Eviction type/algorithm and therefore should not be required.
The "threshold", or rather percentage when Regions employ the HEAP_LRU algorithm for Eviction comes from the Resource Manager&amp;amp;apos;s configuration applied at the Cache-level, and in SDG, that means the &amp;lt;gfe:cache&amp;gt; element&amp;amp;apos;s  values for critical-heap-percentage and eviction-heap-percentage.</description>
			<version>1.0.0</version>
			<fixedVersion>1.3.4, 1.4 M1 (Dijkstra)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.EvictionAttributesFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="221" opendate="2013-11-08 15:44:07" fixdate="2015-03-02 11:45:09" resolution="Fixed">
		<buginformation>
			<summary>Unable to register GemFire Async Event Listeners on SubRegions.</summary>
			<description>The following snippet of Spring Data GemFire context configuration meta-data...






  &amp;lt;gfe:replicated-region id="Customers" persistent="false"&amp;gt;




    &amp;lt;gfe:replicated-region name="Accounts" persistent="false"&amp;gt;




      &amp;lt;gfe:async-event-queue name="QueueOne" maximum-queue-memory="50" parallel="true" dispatcher-threads="4" order-policy="KEY"&amp;gt;




        &amp;lt;gfe:async-event-listener&amp;gt;




          &amp;lt;bean class="org.spring.data.gemfire.cache.asyncqueue.NoOpAsyncEventListener"/&amp;gt;




        &amp;lt;/gfe:async-event-listener&amp;gt;




      &amp;lt;/gfe:async-event-queue&amp;gt;




    &amp;lt;/gfe:replicated-region&amp;gt;




  &amp;lt;/gfe:replicated-region&amp;gt;






Throws the following Exception when the Spring container starts...






Exception in thread "main" org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;/Customers/Accounts/Orders/Items&amp;amp;apos;: Cannot resolve reference to bean &amp;amp;apos;/Customers/Accounts/Orders&amp;amp;apos; while setting bean property &amp;amp;apos;parent&amp;amp;apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;/Customers/Accounts/Orders&amp;amp;apos;: Cannot resolve reference to bean &amp;amp;apos;/Customers/Accounts&amp;amp;apos; while setting bean property &amp;amp;apos;parent&amp;amp;apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;/Customers/Accounts&amp;amp;apos;: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property &amp;amp;apos;asyncEventQueues&amp;amp;apos; of bean class [org.springframework.data.gemfire.SubRegionFactoryBean]: Bean property &amp;amp;apos;asyncEventQueues&amp;amp;apos; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:329)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:107)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1417)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1158)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296)




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:610)




	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)




	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)




	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:139)




	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:83)




	at org.spring.data.gemfire.app.main.PeerCacheApp.main(PeerCacheApp.java:26)




	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)




	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)




	at java.lang.reflect.Method.invoke(Method.java:597)




	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)




Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;/Customers/Accounts/Orders&amp;amp;apos;: Cannot resolve reference to bean &amp;amp;apos;/Customers/Accounts&amp;amp;apos; while setting bean property &amp;amp;apos;parent&amp;amp;apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;/Customers/Accounts&amp;amp;apos;: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property &amp;amp;apos;asyncEventQueues&amp;amp;apos; of bean class [org.springframework.data.gemfire.SubRegionFactoryBean]: Bean property &amp;amp;apos;asyncEventQueues&amp;amp;apos; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:329)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:107)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1417)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1158)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296)




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:323)




	... 20 more




Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;/Customers/Accounts&amp;amp;apos;: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property &amp;amp;apos;asyncEventQueues&amp;amp;apos; of bean class [org.springframework.data.gemfire.SubRegionFactoryBean]: Bean property &amp;amp;apos;asyncEventQueues&amp;amp;apos; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1453)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1158)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296)




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:323)




	... 30 more




Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property &amp;amp;apos;asyncEventQueues&amp;amp;apos; of bean class [org.springframework.data.gemfire.SubRegionFactoryBean]: Bean property &amp;amp;apos;asyncEventQueues&amp;amp;apos; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?




	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1042)




	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:902)




	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:75)




	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1450)




	... 38 more






It is not possible add GemFire Async Event Queues to GemFire SubRegions using Spring Data GemFire context configuration meta-data.</description>
			<version>1.3.2</version>
			<fixedVersion>1.3.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.SubRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="220" opendate="2013-11-08 15:31:58" fixdate="2015-03-02 11:45:36" resolution="Fixed">
		<buginformation>
			<summary>Unable to register GemFire Gateway Senders on SubRegions.</summary>
			<description>The following snippet of Spring Data GemFire context configuration meta-data...






  &amp;lt;gfe:replicated-region id="Customers" persistent="false"&amp;gt;




    &amp;lt;gfe:replicated-region name="Accounts" persistent="false"&amp;gt;




      &amp;lt;gfe:gateway-sender remote-distributed-system-id="21" name="sender" parallel="true" manual-start="true"/&amp;gt;




    &amp;lt;/gfe:replicated-region&amp;gt;




  &amp;lt;/gfe:replicated-region&amp;gt;






Throws the following Exception when the Spring container starts...






Exception in thread "main" org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;/Customers/Accounts/Orders/Items&amp;amp;apos;: Cannot resolve reference to bean &amp;amp;apos;/Customers/Accounts/Orders&amp;amp;apos; while setting bean property &amp;amp;apos;parent&amp;amp;apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;/Customers/Accounts/Orders&amp;amp;apos;: Cannot resolve reference to bean &amp;amp;apos;/Customers/Accounts&amp;amp;apos; while setting bean property &amp;amp;apos;parent&amp;amp;apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;/Customers/Accounts&amp;amp;apos;: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property &amp;amp;apos;gatewaySenders&amp;amp;apos; of bean class [org.springframework.data.gemfire.SubRegionFactoryBean]: Bean property &amp;amp;apos;gatewaySenders&amp;amp;apos; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:329)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:107)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1417)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1158)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296)




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:610)




	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)




	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)




	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:139)




	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:83)




	at org.spring.data.gemfire.app.main.PeerCacheApp.main(PeerCacheApp.java:26)




	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)




	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)




	at java.lang.reflect.Method.invoke(Method.java:597)




	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)




Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;/Customers/Accounts/Orders&amp;amp;apos;: Cannot resolve reference to bean &amp;amp;apos;/Customers/Accounts&amp;amp;apos; while setting bean property &amp;amp;apos;parent&amp;amp;apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;/Customers/Accounts&amp;amp;apos;: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property &amp;amp;apos;gatewaySenders&amp;amp;apos; of bean class [org.springframework.data.gemfire.SubRegionFactoryBean]: Bean property &amp;amp;apos;gatewaySenders&amp;amp;apos; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:329)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:107)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1417)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1158)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296)




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:323)




	... 20 more




Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;/Customers/Accounts&amp;amp;apos;: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property &amp;amp;apos;gatewaySenders&amp;amp;apos; of bean class [org.springframework.data.gemfire.SubRegionFactoryBean]: Bean property &amp;amp;apos;gatewaySenders&amp;amp;apos; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1453)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1158)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296)




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:323)




	... 30 more




Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property &amp;amp;apos;gatewaySenders&amp;amp;apos; of bean class [org.springframework.data.gemfire.SubRegionFactoryBean]: Bean property &amp;amp;apos;gatewaySenders&amp;amp;apos; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?




	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1042)




	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:902)




	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:75)




	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1450)




	... 38 more






It is not possible add GemFire Gateway Senders to GemFire SubRegions using Spring Data GemFire context configuration meta-data.</description>
			<version>1.3.2</version>
			<fixedVersion>1.3.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.SubRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="219" opendate="2013-11-08 14:48:25" fixdate="2015-03-02 11:46:07" resolution="Fixed">
		<buginformation>
			<summary>Unable to register GemFire CacheListeners on SubRegions.</summary>
			<description>When registering a GemFire CacheListener on a GemFire SubRegion  using Spring Data GemFire context configuration meta-data, like so...






  &amp;lt;gfe:replicated-region id="STREAM" data-policy="empty"&amp;gt;




    &amp;lt;gfe:replicated-region name="OrganizationUnits" scope="distributed-ack"/&amp;gt;




    &amp;lt;gfe:replicated-region name="GeoFences" scope="distributed-ack"/&amp;gt;




    &amp;lt;gfe:replicated-region name="Subscriptions" scope="distributed-ack"&amp;gt;




      &amp;lt;gfe:cache-listener&amp;gt;




        &amp;lt;bean id="STREAM_Subscriptions_StreamSubscriptionListener" class="com.gopivotal.rti.telco.refdata.StreamSubscriptionListener" /&amp;gt;




      &amp;lt;/gfe:cache-listener&amp;gt;




    &amp;lt;/gfe:replicated-region&amp;gt;




  &amp;lt;/gfe:replicated-region&amp;gt;






The following Spring container error occurs...






2013-11-08 08:59:36,800 [main] ERROR com.gopivotal.rti.boot.spring.AbstractXmlSpringInitializer - 




  Could not start Spring Container from resources [classpath:/spring/distgrid-context.xml]




org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;/STREAM/Subscriptions&amp;amp;apos;: 




  Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: 




  Invalid property &amp;amp;apos;cacheListeners&amp;amp;apos; of bean class [org.springframework.data.gemfire.SubRegionFactoryBean]: 




  Bean property &amp;amp;apos;cacheListeners&amp;amp;apos; is not writable or has an invalid setter method. Did you mean &amp;amp;apos;cacheListener&amp;amp;apos;?






There is only one Cache Listener defined.</description>
			<version>1.3.2</version>
			<fixedVersion>1.3.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.SubRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="218" opendate="2013-11-07 12:56:03" fixdate="2015-03-02 11:46:35" resolution="Fixed">
		<buginformation>
			<summary>The Eviction Policy on Client Subscription when configuring a GemFire Cache Server is not being properly set; always defaults to "NONE".</summary>
			<description>During testing for the fix of bug SGF-217, I uncovered another bug... Spring Data GemFire does not properly set the Eviction Policy based on the eviction-type attribute because it is pulling the attribute value from the wrong XML element (i.e. the eviction-type attribute value is being pulled from the &amp;lt;gfe:cache-server/&amp;gt; parent element) in the Spring context configuration meta-data as seen in the parseSubscription(..) method of the org.springframework.data.gemfire.server.CacheServerFactoryBean) class...






	private void parseSubscription(BeanDefinitionBuilder builder, Element element) {




		Element subConfig = DomUtils.getChildElementByTagName(element, "subscription-config");




		if (subConfig == null) {




			return;




		}









		ParsingUtils.setPropertyValue(subConfig, builder, "capacity", "subscriptionCapacity");




		ParsingUtils.setPropertyValue(subConfig, builder, "disk-store", "subscriptionDiskStore");




		String attr = element.getAttribute("eviction-type");




		if (StringUtils.hasText(attr)) {




			builder.addPropertyValue("subscriptionEvictionPolicy", attr.toUpperCase());




		}




	}






The element.getAttribute("eviction-type") should read subConfig.getAttribute("eviction-type").  As a result, unfortunately the Eviction Policy always defaults, or is set to "none".</description>
			<version>1.3.2</version>
			<fixedVersion>1.3.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.test.StubCacheServer.java</file>
			<file type="M">org.springframework.data.gemfire.config.CacheServerNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.CacheServerParser.java</file>
			<file type="M">org.springframework.data.gemfire.server.CacheServerFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="217" opendate="2013-11-07 10:36:37" fixdate="2015-03-02 11:47:01" resolution="Fixed">
		<buginformation>
			<summary>When configuring CacheServer with a Disk Store (used for client subscription queue overflow), the Cache Server fails to start up with an error.</summary>
			<description>When configuring CacheServer with a Disk Store (used for client subscription queue overflow), the Cache Server fails to start up with the following error:






2013-11-07 07:54:20,034 [main] ERROR com.gopivotal.rti.boot.spring.AbstractXmlSpringInitializer -  




    Could not start Spring Container from resources [classpath:/spring/distgrid-context.xml]




org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;DistGridCacheServer&amp;amp;apos;: 




    Invocation of init method failed; nested exception is java.io.FileNotFoundException: 




    class path resource [DEFAULT] cannot be resolved to URL because it does not exist






I&amp;amp;apos;ve tried changing the placement of the DiskStore and CacheServer elements in different positions, but the result is the same.  The bottom-line is that the CacheServer&amp;amp;apos;s disk-store attribute needs the referenced DiskStore to be instantiated first. </description>
			<version>1.3.2</version>
			<fixedVersion>1.3.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.CacheServerParser.java</file>
			<file type="M">org.springframework.data.gemfire.server.CacheServerFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="203" opendate="2013-10-08 17:26:34" fixdate="2015-03-02 11:49:52" resolution="Fixed">
		<buginformation>
			<summary>The treatment of &amp;apos;persistence&amp;apos; is wrong.</summary>
			<description>The treatment of &amp;amp;apos;persistence&amp;amp;apos; is wrong.  Overflow is not persistence, it only stores the data that won&amp;amp;apos;t fit in memory.  The assumption that turning on persistence could result in storing all the data would be in error if the other settings result in overflow.  The Gemfire settings, data policy and the shortcut should be passed to Gemfire without modification to prevent this from happening.</description>
			<version>1.3.2</version>
			<fixedVersion>1.3.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.ParsingUtils.java</file>
			<file type="M">org.springframework.data.gemfire.config.GemfireV7GatewayNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.AsyncEventQueueParser.java</file>
			<file type="M">org.springframework.data.gemfire.PartitionedRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.AbstractRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.LocalRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientRegionFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.DataPolicyConverterTest.java</file>
			<file type="M">org.springframework.data.gemfire.RegionLookupFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.ReplicatedRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.LocalRegionFactoryBeanTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="381" opendate="2015-03-06 11:50:22" fixdate="2015-03-10 14:27:48" resolution="Fixed">
		<buginformation>
			<summary>Enable RegionFactoryBean to respect the Data Policy specified on a nested or referenced RegionAttributes bean definition.</summary>
			<description>It was discovered by Jeff Cherng, Field Engineer working with State Farm, in the latest GA version of Spring Data GemFire (SDG) (@ the time of this bug creation, 1.5.2) that the RegionFactoryBean ignores the DataPolicy value on a nested or referenced RegionAttributes bean definition.
If a user specifies a GemFire Region bean definition in the Spring context using Spring Data GemFire&amp;amp;apos;s RegionFactoryBean class directly rather than using SDG&amp;amp;apos;s XML namespace (gfe) or one of SDG&amp;amp;apos;s strongly-typed FactoryBeans, e.g. PartitionedRegionFactoryBean for a GemFire PARTITION Region, to create a Region, the RegionFactoryBean will not respect the value of the DataPolicy on a nested or referenced RegionAttributes bean definition defined in the Spring context configuration meta-data.
For instance, given the following Spring (SDG) XML configuration metadata...






&amp;lt;bean id="Example" class="org.springframework.data.gemfire.RegionFactoryBean"&amp;gt;




    &amp;lt;property name="attributes"&amp;gt;




        &amp;lt;bean class="org.springframework.data.gemfire.RegionAttributesFactoryBean"




                   p:dataPolicy="PERSISTENT_PARTITION"




                   p:statisticsEnabled="true"&amp;gt;




            &amp;lt;property name="partitionAttributes"&amp;gt;




                &amp;lt;bean class="org.springframework.data.gemfire.PartitionAttributesFactoryBean" p:redundantCopies="1" p:recoveryDelay="0"/&amp;gt;




            &amp;lt;/property&amp;gt;




        &amp;lt;/bean&amp;gt;




    &amp;lt;/property&amp;gt;




&amp;lt;/bean&amp;gt;






Here, the user is trying to create a PARTITION Region, however is using Spring Data GemFire&amp;amp;apos;s RegionFactoryBean class to do so, which is ignoring the value (i.e. PERSISTENT_PARTITION) of the DataPolicy attribute on the nested RegionAttributesFactoryBean. bean definition.</description>
			<version>1.4.5 (Dijkstra SR5)</version>
			<fixedVersion>1.5.3 (Evans SR3), 1.6 GA (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.RegionDefinitionUsingBeansNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.test.MockRegionFactory.java</file>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.support.AbstractRegionFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.LocalRegionFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="384" opendate="2015-03-16 15:09:38" fixdate="2015-03-19 11:38:55" resolution="Fixed">
		<buginformation>
			<summary>Issue with partitioned-region-template when persistence is enabled.</summary>
			<description>I am trying to use &amp;amp;apos;partitioned-region-template&amp;amp;apos; to simplify my configurations. However, when persistence is enabled, SDG is trying to set "PERSISTENT_REPLICATE" to a Partitioned Region. Please see the errors from below attached stacktrace. When persistence is off, there is no issue. Please help to take a look at it. Thanks!






&amp;lt;gfe:partitioned-region-template id="PartitionedRegionTemplate" total-buckets="163" copies="1" persistent="true" disk-store-ref="regionDataStore"&amp;gt;




    &amp;lt;gfe:partition-resolver ref="colocationPartitionResolver" /&amp;gt;




    &amp;lt;gfe:eviction type="HEAP_PERCENTAGE" action="OVERFLOW_TO_DISK" /&amp;gt;




&amp;lt;/gfe:partitioned-region-template&amp;gt;









&amp;lt;gfe:partitioned-region id="fundRegion" template="PartitionedRegionTemplate" /&amp;gt;






Stack Trace:






Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;fundRegion&amp;amp;apos;: Cannot create inner bean &amp;amp;apos;(inner bean)#49d67b41&amp;amp;apos; of type [org.springframework.data.gemfire.RegionAttributesFactoryBean] while setting bean property &amp;amp;apos;attributes&amp;amp;apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;(inner bean)#49d67b41&amp;amp;apos;: Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are:




PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property &amp;amp;apos;partitionAttributes&amp;amp;apos; threw exception; nested exception is java.lang.IllegalStateException: Data policy PERSISTENT_REPLICATE is not allowed for a partitioned region. DataPolicies other than [PARTITION, PERSISTENT_PARTITION] are not allowed.




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:287)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:129)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1419)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1160)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293)




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)




	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:449)




	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:423)




	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:551)




	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:178)




	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)




	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:304)




	... 13 more




Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;(inner bean)#49d67b41&amp;amp;apos;: Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are:




PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property &amp;amp;apos;partitionAttributes&amp;amp;apos; threw exception; nested exception is java.lang.IllegalStateException: Data policy PERSISTENT_REPLICATE is not allowed for a partitioned region. DataPolicies other than [PARTITION, PERSISTENT_PARTITION] are not allowed.




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1455)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1160)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:276)




	... 28 more




Caused by: org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are:




PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property &amp;amp;apos;partitionAttributes&amp;amp;apos; threw exception; nested exception is java.lang.IllegalStateException: Data policy PERSISTENT_REPLICATE is not allowed for a partitioned region. DataPolicies other than [PARTITION, PERSISTENT_PARTITION] are not allowed.




	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:101)




	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1452)




	... 32 more





</description>
			<version>1.5.2 (Evans SR2)</version>
			<fixedVersion>1.5.3 (Evans SR3), 1.6 GA (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.ParsingUtils.java</file>
			<file type="M">org.springframework.data.gemfire.config.ReplicatedRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.test.support.FileSystemUtils.java</file>
			<file type="M">org.springframework.data.gemfire.config.TemplateRegionsNamespaceTests.java</file>
			<file type="M">org.springframework.data.gemfire.test.support.FileUtils.java</file>
			<file type="M">org.springframework.data.gemfire.config.AbstractRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.PartitionedRegionParser.java</file>
		</fixedFiles>
	</bug>
	<bug id="371" opendate="2015-02-06 15:23:24" fixdate="2015-03-23 17:26:30" resolution="Fixed">
		<buginformation>
			<summary>The GatewayReceiverFactoryBean needs to set GatewayReceiverFactory.setManualStart(false) in GemFire 8.1 in order to enable manual starts on a GatewayReceiver.</summary>
			<description>Due to changes in GemFire 8.1, even though Spring Data GemFire&amp;amp;apos;s &amp;lt;gfe:gateway-receiver/&amp;gt; XML namespace (XSD) element for configuring and creating GemFire GatewayReceiver components as a bean in the Spring container supports "manual starts" using the manual-start attribute, the SDG GatewayReceiverFactoryBean now needs to properly set GemFire&amp;amp;apos;s GatewayReceiverFactory.setManualStart(:boolean), otherwise the GatewayReceiver will start on initialization even when manual-start is explicitly set to true as determined by GatewayReceiver.isRunning().</description>
			<version>1.7 M1 (Gosling)</version>
			<fixedVersion>1.7 M1 (Gosling)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.wan.GatewayReceiverFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.test.StubGatewayReceiverFactory.java</file>
			<file type="M">org.springframework.data.gemfire.wan.ManualGatewayReceiverStartIntegrationTest.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="409" opendate="2015-06-11 13:05:35" fixdate="2015-07-20 16:21:30" resolution="Fixed">
		<buginformation>
			<summary>Modify the GemfireDataSourcePostProcessor (basis for &lt;gfe:datasource&gt;) to not assume a GemFire Server was configured and bootstrapped with Spring and subsequently that the SDG ListRegionsOnServerFunction was registered.</summary>
			<description>When a developer starts a non-Spring configured and bootstrapped GemFire Server (e.g. with Gfsh) and subsequently connects to the Server with a Spring configured and bootstrapped GemFire Cache client (ClientCache) using the &amp;lt;gfe-data:datasource&amp;gt; element in the SDG XML "data" namespace, the following Exception will occur...






java.lang.reflect.InvocationTargetException




  ...




Caused by: com.gemstone.gemfire.cache.client.ServerOperationException:  : While performing a remote execute     Functionorg.springframework.data.gemfire.support.ListRegionsOnServerFunction




  at com.gemstone.gemfire.cache.client.internal.ExecuteFunctionOp$ExecuteFuncti onOpImpl.processResponse(ExecuteFunctionOp.java:623)




  at com.gemstone.gemfire.cache.client.internal.AbstractOp.processResponse(AbstractOp.java:218) 




  at com.gemstone.gemfire.cache.client.internal.AbstractOp.attemptReadResponse( AbstractOp.java:153)




  at com.gemstone.gemfire.cache.client.internal.AbstractOp.attempt(AbstractOp.java:372)




  at com.gemstone.gemfire.cache.client.internal.ConnectionImpl.execute(ConnectionImpl.java:267)




  at com.gemstone.gemfire.cache.client.internal.pooling.PooledConnection.execute(PooledConnection.java:320)




  at com.gemstone.gemfire.cache.client.internal.OpExecutorImpl.executeWithPossibleReAuthentication(OpExecutorImpl.java:942)




  at com.gemstone.gemfire.cache.client.internal.OpExecutorImpl.executeOnServer(OpExecutorImpl.java:375)




  at com.gemstone.gemfire.cache.client.internal.OpExecutorImpl.executeOn(OpExecutorImpl.java:339)




  at com.gemstone.gemfire.cache.client.internal.PoolImpl.executeOn(PoolImpl.java:732)




  at com.gemstone.gemfire.cache.client.internal.SingleHopOperationCallable.call(SingleHopOperationCallable.java:46)




  at java.util.concurrent.FutureTask.run(FutureTask.java:262)




  at  java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java: 1145)




  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)




  ... 1 more




Caused by: java.lang.ClassNotFoundException:   org.springframework.data.gemfire.support.ListRegionsOnServerFunction




  at java.net.URLClassLoader$1.run(URLClassLoader.java:372)




  at java.net.URLClassLoader$1.run(URLClassLoader.java:361)




  at java.security.AccessController.doPrivileged(Native Method)




  at java.net.URLClassLoader.findClass(URLClassLoader.java:360)




  at java.lang.ClassLoader.loadClass(ClassLoader.java:424)




  at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)




  at java.lang.ClassLoader.loadClass(ClassLoader.java:357)




  at java.lang.Class.forName0(Native Method)




  at java.lang.Class.forName(Class.java:340)




  at java.io.ObjectInputStream.resolveClass(ObjectInputStream.java:626)




  at com.gemstone.gemfire.internal.InternalDataSerializer$DSObjectInputStream.resolveClass(InternalDataSerializer.java:3563)




  at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1613)




  at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1518)




  at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1774)




  at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1351)




  at java.io.ObjectInputStream.readObject(ObjectInputStream.java:371)




  at com.gemstone.gemfire.internal.InternalDataSerializer.basicReadObject(InternalDataSerializer.java:2966)




  at com.gemstone.gemfire.DataSerializer.readObject(DataSerializer.java:3210)




  at com.gemstone.gemfire.internal.util.BlobHelper.deserializeBlob(BlobHelper.java:110)




  at com.gemstone.gemfire.internal.util.BlobHelper.deserializeBlob(BlobHelper.java:77)




  at com.gemstone.gemfire.internal.cache.tier.sockets.CacheServerHelper.deserialize(CacheServerHelper.java:55)




  at com.gemstone.gemfire.internal.cache.tier.sockets.Part.getObject(Part.java:233)




  at com.gemstone.gemfire.internal.cache.tier.sockets.Part.getObject(Part.java:238)




  at com.gemstone.gemfire.internal.cache.tier.sockets.Part.getStringOrObject(Part.java:243)




  at com.gemstone.gemfire.internal.cache.tier.sockets.command.ExecuteFunction66.cmdExecute(ExecuteFunction66.java:124)




  at com.gemstone.gemfire.internal.cache.tier.sockets.command.ExecuteFunction70.cmdExecute(ExecuteFunction70.java:51)




  at com.gemstone.gemfire.internal.cache.tier.sockets.BaseCommand.execute(BaseCommand.java:182)




  at com.gemstone.gemfire.internal.cache.tier.sockets.ServerConnection.doNormalMsg(ServerConnection.java:789)




  at com.gemstone.gemfire.internal.cache.tier.sockets.ServerConnection.doOneMessage(ServerConnection.java:920)




  at com.gemstone.gemfire.internal.cache.tier.sockets.ServerConnection.run(ServerConnection.java:1165)




  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)




  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)




  at com.gemstone.gemfire.internal.cache.tier.sockets.AcceptorImpl$1$1.run(AcceptorImpl.java:577)




  ... 1 more






This Exception occurs because the ListRegionsOnServerFunction is a Spring Data GemFire provided Function and will only be registered with the GemFire Server if and when the GemFire Server is configured and bootstrapped with Spring.
I have packaged the ListRegionsOnServerFunction class in a separate JAR file (listRegionsOnServerFunction.jar) and attached it to this bug for convenience.
To workaround this issue, a developer can add the listRegionsOnServerFunction.jar file to the GemFire Server&amp;amp;apos;s CLASSPATH on start...






gfsh&amp;gt;start server --name=X ... --classpath=/absolute/path/to/listRegionsOnServerFunction.jar






Or use Gfsh&amp;amp;apos;s &amp;amp;apos;deploy&amp;amp;apos; command to deploy the listRegionsOnServerFunction.jar to any/all running GemFire Servers in the cluster, for instance...






gfsh&amp;gt;deploy --jar=/absolute/path/to/listRegionsOnServerFunction.jar






More details about Gfsh&amp;amp;apos;s &amp;amp;apos;deploy&amp;amp;apos; command can be found here.</description>
			<version>1.5.3 (Evans SR3)</version>
			<fixedVersion>1.6.2 (Fowler SR2), 1.7 RC1 (Gosling)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.process.ProcessExecutor.java</file>
			<file type="M">org.springframework.data.gemfire.client.GemFireDataSourceUsingNonSpringConfiguredGemFireServerIntegrationTest.java</file>
			<file type="M">org.springframework.data.gemfire.client.GemfireDataSourcePostProcessorTest.java</file>
			<file type="M">org.springframework.data.gemfire.client.GemfireDataSourcePostProcessor.java</file>
			<file type="M">org.springframework.data.gemfire.util.CollectionUtils.java</file>
			<file type="M">org.springframework.data.gemfire.support.ListRegionsOnServerFunction.java</file>
			<file type="M">org.springframework.data.gemfire.util.CollectionUtilsTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="421" opendate="2015-08-03 14:38:51" fixdate="2015-08-03 21:16:25" resolution="Fixed">
		<buginformation>
			<summary>Fix Spring Data GemFire&amp;apos;s MappingPdxSerializer due to the package-private access modifier change on org.springframework.data.mapping.model.BeanWrapper.</summary>
			<description>Recently, the BeanWrapper class in Spring Data Commons was changed from a public class to a package-private class, which broke the MappingPdxSerializer in Spring Data GemFire.</description>
			<version>1.7 RC1 (Gosling)</version>
			<fixedVersion>1.7 RC1 (Gosling)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="D">org.springframework.data.gemfire.mapping.BeanPropertyAccessor.java</file>
			<file type="M">org.springframework.data.gemfire.mapping.MappingPdxSerializer.java</file>
			<file type="D">org.springframework.data.gemfire.mapping.BeanPropertyAccessorTest.java</file>
			<file type="M">org.springframework.data.gemfire.mapping.MappingPdxSerializerUnitTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="423" opendate="2015-08-06 16:03:17" fixdate="2015-08-11 00:20:17" resolution="Fixed">
		<buginformation>
			<summary>Handle improper ClassCastException thrown from SDG&amp;apos;s Function Execution interface and annotation-based support when a GemFire Function throws an Exception.</summary>
			<description>Currently, when a GemFire-defined Function is invoked using Spring Data GemFire&amp;amp;apos;s Function Execution Annotation support and interface-based declarations, and the GemFire Function throws an Exception and the Function has a single value return-type, a ClassCastException is thrown because SDG&amp;amp;apos;s Function infrastructure tries to cast the Exception to the Function Execution interface method return type.
For instance, if I defined a Function Execution interface like so...






@OnServer




public interface ExceptionThrowingFunctionExecution {




	Integer exceptionThrowingFunction();




}






And the exceptionThrowingFunction GemFire Function throws a (Runtime)Exception..






public static class ExceptionThrowingFunction extends FunctionAdapter {




	@Override




	public String getId() {




		return "exceptionThrowingFunction";




	}









	@Override




	public void execute(final FunctionContext context) {




		context.getResultSender().sendException(new IllegalArgumentException("TEST"));




	}




}






Then the following error occurs in SDG&amp;amp;apos;s Function Execution infrastructure...
java.lang.ClassCastException: java.lang.IllegalArgumentException cannot be cast to java.lang.Integer</description>
			<version>1.6.2 (Fowler SR2)</version>
			<fixedVersion>1.6.3 (Fowler SR3), 1.7 GA (Gosling)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration.java</file>
			<file type="M">org.springframework.data.gemfire.function.config.AbstractFunctionExecutionConfigurationSource.java</file>
			<file type="M">org.springframework.data.gemfire.function.config.FunctionExecutionBeanDefinitionRegistrar.java</file>
			<file type="M">org.springframework.data.gemfire.function.execution.AbstractFunctionExecution.java</file>
			<file type="M">org.springframework.data.gemfire.function.execution.ServerFunctionExecution.java</file>
			<file type="M">org.springframework.data.gemfire.function.execution.GemfireFunctionProxyFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.function.config.ServerBasedExecutionBeanDefinitionBuilder.java</file>
			<file type="M">org.springframework.data.gemfire.function.execution.AbstractFunctionTemplate.java</file>
			<file type="M">org.springframework.data.gemfire.function.execution.GemfireOnServerFunctionTemplate.java</file>
			<file type="M">org.springframework.data.gemfire.function.config.FunctionExecutionBeanDefinitionParser.java</file>
			<file type="M">org.springframework.data.gemfire.function.config.MemberBasedExecutionBeanDefinitionBuilder.java</file>
			<file type="M">org.springframework.data.gemfire.function.config.OnMemberExecutionBeanDefinitionBuilder.java</file>
			<file type="M">org.springframework.data.gemfire.function.config.OnMembersExecutionBeanDefinitionBuilder.java</file>
			<file type="M">org.springframework.data.gemfire.function.config.OnRegionExecutionBeanDefinitionBuilder.java</file>
			<file type="M">org.springframework.data.gemfire.FunctionServiceFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.function.execution.OnRegionFunctionProxyFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.function.config.OnServersExecutionBeanDefinitionBuilder.java</file>
			<file type="M">org.springframework.data.gemfire.config.FunctionServiceParser.java</file>
			<file type="M">org.springframework.data.gemfire.function.config.OnServerExecutionBeanDefinitionBuilder.java</file>
			<file type="M">org.springframework.data.gemfire.function.config.XmlConfiguredFunctionExecutionIntegrationTests.java</file>
			<file type="M">org.springframework.data.gemfire.function.config.FunctionExecutionBeanDefinitionBuilderFactory.java</file>
			<file type="M">org.springframework.data.gemfire.function.config.AbstractFunctionExecutionBeanDefinitionBuilder.java</file>
			<file type="M">org.springframework.data.gemfire.function.config.FunctionExecutionIntegrationTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="425" opendate="2015-08-07 02:15:06" fixdate="2015-08-11 00:21:45" resolution="Fixed">
		<buginformation>
			<summary>Allow early initialization and re-initialization of LazyWiringDeclarableSupport instances.</summary>
			<description>A problem occurs when a GemFire Function extends the LazyWiringDeclarableSupport class and is redeployed using the Gfsh deploy command to the update the GemFire-defined Function.
This results in the Declarable init(parameters:Properties) method being called twice which is guarded by the LazyWiringDeclarableSupport class.
It would also be nice to completely replace the WiringDeclarableSupport with the more recent and capable LazyWiringDeclarableSupport class.</description>
			<version>1.6.2 (Fowler SR2)</version>
			<fixedVersion>1.6.3 (Fowler SR3), 1.7 GA (Gosling)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.WiringDeclarableSupport.java</file>
			<file type="M">org.springframework.data.gemfire.LazyWiringDeclarableSupport.java</file>
			<file type="M">org.springframework.data.gemfire.GemfireBeanFactoryLocatorTest.java</file>
			<file type="M">org.springframework.data.gemfire.LazyWiringDeclarableSupportTest.java</file>
			<file type="M">org.springframework.data.gemfire.support.SpringContextBootstrappingInitializerTest.java</file>
			<file type="M">org.springframework.data.gemfire.DeclarableSupport.java</file>
			<file type="M">org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer.java</file>
			<file type="M">org.springframework.data.gemfire.GemfireBeanFactoryLocator.java</file>
		</fixedFiles>
	</bug>
	<bug id="414" opendate="2015-07-08 15:50:28" fixdate="2015-09-23 19:20:38" resolution="Fixed">
		<buginformation>
			<summary>Resolve incompatibility between the DistributedSystem created by the PoolFactoryBean and the DistributedSystem resolved by the ClientCacheFactoryBean when SSL is configured.</summary>
			<description>When a GemFire Server has been configured with SSL using the new cluster-ssl-* based GemFire System properties in 8.0, a Spring-based GemFire Cache client configured with SSL is unable to connect to the server due to incompatible (invalid) DistributedSystem properties and results in the following IllegalStateException...






Caused by: java.lang.IllegalStateException: A connection to a distributed system already exists in this VM.




It has the following configuration:




  ack-severe-alert-threshold="0"




  ack-wait-threshold="15"




  ...




  ..




  .






The main, underlying problem is caused when GemFire does not copy forward the SSL, cluster-ssl-* based System properties to the other SSL configuration settings, namely for server, jmx-manager, http-service and gateway.
When a GemFire Cache client is setup in Spring using Spring Data GemFire&amp;amp;apos;s (SDG) XML config, the PoolFactoryBean eagerly needs to create a DistributedSystem in order to create the GemFire Pool.
The SDG PoolFactoryBean makes a best attempt to use the same GemFire System properties that the SDG ClientCacheFactoryBean uses when creating the GemFire ClientCache instance.
Unfortunately, the "GemFire System properties" will not be identical, even though from the perspective of Spring they have not changed, because once the DistributedSystem is deemed "connected", the copy forward on the SSL configuration settings does not happen.</description>
			<version>1.5.3 (Evans SR3)</version>
			<fixedVersion>1.6.2 (Fowler SR2), 1.7 RC1 (Gosling)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.client.ClientCacheFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.CacheFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.CacheFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.GemfireUtils.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientCacheFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="433" opendate="2015-09-26 00:23:48" fixdate="2015-10-02 03:35:48" resolution="Fixed">
		<buginformation>
			<summary>Fix improper resolution of Spring property placeholders in &amp;apos;locators&amp;apos; and &amp;apos;servers&amp;apos; attributes on the &amp;apos;&lt;gfe:pool&gt;&amp;apos; element(s) in Spring XML config.</summary>
			<description>Currently, the resolution of Spring property placeholders in the &amp;lt;gfe:pool&amp;gt;, "locators" and "servers" attributes does not function properly since the logic to parse the value of a particular property placeholder is misplaced.  The logic parsing the attribute values is inappropriately placed in the PoolParser.
Specifically, the following lines of code initiate the parsing of the "locators" and "servers" attributes, respectively.  This leads to the following calls for locators and servers, respectively.
However, by the time the Thread of execution reaches the code to parse a connection, the value of the &amp;amp;apos;hostPort&amp;amp;apos; combo is actually the Spring property placeholder and not the value of the property placeholder.
This leads to the following Exception at runtime when the client attempts to connect to the server using the configured GemFire Pool...






com.gemstone.gemfire.cache.client.NoAvailableLocatorsException: Unable to connect to any locators in the list [localhost[11235]:10334]




	at com.gemstone.gemfire.cache.client.internal.AutoConnectionSourceImpl.findServer(AutoConnectionSourceImpl.java:136)




	at com.gemstone.gemfire.cache.client.internal.ConnectionFactoryImpl.createClientToServerConnection(ConnectionFactoryImpl.java:206)




	at com.gemstone.gemfire.cache.client.internal.pooling.ConnectionManagerImpl.borrowConnection(ConnectionManagerImpl.java:214)




	at com.gemstone.gemfire.cache.client.internal.OpExecutorImpl.execute(OpExecutorImpl.java:134)




	at com.gemstone.gemfire.cache.client.internal.OpExecutorImpl.execute(OpExecutorImpl.java:113)




	at com.gemstone.gemfire.cache.client.internal.PoolImpl.execute(PoolImpl.java:702)




	at com.gemstone.gemfire.cache.client.internal.GetOp.execute(GetOp.java:94)




	at com.gemstone.gemfire.cache.client.internal.ServerRegionProxy.get(ServerRegionProxy.java:133)




	at com.gemstone.gemfire.internal.cache.LocalRegion.findObjectInSystem(LocalRegion.java:2739)




	at com.gemstone.gemfire.internal.cache.LocalRegion.nonTxnFindObject(LocalRegion.java:1464)




	at com.gemstone.gemfire.internal.cache.LocalRegionDataView.findObject(LocalRegionDataView.java:133)




	at com.gemstone.gemfire.internal.cache.LocalRegion.get(LocalRegion.java:1348)




	at com.gemstone.gemfire.internal.cache.LocalRegion.get(LocalRegion.java:1311)




	at com.gemstone.gemfire.internal.cache.LocalRegion.get(LocalRegion.java:1298)




	at com.gemstone.gemfire.internal.cache.AbstractRegion.get(AbstractRegion.java:321)




        ...






And more specifically...






java.net.ConnectException: Connection refused




	at java.net.PlainSocketImpl.socketConnect(Native Method)




	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339)




	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200)




	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182)




	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)




	at java.net.Socket.connect(Socket.java:579)




	at com.gemstone.gemfire.internal.SocketUtils.connect(SocketUtils.java:88)




	at com.gemstone.gemfire.internal.SocketUtils.connect(SocketUtils.java:60)




	at com.gemstone.gemfire.internal.SocketCreator.connect(SocketCreator.java:1011)




	at com.gemstone.gemfire.internal.SocketCreator.connect(SocketCreator.java:946)




	at com.gemstone.gemfire.internal.SocketCreator.connect(SocketCreator.java:936)




	at com.gemstone.org.jgroups.stack.tcpserver.TcpClient.getServerVersion(TcpClient.java:163)




	at com.gemstone.org.jgroups.stack.tcpserver.TcpClient.requestToServer(TcpClient.java:90)




	at com.gemstone.org.jgroups.stack.tcpserver.TcpClient.requestToServer(TcpClient.java:78)




	at com.gemstone.gemfire.cache.client.internal.AutoConnectionSourceImpl.queryOneLocator(AutoConnectionSourceImpl.java:188)




	at com.gemstone.gemfire.cache.client.internal.AutoConnectionSourceImpl.queryLocators(AutoConnectionSourceImpl.java:220)




	at com.gemstone.gemfire.cache.client.internal.AutoConnectionSourceImpl.findServer(AutoConnectionSourceImpl.java:132)




	at com.gemstone.gemfire.cache.client.internal.ConnectionFactoryImpl.createClientToServerConnection(ConnectionFactoryImpl.java:206)




	at com.gemstone.gemfire.cache.client.internal.pooling.ConnectionManagerImpl.prefillConnection(ConnectionManagerImpl.java:794)




	at com.gemstone.gemfire.cache.client.internal.pooling.ConnectionManagerImpl.prefill(ConnectionManagerImpl.java:737)




	at com.gemstone.gemfire.cache.client.internal.pooling.ConnectionManagerImpl$PrefillConnectionsTask.run2(ConnectionManagerImpl.java:888)




	at com.gemstone.gemfire.cache.client.internal.PoolImpl$PoolTask.run(PoolImpl.java:1249)




	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)




	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)




	at java.lang.Thread.run(Thread.java:745)





</description>
			<version>1.6.2 (Fowler SR2)</version>
			<fixedVersion>1.6.3 (Fowler SR3), 1.7.1 (Gosling SR1), 1.8 M1 (Hopper)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.client.PoolFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.util.ArrayUtilsTest.java</file>
			<file type="M">org.springframework.data.gemfire.util.DistributedSystemUtils.java</file>
			<file type="M">org.springframework.data.gemfire.config.PoolNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.PoolParserTest.java</file>
			<file type="M">org.springframework.data.gemfire.client.PoolFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.util.ArrayUtils.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientCacheSecurityTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.PoolParser.java</file>
		</fixedFiles>
	</bug>
	<bug id="429" opendate="2015-09-08 13:08:41" fixdate="2015-10-06 07:28:37" resolution="Fixed">
		<buginformation>
			<summary>GemfirePersistentProperty considers a BigDecimal property an entity.</summary>
			<description>A call to GemfirePersistentProperty.isEntity() returns true for a property of type BigDecimal which it probably shouldn&amp;amp;apos;t. By default the implementation is checking the type against a well known list of (store) simple types (i.e. types the store can natively persist, see SimpleTypeHolder) which probably needs to be extended to include BigDecimal as I assume Gemfire to be able to store BigDecimal instances directly.</description>
			<version>1.6.2 (Fowler SR2)</version>
			<fixedVersion>1.6.3 (Fowler SR3), 1.7.1 (Gosling SR1), 1.8 M1 (Hopper)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.mapping.GemfirePersistentProperty.java</file>
			<file type="M">org.springframework.data.gemfire.mapping.GemfireMappingContext.java</file>
			<file type="M">org.springframework.data.gemfire.mapping.model.GemfireSimpleTypeHolder.java</file>
			<file type="M">org.springframework.data.gemfire.mapping.GemfirePersistentEntityUnitTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="432" opendate="2015-09-14 15:21:19" fixdate="2015-10-06 07:31:18" resolution="Fixed">
		<buginformation>
			<summary>IndexFactoryBean traps IndexExistsException instead of IndexNameConflictException.</summary>
			<description>GemFire throws several Index related Exceptions on attempts to create Indexes. The one that is currently caught by spring-data-gemfire is IndexExistsException, which occurs when an Index of the same definition exists. GemFire also throws IndexNameConflictException, which occurs when an Index with the same name exists.
In at least GemFire 6.6.3 and 7.0.2.3, the IndexNameConflictException is the Exception thrown when two instances of an Index with the same name and definition are created simultaneously. In spring-data-gemfire 1.5.2.RELEASE and onwards, Exceptions are no longer swallowed during Index creation, so the IndexNameConflictException is thrown and not handled, while the IndexExistsException is handled, but may return null as the Index may not be named identically.</description>
			<version>1.5.2 (Evans SR2)</version>
			<fixedVersion>1.6.3 (Fowler SR3), 1.7.1 (Gosling SR1), 1.8 M1 (Hopper)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.GemfireIndexException.java</file>
			<file type="M">org.springframework.data.gemfire.IndexFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.IndexFactoryBeanTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="441" opendate="2015-10-18 04:48:09" fixdate="2015-10-18 09:33:30" resolution="Fixed">
		<buginformation>
			<summary>Fix possible CacheClosedException in ClientCacheFactoryBean onApplicationEvent(:ContextRefreshedEvent) when the ClientCache initialization is lazy.</summary>
			<description>The ClientCacheFactoryBean.isReadyForEvents() method may throw a GemFire CacheClosedException during onApplicationEvent(:ContextRefereshedEvent) since the ClientCache initialization maybe lazy, in which case, the ClientCache will not have been properly "initialized" before being "looked up" in the ClientCacheFactory.getAnyInstance() call inside ClientCacheFactoryBean.fetchCache(), thus leading to the CacheClosedException.</description>
			<version>1.8 M1 (Hopper)</version>
			<fixedVersion>1.8 M1 (Hopper)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.test.GemfireTestApplicationContextInitializer.java</file>
			<file type="M">org.springframework.data.gemfire.GemfireUtils.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientCacheFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.util.DistributedSystemUtils.java</file>
			<file type="M">org.springframework.data.gemfire.config.CacheNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientCacheFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.GemfireTemplateTest.java</file>
			<file type="M">org.springframework.data.gemfire.test.AbstractMockerySupport.java</file>
			<file type="M">org.springframework.data.gemfire.config.PoolNamespaceTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="448" opendate="2015-12-03 04:49:59" fixdate="2015-12-04 03:28:07" resolution="Fixed">
		<buginformation>
			<summary>GemfireRepositoryConfigurationExtension needs to override the RepositoryConfigurationExtensionSupport postProcess(:BeanDefinitionBuilder, :AnnotationRepositoryConfigurationSource) method.</summary>
			<description>GemfireRepositoryConfigurationExtension needs to override the RepositoryConfigurationExtensionSupport postProcess(..) method with the AnnotationRepositoryConfigurationSource method parameter in order to properly handle and process @EnableGemfireRepositories mappingContextRef values.
Refer to the comments in the gs-accessing-gemfire-data-rest Spring Getting Started Guide issue 1.</description>
			<version>1.6.2 (Fowler SR2)</version>
			<fixedVersion>1.6.3 (Fowler SR3), 1.7.0.APACHE-GEODE-EA-SNAPSHOT, 1.7.2 (Gosling SR2), 1.8 M1 (Hopper)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.repository.config.GemfireRepositoryConfigurationExtension.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="relates to">455</link>
		</links>
	</bug>
	<bug id="449" opendate="2015-12-03 04:54:33" fixdate="2015-12-04 03:28:52" resolution="Fixed">
		<buginformation>
			<summary>GemfireRepositoryFactoryBean.setGemfireMappingContext needs to call RepositoryFactoryBeanSupport.setMappingContext.</summary>
			<description>Refer to the comments in the gs-accessing-gemfire-data-rest Spring Getting Started Guide issue 1.</description>
			<version>1.6.2 (Fowler SR2)</version>
			<fixedVersion>1.6.3 (Fowler SR3), 1.7.0.APACHE-GEODE-EA-SNAPSHOT, 1.7.2 (Gosling SR2), 1.8 M1 (Hopper)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryBean.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="relates to">455</link>
		</links>
	</bug>
	<bug id="474" opendate="2016-02-25 04:38:50" fixdate="2016-02-26 23:07:02" resolution="Fixed">
		<buginformation>
			<summary>Fix the NPE in the MappingPdxSerializer</summary>
			<description>When an Exception occurs in the Spring Data GemFire MappingPdxSerializer.fromData(..) method during normal processing and conversion from PDX back to the application domain object type, it is possible that the value may never have been initialized, thus causing a NullPointerException in the Exception handler, which then causes the original Exception to be eaten!</description>
			<version>1.6.2 (Fowler SR2)</version>
			<fixedVersion>1.6.3 (Fowler SR3), 1.7.5 (Gosling SR5), 1.8 RC1 (Hopper)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.mapping.MappingPdxSerializerUnitTests.java</file>
			<file type="M">org.springframework.data.gemfire.mapping.MappingPdxSerializer.java</file>
			<file type="M">org.springframework.data.gemfire.repository.sample.Person.java</file>
			<file type="M">org.springframework.data.gemfire.mapping.MappingPdxSerializerIntegrationTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="497" opendate="2016-05-06 15:53:30" fixdate="2016-05-17 20:16:16" resolution="Fixed">
		<buginformation>
			<summary>Intermittent failures in DurableClientCacheIntegrationTest</summary>
			<description>The IO 2.1 compatibility build is failing due to a problem with DurableClientCacheIntegrationTest durableClientGetsUpdatesFromServerWhileClientWasOffline. It sometimes fails when run against Java 7 and sometimes fails when run against Java 8 so it appears to be somewhat intermittent. The failure is:






java.lang.IllegalStateException: Failed to load ApplicationContext




	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)




	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83)




	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117)




	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)




	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:230)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:228)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:287)




	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:289)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:247)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)




	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)




	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)




	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)




	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)




	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)




	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)




	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)




	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)




	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)




	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)




	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)




	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86)




	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49)




	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69)




	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:48)




	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)




	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)




	at java.lang.reflect.Method.invoke(Method.java:606)




	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)




	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)




	at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)




	at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)




	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)




	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:105)




	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)




	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)




	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)




	at java.lang.reflect.Method.invoke(Method.java:606)




	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)




	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)




	at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:355)




	at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64)




	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)




	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)




	at java.lang.Thread.run(Thread.java:745)




Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;Example&amp;amp;apos;: Cannot resolve reference to bean &amp;amp;apos;gemfireCache&amp;amp;apos; while setting bean property &amp;amp;apos;cache&amp;amp;apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;gemfireCache&amp;amp;apos;: Post-processing of FactoryBean&amp;amp;apos;s singleton object failed; nested exception is java.lang.AssertionError: 




Expected: is a value equal to or greater than &amp;lt;2&amp;gt;




     but: &amp;lt;0&amp;gt; was less than &amp;lt;2&amp;gt;




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:359)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1481)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1226)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)




	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)




	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)




	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:756)




	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861)




	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541)




	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:128)




	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60)




	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:108)




	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:251)




	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98)




	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116)




	... 46 more




Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;amp;apos;gemfireCache&amp;amp;apos;: Post-processing of FactoryBean&amp;amp;apos;s singleton object failed; nested exception is java.lang.AssertionError: 




Expected: is a value equal to or greater than &amp;lt;2&amp;gt;




     but: &amp;lt;0&amp;gt; was less than &amp;lt;2&amp;gt;




	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:116)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1595)




	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:254)




	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)




	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)




	... 64 more




Caused by: java.lang.AssertionError: 




Expected: is a value equal to or greater than &amp;lt;2&amp;gt;




     but: &amp;lt;0&amp;gt; was less than &amp;lt;2&amp;gt;




	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)




	at org.junit.Assert.assertThat(Assert.java:956)




	at org.junit.Assert.assertThat(Assert.java:923)




	at org.springframework.data.gemfire.client.DurableClientCacheIntegrationTest$ClientCacheBeanPostProcessor.postProcessAfterInitialization(DurableClientCacheIntegrationTest.java:247)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:422)




	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.postProcessObjectFromFactoryBean(AbstractAutowireCapableBeanFactory.java:1723)




	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:113)




	... 68 more





</description>
			<version>1.8.1 (Hopper SR1)</version>
			<fixedVersion>1.8.2 (Hopper SR2), 1.9 M1 (Ingalls), 1.0.0.APACHE-GEODE-INCUBATING-M3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.client.DurableClientCacheIntegrationTest.java</file>
			<file type="M">org.springframework.data.gemfire.process.ProcessExecutor.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientCachePoolTests.java</file>
			<file type="M">org.springframework.data.gemfire.test.AbstractGemFireClientServerIntegrationTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="434" opendate="2015-10-02 20:23:22" fixdate="2016-05-17 23:42:36" resolution="Fixed">
		<buginformation>
			<summary>Add test for GemFire&amp;apos;s Durable Client functionality</summary>
			<description>This, originally a support ticket, is intended to address problems uncovered at Pivotal customer TIM GemFire in the context of Spring (and specifically Spring XD with Spring Data GemFire) and to verify that both Spring Data GemFire and GemFire are doing the right thing.
As of Friday, October 9th, 2015, I have determined that Spring Data GemFire has 2 bugs specifically as it relates to "durable" client functionality in GemFire.
The first bug is that SDG prematurely fires (from here which is called here during ClientCache "initialization") the ClientCache.readyForEvents() notification to the servers to let the servers know the "durable" client is now ready to receive events (updates) from the server while the client was offline (disconnected).
And, because the "ready-for-events" notification is fired before any GemFire Regions (with registered callbacks/listeners), interests registration or CQs (as required by GemFire as stated in the User Guide; see sub-section "Program the Client to Manage Durable Messaging", 2.b, 2.c, 2.d), the events are effectively sent to the void and lost.
However, a user can workaround this problem by explicitly setting (or not setting as the default is false) the ready-for-events attribute on the &amp;lt;gfe:client-cache&amp;gt; element in the SDG namespace to false...






&amp;lt;gfe:client-cache ready-for-events="false"/&amp;gt;






And then specifically in application code, calling ClientCache.readyForEvents()...






@Component




class MyApplicationComponent {









  @Autowired




  private ClientCache clientCache;









  @PostConstruct




  public void init() {




    clientCache.readyForEvents();




  }




}






The second bug has no workaround.  The second bug causes the cache client to miss events while the client is offline, and specifically when it voluntarily disconnects from the GemFire cluster (perhaps for a maintenance cycle (upgrade or something of that nature)).  If the cache client crashes, this bug will not occur.
As you can see in the code, the ClientRegionFactoryBean SDG class tries to clean up after itself on the server when the client shutdowns.  Specifically, it attempts to "unregister" any interests the clients expresses when it started up and declared it&amp;amp;apos;s subscription.  Normally, I would argue "cleaning up after one&amp;amp;apos;s self is admirable and preferable", but in this case, it just caused problems.
By the client&amp;amp;apos;s own undoing, it informed the server that its interests in any events while it is offline should effectively be unregistered, even if the interests are "durable", and even if the client is "durable" and the server maintains a queue for client events.  If there is not "interests" matching events while the client is offline, there are simply no events recorded to the client&amp;amp;apos;s queue.
In fact, a client should not be explicitly cleaning up it&amp;amp;apos;s interests registration on the server when it either unexpectedly or willing disconnects from the server since the server will handle this automatically on behalf of the client once the server has detected the client has disconnected, regardless of reason.  This enables the server to continue to keep track of events matching it&amp;amp;apos;s interests for a "durable" client when it disconnects.</description>
			<version>1.6.2 (Fowler SR2)</version>
			<fixedVersion>1.6.3 (Fowler SR3), 1.7.1 (Gosling SR1), 1.8 M1 (Hopper)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.test.GemfireTestApplicationContextInitializer.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientCacheFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.CacheFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.client.DurableClientCacheIntegrationTest.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientCacheFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.GemfireUtils.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientCacheParser.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientRegionFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.client.PoolFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.test.support.ThreadUtils.java</file>
			<file type="M">org.springframework.data.gemfire.test.MockClientCacheFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.CacheFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.fork.ServerProcess.java</file>
			<file type="M">org.springframework.data.gemfire.CacheIntegrationTest.java</file>
			<file type="M">org.springframework.data.gemfire.SubRegionTest.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientRegionFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="450" opendate="2015-12-03 04:57:58" fixdate="2016-05-17 23:43:58" resolution="Fixed">
		<buginformation>
			<summary>GemfireRepositoryFactoryBean needs to explicitly register a "default" GemfireMappingContext when not explicitly defined as a bean in the application&amp;apos;s Spring context.</summary>
			<description>Refer to the comments in the gs-accessing-gemfire-data-rest Spring Getting Started Guide issue 1.</description>
			<version>1.6.2 (Fowler SR2)</version>
			<fixedVersion>1.6.3 (Fowler SR3), 1.7.0.APACHE-GEODE-EA-SNAPSHOT, 1.7.2 (Gosling SR2), 1.8 M1 (Hopper)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.repository.config.GemfireRepositoryConfigurationExtensionTest.java</file>
			<file type="M">org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryBean.java</file>
			<file type="D">org.springframework.data.gemfire.repository.config.GemfireRepositoryFactoryBeanTest.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="relates to">455</link>
		</links>
	</bug>
	<bug id="176" opendate="2013-05-22 06:47:41" fixdate="2016-05-23 20:51:40" resolution="Fixed">
		<buginformation>
			<summary>Missing Functionality: time to live and entry idle time on a local client region</summary>
			<description>In Gemfire it is possible to set &amp;lt;entry-idle-time&amp;gt; and &amp;lt;entry-time-to-live&amp;gt; on a client&amp;amp;apos;s region whereas in Spring Gemfire this functionality seems to be missing. 
For example In gemfire, I can do the following for a client
&amp;lt;client-cache&amp;gt;
	&amp;lt;pool name="client" subscription-enabled="true"&amp;gt;
		&amp;lt;server host="localhost" port="40404" /&amp;gt;
	&amp;lt;/pool&amp;gt;
	&amp;lt;region name="exampleRegion"&amp;gt;
		&amp;lt;region-attributes refid="CACHING_PROXY"&amp;gt;
		&amp;lt;entry-idle-time&amp;gt;
			&amp;lt;expiration-attributes timeout="10" action="destroy" /&amp;gt;
			&amp;lt;/entry-idle-time&amp;gt;
		&amp;lt;/region-attributes&amp;gt;
	&amp;lt;/region&amp;gt;
&amp;lt;/client-cache&amp;gt;
When I try to do the similar in Spring Gemfire, the line &amp;lt;gfe:entry-tti timeout="100" action="DESTROY"/&amp;gt;  doesnt seem to be supported by schema.
  &amp;lt;gfe:client-cache pool-name="client" /&amp;gt;
&amp;lt;gfe:pool id="client" subscription-enabled="true"&amp;gt;
&amp;lt;gfe:server host="localhost" port="40404" /&amp;gt;
&amp;lt;/gfe:pool&amp;gt;
&amp;lt;gfe:client-region id="Customer" shortcut="CACHING_PROXY"&amp;gt;
&amp;lt;gfe:entry-tti timeout="100" action="DESTROY"/&amp;gt; 
&amp;lt;/gfe:client-region&amp;gt;
&amp;lt;/beans&amp;gt;
The line   &amp;lt;gfe:entry-tti timeout="100" action="DESTROY"/&amp;gt; is supported for Server cache. For example, the following works fine
.
.
.
  &amp;lt;gfe:cache-server/&amp;gt;
    &amp;lt;gfe:replicated-region id="Customer"&amp;gt;
        &amp;lt;gfe:cache-listener&amp;gt;
            &amp;lt;bean class="org.springframework.data.gemfire.examples.util.LoggingCacheListener"/&amp;gt;
        &amp;lt;/gfe:cache-listener&amp;gt;
        &amp;lt;gfe:entry-tti timeout="100" action="DESTROY"/&amp;gt; 
    &amp;lt;/gfe:replicated-region&amp;gt;
&amp;lt;/beans&amp;gt;</description>
			<version>1.3.1</version>
			<fixedVersion>1.3.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionNamespaceTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="24" opendate="2010-10-26 02:50:40" fixdate="2016-05-23 21:22:22" resolution="Fixed">
		<buginformation>
			<summary>CqInvalidException removed in 6.5</summary>
			<description>CqInvalidException has been removed in GemFire 6.5 GA - the exception is still referred to by SGF for exception translation.</description>
			<version>1.0.0.M1</version>
			<fixedVersion>1.0.0.M2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.GemfireTemplate.java</file>
			<file type="M">org.springframework.data.gemfire.GemfireCacheUtils.java</file>
			<file type="M">org.springframework.data.gemfire.CacheFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.GemfireAccessor.java</file>
			<file type="M">org.springframework.data.gemfire.GemfireQueryException.java</file>
		</fixedFiles>
	</bug>
	<bug id="80" opendate="2012-01-15 23:06:20" fixdate="2016-05-23 21:23:36" resolution="Fixed">
		<buginformation>
			<summary>ClientRegionFactoryBean bug cause client only create local region</summary>
			<description>1. I use flollowing configproperty shortcut no effect 






&amp;lt;gfe:client-region id="nkqueryRegion" name="NKeyQuery" cache-ref="clientCache" shortcut="PROXY" /&amp;gt;






2. then in ClientRegionFactoryBean class,lookupFallback method, there always set shortcut to LOCAL the code like this:






ClientRegionShortcut s = null;









if (shortcut == null) {




  if (dataPolicy != null) {




	  




  }




	s = ClientRegionShortcut.LOCAL;




}





</description>
			<version>1.1.0</version>
			<fixedVersion>1.1.1, 1.2.0.M1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.client.ClientRegionFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="69" opendate="2011-09-21 10:22:38" fixdate="2016-05-23 21:28:17" resolution="Fixed">
		<buginformation>
			<summary>ClientRegionFactoryBean Adds Region Listeners Twice</summary>
			<description>CacheListeners are added twice to the ClientRegionFactory (one inside if (attributes != null) 
{ ...}
 and again immediately after).
Not serious for a simple logging listener but could be an issue for more complex listeners.</description>
			<version>1.1.0.M2</version>
			<fixedVersion>1.1.0.M3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.client.ClientRegionFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="68" opendate="2011-09-01 21:24:59" fixdate="2016-05-23 21:28:38" resolution="Fixed">
		<buginformation>
			<summary>regex-interest seems to have broken in 1.0.1.M2</summary>
			<description>see email from customer
Question #3, after moving up to Spring-GemFire 1.1.0.M2 the regex-interest seems to fail the spring bootstrap:
    &amp;lt;gfe:client-region cache-ref="gemfire-cache" id="assetEntityRegion" name="assetEntityRegion" pool-name="alerter-server-pool"&amp;gt;
        &amp;lt;gfe:cache-listener&amp;gt;
            &amp;lt;bean class="au.com.fairfax.media.alerterserver.listener.impl.AssetEntityRegionListenerImpl"&amp;gt;
                &amp;lt;constructor-arg index="0" ref="instantAlerter"/&amp;gt;
            &amp;lt;/bean&amp;gt;
        &amp;lt;/gfe:cache-listener&amp;gt;
        &amp;lt;gfe:regex-interest pattern=".*"/&amp;gt;
    &amp;lt;/gfe:client-region&amp;gt;
It works fine if I downgrade to 1.1.0.M1 or comment out regex-interest. (BTW, we&amp;amp;apos;re on GemFire 6.5.1.4 version)
Attached is the stack trace.
Do you know why this is happening?
Customers email address: Lenming Yeung &amp;lt;lyeung@fairfaxdigital.com.au&amp;gt; </description>
			<version>1.1.0.M2</version>
			<fixedVersion>1.1.0.M3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.client.ClientRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.RegionLookupFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.client.RegionIntegrationTest.java</file>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBean.java</file>
		</fixedFiles>
	</bug>
	<bug id="39" opendate="2011-03-22 09:37:33" fixdate="2016-05-23 21:43:10" resolution="Fixed">
		<buginformation>
			<summary>WiringInstantiator should not register instantiators using the method that causes distribution</summary>
			<description>When using a WiringInstantiator, the instantiator needs to be set up on each machine by the Spring application context. Unfortunately, the corrent code causes the created instantiators to be distributed, so the first server works, but second one fails.
In WiringInstantiator:
	public void afterPropertiesSet() {
		if (configurer == null) 
{
			configurer = new BeanConfigurerSupport();
			configurer.setBeanFactory(beanFactory);
			configurer.afterPropertiesSet();
		}

		if (autoRegister) 
{
here --&amp;gt;		Instantiator.register(this);

		}
	}
Should be:
		if (autoRegister) 
{
here --&amp;gt;		Instantiator.register(this,false);
		}

False will not distribute this to the other nodes.</description>
			<version>1.0.0</version>
			<fixedVersion>1.0.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.serialization.InstantiatorFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.serialization.WiringInstantiator.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">46</link>
		</links>
	</bug>
	<bug id="36" opendate="2011-03-02 11:20:55" fixdate="2016-05-23 21:46:19" resolution="Fixed">
		<buginformation>
			<summary>PoolFactoryBean can be instantiated before cache if namespace used</summary>
			<description>The &amp;lt;gfe:pool/&amp;gt; element has no reference to the gemfire cache. This means it can be instantiated before the cache, causing an Exception "... Caused by: java.lang.IllegalStateException: Distributed System must be created before creating pool".
Work-around is to define using &amp;lt;bean/&amp;gt; syntax and adding a depends-on attribute...






	&amp;lt;bean id="pool" class="org.springframework.data.gemfire.client.PoolFactoryBean"




		depends-on="gemfire-cache"&amp;gt;




		&amp;lt;property name="locators"&amp;gt;




			&amp;lt;list&amp;gt;




				&amp;lt;bean class="org.springframework.data.gemfire.client.PoolConnection"&amp;gt;




					&amp;lt;property name="host" value="${gemfire.locator.host}"/&amp;gt;




					&amp;lt;property name="port" value="${gemfire.locator.port}"/&amp;gt;




				&amp;lt;/bean&amp;gt;




			&amp;lt;/list&amp;gt;




		&amp;lt;/property&amp;gt;




	&amp;lt;/bean&amp;gt;





</description>
			<version>1.0.0</version>
			<fixedVersion>1.0.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.client.PoolFactoryBean.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="relates to">23</link>
		</links>
	</bug>
	<bug id="40" opendate="2011-03-29 00:49:50" fixdate="2016-05-23 21:49:30" resolution="Fixed">
		<buginformation>
			<summary>AbstractBeanDefinitionParser automatically uses the region name to create bean aliases for regions</summary>
			<description>This side-effect is surprising as it pollutes the container with multiple bean names.</description>
			<version>1.0.0</version>
			<fixedVersion>1.0.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.ParsingUtils.java</file>
			<file type="M">org.springframework.data.gemfire.config.ReplicatedRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.ReplicatedRegionNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.PartitionedRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.LookupRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionParser.java</file>
			<file type="M">org.springframework.data.gemfire.config.ClientRegionNamespaceTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="385" opendate="2015-03-19 11:42:02" fixdate="2016-05-23 21:54:49" resolution="Fixed">
		<buginformation>
			<summary>Local region does remote put in addition to local put in client cache.</summary>
			<description>I need to create a local region in client cache to store some data locally. I config my local region using SDG. When I do region.put, it updates cache server as well (found by using a loggingCacheListener, afterUpdate on server side is triggered).






&amp;lt;gfe:client-region id="analyticsInfoRegion" cache-ref="gemfireCache" shortcut="LOCAL"&amp;gt;




    &amp;lt;gfe:cache-listener ref="loggingCacheListener" /&amp;gt;




&amp;lt;/gfe:client-region&amp;gt;






DAO (before):






@Resource(name = GBCConstants.REGION_ANALYTICS_INFO)




public void setRegion(final Region&amp;lt;AnalyticsKey, AnalyticsInfo&amp;gt; region) {




    this.region = region;




}






Therefore, I had to switch to GemFire API to create this local region in my Dao. 
DAO (after):






@PostConstruct




public void init() {




    ClientCache clientCache = ClientCacheFactory.getAnyInstance();




    this.region = clientCache.&amp;lt;AnalyticsKey, AnalyticsInfo&amp;gt;createClientRegionFactory(ClientRegionShortcut.LOCAL)




        .addCacheListener(loggingCacheListener)




        .create(GBCConstants.REGION_ANALYTICS_INFO);




}






One thing I realized when looking at the detail in debug mode is that the local region has server pool attached ("srp") when it&amp;amp;apos;s configured using SDG. However, when it&amp;amp;apos;s configured using GemFire API, its "srp" is NULL.</description>
			<version>1.5.2 (Evans SR2)</version>
			<fixedVersion>1.5.3 (Evans SR3), 1.6 GA (Fowler)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.client.ClientRegionFactoryBeanTest.java</file>
			<file type="M">org.springframework.data.gemfire.client.PoolFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.CacheNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.test.MockClientCacheFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.PoolNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.GemfireConstants.java</file>
			<file type="M">org.springframework.data.gemfire.test.MockCacheFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientCacheTest.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientCacheFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.RegionLookupIntegrationTests.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.CacheFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.PoolParser.java</file>
		</fixedFiles>
	</bug>
	<bug id="501" opendate="2016-05-23 22:54:25" fixdate="2016-05-24 01:15:36" resolution="Fixed">
		<buginformation>
			<summary>Add serialVersionUID to ListRegionsOnServerFunction</summary>
			<description>The SDG ListRegionsOnServerFunction class used by the &amp;lt;gfe-data:datasource/&amp;gt; element in the SDG Data XML namespace implements the GemFire Function interface, which is indirectly java.io.Serializable by implementing GemFire&amp;amp;apos;s Identifiable interface.  As a result, ListRegionsOnServerFunction should set the serialVersionUID property to avoid any ill de/serialization side-effects.</description>
			<version>1.0.0.APACHE-GEODE-INCUBATING-M2</version>
			<fixedVersion>1.8.2 (Hopper SR2), 1.9 M1 (Ingalls), 1.0.0.APACHE-GEODE-INCUBATING-M3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.support.ListRegionsOnServerFunction.java</file>
		</fixedFiles>
	</bug>
	<bug id="499" opendate="2016-05-18 00:01:56" fixdate="2016-06-07 06:32:14" resolution="Fixed">
		<buginformation>
			<summary>Prevent SDG-defined Pools from being destroyed before the Regions that use them</summary>
			<description>Currently, when a Spring configured, GemFire client cache application is shutdown, SDG does not prescribe an orderly shutdown between client Regions and client Pools possibly referred to by those Regions.  As a result, GemFire will throw an error when an attempt is made to close/destroy the Pool that a Region may currently be configured to use during shutdown of the Spring application context.






11:34:44.957 WARN o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name &amp;amp;apos;gemfirePool&amp;amp;apos;: java.lang.IllegalStateException: Pool could not be destroyed because it is still in use by 16 regions 






While the error is reported as a warning and is mostly benign (since it only happens during shutdown), more careful coordination between the Regions and their Pools should be considered.</description>
			<version>1.8.1 (Hopper SR1)</version>
			<fixedVersion>1.8.2 (Hopper SR2), 1.9 M1 (Ingalls), 1.0.0.APACHE-GEODE-INCUBATING-M3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.repository.config.GemfireRepositoryConfigurationExtension.java</file>
			<file type="M">org.springframework.data.gemfire.RegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.PoolParserTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.GemfireDataNamespaceHandler.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientRegionFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.client.ClientCachePoolTests.java</file>
			<file type="M">org.springframework.data.gemfire.config.PoolParser.java</file>
		</fixedFiles>
	</bug>
	<bug id="502" opendate="2016-06-09 20:53:42" fixdate="2016-06-09 21:54:51" resolution="Fixed">
		<buginformation>
			<summary>DiskStoreAndEvictionRegionParsingTest fails when building with Maven due to missing Disk Store sub-directory.</summary>
			<description>The DiskStoreAndEvictionRegionParsingTest class fails when SDG is built with Maven since the test class assumes the project is being built with Gradle and the Disk Store sub-directory is relative to the Gradle build directory ($PWD/build).</description>
			<version>1.0.0.APACHE-GEODE-INCUBATING-M2</version>
			<fixedVersion>1.8.2 (Hopper SR2), 1.9 M1 (Ingalls), 1.0.0.APACHE-GEODE-INCUBATING-M3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.DiskStoreAndEvictionRegionParsingTest.java</file>
		</fixedFiles>
	</bug>
	<bug id="534" opendate="2016-09-23 05:26:07" fixdate="2016-09-23 17:54:14" resolution="Fixed">
		<buginformation>
			<summary>Fix ordered GemfireRepository.findAll(Sort) queries</summary>
			<description>Currently, when a developer defines an application GemfireRepository interface extension type and calls the findAll(:Sort) query method, SDG incorrectly formats the GemFire/Geode OQL query statement, and throws the following Exception...






java.lang.UnsupportedOperationException: non-distinct order-by not yet supported




	at com.gemstone.gemfire.cache.query.internal.CompiledSelect.prepareEmptyResultSet(CompiledSelect.java:824)




	at com.gemstone.gemfire.cache.query.internal.CompiledSelect.doIterationEvaluate(CompiledSelect.java:556)




	at com.gemstone.gemfire.cache.query.internal.CompiledSelect.evaluate(CompiledSelect.java:284)




	at com.gemstone.gemfire.cache.query.internal.DefaultQuery.executeUsingContext(DefaultQuery.java:529)




	at com.gemstone.gemfire.cache.query.internal.DefaultQuery.execute(DefaultQuery.java:365)




	at org.springframework.data.gemfire.GemfireTemplate.find(GemfireTemplate.java:299)




	at org.springframework.data.gemfire.repository.support.SimpleGemfireRepository.findAll(SimpleGemfireRepository.java:166)






The problem is caused by the fact that GemFire does not support non-unique queries with an ORDER BY clause, and SDG fails to correctly include the DISTINCT OQL Query keyword in the statement.</description>
			<version>1.0.0.APACHE-GEODE-INCUBATING-M2</version>
			<fixedVersion>1.7.6 (Gosling SR6), 1.8.4 (Hopper SR4), 1.9 RC1 (Ingalls), 1.0.0.APACHE-GEODE-INCUBATING-M3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.repository.query.QueryStringUnitTests.java</file>
			<file type="M">org.springframework.data.gemfire.repository.query.QueryString.java</file>
			<file type="D">org.springframework.data.gemfire.repository.sample.PersonRepositoryTest.java</file>
			<file type="M">org.springframework.data.gemfire.repository.sample.PersonRepository.java</file>
			<file type="D">org.springframework.data.gemfire.repository.query.QueryBuilderTest.java</file>
			<file type="M">org.springframework.data.gemfire.repository.query.QueryBuilder.java</file>
			<file type="M">org.springframework.data.gemfire.repository.support.SimpleGemfireRepository.java</file>
		</fixedFiles>
	</bug>
	<bug id="539" opendate="2016-10-04 04:40:51" fixdate="2016-10-04 09:06:34" resolution="Fixed">
		<buginformation>
			<summary>Change GemfireCache.evict(key) to call Region.remove(key).</summary>
			<description>Currently, the GemfireCache.evict(key:Object) method calls Pivotal GemFire&amp;amp;apos;s (Apache Geode&amp;amp;apos;s) Region.destroy(key:Object) method, which can throw a EntryNotFoundException causing an application @Sevice component operation annotated with the @CacheEvict annotation to fail.
See StackOverflow post (question... "Gemfire EntryNotFoundException for @CacheEvict") for more details.</description>
			<version>1.0.0.APACHE-GEODE-INCUBATING-M2</version>
			<fixedVersion>1.7.7 (Gosling SR7), 1.8.5 (Hopper SR5), 1.9 RC1 (Ingalls), 1.0.0.APACHE-GEODE-INCUBATING-M3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.support.GemfireCacheUnitTests.java</file>
			<file type="M">org.springframework.data.gemfire.support.GemfireCache.java</file>
			<file type="M">org.springframework.data.gemfire.support.GemfireCacheManager.java</file>
		</fixedFiles>
	</bug>
	<bug id="555" opendate="2016-10-06 18:11:31" fixdate="2016-10-08 18:43:59" resolution="Fixed">
		<buginformation>
			<summary>Repository queries on client Regions associated with a Pool configured for a specific server group can lead to a RegionNotFoundException.</summary>
			<description>This bug can occur when using SDG Repositories to perform client/server queries across a cluster of data servers organized in separate server groups in order to balance the load of data access based on function (UC).
Each application Repository is coded to a specific application domain type, which in turn is associated with a specific GemFire (client) Region (via the @Region annotation).  The (client) Region is configured with a GemFire Pool targeting a specific server group.
However, when SDG obtains an instance of the QueryService from the Region (technically, the ClientCache) to perform the Repository query, GemFire does not automatically use the Pool associated with the Region unless it is specifically told to do so via the appropriate API call (which SDG fails does not do; hence this bug) and the client query results in a RegionNotFoundException.</description>
			<version>1.0.0.APACHE-GEODE-INCUBATING-M2</version>
			<fixedVersion>1.7.7 (Gosling SR7), 1.8.5 (Hopper SR5), 1.9 RC1 (Ingalls)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.process.ProcessExecutor.java</file>
			<file type="M">org.springframework.data.gemfire.util.PropertiesBuilder.java</file>
			<file type="M">org.springframework.data.gemfire.GemfireAccessor.java</file>
			<file type="M">org.springframework.data.gemfire.process.ProcessInputStreamListener.java</file>
			<file type="M">org.springframework.data.gemfire.test.MockGatewayHubFactory.java</file>
			<file type="D">org.springframework.data.gemfire.repository.support.SimpleGemfireRepositoryIntegrationTest.java</file>
			<file type="M">org.springframework.data.gemfire.test.support.ThreadUtils.java</file>
			<file type="M">org.springframework.data.gemfire.test.AbstractGemFireClientServerIntegrationTest.java</file>
			<file type="M">org.springframework.data.gemfire.process.support.ProcessUtils.java</file>
			<file type="M">org.springframework.data.gemfire.test.MockGatewayFactory.java</file>
			<file type="D">org.springframework.data.gemfire.GemfireTemplateIntegrationTest.java</file>
			<file type="M">org.springframework.data.gemfire.GemfireTemplate.java</file>
			<file type="D">org.springframework.data.gemfire.GemfireTemplateTest.java</file>
			<file type="M">org.springframework.data.gemfire.process.ProcessConfiguration.java</file>
			<file type="D">org.springframework.data.gemfire.test.AbstractMockerySupport.java</file>
			<file type="M">org.springframework.data.gemfire.process.ProcessWrapper.java</file>
		</fixedFiles>
	</bug>
	<bug id="565" opendate="2016-11-09 17:19:28" fixdate="2016-11-09 20:01:53" resolution="Fixed">
		<buginformation>
			<summary>Stackoverflow error when the `locators` attribute is specified in any of the XCacheApplication annotations.</summary>
			<description>From user:
With Spring Data Geode 1.0.0.APACHE-GEODE-INCUBATING-M3 as well as 1.0.0.INCUBATING=RELEASE releases, I found that whenever you specify locators property on CacheServerApplication annotation (also applies to PeerCacheApplication), it gives a problem due to recursive calls bug in AbstractCacheConfiguration class.






class AbstractCacheConfiguration {









  setLocators(Integer mcastPort) {




    this.mcastPort = mcastPort;




    setMcastPort(DEFAULT_MCAST_PORT);




  }









...









  setMcastPort(String locators) {




    this.locators = locators;




    setLocators(DEFAULT_LOCATORS);




  }




}






Example:






@SpringBootApplication




@CacheServerApplication(autoStartup=true, locators="localhost[9001]")




public class MyCacheServiceMain {




  // Main method as trivial




}






But with that it gives, Stackoverflow error...






at org.springframework.data.gemfire.config.annotation.AbstractCacheConfiguration.setLocators(AbstractCacheConfiguration.java:685) ~[spring-data-geode-1.0.0.APACHE-GEODE-INCUBATING-M3.jar:na]




at org.springframework.data.gemfire.config.annotation.AbstractCacheConfiguration.setMcastPort(AbstractCacheConfiguration.java:712) ~[spring-data-geode-1.0.0.APACHE-GEODE-INCUBATING-M3.jar:na]




at org.springframework.data.gemfire.config.annotation.AbstractCacheConfiguration.setLocators(AbstractCacheConfiguration.java:685) ~[spring-data-geode-1.0.0.APACHE-GEODE-INCUBATING-M3.jar:na]




at org.springframework.data.gemfire.config.annotation.AbstractCacheConfiguration.setMcastPort(AbstractCacheConfiguration.java:712) ~[spring-data-geode-1.0.0.APACHE-GEODE-INCUBATING-M3.jar:na]




at org.springframework.data.gemfire.config.annotation.AbstractCacheConfiguration.setLocators(AbstractCacheConfiguration.java:685) ~[spring-data-geode-1.0.0.APACHE-GEODE-INCUBATING-M3.jar:na]




at org.springframework.data.gemfire.config.annotation.AbstractCacheConfiguration.setMcastPort(AbstractCacheConfiguration.java:712) ~[spring-data-geode-1.0.0.APACHE-GEODE-INCUBATING-M3.jar:na]at org.springframework.data.gemfire.config.annotation.AbstractCacheConfiguration.setLocators(AbstractCacheConfiguration.java:685) ~[spring-data-geode-1.0.0.APACHE-GEODE-INCUBATING-M3.jar:na]




at org.springframework.data.gemfire.config.annotation.AbstractCacheConfiguration.setMcastPort(AbstractCacheConfiguration.java:712) ~[spring-data-geode-1.0.0.APACHE-GEODE-INCUBATING-M3.jar:na]





</description>
			<version>1.0.0.APACHE-GEODE-INCUBATING-RELEASE</version>
			<fixedVersion>1.0.0.APACHE-GEODE-INCUBATING-RELEASE</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.config.annotation.PeerCacheApplicationIntegrationTests.java</file>
			<file type="M">org.springframework.data.gemfire.config.annotation.AbstractCacheConfiguration.java</file>
		</fixedFiles>
	</bug>
	<bug id="570" opendate="2016-11-19 03:14:49" fixdate="2016-11-21 21:50:25" resolution="Fixed">
		<buginformation>
			<summary>Respect manual-start on Gateway Senders/Receivers but no longer couple the start/stop lifecycle to the Spring container.</summary>
			<description>Currently, the start() and stop() lifecycle methods of the GemFire/Geode GatewaySender and GatewayReceiver objects are coupled to the Spring container lifecycle by way of the Spring SmartLifecycle interface.  Both the SDG GatewaySenderFactoryBean and GatewayReceiverFactoryBean implement the Spring SmartLifecycle interface. 
This task will remove the SmartLifecycle interface implementation from the SDG GatewaySenderFactoryBean and the GatewaySenderFactoryBean and solely rely on the GemFire/Geode GatewaySenderFactory.setManualStart(:boolean) and GatewayReceiverFactory.setManualStart(:boolean)|http://data-docs-samples.cfapps.io/docs-gemfire/latest/javadocs/japi/com/gemstone/gemfire/cache/wan/GatewayReceiverFactory.html#setManualStart(boolean)] methods and behavior.</description>
			<version>1.0.0.APACHE-GEODE-INCUBATING-M3</version>
			<fixedVersion>1.7.7 (Gosling SR7), 1.8.6 (Hopper SR6), 1.9 RC1 (Ingalls), 1.1.0-INCUBATING-RELEASE, 2.0 M1 (Kay)</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.wan.GatewaySenderFactoryBean.java</file>
			<file type="M">org.springframework.data.gemfire.config.xml.GatewayReceiverAutoStartNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.config.xml.GatewayReceiverDefaultStartNamespaceTest.java</file>
			<file type="M">org.springframework.data.gemfire.test.StubGatewayReceiverFactory.java</file>
			<file type="M">org.springframework.data.gemfire.config.xml.GatewayReceiverManualStartNamespaceTest.java</file>
		</fixedFiles>
	</bug>
</bugrepository>