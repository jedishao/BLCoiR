<?xml version = "1.0" encoding = "UTF-8" ?>
<bugrepository name="SWF">
	<bug id="239" opendate="2007-01-15 04:29:04" fixdate="2007-01-15 08:09:08" resolution="Fixed">
		<buginformation>
			<summary>type attribute in the &lt;repository/&gt; tag is not read for configuration</summary>
			<description>In Spring Web Flow 1.0.1, the type attribute of the new &amp;lt;repository/&amp;gt; tag is not read property.  This results in an error on start up.  An example is discussed in this forum thread: http://forum.springframework.org/showthread.php?t=33615</description>
			<version>1.0.1</version>
			<fixedVersion>1.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.config.WebFlowConfigNamespaceHandlerTests.java</file>
			<file type="M">org.springframework.webflow.config.ExecutorBeanDefinitionParser.java</file>
		</fixedFiles>
	</bug>
	<bug id="244" opendate="2007-01-25 18:04:06" fixdate="2007-02-07 02:57:45" resolution="Fixed">
		<buginformation>
			<summary>SessionBindingConversationManager does not update ConversationContainer in HTTP session every time.</summary>
			<description>The SessionBindingConversationManager does not update the ConversationContainer in the HttpSession every time (for every request). This can give problems in a clustered environment since the servlet engine will not detect any changes in the HttpSession contents and as a result will not push the updated session out to the cluster.
We should also revise the ConversationManager and Conversation interfaces to make sure the have all the hooks required. E.g. how do you know that a client (the FlowExecutionRepo) is done with the ConversationManager, e.g. to commit transaction? Does the unlock() method signal this or do we need another hook?
As a proof of concept we should probably build a DB backed ConversationManager.</description>
			<version>1.0.1</version>
			<fixedVersion>1.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.conversation.impl.ContainedConversation.java</file>
			<file type="M">org.springframework.webflow.execution.repository.continuation.ContinuationFlowExecutionRepositoryTests.java</file>
			<file type="M">org.springframework.webflow.conversation.impl.SessionBindingConversationManager.java</file>
			<file type="M">org.springframework.webflow.conversation.ConversationId.java</file>
			<file type="M">org.springframework.webflow.execution.repository.FlowExecutionRepository.java</file>
			<file type="M">org.springframework.webflow.conversation.impl.SessionBindingConversationManagerTests.java</file>
			<file type="M">org.springframework.webflow.execution.repository.support.SimpleFlowExecutionRepositoryTests.java</file>
			<file type="M">org.springframework.webflow.execution.repository.continuation.ContinuationFlowExecutionRepository.java</file>
			<file type="M">org.springframework.webflow.executor.FlowExecutorImpl.java</file>
			<file type="M">org.springframework.webflow.execution.repository.continuation.FlowExecutionContinuationGroupTests.java</file>
			<file type="M">org.springframework.webflow.execution.repository.continuation.ClientContinuationFlowExecutionRepositoryTests.java</file>
			<file type="M">org.springframework.webflow.conversation.Conversation.java</file>
		</fixedFiles>
	</bug>
	<bug id="262" opendate="2007-03-09 03:02:58" fixdate="2007-03-09 06:36:00" resolution="Fixed">
		<buginformation>
			<summary>Make ThreadLocal variables final</summary>
			<description>See:
http://opensource.atlassian.com/projects/spring/browse/SPR-2442</description>
			<version>1.0.1</version>
			<fixedVersion>1.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.context.ExternalContextHolder.java</file>
		</fixedFiles>
	</bug>
	<bug id="261" opendate="2007-03-09 02:04:08" fixdate="2007-03-17 00:41:42" resolution="Fixed">
		<buginformation>
			<summary>InvocationTargetException when second Exception is thrown</summary>
			<description>Reported on the forums:
http://forum.springframework.org/showthread.php?t=35874</description>
			<version>1.0.1</version>
			<fixedVersion>1.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.engine.impl.FlowExecutionImpl.java</file>
			<file type="M">org.springframework.webflow.engine.impl.FlowExecutionImplTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="268" opendate="2007-03-15 15:36:18" fixdate="2007-03-21 07:47:48" resolution="Fixed">
		<buginformation>
			<summary>Type aliases that can&amp;apos;t resolve don&amp;apos;t result in good error messages</summary>
			<description>"Long" (with a big &amp;amp;apos;L&amp;amp;apos;) is not a vaid alias... this is what was thrown:
java.lang.IllegalArgumentException: The target class to convert to is required
	at org.springframework.util.Assert.notNull(Assert.java:113)
	at org.springframework.binding.convert.support.GenericConversionService.getConversionExecutor(GenericConversionService.java:139)
	at org.springframework.webflow.engine.builder.xml.XmlFlowBuilder.parseTypeConverter(XmlFlowBuilder.java:1003)
	at org.springframework.webflow.engine.builder.xml.XmlFlowBuilder.parseMappings(XmlFlowBuilder.java:964)
	at org.springframework.webflow.engine.builder.xml.XmlFlowBuilder.parseInputMapper(XmlFlowBuilder.java:927)
	at org.springframework.webflow.engine.builder.xml.XmlFlowBuilder.buildInputMapper(XmlFlowBuilder.java:342)
	at org.springframework.webflow.engine.builder.FlowAssembler.directAssembly(FlowAssembler.java:146)
	at org.springframework.webflow.engine.builder.FlowAssembler.assembleFlow(FlowAssembler.java:131)
	at org.springframework.webflow.engine.builder.RefreshableFlowDefinitionHolder.assembleFlow(RefreshableFlowDefinitionHolder.java:173)
	at org.springframework.webflow.engine.builder.RefreshableFlowDefinitionHolder.refreshIfChanged(RefreshableFlowDefinitionHolder.java:128)
	at org.springframework.webflow.engine.builder.RefreshableFlowDefinitionHolder.getFlowDefinition(RefreshableFlowDefinitionHolder.java:96)
	at org.springframework.webflow.definition.registry.FlowDefinitionRegistryImpl.getFlowDefinition(FlowDefinitionRegistryImpl.java:126)
	at org.springframework.webflow.engine.impl.FlowExecutionImplStateRestorer.restoreState(FlowExecutionImplStateRestorer.java:101)
	at org.springframework.webflow.execution.repository.continuation.ContinuationFlowExecutionRepository.getFlowExecution(ContinuationFlowExecutionRepository.java:166)
	at org.springframework.webflow.executor.FlowExecutorImpl.refresh(FlowExecutorImpl.java:272)
	at org.springframework.webflow.executor.support.FlowRequestHandler.handleFlowRequest(FlowRequestHandler.java:122)
	at org.springframework.webflow.executor.mvc.FlowController.handleRequestInternal(FlowController.java:170)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:153)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:48)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:819)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:754)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:399)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:354)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:689)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869)
	at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664)
	at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)
	at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)
	at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)
	at java.lang.Thread.run(Thread.java:613)</description>
			<version>1.0.1</version>
			<fixedVersion>1.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.engine.builder.xml.XmlFlowBuilder.java</file>
			<file type="M">org.springframework.binding.convert.support.TextToClass.java</file>
		</fixedFiles>
	</bug>
	<bug id="264" opendate="2007-03-14 10:36:31" fixdate="2007-03-21 07:56:23" resolution="Fixed">
		<buginformation>
			<summary>Spring-binding type conversion tries to convert to a target type even if type is assignment compatible with the source</summary>
			<description>See http://forum.springframework.org/showthread.php?t=36094</description>
			<version>1.0.1</version>
			<fixedVersion>1.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.config.RepositoryType.java</file>
			<file type="M">org.springframework.webflow.engine.support.NotTransitionCriteria.java</file>
			<file type="M">org.springframework.webflow.execution.FlowSessionStatus.java</file>
			<file type="M">org.springframework.webflow.execution.repository.continuation.ContinuationCreationException.java</file>
			<file type="M">org.springframework.webflow.definition.registry.FlowDefinitionConstructionException.java</file>
			<file type="M">org.springframework.webflow.execution.repository.support.InvalidContinuationIdException.java</file>
			<file type="M">org.springframework.webflow.engine.builder.xml.XmlFlowBuilder.java</file>
			<file type="M">org.springframework.webflow.execution.repository.continuation.ContinuationNotFoundException.java</file>
			<file type="M">org.springframework.binding.convert.support.DefaultConversionServiceTests.java</file>
			<file type="M">org.springframework.binding.convert.support.GenericConversionService.java</file>
		</fixedFiles>
	</bug>
	<bug id="265" opendate="2007-03-15 14:53:13" fixdate="2007-03-22 04:21:08" resolution="Fixed">
		<buginformation>
			<summary>Spring Binding library doesn&amp;apos;t handle several exceptional scenarios well</summary>
			<description>If a method key&amp;amp;apos;s class property is null (when a bean-action method can&amp;amp;apos;t be resolved):
java.lang.IllegalArgumentException: Class must not be null
	at org.springframework.util.Assert.notNull(Assert.java:113)
	at org.springframework.util.ClassUtils.getQualifiedName(ClassUtils.java:330)
	at org.springframework.util.ClassUtils.getShortName(ClassUtils.java:296)
	at org.springframework.binding.method.MethodKey.parameterTypesString(MethodKey.java:243)
	at org.springframework.binding.method.MethodKey.toString(MethodKey.java:233)
	at java.lang.String.valueOf(String.java:2615)
	at java.lang.StringBuffer.append(StringBuffer.java:220)
	at org.springframework.binding.method.InvalidMethodKeyException.&amp;lt;init&amp;gt;(InvalidMethodKeyException.java:39)
	at org.springframework.binding.method.MethodKey.resolveMethod(MethodKey.java:115)
	at org.springframework.binding.method.MethodKey.getMethod(MethodKey.java:95)
	at org.springframework.webflow.action.BeanInvokingActionFactory.createBeanInvokingAction(BeanInvokingActionFactory.java:88)
	at org.springframework.webflow.engine.builder.xml.XmlFlowBuilder.parseBeanInvokingAction(XmlFlowBuilder.java:747)
	at org.springframework.webflow.engine.builder.xml.XmlFlowBuilder.parseAnnotatedBeanInvokingAction(XmlFlowBuilder.java:737)
	at org.springframework.webflow.engine.builder.xml.XmlFlowBuilder.parseAnnotatedActions(XmlFlowBuilder.java:700)
	at org.springframework.webflow.engine.builder.xml.XmlFlowBuilder.parseRenderActions(XmlFlowBuilder.java:637)
	at org.springframework.webflow.engine.builder.xml.XmlFlowBuilder.parseAndAddViewState(XmlFlowBuilder.java:597)
	at org.springframework.webflow.engine.builder.xml.XmlFlowBuilder.parseAndAddStateDefinitions(XmlFlowBuilder.java:564)
	at org.springframework.webflow.engine.builder.xml.XmlFlowBuilder.buildStates(XmlFlowBuilder.java:354)
	at org.springframework.webflow.engine.builder.FlowAssembler.directAssembly(FlowAssembler.java:149)
	at org.springframework.webflow.engine.builder.FlowAssembler.assembleFlow(FlowAssembler.java:131)
	at org.springframework.webflow.engine.builder.RefreshableFlowDefinitionHolder.assembleFlow(RefreshableFlowDefinitionHolder.java:173)
	at org.springframework.webflow.engine.builder.RefreshableFlowDefinitionHolder.getFlowDefinition(RefreshableFlowDefinitionHolder.java:93)
	at org.springframework.webflow.definition.registry.FlowDefinitionRegistryImpl.getFlowDefinition(FlowDefinitionRegistryImpl.java:126)
	at org.springframework.webflow.executor.FlowExecutorImpl.launch(FlowExecutorImpl.java:204)
	at org.springframework.webflow.executor.support.FlowRequestHandler.handleFlowRequest(FlowRequestHandler.java:131)
	at org.springframework.webflow.executor.mvc.FlowController.handleRequestInternal(FlowController.java:170)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:153)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:48)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:819)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:754)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:399)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:354)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:689)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869)
	at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664)
	at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)
	at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)
	at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)
	at java.lang.Thread.run(Thread.java:613)
If a bean action throws an exception:
SEVERE: Servlet.service() for servlet accounts threw exception
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.springframework.binding.method.MethodInvoker.invoke(MethodInvoker.java:96)
	at org.springframework.webflow.action.AbstractBeanInvokingAction.doExecute(AbstractBeanInvokingAction.java:132)
	at org.springframework.webflow.action.AbstractAction.execute(AbstractAction.java:203)
	at org.springframework.webflow.engine.AnnotatedAction.execute(AnnotatedAction.java:142)
	at org.springframework.webflow.engine.ActionExecutor.execute(ActionExecutor.java:61)
	at org.springframework.webflow.engine.ActionList.execute(ActionList.java:160)
	at org.springframework.webflow.engine.ViewState.refresh(ViewState.java:114)
	at org.springframework.webflow.engine.impl.FlowExecutionImpl.refresh(FlowExecutionImpl.java:241)
	at org.springframework.webflow.executor.FlowExecutorImpl.refresh(FlowExecutorImpl.java:273)
	at org.springframework.webflow.executor.support.FlowRequestHandler.handleFlowRequest(FlowRequestHandler.java:122)
	at org.springframework.webflow.executor.mvc.FlowController.handleRequestInternal(FlowController.java:170)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:153)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:48)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:819)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:754)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:399)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:354)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:689)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869)
	at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664)
	at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)
	at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)
	at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)
	at java.lang.Thread.run(Thread.java:613)</description>
			<version>1.0.1</version>
			<fixedVersion>1.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.engine.ActionExecutor.java</file>
			<file type="M">org.springframework.binding.method.MethodKey.java</file>
			<file type="M">org.springframework.binding.method.Parameter.java</file>
			<file type="M">org.springframework.binding.method.Parameters.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">260</link>
		</links>
	</bug>
	<bug id="260" opendate="2007-03-04 22:08:40" fixdate="2007-03-22 04:24:05" resolution="Duplicate">
		<buginformation>
			<summary>BeanInvokingActionFactory exception when invoking an intercepted bean</summary>
			<description>As reported in the following thread on the forum:
http://forum.springframework.org/showthread.php?t=35210
Should be investigated.</description>
			<version>1.0.1</version>
			<fixedVersion>1.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.engine.ActionExecutor.java</file>
			<file type="M">org.springframework.binding.method.MethodKey.java</file>
			<file type="M">org.springframework.binding.method.Parameter.java</file>
			<file type="M">org.springframework.binding.method.Parameters.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">265</link>
		</links>
	</bug>
	<bug id="270" opendate="2007-03-22 07:46:34" fixdate="2007-03-25 02:06:13" resolution="Fixed">
		<buginformation>
			<summary>Url encoding problems with ClientContinuationFlowExecutionRepository</summary>
			<description>See forum:
http://forum.springframework.org/showthread.php?t=36225</description>
			<version>1.0.1</version>
			<fixedVersion>1.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.execution.repository.continuation.ClientContinuationFlowExecutionRepository.java</file>
		</fixedFiles>
	</bug>
	<bug id="255" opendate="2007-02-26 17:15:38" fixdate="2007-03-25 18:49:40" resolution="Fixed">
		<buginformation>
			<summary>The combination of evaluate-action and on-exception does not work</summary>
			<description>From:
http://forum.springframework.org/showthread.php?t=35256
See attachment file, please.
on-exception="foo.FooException" and on-exception="foo.BarException" are ignored.</description>
			<version>1.0.1</version>
			<fixedVersion>1.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.binding.expression.support.OgnlExpression.java</file>
			<file type="M">org.springframework.webflow.engine.impl.FlowExecutionImplTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="277" opendate="2007-04-01 05:13:05" fixdate="2007-04-01 05:26:53" resolution="Fixed">
		<buginformation>
			<summary>FlowExecutorImpl&amp;apos;s resume() and refresh() methods should throw a FlowException for an empty flowExecutionKey</summary>
			<description>FlowExecturoImpl&amp;amp;apos;s resume() and refresh() methods both call executionRepository.parseFlowExecutionKey(flowExecutionKey), which throws an IllegalArgumentException if the supplied encodedKey is empty (i.e., Assert.hasText(encodedKey, "The string encoded flow execution key is required")).
This behavior does not comply with the FlowExecutor&amp;amp;apos;s API, which states that resume() and refresh() should throw a FlowException.
Alternatively, AbstractConversationFlowExecutionRepository&amp;amp;apos;s parseFlowExecutionKey(String encodedKey) method should throw a FlowExecutionRepositoryException instead of the IllegalArgumentException.
In either case, the goal is to have SWF throw SWF specific exceptions instead of allowing an IllegalArgumentException to trickle all the way up the execution stack.
The impetus for this JIRA issue is that I am updating the SpringWebFlowExceptionResolver (see SWF-158), and it is not reasonable to register an IllegalArgumentException as a "supported SWF exception".
To reproduce this bug, configure a continuation backed flow using a RequestPathFlowExecutorArgumentHandler (configured with a defaultFlowId) as the argument handler in the FlowController, and omit the key from the URL. For example, with a web application context mapped to the ROOT and a FlowController mapped to "registration", accessing the following URL will throw an IllegalArgumentException:
http://localhost:8080/registration/k/</description>
			<version>1.0.1</version>
			<fixedVersion>1.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.execution.repository.support.AbstractConversationFlowExecutionRepository.java</file>
		</fixedFiles>
	</bug>
	<bug id="282" opendate="2007-04-05 03:56:05" fixdate="2007-04-06 01:26:41" resolution="Fixed">
		<buginformation>
			<summary>ajax4jsf compatibility is broken</summary>
			<description>A recent snapshot broke the ability to use SWF together with JSF and ajax4jsf. As soon as the ajax4jsf.jar is in the classpath the following exception is thrown:
2007-04-05 18:07:37,366 ERROR [org.apache.myfaces.lifecycle.PhaseListenerManager] - &amp;lt;Exception in PhaseListener RESTORE_VIEW(1) afterPhase&amp;gt;
javax.faces.el.EvaluationException: FlowExecution is not bound to current thread context - has the flow ended or expired?
        at org.springframework.webflow.executor.jsf.FlowExecutionHolderUtils.getRequiredCurrentFlowExecution(FlowExecutionHolderUtils.java:74)
        at org.springframework.webflow.executor.jsf.DelegatingFlowVariableResolver.resolveVariable(DelegatingFlowVariableResolver.java:65)
        at org.ajax4jsf.framework.ajax.AjaxContext.getCurrentInstance(AjaxContext.java:150)
        at org.ajax4jsf.framework.renderer.AjaxPhaseListener.afterPhase(AjaxPhaseListener.java:76)
        at org.apache.myfaces.lifecycle.PhaseListenerManager.informPhaseListenersAfter(PhaseListenerManager.java:92)
        at org.apache.myfaces.lifecycle.LifecycleImpl.executePhase(LifecycleImpl.java:99)
        at org.apache.myfaces.lifecycle.LifecycleImpl.execute(LifecycleImpl.java:70)
        at javax.faces.webapp.FacesServlet.service(FacesServlet.java:139)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:269)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188)
        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:691)
        at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:469)
        at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:403)
        at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:301)
        at org.apache.jasper.runtime.PageContextImpl.doForward(PageContextImpl.java:691)
        at org.apache.jasper.runtime.PageContextImpl.forward(PageContextImpl.java:661)
        at org.apache.jsp.index_jsp._jspService(index_jsp.java:49)
        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:98)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:328)
        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:315)
        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:265)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:269)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:210)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:174)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:151)
        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:870)
        at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:665)
        at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528)
        at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:81)
        at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:685)
        at java.lang.Thread.run(Thread.java:613)
This is a major problem since ajax4jsf worked with a previous snapshot version of SWF 1.0.2, at least when Facelets are used as the view technology.</description>
			<version>1.0.2</version>
			<fixedVersion>1.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.executor.jsf.DelegatingFlowVariableResolver.java</file>
		</fixedFiles>
	</bug>
	<bug id="236" opendate="2007-01-12 01:01:04" fixdate="2007-04-10 12:38:41" resolution="Fixed">
		<buginformation>
			<summary>Flow redirection parameter incorrectly mapped in a portlet environment</summary>
			<description>&amp;amp;apos;ve run into an issue similar to SWF-153
The problem is that while exposing parameters to a render request (in PortletFlowController, line 221 in 1.0) with response.setRenderParameters(redirect.getExecution Input()); a map passed to response.setRenderParameters has kays beeing strings and values also beeing string.
Unfortunatelly, response.setRenderParameters expect a map of keys beeing strings and values beeing ARRAYS of strings.
So, after trying to pass a redirect parameter a portlet container will fail (in case of pluto it is a IllegalArgumentException).
I&amp;amp;apos;ve created a simple flow with which we can test the issue described:
Code:
&amp;lt;start-state idref="page1"/&amp;gt;
&amp;lt;view-state id="page1" view="/test/page1.jsp" &amp;gt;
		&amp;lt;transition on="next" to="testAend"/&amp;gt;
&amp;lt;/view-state&amp;gt;
&amp;lt;view-state id="testAend" view="flowRedirect:testB?paramName=testValue" /&amp;gt;</description>
			<version>1.0.2</version>
			<fixedVersion>1.0.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.executor.mvc.PortletFlowController.java</file>
		</fixedFiles>
	</bug>
	<bug id="304" opendate="2007-04-30 22:47:35" fixdate="2007-04-30 23:34:49" resolution="Fixed">
		<buginformation>
			<summary>CONVERSATION_CONTAINER_KEY should be unique per FlowExecutor </summary>
			<description>Background: If you configure a FlowExecutor within a single web app using a FlowExecutorFactoryBean, a SessionBindingConversationManager will be instantiated by default as your ConversationManager. This SessionBindingConversationManager will then store a ConversationContainer in the HTTP session under the key "webflow.conversation.container". In addition, you can configure the maxConversations to 1 if you like. This works as expected as long as you only configure only one such FlowExecutor.
Unintuitive behavior: if you configure multiple, unique FlowExecutors within a single web app using FlowExecutorFactoryBean as described above with maxConversations=1, you will then notice that both FlowExecutors ultimately use the same session key and thus conflict with each other. For example, if you start one flow for FlowExecutor #1 and start another flow which is handled by FlowExecutor #2, the execution of the 2nd flow will destroy the execution of the 1st flow.
The issue lies in the interpretation of the semantics of maxConversations. As it is currently implemented (i.e., with a single, global session key), the maxConversations takes effect for all configured FlowExecutors within a single web app.
I believe that this is unintuitive and actually not the desired behavior. If I configure two completely separate FlowExecutors with different flow repositories within a single web app, I expect that the configuration of one of them will not conflict with the configuration of the other.
See also:
http://forum.springframework.org/showthread.php?t=38156</description>
			<version>1.0.3</version>
			<fixedVersion>1.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.conversation.impl.ContainedConversation.java</file>
			<file type="M">org.springframework.webflow.conversation.impl.SessionBindingConversationManager.java</file>
			<file type="M">org.springframework.webflow.conversation.impl.ConversationSizeTests.java</file>
			<file type="M">org.springframework.webflow.execution.repository.continuation.FlowExecutionContinuationGroupTests.java</file>
			<file type="M">org.springframework.webflow.conversation.impl.ConversationContainer.java</file>
		</fixedFiles>
		<links>
			<link type="Related" description="is related to">378</link>
		</links>
	</bug>
	<bug id="305" opendate="2007-05-01 01:26:12" fixdate="2007-05-02 02:28:57" resolution="Fixed">
		<buginformation>
			<summary>SWF-JSF: ExternalContext ThreadLocal not properly released in exceptional situations</summary>
			<description>Currently bypassing render response (either via a earlier response complete or unhandled exception) results in the ExternalContext ThreadLocal from not being cleaned up.</description>
			<version>1.0.3</version>
			<fixedVersion>1.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.executor.jsf.FlowNavigationHandlerArgumentExtractorTests.java</file>
			<file type="M">org.springframework.webflow.executor.jsf.FlowNavigationHandler.java</file>
			<file type="M">org.springframework.webflow.executor.jsf.JsfExternalContext.java</file>
			<file type="M">org.springframework.webflow.executor.jsf.FlowPhaseListener.java</file>
		</fixedFiles>
	</bug>
	<bug id="307" opendate="2007-05-05 00:43:12" fixdate="2007-06-12 14:43:28" resolution="Fixed">
		<buginformation>
			<summary>Unit tests cannot override beans defined in a flow local application context</summary>
			<description>See the following forum thread:
http://forum.springframework.org/showthread.php?t=38319</description>
			<version>1.0.3</version>
			<fixedVersion>1.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.engine.builder.xml.XmlFlowBuilder.java</file>
			<file type="M">org.springframework.webflow.engine.builder.xml.NamedActionXmlFlowBuilderTests.java</file>
			<file type="M">org.springframework.webflow.test.execution.AbstractXmlFlowExecutionTests.java</file>
			<file type="M">org.springframework.webflow.engine.builder.xml.LocalFlowServiceLocator.java</file>
			<file type="M">org.springframework.webflow.engine.builder.xml.LocalFlowServiceRegistry.java</file>
		</fixedFiles>
	</bug>
	<bug id="335" opendate="2007-06-12 00:40:16" fixdate="2007-06-12 22:41:53" resolution="Fixed">
		<buginformation>
			<summary>Remove dependency on OGNL</summary>
			<description>The implicit constructor of BaseFlowBuilder constructs a BaseFlowServiceLocator which in turn constructors a ExpressionParser using: 
private ExpressionParser expressionParser = DefaultExpressionParserFactory.getExpressionParser();
The problem here is that this makes it impossible to swap the ExpressionParser for a different implementation that doesn&amp;amp;apos;t rely on OGNL. In my case I want to impl an ExpressionParser that using Groovy&amp;amp;apos;s GPath and OGNL is not currently a dependency of Grails nor do I want it to be</description>
			<version>1.0.3</version>
			<fixedVersion>1.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.core.DefaultExpressionParserFactoryTests.java</file>
			<file type="M">org.springframework.webflow.core.DefaultExpressionParserFactory.java</file>
			<file type="M">org.springframework.webflow.engine.builder.BaseFlowServiceLocator.java</file>
		</fixedFiles>
	</bug>
	<bug id="337" opendate="2007-06-12 15:27:00" fixdate="2007-06-13 02:30:44" resolution="Fixed">
		<buginformation>
			<summary>Converters attempt type conversion even if source object is already assignment compatible with target class.</summary>
			<description>As noted here: http://opensource.atlassian.com/projects/spring/browse/SWF-323.
This could be a general issue with the Conversion facility in spring-binding.  To research for 1.0.4.</description>
			<version>1.0.3</version>
			<fixedVersion>1.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.binding.convert.ConversionExecutor.java</file>
			<file type="M">org.springframework.binding.convert.ConversionException.java</file>
		</fixedFiles>
	</bug>
	<bug id="347" opendate="2007-07-12 23:03:40" fixdate="2007-08-15 02:07:02" resolution="Fixed">
		<buginformation>
			<summary>RequestContext.attributes should never be null</summary>
			<description>DefaultMultiActionMethodResolver:40 assumes that context.getAttributes() returns non-null.</description>
			<version>1.0.4</version>
			<fixedVersion>1.0.5, 2.0 M1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.engine.impl.RequestControlContextImpl.java</file>
			<file type="M">org.springframework.webflow.test.MockRequestContext.java</file>
		</fixedFiles>
	</bug>
	<bug id="343" opendate="2007-07-07 22:24:43" fixdate="2007-08-15 02:33:20" resolution="Fixed">
		<buginformation>
			<summary>MapAccessor does not correctly handle null values</summary>
			<description>See the following forum thread:
http://forum.springframework.org/showthread.php?t=40620</description>
			<version>1.0.4</version>
			<fixedVersion>1.0.5, 2.0 M1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.binding.collection.MapAccessor.java</file>
		</fixedFiles>
	</bug>
	<bug id="378" opendate="2007-08-14 00:40:52" fixdate="2007-08-15 04:23:34" resolution="Fixed">
		<buginformation>
			<summary>Session binding conversation containers cannot be used in a cluster</summary>
			<description>See http://forum.springframework.org/showthread.php?t=41950
Original issue report:

Prior to version 1.0.4 I was able to have the functionality where if i had to restart tomcat for any reason users would be able to pick up right where they left off in a flow when tomcat came back up. This was because I am persisting my httpsessions on restart.  Since I have upgraded to SWF 1.0.4 When i restart tomcat my session are persisted as normal however I get a NoSuchConversationException.
Could this be the reason:
New in 1.0.4 you now use the session key "webflow.conversation.container." + new RandomGuid().toString(); to store the conversationContainer in the httpsession
However when tomcat restarts and we try to resume our webflow, since that RandomGuid() has now generated a different key it can no longer reference the ConversationContainer in the session since it used the old random key that was generated before tomcat restarted.
So my conversationcontainer is still in the session, but the sessionBindingConversationManager has no way to find it since the random key assigned as they session key has now changed.
Can anyone shine some light on this?

This was introduced in 1.0.4.  We should allow the key of a conversation container to be specified manually to allow unique containers per session without this random guid problem.</description>
			<version>1.0.4</version>
			<fixedVersion>1.0.5, 2.0 M1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.conversation.impl.SessionBindingConversationManager.java</file>
			<file type="M">org.springframework.webflow.conversation.impl.SessionBindingConversationManagerTests.java</file>
		</fixedFiles>
		<links>
			<link type="Related" description="is related to">304</link>
		</links>
	</bug>
	<bug id="418" opendate="2007-11-15 05:40:40" fixdate="2007-11-26 06:10:07" resolution="Fixed">
		<buginformation>
			<summary>Restore JSF 1.1 compatability for Web Flow 2.0</summary>
			<description>Spring Web Flow 2.0 M2 introduced a dependency on JSF 1.2.  We should investigate the amount of work required to support JSF 1.1 in Spring Faces, and also the demand for JSF 1.1 from our community.  Please vote on this issue if you require JSF 1.1 beyond March 2008.</description>
			<version>2.0 M2</version>
			<fixedVersion>2.0 M4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.ui.DojoClientCurrencyValidator.java</file>
			<file type="M">org.springframework.faces.ui.DojoAdvisor.java</file>
			<file type="M">org.springframework.faces.webflow.FlowViewHandler.java</file>
			<file type="M">org.springframework.faces.webflow.JsfViewTests.java</file>
			<file type="M">org.springframework.faces.webflow.TreeStructureManager.java</file>
			<file type="M">org.springframework.faces.webflow.JsfFinalResponseActionTests.java</file>
			<file type="M">org.springframework.faces.webflow.JsfUtils.java</file>
			<file type="M">org.springframework.faces.ui.resource.RenderResourceAction.java</file>
			<file type="M">org.springframework.faces.webflow.FlowViewStateManager.java</file>
			<file type="M">org.springframework.faces.ui.resource.RenderResourceActionTests.java</file>
			<file type="M">org.springframework.faces.ui.resource.FlowResourceHelperTests.java</file>
			<file type="M">org.springframework.faces.ui.ExtAdvisor.java</file>
			<file type="M">org.springframework.faces.webflow.FlowActionListenerTests.java</file>
			<file type="M">org.springframework.faces.webflow.FlowFacesContextTests.java</file>
			<file type="M">org.springframework.faces.ui.DojoAdvisorRenderer.java</file>
			<file type="M">org.springframework.faces.webflow.FlowFacesContext.java</file>
			<file type="M">org.springframework.faces.webflow.JsfViewFactory.java</file>
			<file type="M">org.springframework.faces.webflow.JsfViewFactoryTests.java</file>
		</fixedFiles>
		<links>
			<link type="Depends" description="is depended on by">400</link>
		</links>
	</bug>
	<bug id="437" opendate="2008-01-14 06:37:35" fixdate="2008-01-14 06:45:54" resolution="Fixed">
		<buginformation>
			<summary>Form action URL is updated in correctly on an AJAX request</summary>
			<description>The first attempt at updating form action URL&amp;amp;apos;s with the new flow execution URL as a result of processing an AJAX request is too optimistic.  It assumes that all forms on a page always correspond to the same flow execution instance, but this is incorrect.  For example, when one form is rendered in initial page rendering, and then the ajax request renders a new form into an inline popup control, the two forms should have distinct form action URL&amp;amp;apos;s because they represent the flow in two different states.</description>
			<version>2.0 M3</version>
			<fixedVersion>2.0 M4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.ui.AjaxViewRoot.java</file>
		</fixedFiles>
	</bug>
	<bug id="459" opendate="2008-01-29 06:11:17" fixdate="2008-02-07 02:39:37" resolution="Fixed">
		<buginformation>
			<summary>Resolution of variables using specific scope prefixes like "flowScope", "flashScope", etc. does not work in JSF views</summary>
			<description>This is a report from a user against M3.  To investigate.
Also see this comment:
"as of last check if I  wanted to find a variable specifically in flowScope #
{requestContext.flowScope.theVariable}
 It complained that there was no property getTheVariable in localAttributeMap."</description>
			<version>2.0 M3</version>
			<fixedVersion>2.0 M4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.expression.CompositeFlowPropertyResolver.java</file>
			<file type="M">org.springframework.faces.expression.CompositeFlowVariableResolver.java</file>
		</fixedFiles>
	</bug>
	<bug id="531" opendate="2008-03-13 08:25:11" fixdate="2008-03-13 08:25:56" resolution="Fixed">
		<buginformation>
			<summary>DefaultExpressionFactoryUtils should not automatically set the javax.el.ExpressionFactory system property</summary>
			<description>DefaultExpressionFactoryUtils should not automatically set the javax.el.ExpressionFactory system property to configure the ExpressionFactory implementation, as it causes problems with JSP containers using the newest version of the el-api (i.e., Jetty).</description>
			<version>2.0 M4</version>
			<fixedVersion>2.0.0.RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.binding.expression.el.DefaultExpressionFactoryUtils.java</file>
		</fixedFiles>
	</bug>
	<bug id="529" opendate="2008-03-13 01:54:57" fixdate="2008-03-13 08:28:18" resolution="Fixed">
		<buginformation>
			<summary>DefaultExpressionFactoryUtils breaks backward compatiblity to JDK 1.4</summary>
			<description>The Method createExpressionFactory() in org.springframework.binding.expression.el.DefaultExpressionFactoryUtils tries to throw an IllegalStateException with arguments of type String and Throwable. 
The Class IllegalStateException in JDK doesn&amp;amp;apos;t allow for an throwable in it&amp;amp;apos;s constructor. This feature is first introduced in JDK1.5</description>
			<version>2.0 M4</version>
			<fixedVersion>2.0.0.RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.binding.expression.el.DefaultExpressionFactoryUtils.java</file>
		</fixedFiles>
	</bug>
	<bug id="527" opendate="2008-03-13 01:15:52" fixdate="2008-03-13 09:48:08" resolution="Fixed">
		<buginformation>
			<summary>org.springframework.faces.webflow.FlowVariableResolver not working with JDK1.4</summary>
			<description>The FlowVariableResolver is automatically configured by the faces jar (spring-faces-2.0-m4.jar, /META-INF/faces-config.xml). 
In it&amp;amp;apos;s static initializer it tries to create an instance of SpringBeanWebFlowELResolver which inherits from 
org.springframework.beans.factory.access.el.SpringBeanELResolver, but SpringBeanELResolver is not compatible with JDK1.4. 
In turn it might simply be an oversight to make SpringBeanELResolver JDK1.4 compatible (should be fairly easy to replace StringBuilder)?</description>
			<version>2.0 M4</version>
			<fixedVersion>2.0.0.RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowVariableResolver.java</file>
		</fixedFiles>
	</bug>
	<bug id="537" opendate="2008-03-15 06:20:37" fixdate="2008-03-17 02:49:33" resolution="Fixed">
		<buginformation>
			<summary>FlowViewStateManager set repeatedly on application instance after application initialization</summary>
			<description>This looks like a hack. Why are we doing this?
See http://forum.springframework.org/showthread.php?t=51210</description>
			<version>2.0 M4</version>
			<fixedVersion>2.0.0.RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowFacesContext.java</file>
		</fixedFiles>
	</bug>
	<bug id="538" opendate="2008-03-15 06:22:27" fixdate="2008-04-01 02:32:41" resolution="Fixed">
		<buginformation>
			<summary>JSFViewFactory&amp;apos;s execution of the restore view lifecycle doesn&amp;apos;t appear to match the JSF spec.</summary>
			<description>We never call viewHandler.init for one.
We need to make sure we are conforming to the JSF specification.</description>
			<version>2.0 M4</version>
			<fixedVersion>2.0.0.RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.MockViewHandler.java</file>
			<file type="M">org.springframework.faces.webflow.JsfUtils.java</file>
			<file type="M">org.springframework.faces.webflow.FlowViewStateManager.java</file>
			<file type="M">org.springframework.faces.mvc.JsfView.java</file>
			<file type="D">org.springframework.faces.mvc.JsfController.java</file>
			<file type="M">org.springframework.faces.webflow.JsfViewFactory.java</file>
		</fixedFiles>
	</bug>
	<bug id="570" opendate="2008-04-09 07:09:12" fixdate="2008-04-11 01:46:31" resolution="Fixed">
		<buginformation>
			<summary>No way to specify parent flow registry from flow-registry tag</summary>
			<description>Look into a parent attribute...</description>
			<version>2.0 M4</version>
			<fixedVersion>2.0.0.RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.config.FlowRegistryFactoryBean.java</file>
			<file type="M">org.springframework.webflow.config.FlowRegistryBeanDefinitionParser.java</file>
			<file type="M">org.springframework.webflow.definition.registry.FlowDefinitionRegistryImpl.java</file>
			<file type="M">org.springframework.webflow.config.FlowRegistryBeanDefinitionParserTests.java</file>
			<file type="M">org.springframework.webflow.definition.registry.FlowDefinitionRegistry.java</file>
		</fixedFiles>
	</bug>
	<bug id="573" opendate="2008-04-09 15:18:12" fixdate="2008-04-11 03:17:52" resolution="Fixed">
		<buginformation>
			<summary>flow-execution-repository type attribute should be optional</summary>
			<description>given DefaultFlowExecutionRepository.</description>
			<version>2.0 M4</version>
			<fixedVersion>2.0.0.RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.config.FlowExecutorFactoryBean.java</file>
			<file type="M">org.springframework.webflow.config.FlowExecutorBeanDefinitionParser.java</file>
			<file type="M">org.springframework.webflow.config.FlowExecutorBeanDefinitionParserTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="480" opendate="2008-02-27 03:18:23" fixdate="2008-04-14 05:24:13" resolution="Duplicate">
		<buginformation>
			<summary>Make FlowExecutionContinuationFactory implementation used by DefaultFlowExecutionRepository configurable</summary>
			<description>The implementation of the interface FlowExecutionContinuationFactory used by DefaultFlowExecutionRepository is currently hardwired in the constructor. The following is an extract from the M3 source code:
	public DefaultFlowExecutionRepository(ConversationManager conversationManager,
			FlowExecutionStateRestorer executionStateRestorer) 
{
		super(conversationManager, executionStateRestorer, new SerializedFlowExecutionContinuationFactory());
	}

The SerializedFlowExecutionContinuationFactory is directly instantiated and passed to the constructor of the super class. No setter is provided by DefaultFlowExecutionRepository or it&amp;amp;apos;s parent class to inject another implementation of FlowExecutionContinuationFactory.
It would be a great increase of flexibility to allow injection for the FlowExecutionContinuationFactory. This allows it to change the serialization mechanism without being required to re-implement the FlowExecutionRepository.</description>
			<version>2.0 M3</version>
			<fixedVersion></fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.execution.repository.impl.DefaultFlowExecutionRepository.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">530</link>
		</links>
	</bug>
	<bug id="594" opendate="2008-04-14 04:39:18" fixdate="2008-04-15 02:50:03" resolution="Fixed">
		<buginformation>
			<summary>NullPointerException in ProgressiveCommandButton</summary>
			<description>http://forum.springframework.org/showthread.php?t=52558
Seems like transition is null here.</description>
			<version>2.0.0.RC1</version>
			<fixedVersion>2.0.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.ui.ProgressiveCommandButton.java</file>
		</fixedFiles>
	</bug>
	<bug id="604" opendate="2008-04-15 00:49:40" fixdate="2008-04-15 09:12:40" resolution="Fixed">
		<buginformation>
			<summary>ResourceServlet allows http access to sensitive files</summary>
			<description>The ResourceServlet allows access to files that should be protected.
http://richweb.springframework.org/swf-booking-faces/resources/WEB-INF/web.xml
Access should be denied to WEB-INF or made configurable.</description>
			<version>2.0.0.RC1</version>
			<fixedVersion>2.0.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.js.resource.ResourceServlet.java</file>
		</fixedFiles>
	</bug>
	<bug id="583" opendate="2008-04-13 11:54:11" fixdate="2008-04-16 08:39:47" resolution="Fixed">
		<buginformation>
			<summary>View-state programming model needs to be consistent between MVC and JSF</summary>
			<description>Currently JSF doesn&amp;amp;apos;t do anything with the "model" attribute, but it should be consistency with what MVC does: invoke model validation logic if it exits.</description>
			<version>2.0.0.RC1</version>
			<fixedVersion>2.0.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.JsfView.java</file>
			<file type="M">org.springframework.faces.webflow.JsfViewTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="600" opendate="2008-04-14 09:31:52" fixdate="2008-04-19 05:19:50" resolution="Fixed">
		<buginformation>
			<summary>bug in the persistence listener when working with subflows (HibernateFlowExecutionListener)</summary>
			<description>When entering a subflow with persistence context from a parent woth persistence context you get an 
java.lang.IllegalStateException: Already value [org.springframework.orm.hibernate3.SessionHolder@1 254e59] for key [org.hibernate.impl.SessionFactoryImpl@56b64c] bound to thread [http-8084-4]
When the subflow is started the suspending parent should take care to unbind the session, but this is not being done.</description>
			<version>2.0.0.RC1</version>
			<fixedVersion>2.0.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.persistence.HibernateFlowManagedPersistenceIntegrationTests.java</file>
			<file type="M">org.springframework.webflow.persistence.HibernateFlowExecutionListener.java</file>
			<file type="M">org.springframework.webflow.persistence.JpaFlowExecutionListener.java</file>
			<file type="M">org.springframework.webflow.persistence.JpaFlowManagedPersistenceIntegrationTests.java</file>
			<file type="M">org.springframework.webflow.persistence.HibernateFlowExecutionListenerTests.java</file>
			<file type="M">org.springframework.binding.expression.EvaluationAttempt.java</file>
		</fixedFiles>
	</bug>
	<bug id="626" opendate="2008-04-18 11:01:11" fixdate="2008-04-19 07:10:03" resolution="Fixed">
		<buginformation>
			<summary>Piecemeal validation in FormAction does not work</summary>
			<description>See http://forum.springframework.org/showthread.php?p=175983
Custom validator methods, specified by the evaluate attribute &amp;amp;apos;validatorMethod&amp;amp;apos; are not invoked.
</description>
			<version>2.0.0.RC1</version>
			<fixedVersion>2.0.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.execution.Action.java</file>
			<file type="M">org.springframework.webflow.engine.AnnotatedAction.java</file>
			<file type="M">org.springframework.webflow.action.FormActionTests.java</file>
			<file type="M">org.springframework.webflow.action.AbstractAction.java</file>
			<file type="M">org.springframework.webflow.engine.ActionExecutor.java</file>
			<file type="M">org.springframework.webflow.engine.model.builder.xml.XmlFlowModelBuilderTests.java</file>
			<file type="M">org.springframework.webflow.engine.impl.RequestControlContextImpl.java</file>
			<file type="M">org.springframework.webflow.core.collection.MutableAttributeMap.java</file>
			<file type="M">org.springframework.webflow.engine.AnnotedActionTests.java</file>
			<file type="M">org.springframework.webflow.test.MockRequestContext.java</file>
			<file type="M">org.springframework.webflow.execution.RequestContext.java</file>
			<file type="M">org.springframework.webflow.core.collection.LocalAttributeMap.java</file>
		</fixedFiles>
	</bug>
	<bug id="625" opendate="2008-04-18 05:55:14" fixdate="2008-04-19 15:57:20" resolution="Fixed">
		<buginformation>
			<summary>Binding to nested model properties does not work</summary>
			<description>see http://forum.springframework.org/showthread.php?t=52847</description>
			<version>2.0.0.RC1</version>
			<fixedVersion>2.0.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.mvc.view.MvcViewTests.java</file>
			<file type="M">org.springframework.webflow.mvc.view.MvcView.java</file>
		</fixedFiles>
	</bug>
	<bug id="596" opendate="2008-04-14 05:14:44" fixdate="2008-04-19 16:11:54" resolution="Fixed">
		<buginformation>
			<summary>MessageContext is not preserving the order of source messages</summary>
			<description>The order in which messages are added should be preserved.
See http://forum.springframework.org/forumdisplay.php?f=36.</description>
			<version>2.0.0.RC1</version>
			<fixedVersion>2.0.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.binding.message.DefaultMessageContextFactoryTests.java</file>
			<file type="M">org.springframework.binding.message.DefaultMessageContext.java</file>
		</fixedFiles>
	</bug>
	<bug id="599" opendate="2008-04-14 09:14:55" fixdate="2008-04-19 16:27:07" resolution="Fixed">
		<buginformation>
			<summary>Use of Implicit input/output set value (lvalue) expressions are documented but not implemented</summary>
			<description>A oversight in RC1. See http://forum.springframework.org/showthread.php?t=52604</description>
			<version>2.0.0.RC1</version>
			<fixedVersion>2.0.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.engine.builder.model.FlowModelFlowBuilder.java</file>
		</fixedFiles>
	</bug>
	<bug id="530" opendate="2008-03-13 06:53:15" fixdate="2008-04-21 07:46:32" resolution="Fixed">
		<buginformation>
			<summary>org.springframework.webflow.execution.repository.impl.DefaultFlowExecutionRepository not extensible/appropriately pluggable</summary>
			<description>There is no method to support customizing/replacing the org.springframework.webflow.execution.repository.continuation.FlowExecutionContinuationFactory used during the construction of a org.springframework.webflow.execution.repository.impl.DefaultFlowExecutionRepository inside the constructor. This will force anyone wishing to replace/override/ehance the default org.springframework.webflow.execution.repository.continuation.SerializedFlowExecutionContinuationFactory to duplicate/re-implement functionality in org.springframework.webflow.execution.repository.impl.DefaultFlowExecutionRepository

Sean

</description>
			<version>2.0 M4</version>
			<fixedVersion>2.0.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.execution.repository.impl.DefaultFlowExecutionRepository.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">314</link>
			<link type="Duplicate" description="duplicates">480</link>
		</links>
	</bug>
	<bug id="632" opendate="2008-04-21 01:42:26" fixdate="2008-04-24 07:37:51" resolution="Fixed">
		<buginformation>
			<summary>eventId value in ActionExecutingView is retrived only by the attribute name &amp;apos;_eventId&amp;apos; (should use the same logic as MvcView.findParameter(String logicalParameterName, ParameterMap parameters))</summary>
			<description>See http://forum.springframework.org/showthread.php?t=53019</description>
			<version>2.0.0.RC1</version>
			<fixedVersion>2.0.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.engine.support.ActionExecutingViewFactory.java</file>
		</fixedFiles>
	</bug>
	<bug id="656" opendate="2008-04-29 00:13:01" fixdate="2008-04-29 01:17:47" resolution="Fixed">
		<buginformation>
			<summary>MvcView.render() incorrectly assumes "requestContext.getFlowExecutionContext().getKey()" is not null</summary>
			<description>A flow key is not created, for example, when the flow execution path runs through actions only and reaches directly an end state that declares a view.</description>
			<version>2.0.0.RC1</version>
			<fixedVersion>2.0.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowActionListener.java</file>
			<file type="M">org.springframework.faces.webflow.FlowActionListenerTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="657" opendate="2008-04-30 06:20:32" fixdate="2008-04-30 06:22:58" resolution="Fixed">
		<buginformation>
			<summary>AjaxTilesView does not resolve deeply nested tiles attributes for rendering as fragments if the containing view has not previously been rendered.</summary>
			<description>If a particular view has not been previously rendered by a standard JSP request, nested Tiles attributes (i.e., those in a nested definition that is filling in the attribute of a parent definition) will not have been initialized as expected when they are requested for rendering via Ajax.</description>
			<version>2.0.0</version>
			<fixedVersion>2.0.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.js.ajax.tiles2.AjaxTilesView.java</file>
		</fixedFiles>
	</bug>
	<bug id="653" opendate="2008-04-27 23:31:05" fixdate="2008-05-02 05:31:45" resolution="Fixed">
		<buginformation>
			<summary>FileNotFoundException while using Weblogic10 and SWF classpath flow-location-pattern</summary>
			<description>Hello,
We are using Spring2.5.3+SWF2.0RC1 under jdk5/weblogic 10.
WE are defing our flows as follow:
&amp;lt;webflow:flow-registry id="flowRegistry" flow-builder-services="flowBuilderServices" &amp;gt;	
		&amp;lt;webflow:flow-location-pattern value="classpath:modules/*/flows/.xml"/&amp;gt;
&amp;lt;/webflow:flow-registry&amp;gt;
Our xml file flows are packaged under WEB-INF/classes. Using Tomcat application runs perfectly.
Using weblogic 10, war file is splitted in several jars at deployement time in a working folder.
org.springframework.util.ResourceUtils.getFile(URI, String) then compares computed URI protocol-&amp;gt; zip but expects a file protocol.
This leads to a FileNotFoundException.
Clearly, we think this is a Spring issue more or less related in SPR-994, but coming from a different use case.
Thanks to have a look.</description>
			<version>2.0.0.RC1</version>
			<fixedVersion>2.0.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.engine.model.builder.xml.XmlFlowModelBuilder.java</file>
		</fixedFiles>
	</bug>
	<bug id="645" opendate="2008-04-23 02:30:18" fixdate="2008-05-12 05:56:51" resolution="Fixed">
		<buginformation>
			<summary>Trinidad partial rendering not working correctly when used with Spring Faces</summary>
			<description>Trinidad&amp;amp;apos;s partial rendering features don&amp;amp;apos;t seem to be working correctly in combination with Spring Faces.  A JavaScript error similar to the following is being raised in the browser when the response is returned:
["Invalid PPR response. The response-headers were:\nServer: Apache-Coyote/1.1\nPragma: no-cache\nExpires:..."]DebugCommon1_2_7.... (line 16422)
["Error ", TypeError: responseDocument has no properties message=responseDocument has no properties, " delivering XML request status changed to ", function()]DebugCommon1_2_7.... (line 16422
I was able to reproduce this in a simple Trinidad test project.</description>
			<version>2.0.0</version>
			<fixedVersion>2.0.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowFacesContext.java</file>
			<file type="M">org.springframework.faces.webflow.FlowViewStateManager.java</file>
		</fixedFiles>
	</bug>
	<bug id="692" opendate="2008-05-19 09:53:34" fixdate="2008-05-21 07:43:10" resolution="Fixed">
		<buginformation>
			<summary>Link in header of dataTable</summary>
			<description>A commandLink or a commandButton inside a &amp;lt;f:facet name="header"&amp;gt; of dataTable do not work. An IllegalArgumentException is thrown.
See this forum thread:
http://forum.springframework.org/showthread.php?t=54479</description>
			<version>2.0.1</version>
			<fixedVersion>2.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.samples.booking.JpaBookingService.java</file>
			<file type="M">org.springframework.webflow.samples.booking.SearchCriteria.java</file>
			<file type="M">org.springframework.faces.model.OneSelectionTrackingListDataModel.java</file>
			<file type="M">org.springframework.faces.model.ManySelectionTrackingListDataModel.java</file>
		</fixedFiles>
	</bug>
	<bug id="690" opendate="2008-05-19 02:25:31" fixdate="2008-05-23 06:11:18" resolution="Fixed">
		<buginformation>
			<summary>sf:clientTextValidator doesn&amp;apos;t respect custom faces converter </summary>
			<description>If there is a custom converter registered globally by type, the sf:clientTextValidator tag doesn&amp;amp;apos;t find it and throws a nullpointer exception.
The converter will be registered like this  
&amp;lt;converter&amp;gt;
&amp;lt;converter-for-class&amp;gt;mypackage.MyCustomClass&amp;lt;/converter-for-class&amp;gt;
&amp;lt;converter-class&amp;gt;mypackage.MyCustomerConverterClass&amp;lt;/converter-class&amp;gt;
&amp;lt;/converter&amp;gt;
The markup which throws a NullPointerException
&amp;lt;sf:clientTextValidator required="true" invalidMessage="someMessage"&amp;gt;
	&amp;lt;h:inputText id="someId" value="#
{b.someBinding}
" required="true"/&amp;gt;
&amp;lt;/sf:clientTextValidator&amp;gt;
If I use the nested f:converter tag inside the inputText i will not run into the exception.
Below the Stacktrace
java.lang.NullPointerException
at org.springframework.faces.ui.DojoDecorationRenderer.getNodeAttributesAsString(DojoDecorationRenderer.java:110)
at org.springframework.faces.ui.DojoDecorationRenderer.encodeEnd(DojoDecorationRenderer.java:81)
at javax.faces.component.UIComponentBase.encodeEnd(UIComponentBase.java:856)
at com.sun.faces.renderkit.html_basic.HtmlBasicRenderer.encodeRecursive(HtmlBasicRenderer.java:242)
at com.sun.faces.renderkit.html_basic.TableRenderer.renderRow(TableRenderer.java:312)
at com.sun.faces.renderkit.html_basic.TableRenderer.encodeChildren(TableRenderer.java:133)
at javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:832)
at javax.faces.component.UIComponent.encodeAll(UIComponent.java:936)
at javax.faces.render.Renderer.encodeChildren(Renderer.java:148)
at javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:832)
at javax.faces.component.UIComponent.encodeAll(UIComponent.java:936)
at javax.faces.component.UIComponent.encodeAll(UIComponent.java:942)
at javax.faces.component.UIComponent.encodeAll(UIComponent.java:942)
at com.sun.facelets.FaceletViewHandler.renderView(FaceletViewHandler.java:592)
at org.springframework.faces.webflow.JsfView.render(JsfView.java:92)
at org.springframework.webflow.engine.ViewState.render(ViewState.java:240)
at org.springframework.webflow.engine.ViewState.resume(ViewState.java:199)
at org.springframework.webflow.engine.Flow.resume(Flow.java:525)
at org.springframework.webflow.engine.impl.FlowExecutionImpl.resume(FlowExecutionImpl.java:290)
at org.springframework.webflow.executor.FlowExecutorImpl.resumeExecution(FlowExecutorImpl.java:153)
at org.springframework.webflow.mvc.servlet.FlowHandlerAdapter.handle(FlowHandlerAdapter.java:156)
at org.springframework.webflow.mvc.servlet.FlowController.handleRequest(FlowController.java:157)
at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:48)
at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:875)
at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:809)
at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571)
at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:501)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)
Agim</description>
			<version>2.0.2</version>
			<fixedVersion>2.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.ui.DojoDecorationRenderer.java</file>
		</fixedFiles>
	</bug>
	<bug id="700" opendate="2008-05-23 02:15:45" fixdate="2008-05-27 07:00:37" resolution="Fixed">
		<buginformation>
			<summary>ajaxEnabled="false" causing JavaScript error with &lt;sf:commandLink&gt;</summary>
			<description></description>
			<version>2.0.1</version>
			<fixedVersion>2.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.ui.ProgressiveCommandButtonRenderer.java</file>
			<file type="M">org.springframework.faces.ui.ProgressiveCommandLinkRenderer.java</file>
			<file type="M">org.springframework.webflow.samples.booking.JpaBookingService.java</file>
			<file type="M">org.springframework.webflow.samples.booking.SearchCriteria.java</file>
		</fixedFiles>
	</bug>
	<bug id="712" opendate="2008-05-27 07:24:07" fixdate="2008-06-04 07:23:23" resolution="Fixed">
		<buginformation>
			<summary>&lt;sf:ajaxEvent&gt; for &lt;h:selectOneRadio&gt; worked in RC1 but stopped working in 2.0.1</summary>
			<description>I have defined the following in my JSF page:
HTML Code:
            &amp;lt;sf:ajaxEvent id="changeDriverAjax" action="changeDriver" event="onchange"&amp;gt;
              &amp;lt;h:selectOneRadio id="Driver_currentRowIndex" 
                                value="#
{driverDataModel.rowIndex}
"&amp;gt;
                &amp;lt;f:selectItems value="#
{drivers}
"/&amp;gt;
              &amp;lt;/h:selectOneRadio&amp;gt;
            &amp;lt;/sf:ajaxEvent&amp;gt;
The radio&amp;amp;apos;s value is the index of the Data Model, i.e. 0, 1, 2 etc.
This used to work in RC1 but stopped working in 2.0.1. 
I tried to debug, and this is the difference that I found:
RC1:
Spring.advisors.push(new Spring.RemoteEventAdvisor(
{event:&amp;amp;apos;onchange&amp;amp;apos;, targetId: &amp;amp;apos;mainForm:Driver_currentRowIndex&amp;amp;apos;, sourceId : &amp;amp;apos;mainForm:changeDriverAjax&amp;amp;apos;, formId : &amp;amp;apos;mainForm&amp;amp;apos;, processIds : &amp;amp;apos;mainForm:changeDriverAjax&amp;amp;apos;}
));
2.0.1:
Spring.addDecoration(new Spring.AjaxEventDecoration({event:&amp;amp;apos;onchange&amp;amp;apos;, elementId: &amp;amp;apos;mainForm:Driver_currentRowIndex&amp;amp;apos;, formId : &amp;amp;apos;mainForm&amp;amp;apos;, params: 
{processIds : &amp;amp;apos;mainForm:changeDriverAjax&amp;amp;apos;, ajaxSource : &amp;amp;apos;mainForm:changeDriverAjax&amp;amp;apos;}
 }));
If sourceId is empty, the underlying remoting handler that calls Dojo uses elementId. This is where the code path between RC1 and 2.0.1 starts to differ. In RC1, dojo.byId() tries to look for the &amp;lt;sf:ajaxEvent&amp;gt; (which doesn&amp;amp;apos;t exist in the DOM), whereas in 2.0.1, it tries to look for &amp;amp;apos;main: Driver_currentRowIndex&amp;amp;apos; (which in the DOM is a &amp;lt;table&amp;gt; hosting the radio buttons).
Because of this difference, when I inspect the HTTP Post in Firebug, the value submitted for the radio button is:
RC1:
mainForm:Driver_currentRowIndex	0
2.0.1:
mainForm:Driver_currentRowIndex	mainForm:Driver_currentRowIndex
The second one eventually fails when the radio button tries to update my Data Model index.</description>
			<version>2.0.1</version>
			<fixedVersion>2.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.ui.AjaxEventInterceptorRenderer.java</file>
		</fixedFiles>
	</bug>
	<bug id="736" opendate="2008-06-05 01:38:32" fixdate="2008-06-05 01:38:46" resolution="Fixed">
		<buginformation>
			<summary>Spring Faces Dojo validation tags not rendering &amp;apos;propercase&amp;apos; attribute.</summary>
			<description>The .tld fspecifies propercase as a valid attribute of the Spring Faces client-side validation tags but the attribute is not rendered when included.</description>
			<version>2.0.1</version>
			<fixedVersion>2.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.ui.DojoDecoration.java</file>
		</fixedFiles>
	</bug>
	<bug id="719" opendate="2008-05-29 01:42:42" fixdate="2008-06-05 03:39:54" resolution="Fixed">
		<buginformation>
			<summary>Faces does not set components to valid on restore</summary>
			<description>I believe that during the restore stage of a JSF lifecycle all UIInput components should be set back to a valid state.  Looking at MyFaces 1.1.5 the org.apache.myfaces.lifecycle.RestoreViewExecutor class seems to do this using RestoreStateUtils.recursivelyHandleComponentReferencesAndSetValid.
I have a JSF component to highlight validation failures with a CSS style, this component uses the isValid() component method and now show failures even when a user has corrected them when.  This shows up when they navigate back to a screen.</description>
			<version>2.0.1</version>
			<fixedVersion>2.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.JsfViewFactory.java</file>
			<file type="M">org.springframework.faces.webflow.JsfViewFactoryTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="723" opendate="2008-05-29 22:48:14" fixdate="2008-06-05 03:40:02" resolution="Fixed">
		<buginformation>
			<summary>Component bindings not executed for components in Facets</summary>
			<description>The JsfViewFactory processComponentBinding method does not iterate over facets when recursing.  This means that any components within a facet will not be rebound.</description>
			<version>2.0.1</version>
			<fixedVersion>2.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.JsfViewFactory.java</file>
			<file type="M">org.springframework.faces.webflow.JsfViewFactoryTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="706" opendate="2008-05-26 22:56:44" fixdate="2008-06-05 08:26:38" resolution="Fixed">
		<buginformation>
			<summary>ResourceServlet allows HTTP access to sensitive files</summary>
			<description>As described in SWF-604 it&amp;amp;apos;s possible to get sensitive files. This was fixed for the WEB-INF folder, but the persistence.xml for example can still be accessed via HTTP:
http://richweb.springframework.org/swf-booking-faces/resources/persistence.xml</description>
			<version>2.0.1</version>
			<fixedVersion>2.0.2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.js.resource.ResourceServlet.java</file>
			<file type="M">org.springframework.js.resource.ResourceServletTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="753" opendate="2008-06-16 08:38:21" fixdate="2008-06-17 01:54:21" resolution="Fixed">
		<buginformation>
			<summary>Spring Webflow 2.0.2 decorator&amp;apos;s uppercase attribute is not working</summary>
			<description>The uppercase attribute of sf:clientTextValidator is not working as documented.
e.g.
&amp;lt;sf:clientTextValidator uppercase="true"&amp;gt;
&amp;lt;h:inputText id="middleInitial" value="#
{users.contacts.middleInitial}
" required="false" title="Middle Initial" /&amp;gt;
&amp;lt;/sf:clientTextValidator&amp;gt;
When the page gets rendered, the uppercase property is not copied into the created Dojo widget
Affected version: Spring web flow 2.0.2 RELEASE</description>
			<version>2.0.2</version>
			<fixedVersion>2.0.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.ui.DojoDecoration.java</file>
		</fixedFiles>
	</bug>
	<bug id="767" opendate="2008-06-25 00:13:47" fixdate="2008-06-25 05:40:41" resolution="Fixed">
		<buginformation>
			<summary>spring-js uses java 1.5 method calls</summary>
			<description>The ResourceServlet uses Java 1.5 Method calls.
when running in Tomcat 5.5.26 with compat package and JDK 1.4,
i&amp;amp;apos;ll get: java.lang.NoSuchMethodError: java.lang.String.contains(Ljava/lang/CharSequence;)Z
133:		if (gzipEnabled &amp;amp;&amp;amp; StringUtils.hasText(acceptEncoding) &amp;amp;&amp;amp; acceptEncoding.contains("gzip")
134:				&amp;amp;&amp;amp; compressedMimeTypes.contains(mimeType)) {
this stands against the release notes:
Web Flow 2 requires Java 1.4 or greater and runs on all major Java EE platforms including Tomcat, Jetty, Websphere, WebLogic, and JBoss.</description>
			<version>2.0.2</version>
			<fixedVersion>2.0.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.js.resource.ResourceServlet.java</file>
		</fixedFiles>
	</bug>
	<bug id="782" opendate="2008-07-02 00:47:11" fixdate="2008-07-02 00:49:17" resolution="Fixed">
		<buginformation>
			<summary>ResourceServlet returns wrong 404 page</summary>
			<description>The ResourceServlet returns the server default error page even when custom 404 page defined.</description>
			<version>2.0.2</version>
			<fixedVersion>2.0.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.js.resource.ResourceServlet.java</file>
		</fixedFiles>
	</bug>
	<bug id="751" opendate="2008-06-15 20:12:21" fixdate="2008-07-02 02:28:11" resolution="Fixed">
		<buginformation>
			<summary>FacesMessage.detail does not propagate through FlowFacesContext</summary>
			<description>Hello !
FacesMessage consists of summary and detail part of message. In FlowFacesContext.addMessage(String clientId, FacesMessage message), the detail value of FacesMessage is not read and saved to RequestContext.messageContext thus its value is thrown away.
One result of this is that validation messages are not displayed correctly when &amp;lt;h:messages showDetail="true"/&amp;gt; is on. Actually, detail holds and shows the value of summary (probably as a result of fallback somewhere in SWF). 
As a matter of fact, many jsf built-in validation and conversion error messages specify detail part of message and those could never be displayed as well.
This issue can be simulated on booking-faces, when &amp;lt;h:messages errorClass="errors" showDetail="true" showSummary="true" /&amp;gt; is used and invalid date is given as input to &amp;amp;apos;Check In Date&amp;amp;apos; assuming that javascript is switched off in browser preferences to disable javascript validations (in IE it can be done on Security tab of Internet Options, attribute &amp;amp;apos;Active scripting&amp;amp;apos;). I provide a diff with changes for quick simulation.
I think this is quite serious issue, because it blocks JSF feature that is quite common even in built-in jsf components.
Michal
Off topic: I think that integration of SWF with JSF as well as SWF itself is perfectly done in very clean and concise way. It was a pleasure to traverse through the sources. It shows that you took your time on SWF design. Good job, really!</description>
			<version>2.0.1</version>
			<fixedVersion>2.0.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowFacesContext.java</file>
			<file type="M">org.springframework.faces.webflow.FlowFacesContextTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="752" opendate="2008-06-15 20:34:41" fixdate="2008-07-02 02:51:01" resolution="Fixed">
		<buginformation>
			<summary>FacesMessage.SEVERITY_FATAL does not propagate through FlowFacesContext</summary>
			<description>FacesMessage specifies severity of the message as one of
SEVERITY_INFO = new Severity("Info", 1);
SEVERITY_WARN = new Severity("Warn", 2);
SEVERITY_ERROR = new Severity("Error", 3);
SEVERITY_FATAL = new Severity("Fatal", 4);
In FlowFacesContext.addMessage(String clientId, FacesMessage message), the severity of FacesMessage is read and mapped to org.springframework.binding.message.Severity which can be one of
INFO = new Severity(0, "Info");
WARNING = new Severity(1, "Warning");
ERROR = new Severity(2, "Error");
As a matter of fact, FacesMessage.SEVERITY_FATAL is not mapped to its sole value in org.springframework.binding.message.Severity and that causes FATAL messages to be merged with ERROR messages. That is NOT good for applications (like ours , where these two severities have different meanings and processing.
Thank you.
Michal</description>
			<version>2.0.1</version>
			<fixedVersion>2.0.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowFacesContext.java</file>
			<file type="M">org.springframework.binding.message.MessageBuilderTests.java</file>
			<file type="M">org.springframework.faces.webflow.FlowFacesContextTests.java</file>
			<file type="M">org.springframework.binding.message.Severity.java</file>
			<file type="M">org.springframework.binding.message.MessageBuilder.java</file>
		</fixedFiles>
	</bug>
	<bug id="720" opendate="2008-05-29 01:46:47" fixdate="2008-07-09 22:23:24" resolution="Fixed">
		<buginformation>
			<summary>Multiple checkboxes to Collection mapping</summary>
			<description>Using Spring&amp;amp;apos;s &amp;lt;form:checkboxes&amp;gt; tag to present multiple checkboxes for the user to choose values of a collection attribute of the model (e.g. Set&amp;lt;T&amp;gt;) WebFlow only offers the first selected value for mapping, and requests it to be mapped as a collection (Set, List, etc). The subsequent values are discarded silently.
Expected behavior would be convert every individual value to type T and set the attribute as the collection (e.g. Set&amp;lt;T&amp;gt;)
Spring MVC works this way.
Reference: http://forum.springframework.org/showthread.php?p=183366</description>
			<version>2.0.1</version>
			<fixedVersion>2.0.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.config.FacesFlowBuilderServicesBeanDefinitionParserTests.java</file>
			<file type="M">org.springframework.webflow.mvc.view.BindingModel.java</file>
			<file type="M">org.springframework.webflow.mvc.view.AbstractMvcView.java</file>
			<file type="M">org.springframework.webflow.config.FlowBuilderServicesBeanDefinitionParserTests.java</file>
			<file type="M">org.springframework.webflow.engine.builder.support.FlowBuilderContextImpl.java</file>
			<file type="M">org.springframework.webflow.engine.ViewState.java</file>
			<file type="M">org.springframework.binding.expression.ognl.OgnlExpression.java</file>
			<file type="M">org.springframework.binding.convert.converters.StringToClass.java</file>
			<file type="M">org.springframework.webflow.config.FlowExecutorFactoryBean.java</file>
			<file type="M">org.springframework.webflow.engine.builder.model.FlowModelFlowBuilder.java</file>
			<file type="M">org.springframework.webflow.config.FlowRegistryFactoryBean.java</file>
			<file type="M">org.springframework.binding.convert.service.DefaultConversionService.java</file>
			<file type="M">org.springframework.binding.convert.ConversionService.java</file>
			<file type="M">org.springframework.binding.convert.service.GenericConversionService.java</file>
			<file type="M">org.springframework.faces.ui.DojoDecorationRendererTests.java</file>
			<file type="M">org.springframework.binding.convert.service.StaticConversionExecutorImplTests.java</file>
			<file type="M">org.springframework.faces.model.converter.FacesConversionService.java</file>
			<file type="M">org.springframework.webflow.mvc.view.MvcViewTests.java</file>
			<file type="M">org.springframework.webflow.engine.builder.support.FlowBuilderServices.java</file>
			<file type="M">org.springframework.webflow.engine.builder.FlowBuilderContext.java</file>
			<file type="M">org.springframework.webflow.mvc.servlet.ServletMvcViewFactory.java</file>
			<file type="M">org.springframework.webflow.engine.builder.ViewFactoryCreator.java</file>
			<file type="M">org.springframework.webflow.engine.builder.support.TextToTransitionCriteria.java</file>
			<file type="M">org.springframework.webflow.test.MockViewFactoryCreator.java</file>
			<file type="M">org.springframework.webflow.mvc.view.AbstractMvcViewFactory.java</file>
			<file type="M">org.springframework.webflow.engine.builder.model.LocalFlowBuilderContext.java</file>
			<file type="M">org.springframework.webflow.config.FlowRegistryBeanDefinitionParser.java</file>
			<file type="M">org.springframework.webflow.config.FlowBuilderServicesBeanDefinitionParser.java</file>
			<file type="M">org.springframework.webflow.mvc.portlet.PortletMvcViewFactory.java</file>
			<file type="M">org.springframework.webflow.engine.builder.support.TextToTargetStateResolver.java</file>
			<file type="M">org.springframework.webflow.mvc.portlet.PortletMvcViewTests.java</file>
			<file type="M">org.springframework.webflow.engine.builder.support.TextToTargetStateResolverTests.java</file>
			<file type="M">org.springframework.webflow.engine.builder.support.TextToTransitionCriteriaTests.java</file>
			<file type="M">org.springframework.webflow.mvc.servlet.ServletMvcViewTests.java</file>
			<file type="M">org.springframework.webflow.mvc.builder.MvcViewFactoryCreator.java</file>
			<file type="M">org.springframework.binding.convert.converters.ArrayToArray.java</file>
			<file type="M">org.springframework.binding.format.registry.GenericFormatterRegistry.java</file>
			<file type="M">org.springframework.binding.format.impl.GenericFormatterRegistryTests.java</file>
			<file type="M">org.springframework.binding.format.FormatterRegistry.java</file>
		</fixedFiles>
		<links>
			<link type="Depends" description="is depended on by">1331</link>
		</links>
	</bug>
	<bug id="785" opendate="2008-07-07 00:44:30" fixdate="2008-07-28 05:31:00" resolution="Fixed">
		<buginformation>
			<summary>Spring Faces creates XHTML-incompatible JavaScript scripts</summary>
			<description>Spring Faces creates JavaScript-blocks that are not compatible with XHTMl standards and cause validation errors:
For example the following JSF taglet:
&amp;lt;sf:commandLink styleClass="cmd" id="showDetailData" value="#
{d.firstName}
 #
{d.lastName}
" action="select"/&amp;gt;
creates (among other things) the following JavaScript block:
&amp;lt;script&amp;gt;Spring.addDecoration(new Spring.CommandLinkDecoration(
{elementId : &amp;amp;apos;users:data:24:showDetailData&amp;amp;apos;, linkHtml : users_data_24_showDetailData_link}
));&amp;lt;/script&amp;gt;
This is wrong for several reasons: (a) No type for the script is defined (required by XHTML), (b) The content of the script block is not correctly uncommented in browsers not supporting JavaScript.
The correct block looks like this (type added and correct commenting for all types and versions of browsers added):
&amp;lt;script type="text/javascript"&amp;gt;&amp;lt;Unable to render embedded object: File (--//--&amp;gt;&amp;lt;) not found.[CDATA[//&amp;gt;&amp;lt;!--
Spring.addDecoration(new Spring.CommandLinkDecoration(
{elementId : &amp;amp;apos;users:data:1:showDetailData&amp;amp;apos;, linkHtml : users_data_1_showDetailData_link}
));
//--&amp;gt;&amp;lt;!]]&amp;gt; &amp;lt;/script&amp;gt;
Much more verbose but according to our knowledge the only correct way to do it (we will propose a much less verbose style more up to date with current state of the art JavaScript programming later on once we get through the current bugs .
Since we right now are busy with a project for the German public sector, this poses a critical problem for us, since XHTML conformance is required by binding software architecture agreements specified by the German government (SAGA 4.x). Without this conformance it will not be possible to have the system approved by the German government.</description>
			<version>2.0.2</version>
			<fixedVersion>2.0.3</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.ui.DojoDecorationRenderer.java</file>
			<file type="M">org.springframework.faces.ui.BaseSpringJavascriptComponentRenderer.java</file>
			<file type="M">org.springframework.faces.ui.resource.FlowResourceHelperTests.java</file>
			<file type="M">org.springframework.faces.ui.AjaxEventInterceptorRenderer.java</file>
			<file type="M">org.springframework.faces.ui.BaseDojoComponentRenderer.java</file>
			<file type="M">org.springframework.faces.ui.ResourceGroupRenderer.java</file>
			<file type="M">org.springframework.faces.ui.ResourceRenderer.java</file>
			<file type="M">org.springframework.faces.ui.ValidateAllRenderer.java</file>
			<file type="M">org.springframework.faces.ui.ProgressiveCommandLinkRenderer.java</file>
			<file type="M">org.springframework.faces.ui.AjaxViewRoot.java</file>
			<file type="M">org.springframework.faces.ui.resource.ResourceHelper.java</file>
			<file type="M">org.springframework.faces.ui.BaseSpringJavascriptDecorationRenderer.java</file>
			<file type="M">org.springframework.faces.ui.DojoStyleRenderer.java</file>
		</fixedFiles>
	</bug>
	<bug id="823" opendate="2008-08-03 23:33:34" fixdate="2008-08-12 01:10:24" resolution="Fixed">
		<buginformation>
			<summary>MessageContextErrors implementation does not implement all Errors methods</summary>
			<description>See http://forum.springframework.org/showthread.php?t=58249</description>
			<version>2.0.3</version>
			<fixedVersion>2.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.binding.message.MessageContextErrors.java</file>
			<file type="M">org.springframework.binding.message.MessageContextErrorsTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">1389</link>
		</links>
	</bug>
	<bug id="770" opendate="2008-06-27 05:33:30" fixdate="2008-09-03 07:10:52" resolution="Fixed">
		<buginformation>
			<summary>sf:commandLink fails on IE 6 when javascript disabled</summary>
			<description>When using the sf:commandLink component with javascript disabled the renderer falls back to the ProgressiveCommandButtonRenderer.  This renders &amp;lt;button&amp;gt; elements.
Unfortunately due to a feature of IE 6 button elements are all submitted, regardless of the button that was actually clicked.  (see http://www.kopz.org/public/documents/css/multiple_buttons_ie_workaround.html).  The means that if two links are on the page the action fired might be incorrect.
Could the ProgressiveCommandButtonRenderer be changed to render &amp;lt;input type="submit"&amp;gt; elements instead?</description>
			<version>2.0.2</version>
			<fixedVersion>2.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.ui.ProgressiveCommandButtonRenderer.java</file>
			<file type="M">org.springframework.faces.ui.ProgressiveCommandLinkRenderer.java</file>
		</fixedFiles>
	</bug>
	<bug id="786" opendate="2008-07-07 00:52:49" fixdate="2008-09-03 07:11:18" resolution="Fixed">
		<buginformation>
			<summary>sf:commandLink breaks on IE 6 for multiple buttons</summary>
			<description>The following JSF taglet 
&amp;lt;sf:commandLink styleClass="cmd" id="showDetailData" value="#
{d.firstName}
 #
{d.lastName}
" action="select"/&amp;gt;
creates (among other things) the following HTML code:
&amp;lt;button id="users:data:0:showDetailData" class="cmd" name="users:data:0:showDetailData" type="submit" value="Leonie Lalente"&amp;gt;&amp;lt;script type="text/javascript" src="/BVL_Layout/resources/spring/Spring.js"&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script type="text/javascript" src="/BVL_Layout/resources/dojo/dojo.js"&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script type="text/javascript" src="/BVL_Layout/resources/spring/Spring-Dojo.js"&amp;gt;&amp;lt;/script&amp;gt;Leonie Lalente&amp;lt;/button&amp;gt;&amp;lt;script type="text/javascript"&amp;gt;var users_data_0_showDetailData_link = "&amp;lt;a id=\"users:data:0:showDetailData\" class=\"cmd progressiveLink\" href=\"#\" name=\"users:data:0:showDetailData\" type=\"submit\" onclick=\"this.submitFormFromLink(&amp;amp;apos;users&amp;amp;apos;,&amp;amp;apos;users:data:0:showDetailData&amp;amp;apos;, []); return false;\"&amp;gt;Leonie Lalente&amp;lt;/a&amp;gt;
Now the bug is the following: In Internet Explorer 6 it is not possible to have more than one &amp;lt;button&amp;gt; tag per form, as IE 6 always sends (name, value) pairs of all buttons defined in the page and not only of the button that was pressed. Consequently it is not possible to find the actual button that was pressed.
The correct code thus would look like this:
&amp;lt;input type="submit" id="users:data:0:showDetailData" class="cmd" name="users:data:0:showDetailData" value="Leonie Lalente"&amp;gt;&amp;lt;script type="text/javascript" src="/BVL_Layout/resources/spring/Spring.js"&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script type="text/javascript" src="/BVL_Layout/resources/dojo/dojo.js"&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script type="text/javascript" src="/BVL_Layout/resources/spring/Spring-Dojo.js"&amp;gt;&amp;lt;/script&amp;gt;Leonie Lalente&amp;lt;/button&amp;gt;&amp;lt;script type="text/javascript"&amp;gt;var users_data_0_showDetailData_link = "&amp;lt;a id=\"users:data:0:showDetailData\" class=\"cmd progressiveLink\" href=\"#\" name=\"users:data:0:showDetailData\" type=\"submit\" onclick=\"this.submitFormFromLink(&amp;amp;apos;users&amp;amp;apos;,&amp;amp;apos;users:data:0:showDetailData&amp;amp;apos;, []); return false;\"&amp;gt;Leonie Lalente&amp;lt;/a&amp;gt;
Consequently you use some functionality with IE 6 (e.g. button images and the use of the actual button value instead of the displayed button value) but that&amp;amp;apos;s still better than not being able to use IE 6.</description>
			<version>2.0.2</version>
			<fixedVersion>2.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.ui.ProgressiveCommandButtonRenderer.java</file>
			<file type="M">org.springframework.faces.ui.ProgressiveCommandLinkRenderer.java</file>
		</fixedFiles>
	</bug>
	<bug id="904" opendate="2008-10-07 02:12:33" fixdate="2008-10-07 08:18:56" resolution="Fixed">
		<buginformation>
			<summary>Ajax Tiles partial renders fail when session is not available</summary>
			<description>Ajax responses are empty if the session times out or is otherwise unavailable.
Exception initializing page context
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2301)
	at org.apache.catalina.connector.Request.getSession(Request.java:2075)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:833)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:216)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:545)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:494)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:224)
	at org.apache.jasper.runtime.PageContextImpl._initialize(PageContextImpl.java:144)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:122)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:107)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:63)
	at org.apache.jsp.WEB_002dINF.hotels.search_jsp._jspService(search_jsp.java:57)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:337)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:266)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:630)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:535)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:472)
	at org.apache.tiles.servlet.context.ServletTilesRequestContext.include(ServletTilesRequestContext.java:211)
	at org.apache.tiles.servlet.context.ServletTilesRequestContext.dispatch(ServletTilesRequestContext.java:183)
	at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:465)
	at org.springframework.js.ajax.tiles2.AjaxTilesView.renderMergedOutputModel(AjaxTilesView.java:104)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:258)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1174)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:901)
	...</description>
			<version>2.0.3</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.js.ajax.tiles2.AjaxTilesView.java</file>
		</fixedFiles>
		<links>
			<link type="Related" description="is related to">1238</link>
			<link type="Related" description="is related to">1078</link>
		</links>
	</bug>
	<bug id="905" opendate="2008-10-08 01:40:56" fixdate="2008-10-08 01:41:08" resolution="Fixed">
		<buginformation>
			<summary>ConversionExceptions thrown during EL type coersion are leaking out, which causes the data mapping process to halt</summary>
			<description>This bug effects the Unified EL expression parser implementation.
The result is ConversionExceptions are getting thrown out to the client and not caught by the data mapping system during data binding.
The bug is in the BindingELExpression class used by ELExpressionParser.</description>
			<version>2.0.3</version>
			<fixedVersion>2.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="D">org.springframework.binding.mapping.MappingTests.java</file>
			<file type="M">org.springframework.binding.expression.el.ELExpressionParserTests.java</file>
			<file type="M">org.springframework.binding.expression.el.BindingValueExpression.java</file>
			<file type="M">org.springframework.binding.expression.ognl.OgnlExpressionParserTests.java</file>
			<file type="M">org.springframework.binding.mapping.DefaultMapperTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="844" opendate="2008-08-20 08:47:55" fixdate="2008-10-14 00:46:58" resolution="Fixed">
		<buginformation>
			<summary>Dojo DateTextBox locale-specific formatting is not progressive</summary>
			<description>A date field renders in the standard format YYYY-MM-DD when ajax is not enabled, not the locale-specific format.</description>
			<version>2.0.3</version>
			<fixedVersion>2.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.ui.DojoClientDateValidator.java</file>
			<file type="M">org.springframework.webflow.samples.booking.ApplicationConversionService.java</file>
			<file type="M">org.springframework.faces.ui.DojoDecorationRenderer.java</file>
			<file type="D">org.springframework.faces.ui.DojoDecorationRendererTests.java</file>
		</fixedFiles>
		<links>
			<link type="Depends" description="is depended on by">910</link>
		</links>
	</bug>
	<bug id="890" opendate="2008-09-16 01:20:50" fixdate="2008-10-14 01:31:34" resolution="Fixed">
		<buginformation>
			<summary>RichFacesAjaxHandler does not correctly deal with FacesContext.getCurrentInstance()  being null </summary>
			<description>The static class FacesContextHelper within RichFacesAjaxHandler has a method:
protected FacesContext getFacesContext(ServletContext context, HttpServletRequest request,
				HttpServletResponse response)
This contains a variable private boolean created = false;
and the following code:
created = true;
FacesContextFactory facesContextFactory = (FacesContextFactory) FactoryFinder.getFactory(FactoryFinder.FACES_CONTEXT_FACTORY);
FacesContext defaultFacesContext = facesContextFactory.getFacesContext(context, request, response,FlowLifecycle.newInstance());
return defaultFacesContext;
Note how the static boolean created is set to true before the FacesContext has actually been created.
Elsewhere there is a method isRichFacesAjaxRequest:
protected boolean isRichFacesAjaxRequest(HttpServletRequest request, HttpServletResponse response) {
		FacesContextHelper helper = new FacesContextHelper();
		try {
			FacesContext facesContext = helper.getFacesContext(getServletContext(), request, response);
			AjaxContext context = AjaxContext.getCurrentInstance(facesContext);
			if (context != null) 
{
				return context.isAjaxRequest(facesContext);
			}
 else 
{
				return false;
			}
		} finally 
{
			helper.cleanup();
		}
	}
 that at the end calls helper.cleanup() which ends up doing this:
if (created) {
	FacesContext.getCurrentInstance().release();
}
The trouble is that FacesContext.getCurrentInstance() might return null, or the FacesContext may be null if for some reason a run time exception has occurred when creating the FacesContext.
There are two issues here:
Firstly the static created boolean should not be set until the FacexContext has been set, so that the cleanup method is protected from trying to method calls on null  FacesContext.getCurrentInstance()&amp;amp;apos;s
The second issue is that the creation of the FacesContext can fail (resulting in a null) but this is somehow trapped and hidden, rather than being thrown as a fatal exception. The only indication of a problem in this case is due to the helper.cleanup() crashing due to the above problem with the created boolean being set too early.
Note that this may well be caused by an incorrect faces configuration - more than likely, as this was encountered in a first cut Richfaces/Webflow dev env.</description>
			<version>2.0.3</version>
			<fixedVersion>2.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.richfaces.RichFacesAjaxHandler.java</file>
		</fixedFiles>
	</bug>
	<bug id="900" opendate="2008-09-28 18:47:15" fixdate="2008-10-15 00:53:36" resolution="Duplicate">
		<buginformation>
			<summary>Obtaining flow context when doing programmatic validation</summary>
			<description>Please implement support for obtaining some sort of flow context when doing programmatic validation e.g. it would be very useful to be able to obtain information which transition event has occurred and triggered validator.
This feature was initial discussed on Spring forum (see thread http://forum.springframework.org/showthread.php?t=59625 )</description>
			<version>2.0.3</version>
			<fixedVersion>2.0.4</fixedVersion>
			<type>New Feature</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowActionListener.java</file>
			<file type="M">org.springframework.webflow.samples.booking.Booking.java</file>
			<file type="M">org.springframework.webflow.mvc.view.AbstractMvcView.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">735</link>
		</links>
	</bug>
	<bug id="735" opendate="2008-06-05 00:53:09" fixdate="2008-10-15 07:29:33" resolution="Fixed">
		<buginformation>
			<summary>Partial/Conditional Validation</summary>
			<description>I am working with SWF 2.0 and Spring MVC and I&amp;amp;apos;m facing a problem when I have to conditionally validate a subset of fields of my model object depending on the transition that triggered validation. That is, if the user clicked on button A, then transition T1 is triggered and a particular subset of the model object fields have to be validated. But if the user clicked on button B, then T2 is triggered and then I have to validate a different subset of fields.
I am aware of 3 ways of performing programmatic validation, namely:
1) Implementing org.springframework.validation.Validator
public void validate(Object obj, Errors errors)
2) Implementing a model validate method
public void validate$
{state}(MessageContext context)

3) Create a class that defines a public method with the name validate${state}
, where state is the id of your view-state
public void validate$
{state}
(yourModelObject, MessageContext context)
The problem is that none of these 3 ways let me figure out which transition triggered the validation and thus I am not able to determine which subset of fields I have to validate.
*************
Answer to this post by Keith Donald:
Interesting use case. Yes, this is currently not supported, though we can certainly support it by allowing the id of the user event that occurred to be an argument to the validation method. Would you mind creating a New Feature JIRA to track this? It&amp;amp;apos;s a minor new feature, so we can look at introducing it in a maintenance revision (most likely 2.0.3, as 2.0.2 is about to go out).</description>
			<version>2.0.3</version>
			<fixedVersion>2.0.4</fixedVersion>
			<type>New Feature</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowActionListener.java</file>
			<file type="M">org.springframework.webflow.samples.booking.Booking.java</file>
			<file type="M">org.springframework.webflow.mvc.view.AbstractMvcView.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">900</link>
		</links>
	</bug>
	<bug id="917" opendate="2008-10-19 22:52:33" fixdate="2008-10-20 01:24:55" resolution="Fixed">
		<buginformation>
			<summary>ResourceServlet crash and add "Error 500" at the end of the streamed resource</summary>
			<description>The ResourceServlet uses the "in.available()" syntax which seems to fail when running IBM WebSphere 6&amp;amp;apos;s JRE.
This happens both with compressed (gzipped) content or not.
By replacing the code with a more traditionnal approach (using in.read() like "FileCopyUtils" does), it works fine !
My proposition of fix is:
----------------------------------- replace in &amp;amp;apos;doGet&amp;amp;apos; method:
while (in.available() &amp;gt; 0) {
	int len = in.read(buffer);
	out.write(buffer, 0, len);
}
----------------------------------- by:
int bytesRead = -1;
while ((bytesRead = in.read(buffer)) != -1) {
	out.write(buffer, 0, bytesRead);
}
By the way, the exception is:
[10/20/08 13:49:59:905 CEST] 0000002a SystemOut     O 20/10/2008 13:49:59,905 DEBUG      [WebContainer : 0] com.fortis.rsa.spring.webflow.js.ResourceServlet - Enabling GZIP compression for the current response.
[10/20/08 13:49:59:905 CEST] 0000002a SystemErr     R java.lang.IndexOutOfBoundsException
	at java.util.zip.DeflaterOutputStream.write(DeflaterOutputStream.java:128)
	at java.util.zip.GZIPOutputStream.write(GZIPOutputStream.java:93)
	at com.fortis.rsa.spring.webflow.js.ResourceServlet$GZIPResponseStream.write(ResourceServlet.java:352)
	at com.fortis.rsa.spring.webflow.js.ResourceServlet.doGet(ResourceServlet.java:127)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:751)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)
	at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1572)
	at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1521)
	at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:113)
	at com.ibm.ws.webcontainer.filter.WebAppFilterChain._doFilter(WebAppFilterChain.java:82)
	at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:759)
	at com.ibm.ws.webcontainer.webapp.WebApp.handleRequest(WebApp.java:3174)
	at com.ibm.ws.webcontainer.webapp.WebGroup.handleRequest(WebGroup.java:253)
	at com.ibm.ws.webcontainer.VirtualHost.handleRequest(VirtualHost.java:229)
	at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:1970)
	at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:114)
</description>
			<version>2.0.3</version>
			<fixedVersion>2.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.js.resource.ResourceServlet.java</file>
		</fixedFiles>
	</bug>
	<bug id="916" opendate="2008-10-19 07:10:35" fixdate="2008-10-20 02:31:14" resolution="Fixed">
		<buginformation>
			<summary>AjaxTilesView fails for nested tiles-definition in case of an ajaxRequest</summary>
			<description>The AjaxTilesView does not resolve nested tiles-definition in case of an ajax request.
For the following tiles-definition the tiles "form" is not added to the flattenedAttributeMap and hence a partial rendering of the form-tiles is not possible.
&amp;lt;tiles-definitions&amp;gt;
    &amp;lt;definition name="index" template="/WEB-INF/jsp/index.jsp"&amp;gt;
        &amp;lt;put-attribute name="form" value="simpleform" /&amp;gt;
        &amp;lt;put-attribute name="result" value="/WEB-INF/jsp/result.jsp" /&amp;gt;
    &amp;lt;/definition&amp;gt;
   &amp;lt;definition name="simpleform" template="/WEB-INF/jsp/searchForm.jsp"&amp;gt;
		&amp;lt;put-attribute name="errorform" value="error" /&amp;gt;
	&amp;lt;/definition&amp;gt;
	&amp;lt;definition name="base.error" template="/WEB-INF/jsp/base.error.jsp"&amp;gt;
		&amp;lt;put-attribute name="formobject" value="errorFBO" /&amp;gt;
	&amp;lt;/definition&amp;gt;
	&amp;lt;definition name="error" extends="base.error"&amp;gt;
		&amp;lt;put-attribute name="formobject" value="childErrorFBO" /&amp;gt;
	&amp;lt;/definition&amp;gt;
&amp;lt;/tiles-definitions&amp;gt;
In the attached zip-file I provide a possible fix  - see line 123 in the AjaxTilesView-class. Here I add a nested definition to the result map.
Additionally I provide a junit-test for testing the changes. To make this work I had to change the signature of the flattenAttributeMap-method from private to protected.
-------------
files changed:
src/main/java/org/springframework/js/ajax/tiles2/AjaxTilesView
pom.xml
files added:
src/test/resources/tiles-views.xml
src/test/java/org/springframework/js/ajax/tiles2/AjaxTilesViewTest</description>
			<version>2.0.3</version>
			<fixedVersion>2.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.js.ajax.tiles2.AjaxTilesView.java</file>
		</fixedFiles>
	</bug>
	<bug id="897" opendate="2008-09-18 21:03:37" fixdate="2008-10-24 02:16:47" resolution="Fixed">
		<buginformation>
			<summary>Merging Transitions doens&amp;apos;t consider on-exceptions</summary>
			<description>Suppose we have a flow called FLOW_A containing a global transition like the following: 
    &amp;lt;global-transitions&amp;gt;
        &amp;lt;transition on="something" to="somewhere"&amp;gt;
            &amp;lt;evaluate expression="myHandler.doSomething()"/&amp;gt;
        &amp;lt;/transition&amp;gt;  
    &amp;lt;/global-transitions&amp;gt;
Suppose FLOW_A has a parent abstract flow FLOW_B also containing some global transitions containing on-exceptions like the following:
    &amp;lt;global-transitions&amp;gt;
        &amp;lt;transition on-exception="Exception1" to="somewhere"&amp;gt;
            &amp;lt;evaluate expression="exceptionHandler.handleException1(rootCauseException)"/&amp;gt;
        &amp;lt;/transition&amp;gt;
        &amp;lt;transition on-exception="Exception2" to="somewhere"&amp;gt;
            &amp;lt;evaluate expression="exceptionHandler.handleException2(rootCauseException)"/&amp;gt;
        &amp;lt;/transition&amp;gt;
    &amp;lt;/global-transitions&amp;gt;
During the merge of both global transitions the result will be something like:
    &amp;lt;global-transitions&amp;gt;
        &amp;lt;transition on="something" to="somewhere"&amp;gt;
            &amp;lt;evaluate expression="myHandler.doSomething()"/&amp;gt;
        &amp;lt;/transition&amp;gt;  
        &amp;lt;transition on-exception="Exception1" to="somewhere"&amp;gt;
            &amp;lt;evaluate expression="exceptionHandler.handleException2(rootCauseException)"/&amp;gt;
            &amp;lt;evaluate expression="exceptionHandler.handleException1(rootCauseException)"/&amp;gt;
        &amp;lt;/transition&amp;gt;
    &amp;lt;/global-transitions&amp;gt;
instead of 
    &amp;lt;global-transitions&amp;gt;
        &amp;lt;transition on="something" to="somewhere"&amp;gt;
            &amp;lt;evaluate expression="myHandler.doSomething()"/&amp;gt;
        &amp;lt;/transition&amp;gt;  
        &amp;lt;transition on-exception="Exception1" to="somewhere"&amp;gt;
            &amp;lt;evaluate expression="exceptionHandler.handleException1(rootCauseException)"/&amp;gt;
        &amp;lt;/transition&amp;gt;
        &amp;lt;transition on-exception="Exception2" to="somewhere"&amp;gt;
            &amp;lt;evaluate expression="exceptionHandler.handleException2(rootCauseException)"/&amp;gt;
        &amp;lt;/transition&amp;gt;
    &amp;lt;/global-transitions&amp;gt;
This is because in the org.springframework.webflow.engine.model.TransitionModel.isMergeableWith(Model model) method only the "on" is considered and not "on-exception": 
    public boolean isMergeableWith(Model model) {
        if (!(model instanceof TransitionModel)) 
{
            return false;
        }
        TransitionModel transition = (TransitionModel) model;
        return ObjectUtils.nullSafeEquals(getOn(), transition.getOn());
    }

instead of 

    public boolean isMergeableWith(Model model) {
        if (!(model instanceof TransitionModel)) {            return false;        }
        TransitionModel transition = (TransitionModel) model;
        return ObjectUtils.nullSafeEquals(getOn(), transition.getOn())
                &amp;amp;&amp;amp; ObjectUtils.nullSafeEquals(getOnException(), transition.getOnException());
    }
</description>
			<version>2.0.3</version>
			<fixedVersion>2.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.engine.model.TransitionModelTests.java</file>
			<file type="M">org.springframework.webflow.engine.model.TransitionModel.java</file>
		</fixedFiles>
	</bug>
	<bug id="923" opendate="2008-10-26 08:16:15" fixdate="2008-10-27 06:38:03" resolution="Fixed">
		<buginformation>
			<summary>Global Transitions don&amp;apos;t fire listeners</summary>
			<description>Global transitions do not appear to fire listeners.  I think that transitionExecuting should be fired.
I think that Flow.handleEvent should call "return context.execute(transition);" instead of  "return transition.execute(currentState, context);" as this will fire the events.
</description>
			<version>2.0.3</version>
			<fixedVersion>2.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.engine.Flow.java</file>
		</fixedFiles>
	</bug>
	<bug id="926" opendate="2008-10-29 02:28:54" fixdate="2008-10-29 03:53:18" resolution="Fixed">
		<buginformation>
			<summary>XmlFlowModelBuilder uses java 1.5 String.contains() method (not compatible with jre 1.4)</summary>
			<description>org.springframework.webflow.engine.model.builder.xml.XmlFlowModelBuilder.mergeStates() uses the java 1.5 method String.contains(CharSequence s) (see: http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html#contains(java.lang.CharSequence) ) on line 653.
On a java 1.4 environment this results in:
java.lang.NoSuchMethodError: java/lang/String.contains(Ljava/lang/CharSequence;)Z
at org.springframework.webflow.engine.model.builder.xml.XmlFlowModelBuilder.mergeStates(XmlFlowModelBuilder.java)
Kind regards,
Bram Bruneel</description>
			<version>2.0.3</version>
			<fixedVersion>2.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.engine.model.builder.xml.XmlFlowModelBuilder.java</file>
		</fixedFiles>
	</bug>
	<bug id="780" opendate="2008-06-30 20:12:45" fixdate="2008-10-31 10:36:10" resolution="Fixed">
		<buginformation>
			<summary>Transition on-exception not handled with ognl</summary>
			<description>Transition on-exception is not handled when using Ognl as Expression Language .
When ognl.MethodFailedException is thrown, the cause of the exception is returned by method "getReason()" (instead of "getCause()"); therefore the method "TransitionExecutingFlowExecutionExceptionHandler. getTargetStateResolver(..)" should check also "ognl.MethodFailedException.getReason()", in order to catch the exception.</description>
			<version>2.0.3</version>
			<fixedVersion>2.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.binding.mapping.impl.DefaultMapping.java</file>
			<file type="M">org.springframework.binding.expression.el.ELExpressionParserTests.java</file>
			<file type="M">org.springframework.binding.expression.el.BindingValueExpression.java</file>
			<file type="M">org.springframework.binding.expression.el.ELExpression.java</file>
			<file type="M">org.springframework.binding.mapping.impl.DefaultMappingContext.java</file>
			<file type="M">org.springframework.binding.expression.ognl.OgnlExpression.java</file>
			<file type="M">org.springframework.binding.mapping.DefaultMapperTests.java</file>
			<file type="M">org.springframework.binding.mapping.results.TypeConversionError.java</file>
			<file type="M">org.springframework.binding.expression.beanwrapper.BeanWrapperExpressionParserTests.java</file>
			<file type="M">org.springframework.binding.expression.beanwrapper.BeanWrapperExpression.java</file>
			<file type="M">org.springframework.binding.expression.ognl.OgnlExpressionParserTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="928" opendate="2008-10-29 18:37:08" fixdate="2008-10-31 10:40:24" resolution="Fixed">
		<buginformation>
			<summary>Evaluation exceptions caused by type conversion errors within target Expression of a data mapping not treating as a type conversion error</summary>
			<description>They&amp;amp;apos;re treated as generic "evaluationExceptions" instead... if the root cause of an EvaluationException thrown during data mapping (either get or set) is a conversion exception, a type conversion mapping error should be recorded...
Noticed when error messages were not rendering properly in sample app.</description>
			<version>2.0.3</version>
			<fixedVersion>2.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.binding.mapping.impl.DefaultMapping.java</file>
			<file type="M">org.springframework.binding.expression.el.ELExpressionParserTests.java</file>
			<file type="M">org.springframework.binding.expression.el.BindingValueExpression.java</file>
			<file type="M">org.springframework.binding.expression.el.ELExpression.java</file>
			<file type="M">org.springframework.binding.mapping.impl.DefaultMappingContext.java</file>
			<file type="M">org.springframework.binding.expression.ognl.OgnlExpression.java</file>
			<file type="M">org.springframework.binding.mapping.DefaultMapperTests.java</file>
			<file type="M">org.springframework.binding.mapping.results.TypeConversionError.java</file>
			<file type="M">org.springframework.binding.expression.beanwrapper.BeanWrapperExpressionParserTests.java</file>
			<file type="M">org.springframework.binding.expression.beanwrapper.BeanWrapperExpression.java</file>
			<file type="M">org.springframework.binding.expression.ognl.OgnlExpressionParserTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="930" opendate="2008-10-31 09:21:26" fixdate="2008-11-03 00:40:48" resolution="Fixed">
		<buginformation>
			<summary>Development mode flag not set for flows registered using flow-location-pattern</summary>
			<description>Factory method needs to be added to flow definition resource factory that applies attributes to all flow resources and invoked by createResource.</description>
			<version>2.0.3</version>
			<fixedVersion>2.0.4</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.config.FlowRegistryFactoryBean.java</file>
			<file type="M">org.springframework.webflow.config.FlowDefinitionResourceFactory.java</file>
		</fixedFiles>
	</bug>
	<bug id="941" opendate="2008-11-07 00:59:00" fixdate="2008-11-10 01:29:29" resolution="Fixed">
		<buginformation>
			<summary>Multiple Fragments not rendering</summary>
			<description>Multiple fragments are not rendered when specified by a comma separated list.  Adding response.flushBuffer() to line 96 of AjaxTilesView.java seemed to fix the issue.  Comparing revisions it looks as though it was either intentionally or accidently removed in 2.0.4 because a call to request.getSession() was added in it&amp;amp;apos;s place.
Attached file is the patched version.</description>
			<version>2.0.4</version>
			<fixedVersion>2.0.5</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.js.ajax.tiles2.AjaxTilesView.java</file>
			<file type="D">org.springframework.js.ajax.tiles2.AjaxTilesRequestContext.java</file>
			<file type="D">org.springframework.js.ajax.tiles2.AjaxTilesRequestContextTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="939" opendate="2008-11-06 13:03:15" fixdate="2008-11-10 04:26:09" resolution="Fixed">
		<buginformation>
			<summary>Locating of flow definitions broken when base-path not being used</summary>
			<description>A previously functional SWF 2.0.3 based application has stopped working after upgrading to SWF 2.0.4
Flow definitions are no longer being found due to the change re: using flow definition path as the flow id, rather than the flow definition file name.
	&amp;lt;webflow:flow-executor id="flowExecutor" flow-registry="flowRegistry"&amp;gt;
		&amp;lt;webflow:flow-execution-repository max-executions="1" max-execution-snapshots="30" /&amp;gt;
	   	&amp;lt;webflow:flow-execution-listeners&amp;gt;
			&amp;lt;webflow:listener ref="securityFlowExecutionListener" /&amp;gt;
		&amp;lt;/webflow:flow-execution-listeners&amp;gt;
	&amp;lt;/webflow:flow-executor&amp;gt;
	&amp;lt;!-- The registry of executable flow definitions --&amp;gt;
	&amp;lt;webflow:flow-registry id="flowRegistry" flow-builder-services="facesFlowBuilderServices"&amp;gt;
		&amp;lt;webflow:flow-location-pattern value="/WEB-INF/flow/*/.xml"/&amp;gt;
	&amp;lt;/webflow:flow-registry&amp;gt;
	&amp;lt;!-- Configures the Spring Web Flow JSF integration --&amp;gt;
	&amp;lt;faces:flow-builder-services id="facesFlowBuilderServices" /&amp;gt;
The flow definition located at /WEB-INF/flow/login/login.xml gets stored in the flowDefinitionRegistry
with an id of "login" in both SWF 2.0.3 and 2.0.4.
However, when attempting to request the flow - SWF 2.0.3 looks for "login" in the registry,
where as SWF 2.0.4 looks for "flow/login" and fails to find it.
I believe this is due to a shift in approach to wishing to use the flow definition&amp;amp;apos;s path as the flow id, rather than the flow name.
The piece of code for determining the flow id when a request comes in is DefaultFlowUrlHandler.getFlowId().
SWF 2.0.3 implementation returns "login" as the id -
	public String getFlowId(HttpServletRequest request) {
		String pathInfo = request.getPathInfo();
		if (pathInfo != null) 
{
			return pathInfo.substring(1);
		}
 else 
{
			. . . 
		}
	}
SWF 2.0.4 implementation returns "flow/login" as the id -
	public String getFlowId(HttpServletRequest request) 
{
		return WebUtils.extractFilenameFromUrlPath(urlPathHelper.getLookupPathForRequest(request));
	}

As SWF 2.0.4 is a point release hopefully it shouldn&amp;amp;apos;t be breaking existing applications.</description>
			<version>2.0.4</version>
			<fixedVersion>2.0.5</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.mvc.servlet.FlowController.java</file>
		</fixedFiles>
	</bug>
	<bug id="948" opendate="2008-11-10 05:03:14" fixdate="2008-11-10 05:48:58" resolution="Fixed">
		<buginformation>
			<summary>Base path behavior inconsistent between flow-location and flow-location-pattern</summary>
			<description>WORKS
&amp;lt;webflow:flow-registry id="flowRegistry" flow-builder-services="facesFlowBuilderServices" base-path="/WEB-INF/"&amp;gt;
&amp;lt;webflow:flow-location path="hotel/search/search.xml" /&amp;gt;
&amp;lt;/webflow:flow-registry&amp;gt;
WORKS
&amp;lt;webflow:flow-registry id="flowRegistry" flow-builder-services="facesFlowBuilderServices" base-path="/WEB-INF/"&amp;gt;
&amp;lt;webflow:flow-location-pattern value="*/.xml" /&amp;gt;
&amp;lt;/webflow:flow-registry&amp;gt;
WORKS
&amp;lt;webflow:flow-registry id="flowRegistry" flow-builder-services="facesFlowBuilderServices" base-path="/WEB-INF"&amp;gt;
&amp;lt;webflow:flow-location-pattern value="*/.xml" /&amp;gt;
&amp;lt;/webflow:flow-registry&amp;gt;
WORKS
&amp;lt;webflow:flow-registry id="flowRegistry" flow-builder-services="facesFlowBuilderServices" base-path="/WEB-INF"&amp;gt;
&amp;lt;webflow:flow-location-pattern value="/*/.xml" /&amp;gt;
&amp;lt;/webflow:flow-registry&amp;gt;
DOES NOT WORK
&amp;lt;webflow:flow-registry id="flowRegistry" flow-builder-services="facesFlowBuilderServices" base-path="/WEB-INF"&amp;gt;
&amp;lt;webflow:flow-location path="hotel/search/search.xml" /&amp;gt;
&amp;lt;/webflow:flow-registry&amp;gt;
DOES NOT WORK
&amp;lt;webflow:flow-registry id="flowRegistry" flow-builder-services="facesFlowBuilderServices" base-path="/WEB-INF"&amp;gt;
&amp;lt;webflow:flow-location path="/hotel/search/search.xml" /&amp;gt;
&amp;lt;/webflow:flow-registry&amp;gt;
</description>
			<version>2.0.4</version>
			<fixedVersion>2.0.5</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.config.FlowDefinitionResourceFactory.java</file>
		</fixedFiles>
	</bug>
	<bug id="899" opendate="2008-09-28 16:52:46" fixdate="2008-11-11 03:12:46" resolution="Fixed">
		<buginformation>
			<summary>FlowResourceELResolver does not work outside of Web Flow environment</summary>
			<description>Throws a NPE if the request context is null  resolution using resourceBundle is not possible when a jsf view is rendered by spring mvc directly</description>
			<version>2.0.3</version>
			<fixedVersion>2.0.5</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.expression.el.ScopeSearchingELResolver.java</file>
			<file type="M">org.springframework.webflow.expression.el.FlowResourceELResolver.java</file>
			<file type="M">org.springframework.webflow.expression.el.ImplicitFlowVariableELResolver.java</file>
		</fixedFiles>
	</bug>
	<bug id="953" opendate="2008-11-11 23:37:48" fixdate="2008-11-13 08:35:09" resolution="Fixed">
		<buginformation>
			<summary>View data binding results lost after Action phase in Portlet environment, not propogating to Render phase.</summary>
			<description>This has been confirmed, see:
http://forum.springframework.org/showthread.php?t=60740
Most likely the entire View instance needs to span the action/render request cycle.</description>
			<version>2.0.4</version>
			<fixedVersion>2.0.5</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowViewHandler.java</file>
			<file type="M">org.springframework.faces.webflow.JsfView.java</file>
			<file type="M">org.springframework.webflow.mvc.portlet.PortletMvcView.java</file>
			<file type="M">org.springframework.webflow.mvc.portlet.PortletMvcViewFactory.java</file>
			<file type="M">org.springframework.webflow.mvc.portlet.PortletMvcViewTests.java</file>
			<file type="M">org.springframework.webflow.mvc.view.AbstractMvcView.java</file>
		</fixedFiles>
	</bug>
	<bug id="839" opendate="2008-08-13 19:03:25" fixdate="2008-12-09 05:23:59" resolution="Fixed">
		<buginformation>
			<summary>After JSF validation/conversion errors, state is not returned correctly</summary>
			<description>My page is showing both searchform and searchresults.
When a user inputs wrong data in the searchform, validation errors are shown correctly to the user (request 1). When he then corrects the error and resubmits, everything works fine (request 2). When he then chages any input field and submits, the search is done using the new values (request 3...n), but the page is rerendered with the values of request 2.
I was able to reproduce this on other pages (simple test pages, with 2 input fields) as well.
This issue might be related to issue 738.</description>
			<version>2.0.3</version>
			<fixedVersion>2.0.6</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowViewHandler.java</file>
			<file type="M">org.springframework.faces.webflow.JsfView.java</file>
			<file type="M">org.springframework.faces.webflow.JsfViewTests.java</file>
			<file type="M">org.springframework.faces.webflow.JsfViewFactoryTests.java</file>
		</fixedFiles>
		<links>
			<link type="Depends" description="is depended on by">1344</link>
			<link type="Related" description="is related to">964</link>
		</links>
	</bug>
	<bug id="964" opendate="2008-11-18 01:01:53" fixdate="2008-12-09 05:24:34" resolution="Fixed">
		<buginformation>
			<summary>Redirect after POST causes UI to be inconsistent with model</summary>
			<description>See forum thread: http://forum.springframework.org/showthread.php?t=63597</description>
			<version>2.0.5</version>
			<fixedVersion>2.0.6</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowViewHandler.java</file>
			<file type="M">org.springframework.faces.webflow.JsfView.java</file>
			<file type="M">org.springframework.faces.webflow.JsfViewTests.java</file>
			<file type="M">org.springframework.faces.webflow.JsfViewFactoryTests.java</file>
		</fixedFiles>
		<links>
			<link type="Depends" description="is depended on by">1344</link>
			<link type="Related" description="is related to">839</link>
		</links>
	</bug>
	<bug id="963" opendate="2008-11-18 00:55:37" fixdate="2008-12-09 06:14:54" resolution="Fixed">
		<buginformation>
			<summary>Render phase ignores facesContext.responseComplete</summary>
			<description>It seems that the render response phase of the JSF lifecycle is executed regardless of whether facesContext.responseComplete() has been called before.
Perhaps, JsfView can check for this condition and return without rendering if it is true. 
Also, just from a quick look into it, shouldn&amp;amp;apos;t externalContext.recordResponseComplete be set when facesContext.responseComplete() is called so that a redirect is also prevented?
See forum thread: http://forum.springframework.org/showthread.php?t=63607</description>
			<version>2.0.5</version>
			<fixedVersion>2.0.6</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowFacesContext.java</file>
			<file type="M">org.springframework.faces.webflow.JsfView.java</file>
			<file type="M">org.springframework.faces.webflow.JsfViewTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="980" opendate="2008-12-04 03:22:10" fixdate="2008-12-10 03:46:30" resolution="Fixed">
		<buginformation>
			<summary>StackOverflowError when performing Spring-JS calls</summary>
			<description>When executing Spring-Javascript calls, I&amp;amp;apos;m receiving a StackOverflowError:
java.lang.StackOverflowError
	at java.util.HashMap.put(HashMap.java:372)
	at org.springframework.js.ajax.tiles2.AjaxTilesView.flattenAttributeMap(AjaxTilesView.java:126)
	at org.springframework.js.ajax.tiles2.AjaxTilesView.flattenAttributeMap(AjaxTilesView.java:128)
	at org.springframework.js.ajax.tiles2.AjaxTilesView.flattenAttributeMap(AjaxTilesView.java:128)
	at org.springframework.js.ajax.tiles2.AjaxTilesView.flattenAttributeMap(AjaxTilesView.java:128)
[...]
This is my tiles definition:
&amp;lt;!DOCTYPE tiles-definitions PUBLIC "-//Apache Software Foundation//DTD Tiles Configuration 2.0//EN" "http://tiles.apache.org/dtds/tiles-config_2_0.dtd"&amp;gt;
&amp;lt;tiles-definitions&amp;gt;
	&amp;lt;definition name="abstractDefinition"&amp;gt;
		&amp;lt;put-attribute name="notnull"  value="notnull" /&amp;gt;
		&amp;lt;put-attribute name="bodyOnLoad"  value="" /&amp;gt;
	&amp;lt;/definition&amp;gt;
	&amp;lt;!-- The minimized layout for users which aren&amp;amp;apos;t logged in --&amp;gt;
	&amp;lt;definition name="simplePageLayout" extends="abstractDefinition" template="/WEB-INF/jsp/views/simplePageLayout.jsp"&amp;gt;
		&amp;lt;put-attribute name="viewId" type="string" value="not defined!!"/&amp;gt;
		&amp;lt;put-attribute name="header" value="/WEB-INF/jsp/fragments/header.jsp"/&amp;gt;
		&amp;lt;put-attribute name="content" value=""/&amp;gt;
		&amp;lt;put-attribute name="footer" value="/WEB-INF/jsp/fragments/footer.jsp"/&amp;gt;
		&amp;lt;put-list-attribute name="cssDefinitions"&amp;gt;
    		&amp;lt;add-attribute type="string" value="/stylesheets/design.css"/&amp;gt;
  		&amp;lt;/put-list-attribute&amp;gt;
  		&amp;lt;put-list-attribute name="javascripts"&amp;gt;
  			&amp;lt;add-attribute type="string" value="/resources/spring/Spring.js"/&amp;gt;
  			&amp;lt;add-attribute type="string" value="/resources/spring/Spring-Dojo.js"/&amp;gt;
    		&amp;lt;add-attribute type="string" value="/js/jquery.js"/&amp;gt;
    		&amp;lt;add-attribute type="string" value="/js/custom.js"/&amp;gt;
  		&amp;lt;/put-list-attribute&amp;gt;
	&amp;lt;/definition&amp;gt;
	&amp;lt;!-- The default page layout which is extended for each view --&amp;gt;
	&amp;lt;definition name="defaultPageLayout" extends="abstractDefinition" template="/WEB-INF/jsp/views/defaultPageLayout.jsp"&amp;gt;
		&amp;lt;put-attribute name="viewId" type="string" value="not defined!!"/&amp;gt;
		&amp;lt;put-attribute name="header" value="/WEB-INF/jsp/fragments/header.jsp"/&amp;gt;
		&amp;lt;put-attribute name="leftColumn" value="leftColumn"/&amp;gt;
		&amp;lt;put-attribute name="breadcrumb" value=""/&amp;gt;
		&amp;lt;put-attribute name="content" value=""/&amp;gt;
		&amp;lt;put-attribute name="rightColumn" value="rightColumn" /&amp;gt;
		&amp;lt;put-attribute name="footer" value="/WEB-INF/jsp/fragments/footer.jsp"/&amp;gt;
		&amp;lt;put-list-attribute name="cssDefinitions"&amp;gt;
    		&amp;lt;add-attribute type="string" value="/resources/dijit/themes/dijit.css"/&amp;gt;
    		&amp;lt;add-attribute type="string" value="/stylesheets/design.css"/&amp;gt;
  		&amp;lt;/put-list-attribute&amp;gt;
  		&amp;lt;put-list-attribute name="javascripts"&amp;gt;
  			&amp;lt;add-attribute type="string" value="/resources/spring/Spring.js"/&amp;gt;
  			&amp;lt;add-attribute type="string" value="/resources/spring/Spring-Dojo.js"/&amp;gt;
    		&amp;lt;add-attribute type="string" value="/js/jquery.js"/&amp;gt;
    		&amp;lt;add-attribute type="string" value="/js/custom.js"/&amp;gt;
  		&amp;lt;/put-list-attribute&amp;gt;
	&amp;lt;/definition&amp;gt;
	&amp;lt;!-- Fragments --&amp;gt;
	&amp;lt;definition name="leftColumn" extends="abstractDefinition" template="/WEB-INF/jsp/fragments/leftColumn.jsp"&amp;gt;
	&amp;lt;/definition&amp;gt;
	&amp;lt;definition name="rightColumn" extends="abstractDefinition" template="/WEB-INF/jsp/fragments/rightColumn.jsp"&amp;gt;
		&amp;lt;put-attribute name="welcome" value="/WEB-INF/jsp/fragments/welcome.jsp"/&amp;gt;
		&amp;lt;put-attribute name="jobData" value="/WEB-INF/jsp/fragments/jobData.jsp"/&amp;gt;
		&amp;lt;put-attribute name="userActions" value="/WEB-INF/jsp/fragments/userActions.jsp"/&amp;gt;
		&amp;lt;put-attribute name="shoppingCart" value="/WEB-INF/jsp/fragments/shoppingCart.jsp"/&amp;gt;
	&amp;lt;/definition&amp;gt;
	&amp;lt;!-- Views  --&amp;gt;
	&amp;lt;definition name="securityTest" extends="simplePageLayout"&amp;gt;
		&amp;lt;put-attribute name="viewId" type="string"  value="securityTest"/&amp;gt;
    	&amp;lt;put-attribute name="title" type="string" value="AXI - Login" /&amp;gt;
    	&amp;lt;put-attribute name="content" value="/WEB-INF/jsp/views/securityTest.jsp" /&amp;gt;
	&amp;lt;/definition&amp;gt;
	&amp;lt;definition name="login" extends="simplePageLayout"&amp;gt;
		&amp;lt;put-attribute name="viewId" type="string"  value="login"/&amp;gt;
		&amp;lt;!--  put-attribute name="bodyOnLoad"  value="onload=&amp;amp;apos;autologinFunction()&amp;amp;apos;" / --&amp;gt;
    	&amp;lt;put-attribute name="title" type="string" value="AXI - Login" /&amp;gt;
    	&amp;lt;put-attribute name="content" value="/WEB-INF/jsp/views/login.jsp" /&amp;gt;
	&amp;lt;/definition&amp;gt;
	&amp;lt;definition name="accountSelection" extends="simplePageLayout"&amp;gt;
		&amp;lt;put-attribute name="viewId" type="string"  value="accountSelection"/&amp;gt;
		&amp;lt;!--  put-attribute name="bodyOnLoad"  value="onload=&amp;amp;apos;autologinFunction()&amp;amp;apos;" / --&amp;gt;
    	&amp;lt;put-attribute name="title" type="string" value="AXI - Select your account" /&amp;gt;
    	&amp;lt;put-attribute name="content" value="/WEB-INF/jsp/views/accountSelection.jsp" /&amp;gt;
	&amp;lt;/definition&amp;gt;
	&amp;lt;definition name="logout" extends="simplePageLayout"&amp;gt;
		&amp;lt;put-attribute name="viewId" type="string"  value="logout"/&amp;gt;
    	&amp;lt;put-attribute name="title" type="string" value="AXI - Logout" /&amp;gt;
    	&amp;lt;put-attribute name="content" value="/WEB-INF/jsp/views/logout.jsp" /&amp;gt;
	&amp;lt;/definition&amp;gt;
	&amp;lt;definition name="home" extends="defaultPageLayout"&amp;gt;
		&amp;lt;put-attribute name="viewId" type="string"  value="home"/&amp;gt;
    	&amp;lt;put-attribute name="title" type="string" value="AXI Home." /&amp;gt;
    	&amp;lt;put-attribute name="content" value="/WEB-INF/jsp/views/home.jsp" /&amp;gt;
    	&amp;lt;put-attribute name="breadcrumb" value="/WEB-INF/jsp/fragments/breadcrumb.jsp"/&amp;gt;
	&amp;lt;/definition&amp;gt;
	&amp;lt;definition name="productOverview" extends="defaultPageLayout"&amp;gt;
		&amp;lt;put-attribute name="viewId" type="string"  value="productOverview"/&amp;gt;
    	&amp;lt;put-attribute name="title" type="string" value="This is productOverview" /&amp;gt;
    	&amp;lt;put-attribute name="content" value="/WEB-INF/jsp/views/productOverview.jsp" /&amp;gt;
    	&amp;lt;put-attribute name="breadcrumb" value="/WEB-INF/jsp/fragments/breadcrumb.jsp"/&amp;gt;
	&amp;lt;/definition&amp;gt;
	&amp;lt;definition name="serviceOverview" extends="defaultPageLayout"&amp;gt;
		&amp;lt;put-attribute name="viewId" type="string"  value="serviceOverview"/&amp;gt;
    	&amp;lt;put-attribute name="title" type="string" value="This is productOverview" /&amp;gt;
    	&amp;lt;put-attribute name="content" value="/WEB-INF/jsp/views/serviceOverview.jsp" /&amp;gt;
    	&amp;lt;put-attribute name="breadcrumb" value="/WEB-INF/jsp/fragments/breadcrumb.jsp"/&amp;gt;
	&amp;lt;/definition&amp;gt;
	&amp;lt;definition name="cart" extends="defaultPageLayout"&amp;gt;
		&amp;lt;put-attribute name="title" type="string" value="This is the shopping cart"/&amp;gt;
    	&amp;lt;put-attribute name="content" value="/WEB-INF/jsp/views/cart.jsp" /&amp;gt;
    	&amp;lt;put-attribute name="breadcrumb" value="/WEB-INF/jsp/fragments/breadcrumb.jsp"/&amp;gt;
	&amp;lt;/definition&amp;gt;
	&amp;lt;definition name="searchResult" extends="defaultPageLayout"&amp;gt;
		&amp;lt;put-attribute name="viewId" type="string"  value="searchResult"/&amp;gt;
		&amp;lt;put-attribute name="title" type="string" value="Suchergebnis" /&amp;gt;
		&amp;lt;put-attribute name="content" value="/WEB-INF/jsp/views/searchResult.jsp" /&amp;gt;
		&amp;lt;put-attribute name="breadcrumb" value="" /&amp;gt;
	&amp;lt;/definition&amp;gt;
&amp;lt;/tiles-definitions&amp;gt;
Can you reproduce this error?
</description>
			<version>2.0.5</version>
			<fixedVersion>2.0.6</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.js.ajax.tiles2.AjaxTilesView.java</file>
		</fixedFiles>
	</bug>
	<bug id="978" opendate="2008-12-02 07:27:59" fixdate="2008-12-10 05:20:35" resolution="Fixed">
		<buginformation>
			<summary>Regression of SWF-918</summary>
			<description>The error described in SWF-918 has resurfaced in 2.0.5.  I get the following stack trace :
java.lang.NullPointerException
	at org.springframework.js.ajax.tiles2.AjaxTilesView.flattenAttributeMap(AjaxTilesView.java:120)
	at org.springframework.js.ajax.tiles2.AjaxTilesView.renderMergedOutputModel(AjaxTilesView.java:91)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:257)
        .....
...when trying to render fragments that have an empty &amp;lt;definition&amp;gt; tag in the Tiles definition file, ie :
&amp;lt;tiles-definitions&amp;gt;
	&amp;lt;definition name="paper-cheque-search-flow:processing-metadata" template="/WEB-INF/jsp/ajax-fragments/paper-cheque-search-flow/processing-metadata.jspx" /&amp;gt;
&amp;lt;/tiles-definitions&amp;gt;</description>
			<version>2.0.5</version>
			<fixedVersion>2.0.6</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.js.ajax.tiles2.AjaxTilesView.java</file>
		</fixedFiles>
	</bug>
	<bug id="976" opendate="2008-12-01 23:36:59" fixdate="2008-12-10 06:55:46" resolution="Fixed">
		<buginformation>
			<summary>SimpleELContext is not thread-safe</summary>
			<description>Class SimpleELContext extends javax.el.Context. 
Javadoc http://java.sun.com/products/jsp/2.1/docs/jsp-2_1-pfd2/javax/el/ELContext.html said :
"""" Because it stores state during expression evaluation, an ELContext object is not thread-safe """.
Instance of SimpleELContext is stored in ELDelegatingPropertyResolver and ELDelegatingVariableResolver, which are application singletons, so this instance of SimpleELContext is shared for all sessions.
This bug is very strange, because in single user development/testing everything works fine, but in production with more users, we got usually NullPointerException on bizzarre places in program like this :
&amp;gt;        String label = getItemLabel() != null ? getItemLabel().toString() : null;
Attachment contains a patch, which helps me.</description>
			<version>2.0.5</version>
			<fixedVersion>2.0.6</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.expression.ELDelegatingVariableResolver.java</file>
			<file type="M">org.springframework.faces.expression.ELDelegatingPropertyResolver.java</file>
		</fixedFiles>
	</bug>
	<bug id="992" opendate="2008-12-13 06:05:30" fixdate="2008-12-15 04:48:18" resolution="Fixed">
		<buginformation>
			<summary>Flow Id not properly calculated when using "classpath*:" style resources in base-path</summary>
			<description>I am attempting to define flows in the following manner:
    &amp;lt;webflow:flow-registry id="flowRegistry" base-path="classpath*:/project"&amp;gt;
      &amp;lt;webflow:flow-location-pattern value="/**/webflow.xml"/&amp;gt;
    &amp;lt;/webflow:flow-registry&amp;gt;
I have a webflow.xml in a jar file at the path:
project/proof/create/webflow.xml
Ideally, the flowId would be "proof/create".
When I do this, the flowId ends up being the full url (including the system file path, the jar url protocol, etc). If I change my flow-registry definition to:
    &amp;lt;webflow:flow-registry id="flowRegistry" base-path="classpath:/project"&amp;gt;
      &amp;lt;webflow:flow-location-pattern value="/proof/create/webflow.xml"/&amp;gt;
    &amp;lt;/webflow:flow-registry&amp;gt;
it works fine. However, I lose a lot of flexibility this way (I intend to add many more flows, in multiple jar files).
It seems the culprit is in FlowDefinitionResourceFactory, in the "removeClasspathScheme" method. It strips "classpath:" from the front of the basePath, but doesn&amp;amp;apos;t look for "classpath*:". If I strip the "classpath*:" from the front of the basePath (with a debugger), it works as expected.</description>
			<version>2.0.5</version>
			<fixedVersion>2.0.6</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.config.FlowDefinitionResourceFactoryTests.java</file>
			<file type="M">org.springframework.webflow.config.FlowDefinitionResourceFactory.java</file>
		</fixedFiles>
	</bug>
	<bug id="998" opendate="2008-12-16 08:01:02" fixdate="2008-12-16 08:17:58" resolution="Fixed">
		<buginformation>
			<summary>FlowDefinitionResourceFactory.getFlowId does not remove the classpath scheme if the resource implements ContextResource</summary>
			<description>In order to solve some other business requirements, I have created a custom Resource implementation that is returned when using "classpath*:" type resource patterns.  (It&amp;amp;apos;s essentially a UrlResource that implements ContextResource).  However, when FlowDefinitionResourceFactory attempts to calculate the flow id, it removes the classpath scheme from the beginning of the base path for every instance (where base path is used) except for if the resource implements ContextResource.  Looking at the code, I don&amp;amp;apos;t see any reason to skip it in this case, as in the common cases, invoking removeClasspathScheme will have no effect, while not artificially limiting any resource type that implements ContextResource.  
I am attaching a patch that does this.  </description>
			<version>2.0.5</version>
			<fixedVersion>2.0.6</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.config.FlowDefinitionResourceFactory.java</file>
		</fixedFiles>
	</bug>
	<bug id="1016" opendate="2008-08-31 19:31:13" fixdate="2009-01-14 06:36:02" resolution="Fixed">
		<buginformation>
			<summary>Richfaces rich:fileUpload transfer error</summary>
			<description>Concerning the forum-conversation: http://forum.springframework.org/showthread.php?t=59485. According to this conversation this problem did not occur in SWF version 2.0.0. 
The rich:fileUpload does not complete properly. It does upload the file but it doesn&amp;amp;apos;t complete correctly at clientside. i.e. the statusupdate in the component always puts a SERVER_TRANSFER_ERROR as message.
The fileUploadListener method of the backingbean fires correct but afterwards the component does not receive a correct AJAX acknowledge from the server. </description>
			<version>2.0.5</version>
			<fixedVersion>2.0.6</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.TreeStructureManager.java</file>
			<file type="M">org.springframework.faces.webflow.FlowViewStateManager.java</file>
		</fixedFiles>
		<links>
			<link type="Depends" description="is depended on by">1344</link>
		</links>
	</bug>
	<bug id="1017" opendate="2008-05-28 09:30:05" fixdate="2009-01-14 07:35:28" resolution="Fixed">
		<buginformation>
			<summary>FlowFacesContext does not return the same FacesMessages instances</summary>
			<description>I am currently using a phase listener to fix up faces messages before they are displayed (a method described here http://www.oracle.com/technology/pub/articles/masterj2ee/j2ee_wk7.html).  Unfortunately FlowFacesContext creates a new FacesMessage adapted from spring messages on each call to FacesContext.getMessages().  This means that any set method called on the message is lost.</description>
			<version>2.0.5</version>
			<fixedVersion>2.0.6</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowFacesContext.java</file>
			<file type="M">org.springframework.faces.webflow.FlowFacesContextTests.java</file>
		</fixedFiles>
		<links>
			<link type="Depends" description="is depended on by">985</link>
		</links>
	</bug>
	<bug id="985" opendate="2008-12-08 19:34:56" fixdate="2009-01-14 07:35:50" resolution="Fixed">
		<buginformation>
			<summary>Multiple JSF validators duplicate messages</summary>
			<description>If a component contains multiple validators that each attach a message to the FacesContext &amp;lt;h:messages&amp;gt; components will return duplicate results.
This is due to FlowFacesContext.getClientIdsWithMessages() returning duplicate client IDs.
One method of fixing this is to change the IdentifiedMessageCriteria class to filter duplicate IDs:
	private class IdentifiedMessageCriteria implements MessageCriteria {
		String nullSummaryId = null + SUMMARY_MESSAGE_KEY;
		private Set identifiedMessageSources = new HashSet();
		public boolean test(Message message) {
			if (message.getSource() == null || message.getSource().equals("")


 message.getSource().equals(nullSummaryId)


 message.getSource().toString().endsWith(DETAIL_MESSAGE_KEY)) 
{
				return false;
			}
			return identifiedMessageSources.add(message.getSource());
		}
	}


I will update the patch in SWF-716 for this.</description>
			<version>2.0.3</version>
			<fixedVersion>2.0.6</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowFacesContext.java</file>
			<file type="M">org.springframework.faces.webflow.FlowFacesContextTests.java</file>
		</fixedFiles>
		<links>
			<link type="Depends" description="depends on">1017</link>
		</links>
	</bug>
	<bug id="856" opendate="2008-08-22 08:41:52" fixdate="2009-01-14 08:22:17" resolution="Fixed">
		<buginformation>
			<summary>When using JSF getMaximumSeverity on the FlowFacesContext returns null even if a message has been added</summary>
			<description>If a converter creates a FacesMessage instance the message does appear as a result of the h:messages and h:message tags, but if the FacesContext is queried using the getMaximumSeverity method, the method returns null.  I was able to replicate the issue using the swf-booking-faces example by modifing the enterBookingDetails.xhtml.  I will attach the file once the issue has been created.  To reproduce, I removed the client side checking for one of the date entry boxes, and entered an incorrect date.  At the top of the page above the converter message should be the message "Please Correct the following errors:" which should only be rendered if any errors were detected.</description>
			<version>2.0.2</version>
			<fixedVersion>2.0.6</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowFacesContext.java</file>
			<file type="M">org.springframework.faces.webflow.FlowFacesContextTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="1000" opendate="2008-12-17 07:02:42" fixdate="2009-01-14 08:31:33" resolution="Fixed">
		<buginformation>
			<summary>JsfViewFactory not correctly checking if viewAlreadySet</summary>
			<description>propose adding the viewName to method as in below:
	private boolean viewAlreadySet(FacesContext facesContext, String viewName) {
		if (facesContext.getViewRoot() != null &amp;amp;&amp;amp; facesContext.getViewRoot().getViewId().equals(viewName)) 
{
			// the corner case where a before RESTORE_VIEW PhaseListener has handled setting the UIViewRoot
			return true;
		}
 else 
{
			return false;
		}
	}</description>
			<version>2.0.5</version>
			<fixedVersion>2.0.6</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.JsfViewFactory.java</file>
		</fixedFiles>
	</bug>
	<bug id="1025" opendate="2009-01-19 20:52:59" fixdate="2009-03-13 02:54:43" resolution="Fixed">
		<buginformation>
			<summary>&amp;apos;valid&amp;apos; property of input components gets lost before JSF render phase in portlet</summary>
			<description>The request cycle of a portlet usually constists of an seperate ActionRequest and RenderRequest.
Spring Faces does bridge these two independant Requests. Specific to the portlet environment the ViewRoot of the JSF component tree is saved at the end of the ActionRequest and restored before JSF enters the render response phase. This way the component tree itself and its state is correcly preserved for rendering. The ViewRoot gets restored in JsfViewFactory.getView(). In this method JsfViewFactory.processTree() also gets called and resets the &amp;amp;apos;valid&amp;amp;apos; property of EditableValueHolder componets to &amp;amp;apos;true&amp;amp;apos;. 
This might be correct before JSF processes the ActionRequest but is NOT correct before JSF enters the render response phase within the RenderRequest. 
The state information of the &amp;amp;apos;valid&amp;amp;apos; property is lost and components whose rendering depend on that property (set to &amp;amp;apos;false&amp;amp;apos; in the ActionRequest because of an validation error) display incorrectly.</description>
			<version>2.0.5</version>
			<fixedVersion>2.0.6</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.JsfViewFactory.java</file>
		</fixedFiles>
	</bug>
	<bug id="1055" opendate="2009-03-06 08:03:11" fixdate="2009-03-13 05:47:01" resolution="Fixed">
		<buginformation>
			<summary>FlowFacesContext didn&amp;apos;t expose context messages with null source</summary>
			<description>In Faces context there is exist method getClientIdsWithMessages().
In your implementation (FlowFacesContext) you didn&amp;amp;apos;t return in this method null source id (IdentifiedMessageCriteria returns false for nulls).
JSF specification say nothing about nulls in return of this method, but several implementation of messages tag relies on this. For instance last versions of MyFaces &amp;lt;h:messages&amp;gt; and RichFaces &amp;lt;rich:messages&amp;gt; behaves that way. As result these implementations didn&amp;amp;apos;t show user messages with null source added to the MessageContext.
The workaround is easy - just allways specify some source id, but better solution would be allow to use null as source.</description>
			<version>2.0.5</version>
			<fixedVersion>2.0.6</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowFacesContextTests.java</file>
			<file type="M">org.springframework.faces.webflow.FlowFacesContextMessageDelegate.java</file>
		</fixedFiles>
	</bug>
	<bug id="1066" opendate="2009-03-16 02:44:10" fixdate="2009-03-16 02:47:17" resolution="Fixed">
		<buginformation>
			<summary>ManySelectionTrackingListDataModel and OneSelectionTrackingListDataModel don&amp;apos;t track selections correctly when using a &lt;rich:dataScroller&gt; component</summary>
			<description>Using an eagerly loaded DataModel (i.e., loading an entire list of results into memory at once and then scrolling through that list via subsequent requests) uncovers a bug in the setCurrentRowSelected implementations in ManySelectionTrackingListDataModel and OneSelectionTrackingListDataModel where the selections potentially get "lost" across requests.</description>
			<version>2.0.6</version>
			<fixedVersion>2.0.7</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.model.OneSelectionTrackingListDataModel.java</file>
			<file type="M">org.springframework.faces.model.ManySelectionTrackingListDataModel.java</file>
		</fixedFiles>
	</bug>
	<bug id="1082" opendate="2009-03-23 03:42:23" fixdate="2009-03-23 05:42:07" resolution="Fixed">
		<buginformation>
			<summary>SelectionTrackingActionListener throws NPE when component&amp;apos;s parent is null</summary>
			<description>SelectionTrackingActionListener tries to inspect current UIComponent if it is child component of a parent UIComponent which uses SelectionAware. When I try to use SWF 2.0.5 together with JBoss&amp;amp;apos;s Gravel JSF components there are cases when parent component of UIComponent which signals current ActionEvent is NULL. In such a case we simply get NPE in trackSelection method.
A simple null check like below will suffice to get rid of this little bug:
private void trackSelection(UIComponent component) {
             // Find parent component with a SelectionAware model if it exists
            UIComponent currentComponent = component;
            while (currentComponent.getParent() != null &amp;amp;&amp;amp; !(currentComponent.getParent() instanceof UIViewRoot)) {
...
}
</description>
			<version>2.0.5</version>
			<fixedVersion>2.0.7</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.model.SelectionTrackingActionListener.java</file>
		</fixedFiles>
	</bug>
	<bug id="1092" opendate="2009-04-03 04:47:36" fixdate="2009-04-10 15:28:07" resolution="Fixed">
		<buginformation>
			<summary>AjaxTilesView composite definition traversal algorithm ignores AttributeType</summary>
			<description>When looking for a fragment of a composite view to render, the AjaxTilesView traverses nested definitions on the composite.  Unfortunately, it is also treating template and string attributes as definition ids, which can cause the wrong definition to render when the name of the attribute is the same as another, unrelated definition.
The algorithm in AjaxTilesView should only consider definition attributes...
This is a potential security risk as it could allow a client to render unrelated composites outside control of server, so I&amp;amp;apos;m marking it critical for 2.0.7.</description>
			<version>2.0.6</version>
			<fixedVersion>2.0.7</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.js.ajax.tiles2.AjaxTilesView.java</file>
		</fixedFiles>
	</bug>
	<bug id="1098" opendate="2009-04-09 03:34:44" fixdate="2009-04-17 06:45:02" resolution="Fixed">
		<buginformation>
			<summary>Execution key is not always incremented.</summary>
			<description>It&amp;amp;apos;s easy to reproduce with booking-mvc. Enter Book Hotel data, go to confirm (e1s2). Press Back and press Proceed again (e1s2). I should see e1s3.
A specific use case where this is an issue is where a page has links that open browser popup windows. Each browser popup ends up with the same execution key, which is initially fine but if you try to refresh the first browser popup you get the content of the second.</description>
			<version>2.0.6</version>
			<fixedVersion>2.0.7</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.execution.repository.impl.DefaultFlowExecutionRepository.java</file>
			<file type="M">org.springframework.webflow.execution.repository.support.AbstractFlowExecutionRepository.java</file>
			<file type="M">org.springframework.webflow.execution.repository.impl.FlowExecutionSnapshotGroup.java</file>
			<file type="M">org.springframework.webflow.execution.repository.impl.SimpleFlowExecutionSnapshotGroup.java</file>
		</fixedFiles>
	</bug>
	<bug id="1112" opendate="2009-04-22 00:38:38" fixdate="2009-08-03 09:01:30" resolution="Fixed">
		<buginformation>
			<summary>JSF 1.2-specific call to StateManager.saveView should be replaced with saveSerializedView for JSF 1.1 compatibiliy</summary>
			<description>See SWF-1096 for the reason this call was introduced in 2.0.7. Jeremy suggests to use saveSerializedView instead of saveView; the latter doesn&amp;amp;apos;t exist in JSF 1.1 apparently. Currently, this causes a NoSuchMethodError for
javax/faces/application/StateManager.saveView(Ljavax/faces/context/FacesContext;)Ljava/lang/Object; </description>
			<version>2.0.7</version>
			<fixedVersion>2.0.8</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.JsfView.java</file>
		</fixedFiles>
	</bug>
	<bug id="1115" opendate="2009-04-23 08:19:23" fixdate="2009-08-03 09:06:46" resolution="Fixed">
		<buginformation>
			<summary>Id handling of Spring AjaxViewRoot causes problems to RichFaces AjaxViewRoot</summary>
			<description>There is a serious problem when combining Spring-faces ajax components and Rich faces Ajax components.
This is most easily noticed since 2.0.7, when the jsf view state is saved as part of the flow history. To reproduce open a spring popup view-state using an sf:commandButton and cancel it by pressing Esc or X. After that, no rich-faces ajax requests will be able to work.
The reason seems to be the following: Spring&amp;amp;apos;s AjaxViewRoot effectively replaces in its constructor the ID of the underlying ViewRoot with a newly generated unique id appended by "_ajax". This ID remains in the state of the original ViewRoot even after Spring - AjaxViewRoot has finished its job. RichFaces - AjaxViewRoot relies on its ID to determine which part of the component tree to process. Therefore, since its ID has been replaced, the processing never happens on the whole ViewRoot as it should.
This is also easily reproduced by firing an sf:commandButton action that does not transition to another view. After that request is processed, subsequent rich-faces ajax requests will not work.
You may consider the small patch I am attaching. This should be ok unless you think there are deeper complications here.
Thanks and regards.</description>
			<version>2.0.7</version>
			<fixedVersion>2.0.8</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.ui.AjaxViewRoot.java</file>
		</fixedFiles>
	</bug>
	<bug id="1021" opendate="2009-01-16 02:04:01" fixdate="2009-08-03 10:07:04" resolution="Fixed">
		<buginformation>
			<summary>AbstractFlowExecutionTests.assertFlowExecutionOutcomeEquals() has jUnit arguments reversed</summary>
			<description>junit.framework.ComparisonFailure: The flow execution outcome is wrong expected:&amp;lt;[actual]&amp;gt; but was:&amp;lt;[expected]&amp;gt;
The error message for a unit test failure has its arguments reversed - the "expected" value is being shown as the "actual" value.
The other assert helper methods appear to be correct.</description>
			<version>2.0.5</version>
			<fixedVersion>2.0.8</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.test.execution.AbstractFlowExecutionTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="1144" opendate="2009-06-16 14:56:23" fixdate="2009-08-04 08:38:06" resolution="Fixed">
		<buginformation>
			<summary>NPE in FlowHandlerAdapter.sendFlowDefinitionRedirect when flowRedirect does not have parameters appended to it</summary>
			<description>When defining a flowRedirect without a ? appended to it, a NPE is thrown at FlowHandlerAdapter.sendFlowDefinitionRedirect as the input map from context.getFlowRedirectFlowInput() is null. 
For example, defining a &amp;lt;view-state id="test" view="flowRedirect:other-test"/&amp;gt;, this NPE will be encountered. 
So far, what I can find is that when there is no ? appended to the end of the flowRedirect:&amp;lt;flow&amp;gt;, the input map is not created. The corresponding code in the FlowDefinitionRedirectAction.doExecute is 
int index = encodedRedirect.indexOf(&amp;amp;apos;?&amp;amp;apos;);
String flowDefinitionId;
LocalAttributeMap executionInput = null;
if (index != -1) {
  flowDefinitionId = encodedRedirect.substring(0, index);
  String[] parameters = StringUtils.delimitedListToStringArray(encodedRedirect.substring(index + 1), "&amp;amp;");
  executionInput = new LocalAttributeMap(parameters.length, 1);
  for (int i = 0; i &amp;lt; parameters.length; i++) {
    String nameAndValue = parameters[i];
    index = nameAndValue.indexOf(&amp;amp;apos;=&amp;amp;apos;);
    if (index != -1) 
{
      executionInput.put(nameAndValue.substring(0, index), nameAndValue.substring(index + 1));
    }
 else 
{
      executionInput.put(nameAndValue, "");
    }
  }
} else {
  flowDefinitionId = encodedRedirect;
}
executionInputMap is only created if there is a ? in the flow redirect. If it does not exist, the map continues to remain null, whilst the flowRedirect action is created. </description>
			<version>2.0.7</version>
			<fixedVersion>2.0.8</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.context.portlet.PortletExternalContextTests.java</file>
			<file type="M">org.springframework.webflow.context.portlet.PortletExternalContext.java</file>
			<file type="M">org.springframework.webflow.context.servlet.ServletExternalContext.java</file>
			<file type="M">org.springframework.webflow.context.servlet.ServletExternalContextTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="1132" opendate="2009-06-04 15:04:35" fixdate="2009-08-04 10:35:38" resolution="Fixed">
		<buginformation>
			<summary>Spring WebFlow throws IllegalArgumentException while binding map entries</summary>
			<description>If I&amp;amp;apos;m not wrong, since 2.0.7 org.springframework.webflow.mvc.view.BindingModel implements org.springframework.validation.BindingResult. This affects behavior when binding properties of java.util.Map type.
BindStatus(RequestContext requestContext, String path, boolean htmlEscape) is instantiated for field of java.util.Map type. As far as I could trace relevant execution, Spring tries to determine type of map entries, and since map is empty type ends up to be null which is not acceptable as parameter to ConversionExecutorPropertyEditor(ConversionService conversionService, Class fieldType, String converterId) constructor called from BindingModel findEditor(String field, Class valueType) method.</description>
			<version>2.0.7</version>
			<fixedVersion>2.0.8</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="D">org.springframework.webflow.mvc.view.BindingModelTests.java</file>
			<file type="M">org.springframework.webflow.TestBean.java</file>
			<file type="M">org.springframework.webflow.mvc.view.BindingModel.java</file>
		</fixedFiles>
	</bug>
	<bug id="1027" opendate="2009-01-23 02:27:00" fixdate="2009-08-05 05:50:51" resolution="Fixed">
		<buginformation>
			<summary>FilenameFlowUrlHandler does not implement createFlowDefinitionUrl</summary>
			<description>FilenameFlowUrlHandler, which was introduced in 2.0.4, extracts the flow id from an http request. However, it fails to construct the correct URL given the flow id. I think this should be implemented by overriding createFlowDefinitionUrl.
Test case:
1) configure a flow executor repository with max-executions="1"
2) Start a flow "X". 
3) Now start another flow "Y" by navigating to the URL of the "Y" flow. 
4) Press back on the browser. If the createFlowDefinitionUrl method works correctly then the system should take you to the beginning of a new flow "X".</description>
			<version>2.0.5</version>
			<fixedVersion>2.0.8</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.context.servlet.FilenameFlowUrlHandlerTests.java</file>
			<file type="M">org.springframework.webflow.context.servlet.FilenameFlowUrlHandler.java</file>
			<file type="M">org.springframework.webflow.context.servlet.DefaultFlowUrlHandler.java</file>
		</fixedFiles>
	</bug>
	<bug id="1146" opendate="2009-06-16 23:30:08" fixdate="2009-08-05 08:46:48" resolution="Fixed">
		<buginformation>
			<summary>Validator only runs if signature matches exact model object Class</summary>
			<description>when writing a Validator component, (matching the conventions of name), the signature of the method must match exactly the command object type.
Let&amp;amp;apos;s say my validation method is :
validateMyViewId(MyObject command, ValidationContext ctx) (...)
Then the validator will not run if command object is of type MyExtendedObject (extends MyObject)
This is a critical behaviour, in case the command object changes during the webflow, then validation won&amp;amp;apos;t be run anymore.
(The match is done in ValidationHelper class)</description>
			<version>2.0.7</version>
			<fixedVersion>2.0.8</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.validation.ValidationHelper.java</file>
			<file type="M">org.springframework.webflow.validation.StubModelMessageContext.java</file>
			<file type="M">org.springframework.webflow.validation.ValidationHelperTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="1133" opendate="2009-06-04 23:16:55" fixdate="2009-08-05 09:40:52" resolution="Fixed">
		<buginformation>
			<summary>Endless Redirects happens when more then one request Parameter is present on redirect</summary>
			<description>If you implement your own FlowUrlHandler that re adds request parameter to the url even in case of a redirect you get endless redirects. This is caused by the simple implementation inside the JsfView for UserEvents:
	public boolean userEventQueued() 
{
		return requestContext.getRequestParameters().size() &amp;gt; 1;
	}

Which answers true to having a user event queued if more the one parameter (assuming the one is the flow execution key) is present.  If that request isnt a Ajax request you get a new redirect (and a new and a new). Problem is i could remove the parameters inside our FlowUrlHandlers createFlowExecutionUrl method but then those parameters wouldnt be present at url after the redirect which can lead to wrong bookmarking or wrong behavouir after a reload.
Not sure if this is really a bug from your side. But atleast its a undesireable implementation in my eyes.</description>
			<version>2.0.7</version>
			<fixedVersion>2.0.8</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.JsfView.java</file>
		</fixedFiles>
	</bug>
	<bug id="1176" opendate="2009-09-10 05:59:02" fixdate="2009-09-24 14:02:49" resolution="Fixed">
		<buginformation>
			<summary>Web Flow first wants to resolve the model before even checking if a databinding should be done at all</summary>
			<description>Filed on behalf of Agim Emruli, Agim.Emruli@springsource.com in regards to Support Issue #7504.
Web Flow has a small "bug" that it first wants to resolve the model before even checking if a data binding should be done at all.  There is no need to retrieve a model object if there is no data binding at all.
Attached is a patch that fixes the issue.
It would be great if this can be included into the standard web flow release.  If it cannot, then a customer specific release will need to be packaged to address the issue.
Thanks
</description>
			<version>2.0.8</version>
			<fixedVersion></fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.mvc.view.AbstractMvcView.java</file>
		</fixedFiles>
	</bug>
	<bug id="1187" opendate="2009-11-04 22:46:45" fixdate="2010-04-07 05:53:17" resolution="Complete">
		<buginformation>
			<summary>MyFaces bugs causes FacesMessage serialization failure in a clustered environment</summary>
			<description>One of changes in webflow 2.07 causes the message context to be stored across redirects, unfortunately a current MyFaces bug (https://issues.apache.org/jira/browse/MYFACES-1347) causes serialization failure when running in a clustered environment.
Since the MyFaces issue has been opened since 2006 here is a work around patch that could be applied to webflow.
As this is a MyFaces issue you might not want to apply the patch but I will post it here anyway in case anyone else hits the same issue.</description>
			<version>2.0.7</version>
			<fixedVersion>2.0.9</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowFacesContextTests.java</file>
			<file type="M">org.springframework.faces.webflow.FlowFacesContextMessageDelegate.java</file>
		</fixedFiles>
	</bug>
	<bug id="1213" opendate="2010-03-16 21:01:48" fixdate="2010-04-07 07:21:15" resolution="Complete">
		<buginformation>
			<summary>Problem with clustered sessions</summary>
			<description>Problem described in the forum at http://forum.springsource.org/showthread.php?t=86144
It seems fairly easy to fix this at the source, re-put the conversationContainer at end of FlowExecutorImpl.launchExecution (or at end of SessionBindingConversationManager.beginConversation() as mentioned in forum).
Workaround right now is using a custom filter with the app which re-puts the conversationContainer at end of every request. Something like below filter:
public class SpringWebflowWorkaroundFilter implements Filter {
  private static final String WEBFLOW_CONVERSATION_CONTAINER_KEY = "webflowConversationContainer";
  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,
      ServletException 
{
    chain.doFilter(request, response);
    springWebflowWorkaround(((HttpServletRequest) request).getSession());
  }
  private void springWebflowWorkaround(HttpSession session) {
    if (session == null) return;
    // reput the conversationContainer after every request
    Object conversationContainer = session.getAttribute(WEBFLOW_CONVERSATION_CONTAINER_KEY);
    if (conversationContainer != null) 
{
      session.setAttribute(WEBFLOW_CONVERSATION_CONTAINER_KEY, conversationContainer);
    }
  }
}</description>
			<version>2.0.8</version>
			<fixedVersion>2.0.9</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.executor.FlowExecutorImpl.java</file>
			<file type="M">org.springframework.webflow.executor.FlowExecutorImplTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="1229" opendate="2010-04-07 23:31:53" fixdate="2010-04-09 02:29:38" resolution="Complete">
		<buginformation>
			<summary>Converter to Collection type is wrapped with a second Collection</summary>
			<description>When creating a custom converter from a String to a List, the org.springframework.binding.convert.converters.ObjectToCollection converter is wrapping the proper type with an extra collection.
For example, the user would type "a,b,k" in the input and the custom converter would create a list of Fruit objects "Apple", "Banana", and "Kiwi". What is being set is a list containing the list of fruit returned by the custom converter.
list[list["Apple", "Banana", "Kiwi"]]
instead of
list["Apple", "Banana", "Kiwi"]
POJO
Code:
public class Fruit {
  private String name;
  //getters/setters for name
}
POJO
Code:
public class FruitBowl{
  private List&amp;lt;Fruit&amp;gt; fruits;
  public List&amp;lt;Fruit&amp;gt; getFruits()
{ return this.fruits; }
  public void setFruits(List&amp;lt;Fruit&amp;gt; fruits)
{ this.fruits = fruits; }
}
Converter
Code:
public class FruitCsvConverter extends StringToObject{
  public FruitCsvConverter()
{
    super(List.class);
  }

  protected String toString(Object object) throws Exception 
{
    StringBuilder sb = new StringBuilder();
    List fruits = (List)object;
    //loop over fruits building the CSV string
    return sb.toString();
  }
  protected Object toObject(String string, Class targetClass) throws Exception 
{
    ArrayList&amp;lt;Fruit&amp;gt; fruits = new ArrayList&amp;lt;Fruit&amp;gt;();
    //parse the CSV into the fruit
    return fruits;
  }
}
fruit-flow.xml
Code:
...
&amp;lt;view-state id="fruitInformation" model="fruitBowl"&amp;gt;
  &amp;lt;binder&amp;gt;
    &amp;lt;binding property="fruits" converter="fruitCsv" /&amp;gt;
  &amp;lt;/binder&amp;gt;
&amp;lt;/view-state&amp;gt;
...
Debug Mapping
2010-04-07 15:52:08,708 DEBUG [org.springframework.binding.mapping.impl.DefaultMa pping] - &amp;lt;Adding mapping result [Success@fe135d mapping = parameter:&amp;amp;apos;fruits&amp;amp;apos; -&amp;gt; fruits, code = &amp;amp;apos;success&amp;amp;apos;, error = false, originalValue = &amp;amp;apos;a,b,k&amp;amp;apos;, mappedValue = list[list[com.site.Fruit@1ec9d2, com.site.Fruit@1ec9d2, com.site.Fruit@feaf]]]&amp;gt;
</description>
			<version>2.0.8</version>
			<fixedVersion>2.1.0.M1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.binding.convert.service.DefaultConversionServiceTests.java</file>
			<file type="M">org.springframework.binding.convert.service.GenericConversionService.java</file>
		</fixedFiles>
	</bug>
	<bug id="1238" opendate="2010-05-10 20:05:51" fixdate="2010-05-11 02:52:52" resolution="Complete">
		<buginformation>
			<summary>AjaxTilesView fails to render multiple fragments</summary>
			<description>We decided to use Spring 3 and Spring Web Flow 2.1.0.M1 to get around Bug SWF-1053 on Tomcat 6.
AjaxTilesView only renders the first fragment when multiple fragments are requested. In 2.0.9 rendering of multiple fragments worked properly.
Our configuration:






&amp;lt;bean id="tilesViewResolver" class="org.springframework.js.ajax.AjaxUrlBasedViewResolver"&amp;gt;




		&amp;lt;property name="order" value="2" /&amp;gt;




		&amp;lt;property name="viewClass"




			value="org.springframework.js.ajax.tiles2.AjaxTilesView" /&amp;gt;




&amp;lt;/bean&amp;gt;






I noticed in 2.0.9 version of AjaxTilesView the line
response.flushBuffer(); was present in renderMergedOutputModel
In 2.1.0.M1 this line is commented out.
When I remove the comment the view works again. We&amp;amp;apos;ve tested with IE6 and Firefox 3.6.3
After some debugging with Firebug I think that I&amp;amp;apos;ve found the problem.
Without the response.flushBuffer(); the server send a Content-length header with the length of the first fragment only. Obviously the browser stops reading the request after the content length has been reached.
With response.flushBuffer();  the response doesn&amp;amp;apos;t contain a  Content-length at all and all fragments get rendered by the browser.</description>
			<version>2.1.0.M1</version>
			<fixedVersion>2.1.0.M2</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.js.ajax.tiles2.AjaxTilesViewTests.java</file>
			<file type="M">org.springframework.js.ajax.tiles2.AjaxTilesView.java</file>
		</fixedFiles>
		<links>
			<link type="Related" description="is related to">904</link>
			<link type="Related" description="is related to">1078</link>
		</links>
	</bug>
	<bug id="1245" opendate="2010-02-28 21:55:31" fixdate="2010-06-01 16:55:15" resolution="Complete">
		<buginformation>
			<summary>Incorrect PhaseListener execution order</summary>
			<description>JSF 1.1 and 1.2 spec say in the chapter &amp;amp;apos;11.3 PhaseListeners&amp;amp;apos; that "When the lifecycle phase exits, due
to an exception or normal termination, the afterPhase() listeners must be called in
reverse order from the beforePhase() listeners in the following manner."
In Spring Faces, the PhaseListeners beforePhase() and afterPhase() methods are invoked in the same order, not complying the spec.
See org.springframework.faces.webflow.JsfUtils notifyBeforeListeners() and notifyAfterListeners() methods.</description>
			<version>2.1.0.M2</version>
			<fixedVersion>2.1.0.RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.JsfUtils.java</file>
		</fixedFiles>
	</bug>
	<bug id="1243" opendate="2010-05-19 03:07:13" fixdate="2010-06-02 07:02:32" resolution="Complete">
		<buginformation>
			<summary>NullPointerException in org.springframework.faces.ui.ProgressiveUICommand when the Facelets included with Mojarra 2.0.2 is enabled</summary>
			<description>If faces-config.xml references com.sun.facelets.FaceletViewHandler or is versioned 1.2, then JSF 2.0 Facelets will not be used. When faces-config.xml is corrected accordingly the following exception occurs:
Caused by: java.lang.NullPointerException
	at org.springframework.faces.ui.ProgressiveUICommand.isImmediate(ProgressiveUICommand.java:74)
	at javax.faces.component.UICommand.queueEvent(UICommand.java:338)
	at com.sun.faces.renderkit.html_basic.ButtonRenderer.decode(ButtonRenderer.java:88)
	at javax.faces.component.UIComponentBase.decode(UIComponentBase.java:790)
	at javax.faces.component.UIComponentBase.processDecodes(UIComponentBase.java:1047)
	at javax.faces.component.UIForm.processDecodes(UIForm.java:216)
	at javax.faces.component.UIComponentBase.processDecodes(UIComponentBase.java:1042)
	at javax.faces.component.UIComponentBase.processDecodes(UIComponentBase.java:1042)
	at javax.faces.component.UIViewRoot.processDecodes(UIViewRoot.java:941)
	at org.springframework.faces.ui.AjaxViewRoot$2.invokeContextCallback(AjaxViewRoot.java:125)
	at javax.faces.component.UIComponent.invokeOnComponent(UIComponent.java:1253)
	... 61 more
Along with this change the dependency on com.springsource.com.sun.facelets should also be removed and the Facelets implementation in jsf-impl used instead.</description>
			<version>2.1.0.M2</version>
			<fixedVersion>2.1.0.RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.model.SelectionTrackingActionListenerTests.java</file>
			<file type="M">org.springframework.faces.webflow.FlowResourceResolver.java</file>
			<file type="D">org.springframework.faces.webflow.JsfVersion.java</file>
			<file type="M">org.springframework.faces.webflow.FlowViewHandler.java</file>
			<file type="M">org.springframework.webflow.execution.repository.snapshot.SerializedFlowExecutionSnapshot.java</file>
			<file type="M">org.springframework.faces.webflow.FlowViewStateManager.java</file>
			<file type="M">org.springframework.faces.webflow.FlowLifecycle.java</file>
			<file type="M">org.springframework.faces.webflow.FlowApplicationFactory.java</file>
			<file type="M">org.springframework.faces.mvc.JsfView.java</file>
			<file type="D">org.springframework.faces.ui.AjaxJsf2ViewRoot.java</file>
			<file type="M">org.springframework.faces.ui.AjaxViewRoot.java</file>
			<file type="M">org.springframework.faces.webflow.JsfViewFactory.java</file>
			<file type="M">org.springframework.faces.webflow.JsfView.java</file>
			<file type="M">org.springframework.webflow.samples.booking.jsf.BookingController.java</file>
			<file type="M">org.springframework.webflow.samples.booking.jsf.HotelController.java</file>
			<file type="M">org.springframework.webflow.samples.booking.jsf.SearchController.java</file>
		</fixedFiles>
	</bug>
	<bug id="1250" opendate="2010-06-03 17:30:23" fixdate="2010-06-09 02:40:54" resolution="Complete">
		<buginformation>
			<summary>Using history="invalidate" results in ConversionExecutorNotFoundException where target class is org.springframework.webflow.engine.History</summary>
			<description>This would have been handled previously by the StringToLabeledEnum converter.</description>
			<version>2.1.0.RC1</version>
			<fixedVersion>2.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.execution.ScopeType.java</file>
			<file type="M">org.springframework.webflow.action.ResultObjectBasedEventFactoryTests.java</file>
			<file type="M">org.springframework.webflow.mvc.builder.MvcEnvironment.java</file>
			<file type="M">org.springframework.webflow.action.ResultObjectEventFactoryTests.java</file>
			<file type="M">org.springframework.webflow.engine.builder.model.FlowModelFlowBuilder.java</file>
			<file type="M">org.springframework.binding.message.Severity.java</file>
			<file type="M">org.springframework.webflow.engine.History.java</file>
			<file type="M">org.springframework.binding.convert.service.DefaultConversionService.java</file>
			<file type="M">org.springframework.webflow.engine.impl.FlowExecutionStatus.java</file>
			<file type="M">org.springframework.webflow.scope.ScopeRegistrar.java</file>
		</fixedFiles>
	</bug>
	<bug id="1261" opendate="2010-06-24 03:27:50" fixdate="2010-06-24 03:29:21" resolution="Complete">
		<buginformation>
			<summary>Incorrect distribution of methods between FlowApplication and Jsf2FlowApplication</summary>
			<description>Some JSF 1.2 specific methods were erroneously added to Jsf2FlowApplication instead of FlowApplication. This causes backwards compatibility issues with Apache MyFaces 1.2 where some of these methods throw UnsupportedOperationException. </description>
			<version>2.1</version>
			<fixedVersion>2.1.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.Jsf2FlowApplication.java</file>
			<file type="M">org.springframework.faces.webflow.FlowApplication.java</file>
		</fixedFiles>
	</bug>
	<bug id="1053" opendate="2009-03-03 22:45:01" fixdate="2010-07-11 10:39:13" resolution="Complete">
		<buginformation>
			<summary>AjaxTilesView does not handle cascaded attributes properly</summary>
			<description>i have one cascaded attribute in my view:
&amp;lt;definition name="specifyPhone" extends="template"&amp;gt;
		&amp;lt;put-attribute name="handsetTable" value="/WEB-INF/templates/handsets.ftl" cascade="true"/&amp;gt;
		&amp;lt;put-attribute name="body" value="/WEB-INF/templates/specifyPhone.ftl"/&amp;gt;
&amp;lt;/definition&amp;gt;
template contains "body" attribute
body template contains "handsetTable" attribute
the first time i render the full page everything is ok
when i try to specify &amp;amp;apos;handsetTable&amp;amp;apos; as render fragment, nothing gets rendered because of exception: javax.servlet.ServletException: No tiles attribute with a name of &amp;amp;apos;handsetTable&amp;amp;apos; could be found for the current view: org.springframework.js.ajax.tiles2.AjaxTilesView: name &amp;amp;apos;specifyPhone&amp;amp;apos;
when i try to specify &amp;amp;apos;body&amp;amp;apos; as render fragment, body attribute gets rendered, but without handsetTable attribute. I can see the exception in the log: org.apache.tiles.jsp.taglib.NoSuchAttributeException: Attribute &amp;amp;apos;handsetTable&amp;amp;apos; not found.
</description>
			<version>2.0.5</version>
			<fixedVersion>2.1.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.js.ajax.tiles2.AjaxTilesViewTests.java</file>
			<file type="M">org.springframework.js.ajax.tiles2.AjaxTilesView.java</file>
		</fixedFiles>
		<links>
			<link type="Related" description="is related to">1262</link>
		</links>
	</bug>
	<bug id="1263" opendate="2010-06-25 02:25:37" fixdate="2010-07-13 21:19:02" resolution="Complete">
		<buginformation>
			<summary>Split out JSF 2 specific methods from FlowFacesContext for backwards compatibility with JSF 1.2</summary>
			<description>While it is generally possible to  use FlowFacesContext in JSF 1.2 because JSF 2 methods (and types) are never called, if the faces context is used in EL expressions in a JSF view, then the introspection causes all declared methods to load their input and output types causing ClassCastException.</description>
			<version>2.1</version>
			<fixedVersion>2.1.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowFacesContext.java</file>
			<file type="M">org.springframework.faces.webflow.ExternalContextWrapper.java</file>
		</fixedFiles>
	</bug>
	<bug id="1383" opendate="2010-08-18 23:37:01" fixdate="2010-08-25 08:19:27" resolution="Complete">
		<buginformation>
			<summary>Spring Faces throws NPE when writing flow state if JSF servlet is called instead of Spring Dispatcher Servlet</summary>
			<description>Response writer is interrupted and the page up until, but not including the closing &amp;lt;/h:form&amp;gt; tag is rendered, along with an error that extra content was found at the end of the document.
The following is from the server log, pinpointing the error.
It seems like Faces doesn&amp;amp;apos;t double check to make sure SWF is actually being called, then tries to write out the null SWF state to the form, causing this exception, and rendering the Faces Servlet useless if run directly.






WARNING: StandardWrapperValve[Faces Servlet]: PWC1406: Servlet.service() for servlet Faces Servlet threw exception




java.lang.NullPointerException




        at org.springframework.faces.webflow.FlowViewResponseStateManager.writeState(FlowViewResponseStateManager.java:84)




        at com.sun.faces.application.StateManagerImpl.writeState(StateManagerImpl.java:155)




        at org.springframework.faces.webflow.FlowViewStateManager.writeState(FlowViewStateManager.java:114)




        at com.sun.faces.application.view.WriteBehindStateWriter.flushToWriter(WriteBehindStateWriter.java:221)




        at com.sun.faces.application.view.FaceletViewHandlingStrategy.renderView(FaceletViewHandlingStrategy.java:397)




        at com.sun.faces.application.view.MultiViewHandler.renderView(MultiViewHandler.java:126)




        at org.springframework.faces.webflow.FlowViewHandler.renderView(FlowViewHandler.java:99)




        at com.sun.faces.lifecycle.RenderResponsePhase.execute(RenderResponsePhase.java:127)




        at com.sun.faces.lifecycle.Phase.doPhase(Phase.java:101)




        at com.sun.faces.lifecycle.LifecycleImpl.render(LifecycleImpl.java:139)




        at javax.faces.webapp.FacesServlet.service(FacesServlet.java:313)




        at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1523)




        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:279)




        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:188)




        at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:641)




        at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:97)




        at com.sun.enterprise.web.PESessionLockingStandardPipeline.invoke(PESessionLockingStandardPipeline.java:85)




        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:185)




        at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:325)




        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:226)




        at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:165)




        at com.sun.grizzly.http.ProcessorTask.invokeAdapter(ProcessorTask.java:791)




        at com.sun.grizzly.http.ProcessorTask.doProcess(ProcessorTask.java:693)




        at com.sun.grizzly.http.ProcessorTask.process(ProcessorTask.java:954)




        at com.sun.grizzly.http.DefaultProtocolFilter.execute(DefaultProtocolFilter.java:170)




        at com.sun.grizzly.DefaultProtocolChain.executeProtocolFilter(DefaultProtocolChain.java:135)




        at com.sun.grizzly.DefaultProtocolChain.execute(DefaultProtocolChain.java:102)




        at com.sun.grizzly.DefaultProtocolChain.execute(DefaultProtocolChain.java:88)




        at com.sun.grizzly.http.HttpProtocolChain.execute(HttpProtocolChain.java:76)




        at com.sun.grizzly.ProtocolChainContextTask.doCall(ProtocolChainContextTask.java:53)




        at com.sun.grizzly.SelectionKeyContextTask.call(SelectionKeyContextTask.java:57)




        at com.sun.grizzly.ContextTask.run(ContextTask.java:69)




        at com.sun.grizzly.util.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:330)




        at com.sun.grizzly.util.AbstractThreadPool$Worker.run(AbstractThreadPool.java:309)




        at java.lang.Thread.run(Thread.java:637)





</description>
			<version>2.2.0.M1</version>
			<fixedVersion>2.2.0.RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowViewResponseStateManager.java</file>
		</fixedFiles>
	</bug>
	<bug id="1389" opendate="2010-08-25 21:05:26" fixdate="2010-08-31 08:24:26" resolution="Fixed">
		<buginformation>
			<summary>MessageContextErrors doesn&amp;apos;t obey the Errors contract</summary>
			<description>As explained in the above forum thread, MessageContextErrors throws a runtime exception when any class-level JSR-303 @Constraints are violated. The bug is in the rejectValue method:






MessageContextErrors#rejectValue(String, String, Object[], String)






public void rejectValue(String field, String errorCode, Object[] errorArgs, String defaultMessage) {




	field = fixedField(field);




	Class fieldType;




	if (expressionParser != null) {




		FluentParserContext parserContext = new FluentParserContext().evaluate(boundObject.getClass());




                // Bug! Next line assumes field is not blank; Errors contract says it CAN be blank




		fieldType = expressionParser.parseExpression(field, parserContext).getValueType(boundObject);




	} else {




		...




	}




	...




}






As indicated in the comment marked "Bug!", the problem is that the above method expects the "field" argument not to be blank, even though the Errors contract says that it can be (to indicate a global error).
One (the only?) effect of this bug is that class-level JSR-303 constraints do not work properly in Spring Web Flow applications that perform validation by delegating to the Spring JSR-303 validation logic.
Anyone experiencing this bug can work around it by subclassing SpringValidatorAdapter (or LocalValidatorFactoryBean if that&amp;amp;apos;s what you&amp;amp;apos;re currently using) and overriding validate(Object target, Errors errors) it so that it calls Errors#reject(String errorCode, Object[] errorArgs, String defaultMessage) in the case of any class-level violations (i.e. where the field name is blank). I&amp;amp;apos;ll provide some sample code in the forum thread.</description>
			<version>2.1.1</version>
			<fixedVersion>2.2.0.RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.binding.message.MessageContextErrors.java</file>
			<file type="M">org.springframework.binding.message.MessageContextErrorsTests.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="duplicates">823</link>
		</links>
	</bug>
	<bug id="1381" opendate="2010-08-12 11:00:53" fixdate="2010-08-31 12:24:23" resolution="Fixed">
		<buginformation>
			<summary>FlowExecutionImpl: handleException ignores result of another handleException</summary>
			<description>method handleException of class org.springframework.webflow.engine.impl.FlowExecutionImpl calls recursively if another exception during processing of original exception happens, but
no further check about result of exception handling (from recursive method) will be done. As result effort of another exception handling call will be ignored and oldest exception will rethrown 
&amp;lt;code&amp;gt;
boolean handled = false;
		try {
			if (tryStateHandlers(exception, context) || tryFlowHandlers(exception, context)) 
{
				handled = true;
			}
		} catch (FlowExecutionException newException) 
{
			// exception handling itself resulted in a new FlowExecutionException, try to handle it
			handleException(newException, context);
		}
		if (!handled) {
			if (logger.isDebugEnabled()) 
{
				logger.debug("Rethrowing unhandled flow execution exception");
			}
			throw exception;
		}
&amp;lt;/code&amp;gt;
One of possible solution is to give method return value or to store variable handled in ThreadLocal, finally do not forget to re-throw latest not original exception if handling completely failed.</description>
			<version>2.1</version>
			<fixedVersion>2.2.0.RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.engine.impl.FlowExecutionImpl.java</file>
			<file type="M">org.springframework.webflow.engine.impl.FlowExecutionImplTests.java</file>
		</fixedFiles>
	</bug>
	<bug id="1385" opendate="2010-08-24 13:46:00" fixdate="2010-09-02 04:43:47" resolution="Fixed">
		<buginformation>
			<summary>servletRelative redirects don&amp;apos;t work with default-servlet-handler</summary>
			<description>When using the default-servlet-handler element from Spring 3.0.4 and later (and thus mapping the DispatcherServlet to the default servlet), servletRelative redirects on an end state do not work as expected.  
For example, if I have an end state in the "rewards/newReward" flow defined like so:
	&amp;lt;end-state id="rewardConfirmed" view="externalRedirect:servletRelative:/rewards/1" /&amp;gt;
This will not redirect to /rewards/1 as expected.  Instead, it redirects to /rewards/newReward/rewards/1.
It&amp;amp;apos;s worth  noting that as a workaround, a contextRelative redirect works fine.</description>
			<version>2.1</version>
			<fixedVersion>2.2.0.RC1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.mvc.servlet.FlowHandlerAdapterTests.java</file>
			<file type="M">org.springframework.webflow.mvc.servlet.FlowHandlerAdapter.java</file>
		</fixedFiles>
	</bug>
	<bug id="1402" opendate="2010-09-28 14:42:09" fixdate="2010-10-01 02:58:11" resolution="Complete">
		<buginformation>
			<summary>FlowViewResponseStateManager should call delegate isPostback()</summary>
			<description>The new FlowViewResponseStateManager classes uses a delegate for most method calls but lets .isPostback fall through to the super class.
I think that this may cause some problems for non JSF requests as there is a difference between ResponseStateManager (the superclass):
    public boolean isPostback(FacesContext context) 
{
        return (!context.getExternalContext().getRequestParameterMap().isEmpty());
    }

and ResponseStateManagerImpl (the delegate)
    public boolean isPostback(FacesContext context) 
{
        return context.getExternalContext().getRequestParameterMap().
              containsKey(ResponseStateManager.VIEW_STATE_PARAM);
    }

That means any URL with a parameter is considered a postback.
FlowViewResponseStateManager should probably use:
	public boolean isPostback(FacesContext context) 
{
		return delegate.isPostback(context);
	}


It may also be worth considering changing FlowRenderKit.getResponseStateManager() to only return FlowViewResponseStateManager when JsfUtils.isFlowRequest() returns true.</description>
			<version>2.2.0.RC1</version>
			<fixedVersion>2.2.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowRenderKit.java</file>
			<file type="M">org.springframework.faces.webflow.FlowViewResponseStateManager.java</file>
		</fixedFiles>
	</bug>
	<bug id="1406" opendate="2010-10-14 02:22:22" fixdate="2010-10-27 01:03:07" resolution="Fixed">
		<buginformation>
			<summary>Regression in showing global messages only</summary>
			<description>Global messages are identified as follows:
(isGlobalOnly) ? facesContext.getMessages(null) : facesContext.getMessages();
facesContext.getMessages(null) incorrectly returns all messages.
</description>
			<version>2.2.0</version>
			<fixedVersion>2.2.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowFacesContextTests.java</file>
			<file type="M">org.springframework.faces.webflow.FlowFacesContextMessageDelegate.java</file>
		</fixedFiles>
	</bug>
	<bug id="1407" opendate="2010-10-22 03:13:18" fixdate="2010-10-27 01:48:54" resolution="Fixed">
		<buginformation>
			<summary>Webflow 2.2 problem when using MVC view resolver</summary>
			<description>Hello,
currently I experiment with the new Webflow 2.2 release and JSF 2. Using the spring JSF booking sample app as foundation I created a minimal app and try to change some details.
First of all I would like to use the Spring MVC view resolver for resolving Webflow views. Please see the attached sample project for the configuration (it&amp;amp;apos;s an Eclipse project).
When I try this the following exception occurs and the flow ignores the next flow steps:
java.lang.NullPointerException
	at org.springframework.faces.webflow.FlowFacesContextLifecycleListener.requestProcessed(FlowFacesContextLifecycleListener.java:45)
	at org.springframework.webflow.engine.impl.FlowExecutionListeners.fireRequestProcessed(FlowExecutionListeners.java:98)
	at org.springframework.webflow.engine.impl.FlowExecutionImpl.resume(FlowExecutionImpl.java:274)
	at org.springframework.webflow.executor.FlowExecutorImpl.resumeExecution(FlowExecutorImpl.java:169)
	at org.springframework.webflow.mvc.servlet.FlowHandlerAdapter.handle(FlowHandlerAdapter.java:183)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:788)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:717)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:560)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:852)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)
	at java.lang.Thread.run(Thread.java:619)
If I do not use the MVC view resolver everything works as expected. Could you please fix that. Thanks.</description>
			<version>2.2.0</version>
			<fixedVersion>2.2.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.mvc.JsfView.java</file>
		</fixedFiles>
	</bug>
	<bug id="1247" opendate="2010-05-28 00:52:30" fixdate="2010-12-02 06:12:31" resolution="Complete">
		<buginformation>
			<summary>MessageContextErrors ResolveMessageCodes</summary>
			<description>In the MessageContextErrors.rejectValue(...) method the default message is passed into resolveMessageCodes(...) incorrectly.
The current method call is as follows:
resolveMessageCodes(errorCode, defaultMessage, field, fieldType)
The correct method call is as follows:
resolveMessageCodes(errorCode, objectName, field, fieldType)</description>
			<version>2.0.8</version>
			<fixedVersion>2.3.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.binding.message.MessageContextErrors.java</file>
			<file type="M">org.springframework.binding.message.MessageContextErrorsTests.java</file>
		</fixedFiles>
		<links>
			<link type="Depend" description="is depended on by">1419</link>
		</links>
	</bug>
	<bug id="1416" opendate="2010-10-29 03:49:08" fixdate="2010-12-02 11:48:31" resolution="Duplicate">
		<buginformation>
			<summary>Turn off snapshot creation when max-snapshots="0"</summary>
			<description>Creating snapshots involves serializing and compressing the flow execution object, which can lead to issues with some PersistenceContext providers. Having the ability to turn off snapshot creation will provide an option when such issues occur at the cost of losing back button support.</description>
			<version>2.2.1</version>
			<fixedVersion>2.0.2</fixedVersion>
			<type>Improvement</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.execution.repository.impl.DefaultFlowExecutionRepository.java</file>
		</fixedFiles>
	</bug>
	<bug id="1432" opendate="2010-12-03 06:35:56" fixdate="2010-12-03 06:55:19" resolution="Complete">
		<buginformation>
			<summary>JsfAjaxHandler does not set content type when sending a partial response with a redirect instruction</summary>
			<description>After clicking "Find Hotels" in the booking-faces sample, the resulting response (which contains XML) doesn&amp;amp;apos;t have a Content-Type header. As a result the redirect works in some situations but not all. In particular it doesn&amp;amp;apos;t work in MSIE and it doesn&amp;amp;apos;t work if the app is fronted by Apache httpd which adds a stock text/html content-type (apparently browsers won&amp;amp;apos;t recognize this as XML). </description>
			<version>2.2.0</version>
			<fixedVersion>2.3.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.JsfAjaxHandlerTests.java</file>
			<file type="M">org.springframework.faces.webflow.JsfAjaxHandler.java</file>
		</fixedFiles>
		<links>
			<link type="Depend" description="is depended on by">1426</link>
		</links>
	</bug>
	<bug id="1461" opendate="2011-03-11 12:25:20" fixdate="2011-06-30 02:47:22" resolution="Complete">
		<buginformation>
			<summary>NPE in FlowViewStateManager.saveView when not a flow request</summary>
			<description>When rendering a JSF view that is not part of flow request a NullPointerException is thrown:






java.lang.NullPointerException




	at org.springframework.faces.webflow.FlowViewStateManager.saveView(FlowViewStateManager.java:181)




	at com.sun.faces.application.view.WriteBehindStateWriter.flushToWriter(WriteBehindStateWriter.java:221)




	at com.sun.faces.application.view.FaceletViewHandlingStrategy.renderView(FaceletViewHandlingStrategy.java:406)




	at com.sun.faces.application.view.MultiViewHandler.renderView(MultiViewHandler.java:127)




	at org.springframework.faces.webflow.FlowViewHandler.renderView(FlowViewHandler.java:99)




	at javax.faces.application.ViewHandlerWrapper.renderView(ViewHandlerWrapper.java:269)




	at org.springframework.faces.webflow.FlowViewHandler.renderView(FlowViewHandler.java:99)




	at com.sun.faces.lifecycle.RenderResponsePhase.execute(RenderResponsePhase.java:117)




	at com.sun.faces.lifecycle.Phase.doPhase(Phase.java:97)




	at com.sun.faces.lifecycle.LifecycleImpl.render(LifecycleImpl.java:135)




	at org.springframework.springfaces.FacesView.renderMergedOutputModel(FacesView.java:39)




	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250)




	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1047)




	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:817)




	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719)




	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644)




	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549)




	at javax.servlet.http.HttpServlet.service(HttpServlet.java:617)




	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)




	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)




	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)




	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)




	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)




	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)




	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)




	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)




	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)




	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)




	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)




	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)




	at java.lang.Thread.run(Thread.java:662)






The StateManager should probably just delegate if JsfUtils.isFlowRequest() returns false:






if (context.getViewRoot().isTransient()) {




  return null;




}




if(!JsfUtils.isFlowRequest()) {




  return delegate.saveView(context);




}




FlowSerializedView view = null;




if (JsfRuntimeInformation.isPartialStateSavingSupported()) {




  Object[] state = (Object[]) delegate.saveView(context);




  view = new FlowSerializedView(context.getViewRoot().getViewId(), state[0], state[1]);




} else {




  view = new FlowSerializedView(context.getViewRoot().getViewId(), getTreeStructureToSave(context),




				getComponentStateToSave(context));




}




...





</description>
			<version>2.3.0</version>
			<fixedVersion>2.3.1</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.faces.webflow.FlowViewStateManager.java</file>
		</fixedFiles>
	</bug>
	<bug id="1437" opendate="2010-12-13 06:46:57" fixdate="2013-08-16 08:46:12" resolution="Complete">
		<buginformation>
			<summary>Two concurrent threads in an expression of a flow override the rootobject of evaluation context</summary>
			<description>When two concurrent threads are evaluating an expression contained in a flow, the evaluation context linked to the expression can be overriden by multiple threads.
Result is in most of cases NullPointerException in a getValueInternal of classes from  org.springframework.expression.spel.ast package (like PropertyOrFieldReference for example).
Wrong code seems to be in org.springframework.binding.expression.spel.SpringELExpression :
	public Object getValue(Object rootObject) throws EvaluationException {
		try {
			updateEvaluationContext(rootObject);
			return expression.getValue(evaluationContext, expectedType);
...
As the SpringElExpression is unique for the expression to be evaluated, it&amp;amp;apos;s not thread safe when updating the evaluation context with root object.
Synchronize this method resolves problem.
</description>
			<version>2.2.1</version>
			<fixedVersion>2.3.0</fixedVersion>
			<type>Bug</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.binding.expression.spel.SpringELExpressionParser.java</file>
			<file type="M">org.springframework.binding.expression.spel.SpringELExpression.java</file>
		</fixedFiles>
		<links>
			<link type="Relate" description="relates to">1606</link>
		</links>
	</bug>
	<bug id="314" opendate="2007-05-22 04:49:05" fixdate="2015-08-11 09:34:22" resolution="Duplicate">
		<buginformation>
			<summary>Add a convenient config option for plugging in a custom FlowExecutionContinuationFactory</summary>
			<description>I would like to use continuation flow but I&amp;amp;apos;m using classes that can&amp;amp;apos;t be serialized.
Using &amp;lt;bean&amp;gt; definitions I can define a custom FlowExecutionContinuationFactoryr to do this but it
makes for a very wordy xml file.
By adding an option to &amp;lt;flow:executor&amp;gt; this would be vastly simplified
   George</description>
			<version>1.0.3</version>
			<fixedVersion></fixedVersion>
			<type>New Feature</type>
		</buginformation>
		<fixedFiles>
			<file type="M">org.springframework.webflow.execution.repository.impl.DefaultFlowExecutionRepository.java</file>
		</fixedFiles>
		<links>
			<link type="Duplicate" description="is duplicated by">530</link>
		</links>
	</bug>
</bugrepository>