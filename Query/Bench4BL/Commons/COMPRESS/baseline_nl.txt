302	Retore immutability thread safety to ArchiveStreamFactoryCOMPRESS 180 added support for encoding  Unfortunately this was done in a way that broke immutability  Also the factory is no longer thread safe as the encoding field is not synch volatile  Consider whether to restore immutability  e g  by adding a constuctor which takes the encoding setting  The setEntryEncoding method could be deprecated intitially and eventually dropped  One way to support immutability now would be to add a second final encoding field which is set by a new ctor  See patch to follow
303	Restore immutability thread safety to CompressorStreamFactoryCompressorStreamFactory was immutable prior to 1 5  r1453945 broke immutability  It s also no longer thread safe because the field decompressConcatenated is not safely published  It would be possible to make it thread safe by making the field volatile  It could be made conditionally immutable by using the same technique as suggested in COMPRESS 302  in preparation for removing the method setDecompressConcatenated in a future API break release
357	BZip2CompressorOutputStream can affect output stream incorrectly  BZip2CompressorOutputStream has an unsynchronized finished   method  and an unsynchronized finalize method  Finish checks to see if the output stream is null  and if it is not it calls various methods  some of which write to the output stream  Now  consider something like this sequence  BZip2OutputStream s           s close    s   null  After the s   null  the stream is garbage  At some point the garbage collector call finalize    which calls finish    But  since the GC may be on a different thread  there is no guarantee that the assignment this out   null in finish   has actually been made visible to the GC thread  which results in bad data in the output stream  This is not a theoretical problem  In a part of a large project I m working on  this happens about 2  of the time  The fixes are simple 1  synchronize finish   or 2  don t call finish from finalize    A workaround is to derive a class and override the finalize   method