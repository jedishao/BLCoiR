<!-- 
RSS generated by JIRA (7.2.3#72005-sha1:73be91d2b96fc29303a7eb6820acf420e5d0ed65) at Tue Dec 06 12:42:37 EST 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.jboss.org/si/jira.issueviews:issue-xml/WFLY-4696/WFLY-4696.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>JBoss Issue Tracker</title>
    <link>https://issues.jboss.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>7.2.3</version>
        <build-number>72005</build-number>
        <build-date>06-10-2016</build-date>
    </build-info>

<item>
            <title>[WFLY-4696] OutOfMemory DirectByteBuffer XNIO</title>
                <link>https://issues.jboss.org/browse/WFLY-4696</link>
                <project id="12313721" key="WFLY">WildFly</project>
                    <description>&lt;p&gt;I get this errors constantly in my server when a web connection is interrupted from the browser for instance:&lt;/p&gt;

&lt;p&gt;11:50:45,301 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;stderr&amp;#93;&lt;/span&gt; (default task-339) Exception in thread &quot;default task-339&quot; java.nio.BufferOverflowException&lt;br/&gt;
11:50:45,301 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;stderr&amp;#93;&lt;/span&gt; (default task-339) 	at java.nio.DirectByteBuffer.put(DirectByteBuffer.java:363)&lt;br/&gt;
11:50:45,301 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;stderr&amp;#93;&lt;/span&gt; (default task-339) 	at java.nio.ByteBuffer.put(ByteBuffer.java:859)&lt;br/&gt;
11:50:45,301 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;stderr&amp;#93;&lt;/span&gt; (default task-339) 	at io.undertow.util.HttpString.appendTo(HttpString.java:204)&lt;br/&gt;
11:50:45,301 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;stderr&amp;#93;&lt;/span&gt; (default task-339) 	at io.undertow.server.protocol.http.HttpResponseConduit.processWrite(HttpResponseConduit.java:150)&lt;br/&gt;
11:50:45,301 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;stderr&amp;#93;&lt;/span&gt; (default task-339) 	at io.undertow.server.protocol.http.HttpResponseConduit.flush(HttpResponseConduit.java:629)&lt;br/&gt;
11:50:45,301 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;stderr&amp;#93;&lt;/span&gt; (default task-339) 	at io.undertow.conduits.AbstractFixedLengthStreamSinkConduit.flush(AbstractFixedLengthStreamSinkConduit.java:205)&lt;br/&gt;
11:50:45,301 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;stderr&amp;#93;&lt;/span&gt; (default task-339) 	at org.xnio.conduits.ConduitStreamSinkChannel.flush(ConduitStreamSinkChannel.java:162)&lt;br/&gt;
11:50:45,301 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;stderr&amp;#93;&lt;/span&gt; (default task-339) 	at io.undertow.channels.DetachableStreamSinkChannel.flush(DetachableStreamSinkChannel.java:100)&lt;br/&gt;
11:50:45,301 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;stderr&amp;#93;&lt;/span&gt; (default task-339) 	at io.undertow.server.HttpServerExchange.closeAndFlushResponse(HttpServerExchange.java:1489)&lt;br/&gt;
11:50:45,317 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;stderr&amp;#93;&lt;/span&gt; (default task-339) 	at io.undertow.server.HttpServerExchange.endExchange(HttpServerExchange.java:1470)&lt;br/&gt;
11:50:45,317 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;stderr&amp;#93;&lt;/span&gt; (default task-339) 	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:201)&lt;br/&gt;
11:50:45,317 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;stderr&amp;#93;&lt;/span&gt; (default task-339) 	at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:727)&lt;br/&gt;
11:50:45,317 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;stderr&amp;#93;&lt;/span&gt; (default task-339) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)&lt;br/&gt;
11:50:45,317 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;stderr&amp;#93;&lt;/span&gt; (default task-339) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)&lt;br/&gt;
11:50:45,317 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;stderr&amp;#93;&lt;/span&gt; (default task-339) 	at java.lang.Thread.run(Thread.java:745)&lt;/p&gt;




&lt;p&gt;And then, I think this errors lead to a OutOfMemory crash:&lt;/p&gt;



&lt;p&gt;14:23:09,592 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;org.xnio.listener&amp;#93;&lt;/span&gt; (default I/O-3) XNIO001007: A channel event listener threw an exception: java.lang.OutOfMemoryError&lt;br/&gt;
	at sun.misc.Unsafe.allocateMemory(Native Method) &lt;span class=&quot;error&quot;&gt;&amp;#91;rt.jar:1.8.0_20&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at java.nio.DirectByteBuffer.&amp;lt;init&amp;gt;(DirectByteBuffer.java:127) &lt;span class=&quot;error&quot;&gt;&amp;#91;rt.jar:1.8.0_20&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311) &lt;span class=&quot;error&quot;&gt;&amp;#91;rt.jar:1.8.0_20&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.BufferAllocator$2.allocate(BufferAllocator.java:57) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.2.2.Final.jar:3.2.2.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.BufferAllocator$2.allocate(BufferAllocator.java:55) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.2.2.Final.jar:3.2.2.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ByteBufferSlicePool.allocate(ByteBufferSlicePool.java:149) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.2.2.Final.jar:3.2.2.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ssl.JsseSslConduitEngine.&amp;lt;init&amp;gt;(JsseSslConduitEngine.java:143) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.2.2.Final.jar:3.2.2.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ssl.JsseSslStreamConnection.&amp;lt;init&amp;gt;(JsseSslStreamConnection.java:71) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.2.2.Final.jar:3.2.2.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ssl.JsseAcceptingSslStreamConnection.accept(JsseAcceptingSslStreamConnection.java:45) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.2.2.Final.jar:3.2.2.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ssl.JsseAcceptingSslStreamConnection.accept(JsseAcceptingSslStreamConnection.java:37) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.2.2.Final.jar:3.2.2.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ssl.AbstractAcceptingSslChannel.accept(AbstractAcceptingSslChannel.java:187) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.2.2.Final.jar:3.2.2.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ChannelListeners$10.handleEvent(ChannelListeners.java:289) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.2.2.Final.jar:3.2.2.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ChannelListeners$10.handleEvent(ChannelListeners.java:286) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.2.2.Final.jar:3.2.2.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.2.2.Final.jar:3.2.2.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ChannelListeners$DelegatingChannelListener.handleEvent(ChannelListeners.java:1092) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.2.2.Final.jar:3.2.2.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.2.2.Final.jar:3.2.2.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.nio.NioTcpServerHandle.handleReady(NioTcpServerHandle.java:53) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-nio-3.2.2.Final.jar:3.2.2.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.nio.WorkerThread.run(WorkerThread.java:539) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-nio-3.2.2.Final.jar:3.2.2.Final&amp;#93;&lt;/span&gt;&lt;/p&gt;




&lt;p&gt;This is the trace for version 8.2 of WildFly:&lt;/p&gt;

&lt;p&gt;17:17:16,957 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;io.undertow.request&amp;#93;&lt;/span&gt; (default task-49) Undertow request failed HttpServerExchange&lt;/p&gt;
{ GET /modulab/servlet/ShowPDFReportServlet}
&lt;p&gt;: java.nio.BufferOverflowException&lt;br/&gt;
	at java.nio.DirectByteBuffer.put(DirectByteBuffer.java:363) &lt;span class=&quot;error&quot;&gt;&amp;#91;rt.jar:1.8.0_20&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at java.nio.ByteBuffer.put(ByteBuffer.java:859) &lt;span class=&quot;error&quot;&gt;&amp;#91;rt.jar:1.8.0_20&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at io.undertow.util.HttpString.appendTo(HttpString.java:204)&lt;br/&gt;
	at io.undertow.server.protocol.http.HttpResponseConduit.processWrite(HttpResponseConduit.java:166)&lt;br/&gt;
	at io.undertow.server.protocol.http.HttpResponseConduit.write(HttpResponseConduit.java:564)&lt;br/&gt;
	at io.undertow.conduits.AbstractFixedLengthStreamSinkConduit.write(AbstractFixedLengthStreamSinkConduit.java:106)&lt;br/&gt;
	at org.xnio.conduits.Conduits.writeFinalBasic(Conduits.java:132) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.3.0.Final.jar:3.3.0.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at io.undertow.conduits.AbstractFixedLengthStreamSinkConduit.writeFinal(AbstractFixedLengthStreamSinkConduit.java:175)&lt;br/&gt;
	at org.xnio.conduits.ConduitStreamSinkChannel.writeFinal(ConduitStreamSinkChannel.java:104) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.3.0.Final.jar:3.3.0.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at io.undertow.channels.DetachableStreamSinkChannel.writeFinal(DetachableStreamSinkChannel.java:194)&lt;br/&gt;
	at io.undertow.server.HttpServerExchange$WriteDispatchChannel.writeFinal(HttpServerExchange.java:1829)&lt;br/&gt;
	at io.undertow.servlet.spec.ServletOutputStreamImpl.writeBufferBlocking(ServletOutputStreamImpl.java:565)&lt;br/&gt;
	at io.undertow.servlet.spec.ServletOutputStreamImpl.close(ServletOutputStreamImpl.java:600)&lt;br/&gt;
	at io.undertow.servlet.spec.HttpServletResponseImpl.closeStreamAndWriter(HttpServletResponseImpl.java:497)&lt;br/&gt;
	at io.undertow.servlet.spec.HttpServletResponseImpl.responseDone(HttpServletResponseImpl.java:581)&lt;br/&gt;
	at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:308)&lt;br/&gt;
	at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:247)&lt;br/&gt;
	at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:76)&lt;br/&gt;
	at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:166)&lt;br/&gt;
	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:197)&lt;br/&gt;
	at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:759)&lt;br/&gt;
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) &lt;span class=&quot;error&quot;&gt;&amp;#91;rt.jar:1.8.0_20&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) &lt;span class=&quot;error&quot;&gt;&amp;#91;rt.jar:1.8.0_20&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at java.lang.Thread.run(Thread.java:745) &lt;span class=&quot;error&quot;&gt;&amp;#91;rt.jar:1.8.0_20&amp;#93;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;10:57:12,389 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;org.xnio.listener&amp;#93;&lt;/span&gt; (default I/O-4) XNIO001007: A channel event listener threw an exception: java.lang.OutOfMemoryError&lt;br/&gt;
	at sun.misc.Unsafe.allocateMemory(Native Method) &lt;span class=&quot;error&quot;&gt;&amp;#91;rt.jar:1.8.0_20&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at java.nio.DirectByteBuffer.&amp;lt;init&amp;gt;(DirectByteBuffer.java:127) &lt;span class=&quot;error&quot;&gt;&amp;#91;rt.jar:1.8.0_20&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311) &lt;span class=&quot;error&quot;&gt;&amp;#91;rt.jar:1.8.0_20&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.BufferAllocator$2.allocate(BufferAllocator.java:57) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.3.0.Final.jar:3.3.0.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.BufferAllocator$2.allocate(BufferAllocator.java:55) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.3.0.Final.jar:3.3.0.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ByteBufferSlicePool.allocate(ByteBufferSlicePool.java:143) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.3.0.Final.jar:3.3.0.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ssl.JsseSslConduitEngine.&amp;lt;init&amp;gt;(JsseSslConduitEngine.java:146) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.3.0.Final.jar:3.3.0.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ssl.JsseSslStreamConnection.&amp;lt;init&amp;gt;(JsseSslStreamConnection.java:71) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.3.0.Final.jar:3.3.0.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ssl.JsseAcceptingSslStreamConnection.accept(JsseAcceptingSslStreamConnection.java:45) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.3.0.Final.jar:3.3.0.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ssl.JsseAcceptingSslStreamConnection.accept(JsseAcceptingSslStreamConnection.java:37) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.3.0.Final.jar:3.3.0.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ssl.AbstractAcceptingSslChannel.accept(AbstractAcceptingSslChannel.java:187) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.3.0.Final.jar:3.3.0.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ChannelListeners$10.handleEvent(ChannelListeners.java:289) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.3.0.Final.jar:3.3.0.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ChannelListeners$10.handleEvent(ChannelListeners.java:286) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.3.0.Final.jar:3.3.0.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.3.0.Final.jar:3.3.0.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ChannelListeners$DelegatingChannelListener.handleEvent(ChannelListeners.java:1092) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.3.0.Final.jar:3.3.0.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-api-3.3.0.Final.jar:3.3.0.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.nio.NioTcpServerHandle.handleReady(NioTcpServerHandle.java:53) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-nio-3.3.0.Final.jar:3.3.0.Final&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.xnio.nio.WorkerThread.run(WorkerThread.java:539) &lt;span class=&quot;error&quot;&gt;&amp;#91;xnio-nio-3.3.0.Final.jar:3.3.0.Final&amp;#93;&lt;/span&gt;&lt;/p&gt;



</description>
                <environment></environment>
        <key id="12573142">WFLY-4696</key>
            <summary>OutOfMemory DirectByteBuffer XNIO</summary>
                <type id="1" iconUrl="https://issues.jboss.org/secure/viewavatar?size=xsmall&amp;avatarId=13263&amp;avatarType=issuetype">Bug</type>
                                            <priority id="1" iconUrl="https://issues.jboss.org/images/icons/priorities/blocker.svg">Blocker</priority>
                        <status id="5" iconUrl="https://issues.jboss.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Done</resolution>
                                        <assignee username="swd847">Stuart Douglas</assignee>
                                    <reporter username="carlosra85">Carlos Rodr&#237;guez Aguado</reporter>
                        <labels>
                    </labels>
                <created>Thu, 28 May 2015 10:51:17 -0400</created>
                <updated>Mon, 14 Sep 2015 21:43:06 -0400</updated>
                            <resolved>Mon, 14 Sep 2015 21:43:06 -0400</resolved>
                                    <version>8.1.0.Final</version>
                    <version>8.2.0.Final</version>
                    <version>9.0.0.Final</version>
                                    <fixVersion>10.0.0.CR1</fixVersion>
                                    <component>IO</component>
                    <component>Web (Undertow)</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13072634" author="swd847" created="Mon, 1 Jun 2015 06:17:21 -0400"  >&lt;p&gt;That stack trace looks like it is from 8.1.0.Final, and a lot of the code has changed in that version. Can you post a more up to date stack trace?&lt;/p&gt;</comment>
                            <comment id="13073278" author="carlosra85" created="Tue, 2 Jun 2015 11:26:40 -0400"  >&lt;p&gt;I have attached the trace for versi&#243;n 8.2.0 Final of WildFly&lt;/p&gt;</comment>
                            <comment id="13073310" author="swd847" created="Tue, 2 Jun 2015 11:59:30 -0400"  >&lt;p&gt;Have you configured a custom very small buffer size? And can you check the output of HttpServletRequest#getProtocol() ?&lt;/p&gt;

&lt;p&gt;The error occurs when we attempt to the protocol into the response buffer, which basically means:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Either the buffer has been configured to be to small for Undertow to use&lt;/li&gt;
	&lt;li&gt;The protocol is super long for some reason&lt;/li&gt;
	&lt;li&gt;Some other bug that results in a full buffer at that point&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13073312" author="swd847" created="Tue, 2 Jun 2015 12:02:24 -0400"  >&lt;p&gt;There was a bug in that version of Undertow where it would potentially allow any protocol to be used. One cause of this could be a misbehaving or malicious client sending a mangled HTTP request, however that seems unlikely.&lt;/p&gt;</comment>
                            <comment id="13073407" author="carlosra85" created="Tue, 2 Jun 2015 15:12:13 -0400"  >&lt;p&gt;I suppose that you are referring to the parameter buffer-size that can be customized in io subsystem:&lt;/p&gt;

&lt;p&gt;        &amp;lt;subsystem xmlns=&quot;urn:jboss:domain:io:1.1&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;worker name=&quot;default&quot;/&amp;gt;&lt;br/&gt;
            &amp;lt;buffer-pool name=&quot;default&quot; &lt;font color=&quot;red&quot;&gt;buffer-size=&quot;value&quot;&lt;/font&gt;/&amp;gt;&lt;br/&gt;
        &amp;lt;/subsystem&amp;gt;&lt;/p&gt;

&lt;p&gt;With the default value (we read that is 16384) the problem is reproduced. We tried to decrease the value to 8192 but the effect was exactly the same. Must we increase it to 32768 or 65536?&lt;/p&gt;

&lt;p&gt;The protocol is https.&lt;/p&gt;</comment>
                            <comment id="13073409" author="carlosra85" created="Tue, 2 Jun 2015 15:26:44 -0400"  >&lt;p&gt;We have been investigating the source code of class HttpResponseConduit in line 166 where java.nio.BufferOverflowException is thrown.&lt;/p&gt;

&lt;p&gt;Just a few lines above an allocate() is executed. If java.nio.BufferOverflowException is thrown in line 166 we think that memory allocated could not be free properly because method bufferDone() is never executed. Could it be the reason of the OutOfMemory?&lt;/p&gt;

&lt;p&gt;159        if(pooledBuffer == null) {&lt;br/&gt;
160           pooledBuffer = &lt;font color=&quot;red&quot;&gt;pool.allocate();&lt;/font&gt;&lt;br/&gt;
161       }&lt;br/&gt;
162       ByteBuffer buffer = pooledBuffer.getResource();&lt;br/&gt;
163&lt;br/&gt;
164&lt;br/&gt;
165       assert buffer.remaining() &amp;gt;= 0x100;&lt;br/&gt;
166       &lt;font color=&quot;red&quot;&gt;exchange.getProtocol().appendTo(buffer);&lt;/font&gt;&lt;br/&gt;
.&lt;br/&gt;
.&lt;br/&gt;
.&lt;br/&gt;
255        bufferDone();&lt;br/&gt;
.&lt;br/&gt;
.&lt;/p&gt;

&lt;p&gt;    private void bufferDone() {&lt;br/&gt;
        HttpServerConnection connection = (HttpServerConnection)exchange.getConnection();&lt;br/&gt;
        if(connection.getExtraBytes() != null &amp;amp;&amp;amp; connection.isOpen() &amp;amp;&amp;amp; exchange.isRequestComplete()) &lt;/p&gt;
{
            //if we are pipelining we hold onto the buffer
            pooledBuffer.getResource().clear();
        }
&lt;p&gt; else &lt;/p&gt;
{

            pooledBuffer.free();
            pooledBuffer = null;
        }
&lt;p&gt;    }&lt;/p&gt;



</comment>
                            <comment id="13073557" author="swd847" created="Wed, 3 Jun 2015 04:56:14 -0400"  >&lt;p&gt;Yes, that explains the out of memory, however it does not explain the reason for the BufferOverflowException, which is the underlying cause. &lt;/p&gt;</comment>
                            <comment id="13073564" author="swd847" created="Wed, 3 Jun 2015 05:13:49 -0400"  >&lt;p&gt;I have updated Undertow to free the buffer on exception, however I would really like to understand the root cause. &lt;/p&gt;</comment>
                            <comment id="13073646" author="carlosra85" created="Wed, 3 Jun 2015 08:34:11 -0400"  >&lt;p&gt;Yesterday we modified the source code to free the buffer on BufferOverflowException. In a few days we will know if the outofmemory is solved or not, or if exists other memoryleak. We have been monitoring the problem with jvisualvm, trying to discover where is the memoryleak, but the problem is that it is a memory leak in native memory.&lt;/p&gt;


</comment>
                            <comment id="13079061" author="swd847" created="Mon, 15 Jun 2015 08:43:47 -0400"  >&lt;p&gt;This should be fixed now, the buffer will be freed on exception&lt;/p&gt;</comment>
                            <comment id="13088985" author="carlosra85" created="Mon, 13 Jul 2015 13:05:32 -0400"  >&lt;p&gt;The problem has not been solved. &lt;/p&gt;

&lt;p&gt;The memory leak continues. &lt;b&gt;We have a attached a video showing the problem: wlfy.mp4&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;In the video we had just started WildFly 8.2 Final. We opened also jvisualvm to monitorize the direct buffer pools, where memory is not being released. We entered to our web application (servlets, jsps, AJAX, jQuery) and began to  reproduce the problem just refreshing/reloading (F5) the browser very fast. The server responses but channel is broken before the response arrives to the client (browser). After a few seconds direct buffers pool memory had increased and after executing a GC the memory is not released in the direct buffer pool (only released in java heap).&lt;/p&gt;

&lt;p&gt;We have been working a lot of time in this problem. We have been investigating where the memory was not released. We found that 3 direct buffer pools of class org.xnio.ssl.JsseSslConduitEngine were not released:&lt;/p&gt;

&lt;p&gt;  /** The buffer into which incoming SSL data is written. */&lt;br/&gt;
  private final Pooled&amp;lt;ByteBuffer&amp;gt; receiveBuffer;&lt;/p&gt;

&lt;p&gt;  /** The buffer from which outbound SSL data is sent. */&lt;br/&gt;
  private final Pooled&amp;lt;ByteBuffer&amp;gt; sendBuffer;&lt;/p&gt;

&lt;p&gt;  /** The buffer into which inbound clear data is written. */&lt;br/&gt;
  private final Pooled&amp;lt;ByteBuffer&amp;gt; readBuffer;&lt;/p&gt;

&lt;p&gt;We investigated how to release this buffers and finally we changed the code of write() methods in class io.undertow.server.protocol.http.HttpResponseConduit adding a try/catch to call to a generic method to free the entire connection in the exchange:&lt;/p&gt;

&lt;p&gt;   public int write(final ByteBuffer src) throws IOException&lt;br/&gt;
  {&lt;br/&gt;
    int oldState = this.state;&lt;br/&gt;
    int state = oldState &amp;amp; MASK_STATE;&lt;br/&gt;
    int alreadyWritten = 0;&lt;br/&gt;
    int originalRemaining = -1;&lt;br/&gt;
    try&lt;br/&gt;
    {&lt;br/&gt;
      if (state != 0)&lt;br/&gt;
      {&lt;br/&gt;
        originalRemaining = src.remaining();&lt;br/&gt;
        state = processWrite(state, src, -1, -1);&lt;br/&gt;
        if (state != 0)&lt;/p&gt;
        {
          return 0;
        }
&lt;p&gt;        alreadyWritten = originalRemaining - src.remaining();&lt;br/&gt;
        if (allAreSet(oldState, FLAG_SHUTDOWN))&lt;/p&gt;
        {
          next.terminateWrites();
          throw new ClosedChannelException();
        }&lt;br/&gt;
      }&lt;br/&gt;
      if (alreadyWritten != originalRemaining)&lt;br/&gt;
      {
        return next.write(src) + alreadyWritten;
      }&lt;br/&gt;
      return alreadyWritten;&lt;br/&gt;
	}&lt;br/&gt;
    &lt;br/&gt;
	//CATCH ADDED!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;br/&gt;
	&lt;br/&gt;
	catch (IOException | RuntimeException re)&lt;br/&gt;
    {&lt;br/&gt;
&lt;br/&gt;
      try&lt;br/&gt;
      {
        exchange.getRequestChannel().suspendReads();
      }&lt;br/&gt;
      catch (Exception e)&lt;br/&gt;
      {&lt;br/&gt;
      }&lt;br/&gt;
      try&lt;br/&gt;
      {
        exchange.getResponseChannel().shutdownWrites();
      }&lt;br/&gt;
      catch (Exception e)&lt;br/&gt;
      {&lt;br/&gt;
      }&lt;br/&gt;
      try&lt;br/&gt;
      {
        ((HttpServerConnection) exchange.getConnection()).getChannel().getSinkChannel().shutdownWrites();
      }&lt;br/&gt;
      catch (Exception e)&lt;br/&gt;
      {&lt;br/&gt;
      }&lt;br/&gt;
      IoUtils.safeClose(exchange.getConnection());&lt;br/&gt;
&lt;br/&gt;
      throw re;&lt;br/&gt;
    } //END CATCH ADDED!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;br/&gt;
    finally&lt;br/&gt;
    {
      this.state = oldState &amp;amp; ~MASK_STATE | state;
    }&lt;br/&gt;
  }&lt;br/&gt;
&lt;br/&gt;
  public long write(final ByteBuffer[] srcs) throws IOException&lt;br/&gt;
  {
    return write(srcs, 0, srcs.length);
  }&lt;br/&gt;
&lt;br/&gt;
  public long write(final ByteBuffer[] srcs, final int offset, final int length) throws IOException&lt;br/&gt;
  {&lt;br/&gt;
    if (length == 0)&lt;br/&gt;
    {
      return 0L;
    }&lt;br/&gt;
    int oldVal = state;&lt;br/&gt;
    int state = oldVal &amp;amp; MASK_STATE;&lt;br/&gt;
    try&lt;br/&gt;
    {&lt;br/&gt;
      if (state != 0)&lt;br/&gt;
      {&lt;br/&gt;
        long rem = Buffers.remaining(srcs, offset, length);&lt;br/&gt;
        state = processWrite(state, srcs, offset, length);&lt;br/&gt;
&lt;br/&gt;
        long ret = rem - Buffers.remaining(srcs, offset, length);&lt;br/&gt;
        if (state != 0)&lt;br/&gt;
        {
          return ret;
        }&lt;br/&gt;
        if (allAreSet(oldVal, FLAG_SHUTDOWN))&lt;br/&gt;
        {
          next.terminateWrites();
          throw new ClosedChannelException();
        }
&lt;p&gt;        //we don&apos;t attempt to write again&lt;br/&gt;
        return ret;&lt;br/&gt;
      }&lt;br/&gt;
      return length == 1 ? next.write(srcs&lt;span class=&quot;error&quot;&gt;&amp;#91;offset&amp;#93;&lt;/span&gt;) : next.write(srcs, offset, length);&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;	//CATCH ADDED!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;/p&gt;

&lt;p&gt;	catch (IOException | RuntimeException re)&lt;br/&gt;
    {&lt;/p&gt;

&lt;p&gt;      try&lt;/p&gt;
      {
        exchange.getRequestChannel().suspendReads();
      }
&lt;p&gt;      catch (Exception e)&lt;br/&gt;
      {&lt;br/&gt;
      }&lt;br/&gt;
      try&lt;/p&gt;
      {
        exchange.getResponseChannel().shutdownWrites();
      }
&lt;p&gt;      catch (Exception e)&lt;br/&gt;
      {&lt;br/&gt;
      }&lt;br/&gt;
      try&lt;/p&gt;
      {
        ((HttpServerConnection) exchange.getConnection()).getChannel().getSinkChannel().shutdownWrites();
      }
&lt;p&gt;      catch (Exception e)&lt;br/&gt;
      {&lt;br/&gt;
      }&lt;br/&gt;
      IoUtils.safeClose(exchange.getConnection());&lt;/p&gt;

&lt;p&gt;      throw re;&lt;br/&gt;
    } //END CATCH ADDED!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;br/&gt;
    finally&lt;/p&gt;
    {
      this.state = oldVal &amp;amp; ~MASK_STATE | state;
    }
&lt;p&gt;  }&lt;/p&gt;

&lt;p&gt;We tested these changes and obtained an improvement:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Before: OutOfMemory was reproduced in 4 or 5 days&lt;/li&gt;
	&lt;li&gt;After: More than 2 weeks working and OutOfMemory has not been reproduced!. &lt;b&gt;But the memory is still increasing!!&lt;/b&gt; Maybe exists another memory leak or the solution we applied is not the right one.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We tried also with WildFly 9 CR1 but the same problem occurs.&lt;/p&gt;

&lt;p&gt;We don&apos;t understand how it is possible that this problem doesn&apos;t occur to more WildFly users.&lt;/p&gt;

&lt;p&gt;Please, can you help us?.&lt;/p&gt;




</comment>
                            <comment id="13089061" author="jaikiran" created="Mon, 13 Jul 2015 21:29:09 -0400"  >&lt;blockquote&gt;
&lt;p&gt;We tried also with WildFly 9 CR1 but the same problem occurs.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The fixed version on this JIRA states that it&apos;s been fixed in 9.0.0.CR2. So you will have to try that version or the latest released 9.0.0.Final (recommended) from here &lt;a href=&quot;http://wildfly.org/downloads/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wildfly.org/downloads/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13089103" author="carlosra85" created="Tue, 14 Jul 2015 03:04:12 -0400"  >&lt;p&gt;The problem is not solved with this patch. We added the fixed code to version 8.2 and any improvement noted.&lt;/p&gt;

&lt;p&gt;We are going to test it again with version 9.0.0 Final and publish another video with the problem (if reproduced).&lt;/p&gt;
</comment>
                            <comment id="13089177" author="carlosra85" created="Tue, 14 Jul 2015 05:48:04 -0400"  >&lt;p&gt;The same problem continues on WildFly 9.0.0 Final. We have attached another video showing the problem: &lt;b&gt;wfly_9_0_0_final.mp4&lt;/b&gt;&lt;/p&gt;</comment>
                            <comment id="13094860" author="swd847" created="Sun, 2 Aug 2015 20:43:02 -0400"  >&lt;p&gt;Cal you try out this XNIO fix? &lt;a href=&quot;https://github.com/xnio/xnio/commit/b30ac9dbeeab484f1b8a366944bba4c17357b816&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/xnio/xnio/commit/b30ac9dbeeab484f1b8a366944bba4c17357b816&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should be able to test it out by using Xnio 3.4.0.Beta1.&lt;/p&gt;</comment>
                            <comment id="13099650" author="swd847" created="Tue, 18 Aug 2015 20:53:36 -0400"  >&lt;p&gt;Any news on this?&lt;/p&gt;</comment>
                            <comment id="13100064" author="carlosra85" created="Thu, 20 Aug 2015 03:23:08 -0400"  >&lt;p&gt;Sorry, we were on vacations.&lt;/p&gt;

&lt;p&gt;Can we apply the patch to previous version of class JsseSslResponseConduit?. We have noticed that the code previous to your patch is the same of previous versions (WildFly 8.2.0 Final), so we are going to apply the code of the patch in this version.&lt;/p&gt;

&lt;p&gt;We will test it in a development environment and if the problem is solved then we will test it on a production environment. It will take to us some days.&lt;/p&gt;</comment>
                            <comment id="13103423" author="swd847" created="Sun, 30 Aug 2015 20:34:52 -0400"  >&lt;p&gt;Any news on this?&lt;/p&gt;</comment>
                            <comment id="13108486" author="swd847" created="Mon, 14 Sep 2015 21:43:06 -0400"  >&lt;p&gt;Resolving due to inactivity. The XNIO patch fixes a bug which could cause this error, which will be in Wildfly 10.0.0.CR1&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12391059" name="wfly9_0_0_final.mp4" size="2200251" author="carlosra85" created="Tue, 14 Jul 2015 05:46:45 -0400"/>
                            <attachment id="12391043" name="wlfy.mp4" size="2677338" author="carlosra85" created="Mon, 13 Jul 2015 13:06:22 -0400"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
customfield id="customfield_12310641" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Number of attachments</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310640" key="com.atlassian.jira.toolkit:comments">
                        <customfieldname>Number of comments</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>19.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311940" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1|hzwmf3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310840" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>