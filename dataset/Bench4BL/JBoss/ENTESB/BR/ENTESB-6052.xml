<!-- 
RSS generated by JIRA (7.2.3#72005-sha1:73be91d2b96fc29303a7eb6820acf420e5d0ed65) at Tue Dec 06 23:06:48 EST 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.jboss.org/si/jira.issueviews:issue-xml/ENTESB-6052/ENTESB-6052.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>JBoss Issue Tracker</title>
    <link>https://issues.jboss.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>7.2.3</version>
        <build-number>72005</build-number>
        <build-date>06-10-2016</build-date>
    </build-info>

<item>
            <title>[ENTESB-6052] Jolokia creates disproportionate load on JVM heap with large queries</title>
                <link>https://issues.jboss.org/browse/ENTESB-6052</link>
                <project id="12314570" key="ENTESB">JBoss Fuse</project>
                    <description>&lt;p&gt;When executing a Jolokia query over HTTP, that returns a signficant amount of objects, a great many instances of org.json.simple.JSONObject are created in the heap, along with all their supporting data. A query that returns 100 records, for example, might create 10 000 instances, and 20Mb of heap. &lt;/p&gt;

&lt;p&gt;This heap is eventually reclaimed, but the use of Jolokia to return substantial numbers of objects places a severe burden on the GC, leading to high CPU usage and associated inefficiency.&lt;/p&gt;

&lt;p&gt;While it is natural of Java application to create objects that need to be reclaimed by GC, the problem here is that the number of objects created is massively disproportionate to amount of data returned by the query.&lt;/p&gt;</description>
                <environment>&lt;p&gt;JBoss Fuse 6.2.1 Rollup 2&lt;/p&gt;</environment>
        <key id="12648338">ENTESB-6052</key>
            <summary>Jolokia creates disproportionate load on JVM heap with large queries</summary>
                <type id="1" iconUrl="https://issues.jboss.org/secure/viewavatar?size=xsmall&amp;avatarId=13263&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.jboss.org/images/icons/priorities/major.svg">Major</priority>
                        <status id="5" iconUrl="https://issues.jboss.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Done</resolution>
                                        <assignee username="sonicaaaa">Paolo Antinori</assignee>
                                    <reporter username="kboone">Kevin Boone</reporter>
                        <labels>
                    </labels>
                <created>Fri, 2 Sep 2016 06:15:04 -0400</created>
                <updated>Wed, 30 Nov 2016 12:16:06 -0500</updated>
                            <resolved>Fri, 28 Oct 2016 09:15:04 -0400</resolved>
                                    <version>jboss-fuse-6.2.1</version>
                                    <fixVersion>jboss-fuse-6.3-patches</fixVersion>
                                    <component>Hawtio</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13288115" author="kboone" created="Fri, 2 Sep 2016 08:23:27 -0400"  >&lt;p&gt;For the record, I have attached JVM heap histograms taken after successive Jolokia requests. Note that the number of JSONObject instances increases by about 10 000 for each request.&lt;/p&gt;</comment>
                            <comment id="13290786" author="rhuss" created="Thu, 8 Sep 2016 12:53:06 -0400"  >&lt;p&gt;thx a lot &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.jboss.org/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I&apos;m currently on PTO until Tuesday but will integrate PR then.&lt;/p&gt;</comment>
                            <comment id="13294923" author="rhuss" created="Mon, 19 Sep 2016 05:07:07 -0400"  >&lt;p&gt;The streaming code doesn&apos;t reduce the allocation of JSON object which are needed to create the response. However it significantly reduces the temporary objects used when writing out the object as response. See also &lt;a href=&quot;https://github.com/rhuss/jolokia/pull/243#issuecomment-184210677&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/rhuss/jolokia/pull/243#issuecomment-184210677&lt;/a&gt; for details, which reports a decrease in heap memory allications up to 39 times. &lt;/p&gt;</comment>
                            <comment id="13294936" author="kboone" created="Mon, 19 Sep 2016 05:39:30 -0400"  >&lt;p&gt;I confirm that the test JAR does seem to improve heap usage. With it in place, and making regular queries with a large number of JMX consumers active, I see the heap usage relatively constant at about 100 Mb. Without it, the heap usage in similar circumstances spikes about and down between 60 Mb and 300 Mb.&lt;/p&gt;

&lt;p&gt;It would be nice to have something that could be tested on Fuse, or ActiveMQ with Karaf.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310001">
                    <name>Related</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12652734">OSFUSE-332</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12409035" name="amqproduce.zip" size="3249" author="kboone" created="Fri, 2 Sep 2016 06:19:16 -0400"/>
                            <attachment id="12409746" name="hawtio-web-1.4.redhat-621117.war" size="11773320" author="sonicaaaa" created="Tue, 20 Sep 2016 08:55:45 -0400"/>
                            <attachment id="12409040" name="histo.zip" size="463168" author="kboone" created="Fri, 2 Sep 2016 08:22:31 -0400"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12312340" key="org.jboss.labs.jira.plugin.jboss-custom-field-types-plugin:jbonlyselect">
                        <customfieldname>GSS Priority</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12310641" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Number of attachments</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310640" key="com.atlassian.jira.toolkit:comments">
                        <customfieldname>Number of comments</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311940" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1|i08p0v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310840" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12310183" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Steps to Reproduce</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>&lt;p&gt;These reproduction steps use JMS consumers, because that was the problem scenario reported by the customer. However, I don&apos;t have any particular reason to think that the problem is limited to JMS-related queries.&lt;/p&gt;

&lt;p&gt;1. Install ActiveMQ 6.2.1 Rollup 2&lt;br/&gt;
2. Run an application that creates 100 concurrent consumers on a particular queue (some simple code is attached)&lt;br/&gt;
3. Get a heap histogram (e.g., jmap -histo)&lt;br/&gt;
4. Execute this Jolokia request:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:8181/jolokia/read/org.apache.activemq:type=Broker,brokerName=root,destinationType=Queue,destinationName=*&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8181/jolokia/read/org.apache.activemq:type=Broker,brokerName=root,destinationType=Queue,destinationName=*&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5. Get a heap histogram again&lt;br/&gt;
6. Repeat steps 4 and 5, and note how the numbers of instances of JSONObject increase, along with the total heap usage.&lt;/p&gt;
</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12310080" key="com.atlassian.jira.plugin.system.customfieldtypes:userpicker">
                        <customfieldname>Tester</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>pmacik</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>