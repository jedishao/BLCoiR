<!-- 
RSS generated by JIRA (7.2.3#72005-sha1:73be91d2b96fc29303a7eb6820acf420e5d0ed65) at Mon Dec 12 15:10:14 EST 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.jboss.org/si/jira.issueviews:issue-xml/ENTESB-2995/ENTESB-2995.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>JBoss Issue Tracker</title>
    <link>https://issues.jboss.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>7.2.3</version>
        <build-number>72005</build-number>
        <build-date>06-10-2016</build-date>
    </build-info>

<item>
            <title>[ENTESB-2995] Fuse-integration kie-camel junit fails due to change in camel version</title>
                <link>https://issues.jboss.org/browse/ENTESB-2995</link>
                <project id="12314570" key="ENTESB">JBoss Fuse</project>
                    <description>&lt;p&gt;There&apos;s a difference between 2.15.0 and 2.15.0.redhat-620102 that is causing the test failures.&lt;br/&gt;
After digging a bit I found that the difference is in camel-xstream and more precisely into the AbstractXStreamWrapper class. I copied on gist the source codes of the 2 versions so you can easily compare them.&lt;/p&gt;

&lt;p&gt;So this is the original version &lt;a href=&quot;https://gist.github.com/mariofusco/e404b8e477e833732f02&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gist.github.com/mariofusco/e404b8e477e833732f02&lt;/a&gt; (the one in camel-xstream 2.15.0 that works). Here unmarhsall gets invoked and on line 251 it does&lt;/p&gt;

&lt;p&gt;    return getXStream(exchange.getContext().getClassResolver())&lt;/p&gt;

&lt;p&gt;There it calls getXStream() and in turn createXStream() passing the ClassResolver. It creates an XStream using the empty constructor (line 84) and by default that empty constructor creates a CompositeClassLoader that is able to find the class (Cheese1 in that test case) of the kproject domain.&lt;/p&gt;

&lt;p&gt;Now the 2.15.0.redhat-620102 version &lt;a href=&quot;https://gist.github.com/mariofusco/5814b873ad0a1af4f4a8&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gist.github.com/mariofusco/5814b873ad0a1af4f4a8&lt;/a&gt;&lt;br/&gt;
In the same way as before unmarhsall gets invoked but this time (line 278) it does&lt;/p&gt;

&lt;p&gt;    return getXStream(exchange.getContext()).unmarshal(reader);&lt;/p&gt;

&lt;p&gt;So once again getXStream() is called but this time passing a CamelContext instead of a ClassResolver. There (line 87) it does&lt;/p&gt;

&lt;p&gt;    createXStream(context.getClassResolver(), context.getApplicationContextClassLoader());&lt;/p&gt;

&lt;p&gt;so calling an overload of createXStream taking 2 arguments: a ClassResolver and a ClassLoader. Once again it creates an XStream using the no-args constructor (line 107) but immediately after it changes the ClassLoader (line 115) setting the one passed to the createXStream() method. This ClassLoader is now the root sun.misc.AppClassLoader and of course xstream is no longer able to find the class defined in the kproject there.&lt;/p&gt;

&lt;p&gt;I don&apos;t know how to proceed about this (nor why the productized version of camel-xstream is different by the original one). Feel free to forward this explanation to anybody who could be aware of why this difference has been introduced and let me know what I could do about this.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12567937">ENTESB-2995</key>
            <summary>Fuse-integration kie-camel junit fails due to change in camel version</summary>
                <type id="1" iconUrl="https://issues.jboss.org/secure/viewavatar?size=xsmall&amp;avatarId=13263&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.jboss.org/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.jboss.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Done</resolution>
                                        <assignee username="willem.jiang">Willem Jiang</assignee>
                                    <reporter username="virchete">David virgil naranjo</reporter>
                        <labels>
                    </labels>
                <created>Wed, 8 Apr 2015 11:26:27 -0400</created>
                <updated>Tue, 14 Jul 2015 08:03:23 -0400</updated>
                            <resolved>Wed, 22 Apr 2015 03:15:00 -0400</resolved>
                                    <version> jboss-fuse-6.2</version>
                                    <fixVersion> jboss-fuse-6.2</fixVersion>
                                    <component>Camel</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                <comments>
                            <comment id="13057034" author="aileenc" created="Wed, 8 Apr 2015 11:29:48 -0400"  >&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/secure/ViewProfile.jspa?name=njiang&quot; class=&quot;user-hover&quot; rel=&quot;njiang&quot;&gt;Willem Jiang&lt;/a&gt; Can you dig into this to see what changed and why?&lt;/p&gt;</comment>
                            <comment id="13057172" author="willem.jiang" created="Wed, 8 Apr 2015 20:40:18 -0400"  >&lt;p&gt;This issue is introduced by the change which is requested by wildfly-camel recently &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-8468&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;CAMEL-8468&lt;/a&gt;, so my question is about how does the test setup the application classloader, if you just create a normal Camel Context (DefaultCamelContext), the application classloader is not setup. We just setup the application classloader from the Spring, Blueprint handler or OSGiDefaultCamelContext. &lt;/p&gt;

&lt;p&gt;BTW, the patch is part of Camel 2.15.1, as we keep syncing the patch of Camel 2.15.x now, you got the error inside of the production branch. &lt;/p&gt;</comment>
                            <comment id="13057380" author="mfusco" created="Thu, 9 Apr 2015 10:30:38 -0400"  >&lt;p&gt;I understand that relying on the TCCL was a bad practice and I agree with what you changed there. &lt;/p&gt;

&lt;p&gt;I&apos;m trying to modify what we have in kie-camel to work accordingly to this change, but I&apos;m facing a second problem now. In particular there we have a Processor that before forwarding a call to the wrapped processor sets the ClassLoader that we want to use on the CamelContext object contained in the passed Exchange instance: &lt;a href=&quot;https://github.com/jboss-integration/fuse-bxms-integ/blob/master/camel/kie-camel/src/main/java/org/kie/camel/component/KiePolicy.java#L312&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/jboss-integration/fuse-bxms-integ/blob/master/camel/kie-camel/src/main/java/org/kie/camel/component/KiePolicy.java#L312&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This works correctly the first time because the AbstractXStreamWrapper doesn&apos;t contain any xstream object. This means that when it invokes getXStream() at line 278 it does &lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;if (xstream == null) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    xstream = createXStream(context.getClassResolver(), context.getApplicationContextClassLoader());&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;

&lt;p&gt;and creates a new xstream using the ClassLoader taken from the CamelContext.&lt;/p&gt;

&lt;p&gt;Unfortunately, as you can imagine, this mechanism doesn&apos;t work anymore for all subsequent invocations: at that point the AbstractXStreamWrapper already contains a reference to the xstream object, so it doesn&apos;t create a new one and in particular ignores the ClassLoader contained in the CamelContext. In other words it will keep using forever the ClassLoader that I passed during the first invocation. &lt;/p&gt;

&lt;p&gt;I believe that my problem could be fixed by changing that AbstractXStreamWrapper.getXStream(CamelContext) method as it follows:&lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    public XStream getXStream(CamelContext context) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        if (xstream == null) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;            xstream = createXStream(context.getClassResolver(), context.getApplicationContextClassLoader());&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        } else {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;            xstream.setClassLoader(context.getApplicationContextClassLoader());&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        }&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        return xstream;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    }&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;

&lt;p&gt;but of course I am not totally aware of the consequences of this change. &lt;/p&gt;

&lt;p&gt;If I am just misusing the Exchange or CamelContext objects and there&apos;s a better/safer to set the ClassLoader there, please let me know.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Mario&lt;/p&gt;</comment>
                            <comment id="13057560" author="willem.jiang" created="Thu, 9 Apr 2015 21:56:10 -0400"  >&lt;p&gt;Hi Mario,&lt;/p&gt;

&lt;p&gt;I belive the TCCL is last weapon we can use to hack the classloader issue, so we introduce the application classloader to the CamelContext to let camel component developer to have chance to grab the right classloader from the camel context after the camel context is started.&lt;/p&gt;

&lt;p&gt;It is dangerous to change the camel context classloader during the runtime, specially after the camel context is started. So you should check if the camel route which runs the command has some other endpoints beside the XStream, the bottom line is the camel context is not have other endpoints (to avoid the side effects) .  If you cannot make sure about that, you may consider to create another CamelContext and use producerTemplate to talk to it.  &lt;/p&gt;

&lt;p&gt;Regards,&lt;/p&gt;

&lt;p&gt;Willem&lt;/p&gt;</comment>
                            <comment id="13057619" author="mfusco" created="Fri, 10 Apr 2015 03:30:50 -0400"  >&lt;p&gt;Hi Willem,&lt;/p&gt;

&lt;p&gt;what you&apos;re suggesting is not entirely clear to me. In particular can you clarify what you mean with &quot;create another CamelContext and use producerTemplate to talk to it&quot; ? Do you have any example of this, especially in the context of the code I linked in my former comment? &lt;a href=&quot;https://github.com/jboss-integration/fuse-bxms-integ/blob/master/camel/kie-camel/src/main/java/org/kie/camel/component/KiePolicy.java#L312&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/jboss-integration/fuse-bxms-integ/blob/master/camel/kie-camel/src/main/java/org/kie/camel/component/KiePolicy.java#L312&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To recap my need I have to process a request (an xml unmarshalling in this case, but could be potentially anything else) using every time a different ClassLoader while at the moment the one used for the first request is cached forever. How can I achieve this?&lt;/p&gt;

&lt;p&gt;Thanks for your help,&lt;br/&gt;
Mario&lt;/p&gt;</comment>
                            <comment id="13057879" author="willem.jiang" created="Fri, 10 Apr 2015 10:34:45 -0400"  >&lt;p&gt;Hi Mario,&lt;br/&gt;
I just went through the KiePolicy, I think still need to leverage TCCL instead of  the ApplicationContextClassLoader of camel context to avoid the set effect of changing camel context application class loader. We just need to make sure the ApplicationContext classloader is set to be null which means the XStream component&apos;s new added feature won&apos;t be use.&lt;/p&gt;

&lt;p&gt;To be honestly I don&apos;t like the way that KiePolicy hacking the camel route, we normally just let the camel component to do the heavy work,  but it looks like kie camel wants to leverage the other camel component to do some work such as setup the data format or cxf endpoint invocation information dynamically (we normally just let camel route to do this kind of work). Maybe you can consider to use camel &lt;a href=&quot;http://camel.apache.org/routebox.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;routebox&lt;/a&gt; to wrap up the part work of other camel component.&lt;/p&gt;

&lt;p&gt;Just my 2 cents.&lt;/p&gt;

&lt;p&gt;Regards,&lt;/p&gt;

&lt;p&gt;Willem&lt;/p&gt;
</comment>
                            <comment id="13058786" author="mark.proctor" created="Tue, 14 Apr 2015 08:32:00 -0400"  >&lt;p&gt;The URL, or header data, declares the target rule base. The classloader on the data marshallers is updated by the policy as a result. The policy approach was the most minimal way to do this, while keeping the route definition simple. &lt;/p&gt;

&lt;p&gt;This allowed the same end-point to be multiplexed for use on different rule bases - a popular customer feature. This has worked well in the past. So we either figure out a way to continue making this work, via mario&apos;s 3 line change, or we remove this multiplex functionality. This removal can be done for 7.x but not for 6.x. If we decide not to fix for 6.x then the IP BOM for the camel version must be maintained at a level that that gives our customers continued compatibility during this stream - so the camel version cannot be updated for BRMS and Fuse 6.x streams, without an exception from the program team and a strategy put in place to communicate the breakage to our customers.&lt;/p&gt;</comment>
                            <comment id="13058798" author="aileenc" created="Tue, 14 Apr 2015 08:46:55 -0400"  >&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/secure/ViewProfile.jspa?name=thomas.diesler&quot; class=&quot;user-hover&quot; rel=&quot;thomas.diesler&quot;&gt;Thomas Diesler&lt;/a&gt; Can you comment on this as you requested the change in Camel?&lt;/p&gt;</comment>
                            <comment id="13058832" author="thomas.diesler" created="Tue, 14 Apr 2015 09:47:18 -0400"  >&lt;p&gt;There have been a number of changes in Camel related to the use of TCCL. This has been necessary because TCCL breaks modularity boundaries in a modular environment (like WildFly). The intended approach is that a client of the Camel API has control over which ClassLoader is used by Camel components. If a client associates an application classloader with the CamelContext, then this CL is used in preference over the TCCL. Various components use fallback approaches like the CL of the component itself and the TCCL (preferably as last resort).&lt;/p&gt;

&lt;p&gt;A potential problem could arise when an existing client already sets the application classloader to something that cannot load the given type, which the TCCL can load. Then, if the fallback is not implemented correctly, we would get a CL failure.&lt;/p&gt;

&lt;p&gt;I suggest we continue to discuss this in the context of &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-8468&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;CAMEL-8468&lt;/a&gt; and figure out whether/how this introduced an incompatibility.&lt;/p&gt;</comment>
                            <comment id="13058852" author="thomas.diesler" created="Tue, 14 Apr 2015 10:12:50 -0400"  >&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/secure/ViewProfile.jspa?name=mfusco&quot; class=&quot;user-hover&quot; rel=&quot;mfusco&quot;&gt;Mario Fusco&lt;/a&gt; What is the concurrency contract for of the XStream object?&lt;/p&gt;

&lt;p&gt;If this is a shared object, we cannot change the classloader association as a result of a call to &lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;AbstractXStreamWrapper.getXStream(...)&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;

&lt;p&gt;I assume that the default CL association (i.e. CompositeClassLoader) supports dynamic updates of CLs that are being used by XStream. Camel&apos;s application classloader will likely have to be added to CompositeClassLoader, instead of becoming the new XStream CL association.&lt;/p&gt;

&lt;p&gt;Here would be &lt;a href=&quot;https://github.com/apache/camel/pull/487&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;my proposal&lt;/a&gt;&lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        ClassLoader xstreamLoader = xstream.getClassLoader();&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        if (classLoader != null &amp;amp;&amp;amp; xstreamLoader instanceof CompositeClassLoader) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;            ((CompositeClassLoader) xstreamLoader).add(classLoader);&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        }&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;
</comment>
                            <comment id="13058875" author="thomas.diesler" created="Tue, 14 Apr 2015 10:46:06 -0400"  >&lt;p&gt;This is going to be in camel-2.15.2 and can be cherry picked to the prod branch. &lt;/p&gt;</comment>
                            <comment id="13058896" author="mfusco" created="Tue, 14 Apr 2015 11:27:39 -0400"  >&lt;p&gt;Thomas, I believe this is still not enough, because still once a xstream has been created it will keep using the same CL forever.&lt;/p&gt;

&lt;p&gt;In my opinion the more general problem (under a Camel user point of view) is that you&apos;re allowing to set a ClassLoader into the CamelContext, but you&apos;re ignoring it after the first invocation. To be consistent I believe that either you shouldn&apos;t allow to change a ClassLoader after it has been set for the first time (maybe throwing an exception if the user tries to do so) or fully supporting the fact that the ClassLoader could be changed at any time. Allowing to set a different ClassLoader but silently ignoring it, as it happens now, is very confusing.&lt;/p&gt;

&lt;p&gt;For what specifically regards the AbstractXStreamWrapper this means that, according to the change you did in your pull request also the getXStream method should be modified as it follows:&lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    public XStream getXStream(CamelContext context) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        if (xstream == null) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;            xstream = createXStream(context.getClassResolver(), context.getApplicationContextClassLoader());&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        } else {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;            ClassLoader xstreamLoader = xstream.getClassLoader();&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;            if (classLoader != null &amp;amp;&amp;amp; xstreamLoader instanceof CompositeClassLoader) {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;                ((CompositeClassLoader) xstreamLoader).add(context.getApplicationContextClassLoader());&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;            }&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        }&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;        return xstream;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    }&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;

&lt;p&gt;Do you agree?&lt;/p&gt;</comment>
                            <comment id="13059094" author="willem.jiang" created="Tue, 14 Apr 2015 22:38:14 -0400"  >&lt;p&gt;Hi Mario,&lt;/p&gt;

&lt;p&gt;I think the change that Thomas made just resorts the old CompositeClassLoader feature back, as the CompositeClassLoader allows you to load the class from TCCL, I think the change is acceptable for both of us.  In this way we don&apos;t need to apply the patch of AbstractXStreamWrapper as you suggest. &lt;/p&gt;

&lt;p&gt;If you change the cached XStream classloader it could introduce a thread issue when calling the getXStream from multiple threads at the same time. &lt;/p&gt;

&lt;p&gt;I also suggest you remove the code of change the camel ApplicationContextClassLoader in the KiePolicy, as the change could introduce some side effects to the other part of camel processors which are relay on the camel ApplicationContextClassLoader. &lt;/p&gt;

&lt;p&gt;You can run the test with latest Camel 2.15.2-SNAPSHOT to verify the change at the mean time.&lt;/p&gt;

&lt;p&gt;Regards,&lt;/p&gt;

&lt;p&gt;Willem&lt;/p&gt;</comment>
                            <comment id="13059114" author="thomas.diesler" created="Wed, 15 Apr 2015 03:08:12 -0400"  >&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/secure/ViewProfile.jspa?name=mfusco&quot; class=&quot;user-hover&quot; rel=&quot;mfusco&quot;&gt;Mario Fusco&lt;/a&gt; Unless I&apos;m mistaken, the application classloader associated with a CamelContext is not a dynamic thing. You are supposed to &lt;/p&gt;

&lt;p&gt;1. Create the CamelContext &lt;br/&gt;
2. Configure it (i.e. setApplicationContextClassLoader, etc)&lt;br/&gt;
3. Start the CamelContext&lt;/p&gt;

&lt;p&gt;Reconfiguring the CamelContext at runtime would lead to undefined behaviour. Therefore, it is correct to use the same CL for the lifetime of the CamelContext. If a higher level (i.e. your code) supports dynamicity in that classloader, it should set the application classloader to something that supports that.&lt;/p&gt;

&lt;p&gt;Dynamicity in classloading is generally problematic because Java does not have a notion of &quot;unload class&quot;, which would apply to the remove and replace cases.&lt;/p&gt;

&lt;p&gt;For example: &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;CL loads type A1 - CL gets reconfigured so that A1 is no longer available - loading of A1 is now inconsistent&lt;/li&gt;
	&lt;li&gt;CL loads type A1 - CL gets reconfigured so that A1 is something else - loading of A1 is again inconsistent&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13059121" author="mfusco" created="Wed, 15 Apr 2015 03:31:36 -0400"  >&lt;p&gt;Thomas, I&apos;ll check if setting the ClassLoader that I want to use as the TCCL fixes my use case and let you know (even if in general I don&apos;t like to rely on the TCCL). Thanks for your prompt fix. &lt;/p&gt;

&lt;p&gt;Moreover I agree that setting the ApplicationContextClassLoader after the CamelContext is started could lead to many inconsistencies. My former comment was mainly to say that you still allow to set a different ApplicationContextClassLoader on the CamelContext after it is started, but then you ignore this setting and this could be confusing for Camel users. That&apos;s why I suggested to throw an Exception if that setApplicationContextClassLoader method is called when the CamelContext is already in use.&lt;/p&gt;</comment>
                            <comment id="13059124" author="thomas.diesler" created="Wed, 15 Apr 2015 03:34:07 -0400"  >&lt;p&gt;Yes, please monitor &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-8638&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/CAMEL-8638&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13061297" author="willem.jiang" created="Wed, 22 Apr 2015 03:15:00 -0400"  >&lt;p&gt;As the patch of CAMEL-8635 was merged into Fuse 6.2 branch.&lt;/p&gt;</comment>
                            <comment id="13089218" author="mbasovni" created="Tue, 14 Jul 2015 08:03:23 -0400"  >&lt;p&gt;Verified&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10011">
                    <name>Superset</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12568140">JBPM-4603</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
customfield id="customfield_12310641" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Number of attachments</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310640" key="com.atlassian.jira.toolkit:comments">
                        <customfieldname>Number of comments</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>18.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311940" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1|hzvtan:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310840" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                </customfields>
    </item>
</channel>
</rss>