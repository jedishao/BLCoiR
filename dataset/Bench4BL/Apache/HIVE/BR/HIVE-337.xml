<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 00:52:52 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HIVE-337/HIVE-337.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HIVE-337] LazySimpleSerDe should support multi-level nested array, map, struct types</title>
                <link>https://issues.apache.org/jira/browse/HIVE-337</link>
                <project id="12310843" key="HIVE">Hive</project>
                    <description>&lt;p&gt;Once we do that, we can completely deprecate DynamicSerDe/TCTLSeparatedProtocol, and close any bugs that DynamicSerDe/TCTLSeparatedProtocol has.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12416592">HIVE-337</key>
            <summary>LazySimpleSerDe should support multi-level nested array, map, struct types</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="zshao">Zheng Shao</assignee>
                                    <reporter username="zshao">Zheng Shao</reporter>
                        <labels>
                    </labels>
                <created>Tue, 10 Mar 2009 23:31:31 +0000</created>
                <updated>Sat, 17 Dec 2011 00:09:02 +0000</updated>
                            <resolved>Tue, 24 Mar 2009 23:49:56 +0000</resolved>
                                    <version>0.6.0</version>
                                    <fixVersion>0.3.0</fixVersion>
                                    <component>Serializers/Deserializers</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12681010" author="zshao" created="Wed, 11 Mar 2009 20:04:51 +0000"  >&lt;p&gt;2 pitfalls for the delimited format:&lt;/p&gt;

&lt;p&gt;1. Empty array has exactly the same serialized format as an array with a single element which is an empty String.&lt;/p&gt;

&lt;p&gt;2. Null array has exactly the same serialized format as an array with a single element which is Null.&lt;/p&gt;

&lt;p&gt;We have to make a choice between the two. After some discussions with Prasad, we&apos;ve got the consensus that we should support empty array and null array (which means we are NOT going to support an array with a single element that is empty or null.)&lt;/p&gt;

&lt;p&gt;This is the same as what TCTLSeparatedProtocol is doing.&lt;/p&gt;</comment>
                            <comment id="12681016" author="prasadc" created="Wed, 11 Mar 2009 20:18:04 +0000"  >&lt;p&gt;just to clarify what i meant,&lt;/p&gt;

&lt;p&gt;a null array, an empty array and an array with one empty string or null are all same. So users can&apos;t rely on being able to differentiate between the 4 cases. All of them are represented by an empty string in the serialized string of the array. such an array should be deserialzied to either null or empty array. i prefer a null array since it is easier to test for in conditions.&lt;/p&gt;
</comment>
                            <comment id="12681033" author="zshao" created="Wed, 11 Mar 2009 21:23:14 +0000"  >&lt;p&gt;We use &quot;&lt;br class=&quot;atl-forced-newline&quot; /&gt;N&quot; to represent NULL, so we can still distinguish between empty array and null array.&lt;/p&gt;</comment>
                            <comment id="12681050" author="rsm" created="Wed, 11 Mar 2009 21:48:41 +0000"  >&lt;p&gt;I am not sure what you mean by null array.&lt;/p&gt;

&lt;p&gt;Given an array column, ideally, we should distinguish between the following cases (I am repeating them for clarity):&lt;/p&gt;

&lt;p&gt;1. NULL - array column is null (is this what you mean by null array?)&lt;br/&gt;
2. &lt;span class=&quot;error&quot;&gt;&amp;#91;NULL&amp;#93;&lt;/span&gt; - array containing one element (NULL)&lt;br/&gt;
3. &lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;&amp;#39;&amp;#93;&lt;/span&gt; - array containing one element (empty string)&lt;br/&gt;
4. [] - array containing no elements&lt;/p&gt;

&lt;p&gt;Is there are plan for LazySimpleSerDe to support nested arrays? If so, we cant really have a single delimiter for arrays and maps. We should introduce array begin and end markers in the serialization format. Alternatively, we could store the number of bytes in the array before the array column value itself.&lt;/p&gt;</comment>
                            <comment id="12681055" author="zshao" created="Wed, 11 Mar 2009 21:53:02 +0000"  >&lt;p&gt;By null array, I mean case 1 (as you mentioned above).&lt;/p&gt;

&lt;p&gt;There is no plan for LazySerDe to support nested array at this moment - it is used to replace MetaDataTypeColumnsetSerDe and TCTLSeparatedProtocol by exactly the same serialization format.&lt;/p&gt;

&lt;p&gt;If we want to change the serialization format, that will be a new SerDe.&lt;/p&gt;</comment>
                            <comment id="12681059" author="rsm" created="Wed, 11 Mar 2009 22:02:56 +0000"  >&lt;p&gt;I am not suggesting changing the serialization format for everything. just for maps and arrays. If I have to write a new SerDe I&apos;d have to copy over code from LazySimpleSerDe for everything other than for maps and arrays. Can you make LazySimpleSerDe parameterizable so that it can deserialize the old format (just single delimiters) as well as the new format (with begin-end delimiters say) and always serialize into the new format? This will give us a migration path to a format which is compatible with nested arrays and maps. Thoughts?&lt;/p&gt;</comment>
                            <comment id="12681064" author="zshao" created="Wed, 11 Mar 2009 22:18:17 +0000"  >&lt;p&gt;For the migration path, we can easily create new tables with new SerDes, and everything will work transparently. If you are suggesting letting LazySerDe automatically figure out the old/new format, I don&apos;t think that&apos;s even possible, and if it is, users will be easily confused by that.&lt;/p&gt;

&lt;p&gt;Delimited format is meant to be simple and human-readable, and it is only good for simple data. If the structure really gets complicated, we should store the data in binary format instead of delimited format. For example, we can use Thrift etc.&lt;/p&gt;

&lt;p&gt;If we really want to write a new SerDe that shares a lot with LazySimpleSerDe (with an extended delimited format), we can easily do that by reusing a lot of the classes introduced by LazySimpleSerDe. There is not much to copy - and if there is, it&apos;s better to factor the common code out, instead of pushing all logics (new format/old format) into the same class.&lt;/p&gt;

&lt;p&gt;Let&apos;s open another jira for discussions on new features like this.&lt;/p&gt;


&lt;p&gt;So the question here is that we have to make a choice between the two: whether treat &quot;&quot; to be an empty array or an array with an empty string as the only element (and the same question for NULL).&lt;/p&gt;</comment>
                            <comment id="12681073" author="rsm" created="Wed, 11 Mar 2009 22:42:24 +0000"  >&lt;p&gt;I see that the trend is to keep writing new SerDes either for performance (MetadataTyped... and possibly others) or for expressibility (DynamicSerDe etc). Eventually, most of these SerDes are not used at all other than for backward compatibility with existing data. Isnt it better to find a balance between performance and and expressibility in a single serde which can be used in general. Of course, if people want more performance/expressibility they can use/write other serdes which use binary formats etc. &lt;/p&gt;

&lt;p&gt;Using array begin and end markers dont decrease human-readability imo (people are fine with reading json right?) and they allow expressing nested structures. I am not sure there is a disadvantage to this. What I was hoping was that LazySimpleSerDe becomes the default SerDe for most requirements. &lt;/p&gt;

&lt;p&gt;Specifically, I have a requirement for arrays of maps. If you dont provide support for that in LazySimpleSerDe (which is probably not a big change, i might be mistaken though), then for my requirement, we would have to go through the process of creating a new SerDe. And once we create that serde I&apos;d rather use it than LazySimpleSerDe for all of my future requirements. I am guessing that pretty soon we would have to deprecate LazySimpleSerDe in favor of this new serde because of its expressibility.&lt;/p&gt;

&lt;p&gt;Regarding automatically detecting the serialization format for arrays in the data, maybe I am mistaken, but arent you already using some logic to create LazySimpleSerDe when the metastore has MetadataTypedColumnSetSerDe for that table? In that same logic, cant you add a parameter to the lazy serde to indicate which array serialization format to use?&lt;/p&gt;

&lt;p&gt;Again, I am not suggesting that we should add several serialization formats to the same SerDe. All I am suggesting is that there is a middle ground between proliferating class for each small feature difference and putting all features into a single class.&lt;/p&gt;</comment>
                            <comment id="12681126" author="namit" created="Thu, 12 Mar 2009 01:09:16 +0000"  >&lt;p&gt;Isnt the goal to use LazySerde as the default for all kinds of schemas ? If yes, we should support all nestings.&lt;/p&gt;

&lt;p&gt;If that is not the goal, then as Raghu said, LazySerde might be deprecated soon. It might be painful to have separate serde as a default based on the schema.&lt;/p&gt;</comment>
                            <comment id="12681134" author="zshao" created="Thu, 12 Mar 2009 01:29:22 +0000"  >&lt;p&gt;It&apos;s true that LazySimpleSerDe does not share code with MetadataTypedColumnsetSerDe or DynamicSerDe, but the reason of that is because the design principle is completely different and there is no shared code at all.&lt;/p&gt;

&lt;p&gt;@Raghu: I thought you were saying automatically detect the format based on data (not metadata). If we can rely on metadata, then we are on the same track.&lt;/p&gt;

&lt;p&gt;@Namit: The current goal of LazySimpleSerDe is to replace MetaDataTypedColumnsetSerDe and TCTLSeparatedProtocol. LazySerDe is a thin class on top of a lot of utility classes that can be reused for any lazily-initialized serdes.&lt;/p&gt;


&lt;p&gt;I think overall we are on agreement:&lt;br/&gt;
1. We should reuse code as much as possible.&lt;br/&gt;
2. We should rely on metadata to find out the serialization format difference (instead of automatically figure it out from the data).&lt;/p&gt;

&lt;p&gt;The difference between parametering a class and 2 classes are so small - I can write a wrapper to wrap 2 classes. This is a minor issue.&lt;br/&gt;
This is different from reusing the code, because most of the code are in utility classes that will be reused.&lt;/p&gt;

&lt;p&gt;At this point, the goal is only to support what is already supported (by Meta../TCTL...). For new features, let&apos;s keep the discussion on a separate jira.&lt;/p&gt;</comment>
                            <comment id="12681141" author="rsm" created="Thu, 12 Mar 2009 01:54:20 +0000"  >&lt;p&gt;@Zheng. I agree with what you said except the last statement.&lt;/p&gt;

&lt;p&gt;&amp;gt; At this point, the goal is only to support what is already supported (by Meta../TCTL...). For new features, let&apos;s keep the discussion on a separate jira.&lt;/p&gt;

&lt;p&gt;The reason is that if our current focus is only to support what is already supported by Meta..., we will have to visit the same problem again of creating a new SerDe to support arrays of arrays. Then another serde to support maps of arrays and so on. I&apos;d rather we make the decision and the code changes now such that LazySerDe becomes the default general serde for nested maps and arrays. I am not saying that you need to make lazy serde support everything as part of this jira. But, what I am hoping for is the decision to &lt;b&gt;add&lt;/b&gt; support for nested structures to LazySimpleSerDe rather than creating yet another wafer thin serde.&lt;/p&gt;</comment>
                            <comment id="12681165" author="zshao" created="Thu, 12 Mar 2009 05:29:14 +0000"  >&lt;p&gt;Ok, let&apos;s discuss tomorrow whether our current focus is only to fix this blocker, or we want to add new features at the same time.&lt;/p&gt;</comment>
                            <comment id="12682962" author="zshao" created="Wed, 18 Mar 2009 08:54:47 +0000"  >&lt;p&gt;First cut.&lt;/p&gt;

&lt;p&gt;The code is written in a way to make sure it&apos;s very easy to extend to nested types.&lt;/p&gt;

&lt;p&gt;I also replaced DynamicSerDe/TBinaryProtocol for map-reduce value to LazySimpleSerDe. On a typical table with 8 string columns, we are seeing the amount of data passed from mappers to reducers decreased from 224MB to 148MB (roughly a 1/3 improvement).&lt;/p&gt;

&lt;p&gt;Escaping are not supported yet, but it shouldn&apos;t take too much time to add.&lt;/p&gt;</comment>
                            <comment id="12685407" author="zshao" created="Sat, 21 Mar 2009 01:35:09 +0000"  >&lt;p&gt;Second cut. Fixed 2 problems popped up from the review:&lt;/p&gt;

&lt;p&gt;1. Make sure we don&apos;t do &quot;setAll&quot; on the field/element/value again if &quot;setAll&quot; has been called already.&lt;br/&gt;
2. When getting the value out of a LazyMap using a key (which is assumed to be a primitive), we are now comparing the key directly with the keys deserialized from the map &#65288;instead of comparing the serialized version of keys to avoid matching problems between &quot;01&quot; and &quot;1&quot; as an int value).&lt;/p&gt;

&lt;p&gt;This will be the patch intended for check-in (except the test results are not overwritten yet, in order to help with the review).&lt;/p&gt;</comment>
                            <comment id="12688548" author="zshao" created="Tue, 24 Mar 2009 03:39:29 +0000"  >&lt;p&gt;Comments from code review with Ashish, Raghu, and Namit:&lt;/p&gt;

&lt;p&gt;1. Move factory methods in LazyUtils to LazyFactory;&lt;/p&gt;

&lt;p&gt;2. LazyArray etc should use Factory methods (with TypeInfo as parameter) to create elements;&lt;/p&gt;

&lt;p&gt;3. Comment that LazySimpleSerDe only supports 10 levels of separators currently.&lt;/p&gt;

&lt;p&gt;4. Use a global pointer to byte[], and all LazyObjects should point to the global pointer.&lt;br/&gt;
This helps with garbage collection.&lt;/p&gt;

&lt;p&gt;5. More Javadoc.&lt;/p&gt;

&lt;p&gt;6. Move the 3 fields (bytes, start, length) from LazyNonPrimitive to LazyObject, add &quot;parsed&quot; to LazyPrimitive.&lt;br/&gt;
This makes the code cleaner because all LazyObjects now behave in the same way - nothing happens in setAll (but cached the values), and actual parsing happens later.&lt;br/&gt;
The trade-off is that LazyPrimitive takes more memory - 12 bytes for bytes, start, and length.&lt;/p&gt;

&lt;p&gt;For 6, a better way would be to always directly parse the data when &quot;setAll&quot; is called (basically, convert the way LazyNonPrimitive works to the way that LazyPrimitive works.) The reason is that there is no point of &quot;setAll&quot; if we don&apos;t need to parse the data later, so why don&apos;t we directly parse the data in the &quot;setAll&quot; call?&lt;/p&gt;</comment>
                            <comment id="12688599" author="zshao" created="Tue, 24 Mar 2009 07:33:26 +0000"  >&lt;p&gt;Done with all the comments except 6.&lt;/p&gt;

&lt;p&gt;I also renamed the setAll() function to init() to make it clearer.&lt;/p&gt;

&lt;p&gt;Because we now pass TypeInfo around in LazyObject hierarchy, we don&apos;t even need to create the LazyObject for an array element if that element is never accessed (we can create it on demand when it&apos;s accessed).&lt;/p&gt;

&lt;p&gt;The current code works fine without the change of 6.  The change of 6 requires either 12 bytes more storage per primitive object (by adding the byte[], int, int to the LazyPrimitive), or more complicated logic in removing the int start and int length from LazyNonPrimitive (we will have to parse the data right in init(..) but we don&apos;t have access to the separators because it&apos;s in the next-level ObjectInspectors - unless we add the pointers from LazyObject to ObjectInspector, but that&apos;s another overhead and complicates the data structure).&lt;/p&gt;

&lt;p&gt;After all, the implementation of init() is private to the class and I don&apos;t think there is a strong need to make the implementation the same across LazyPrimitive and LazyNonPrimitive. The fact that the parsing of LazyPrimitive does not require delimiters and LazyNonPrimitive requires is good enough for them to have different implementations.&lt;/p&gt;


&lt;p&gt;Future improvements include:&lt;br/&gt;
1. Support escaping: &lt;a href=&quot;https://issues.apache.org/jira/browse/HIVE-136&quot; title=&quot;SerDe should escape some special characters&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HIVE-136&quot;&gt;&lt;del&gt;HIVE-136&lt;/del&gt;&lt;/a&gt;;&lt;br/&gt;
2. Columnar storage: &lt;a href=&quot;https://issues.apache.org/jira/browse/HIVE-352&quot; title=&quot;Make Hive support column based storage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HIVE-352&quot;&gt;&lt;del&gt;HIVE-352&lt;/del&gt;&lt;/a&gt;;&lt;br/&gt;
3. Use Writable/Text for values: &lt;a href=&quot;https://issues.apache.org/jira/browse/HIVE-266&quot; title=&quot;Improve SerDe performance by using Text instead of String&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HIVE-266&quot;&gt;&lt;del&gt;HIVE-266&lt;/del&gt;&lt;/a&gt;;&lt;br/&gt;
4. Short-circuit serialization: &lt;a href=&quot;https://issues.apache.org/jira/browse/HIVE-358&quot; title=&quot;Short-circuiting serialization&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HIVE-358&quot;&gt;HIVE-358&lt;/a&gt;;&lt;br/&gt;
5. Short-circuit expression evaluation: &lt;a href=&quot;https://issues.apache.org/jira/browse/HIVE-359&quot; title=&quot;Short-circuiting expression evaluation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HIVE-359&quot;&gt;&lt;del&gt;HIVE-359&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
6. Common expression evaluation: &lt;a href=&quot;https://issues.apache.org/jira/browse/HIVE-364&quot; title=&quot;Hive Operators should calculate the value of common expressions just once&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HIVE-364&quot;&gt;HIVE-364&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12688879" author="rsm" created="Tue, 24 Mar 2009 21:25:16 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;looks good&lt;/p&gt;</comment>
                            <comment id="12688882" author="rsm" created="Tue, 24 Mar 2009 21:26:32 +0000"  >&lt;p&gt;btw can you attach the patch file with all the tests (just for completeness)?&lt;/p&gt;</comment>
                            <comment id="12688939" author="zshao" created="Tue, 24 Mar 2009 23:49:56 +0000"  >&lt;p&gt;Committed revision 758089.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12416588">HIVE-336</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12410221">HIVE-136</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12419352">HIVE-365</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12417027">HIVE-352</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12419278">HIVE-358</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12413755">HIVE-266</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12413976">HIVE-270</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12402461" name="HIVE-337.1.patch" size="174681" author="zshao" created="Wed, 18 Mar 2009 08:54:47 +0000"/>
                            <attachment id="12402862" name="HIVE-337.2.patch" size="177060" author="zshao" created="Sat, 21 Mar 2009 01:35:09 +0000"/>
                            <attachment id="12403495" name="HIVE-337.5.patch" size="638606" author="zshao" created="Tue, 24 Mar 2009 07:33:26 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 11 Mar 2009 20:18:04 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>73604</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 37 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0l993:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>122149</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>&lt;a href=&quot;https://issues.apache.org/jira/browse/HIVE-337&quot; title=&quot;LazySimpleSerDe should support multi-level nested array, map, struct types&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HIVE-337&quot;&gt;&lt;strike&gt;HIVE-337&lt;/strike&gt;&lt;/a&gt;. LazySimpleSerDe to support multi-level nested array, map, struct types. (zshao)</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>