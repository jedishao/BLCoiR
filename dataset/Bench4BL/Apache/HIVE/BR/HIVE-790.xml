<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 00:50:33 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HIVE-790/HIVE-790.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HIVE-790] race condition related to ScriptOperator + UnionOperator</title>
                <link>https://issues.apache.org/jira/browse/HIVE-790</link>
                <project id="12310843" key="HIVE">Hive</project>
                    <description>&lt;p&gt;ScriptOperator uses a second thread to output the rows to the children operators. In a corner case which contains a union, 2 threads might be outputting data into the same operator hierarchy and caused race conditions.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
CREATE TABLE tablea (cola STRING);
SELECT *
FROM (
    SELECT TRANSFORM(cola)
    USING &apos;cat&apos;
    AS cola
    FROM tablea
  UNION ALL
    SELECT cola as cola
    FROM tablea
) a;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12433894">HIVE-790</key>
            <summary>race condition related to ScriptOperator + UnionOperator</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="nzhang">Ning Zhang</assignee>
                                    <reporter username="zshao">Zheng Shao</reporter>
                        <labels>
                    </labels>
                <created>Tue, 25 Aug 2009 00:56:09 +0000</created>
                <updated>Sat, 17 Dec 2011 00:07:18 +0000</updated>
                            <resolved>Tue, 1 Sep 2009 21:36:58 +0000</resolved>
                                                    <fixVersion>0.4.0</fixVersion>
                                    <component>Query Processor</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12747455" author="he yongqiang" created="Tue, 25 Aug 2009 15:15:09 +0000"  >&lt;p&gt;This query can not be compiled with the truck code.&lt;/p&gt;</comment>
                            <comment id="12747527" author="zshao" created="Tue, 25 Aug 2009 18:08:03 +0000"  >&lt;p&gt;updated the query.&lt;/p&gt;</comment>
                            <comment id="12747574" author="nzhang" created="Tue, 25 Aug 2009 19:00:49 +0000"  >&lt;p&gt;The above query still has semantics analysis error. Here&apos;s a working example demonstrating the bug:&lt;/p&gt;

&lt;p&gt;select * from (&lt;br/&gt;
    select transform(a) using &apos;cat&apos; as cola from nzhang_tt &lt;br/&gt;
  union all &lt;br/&gt;
    select transform(a) using &apos;cat&apos; as cola from nzhang_tt) s;&lt;/p&gt;


&lt;p&gt;The result is 3 rows:&lt;br/&gt;
1&lt;br/&gt;
2&lt;br/&gt;
3&lt;/p&gt;

&lt;p&gt;But the query:&lt;/p&gt;

&lt;p&gt;select cola from (&lt;br/&gt;
    select a as cola from nzhang_tt &lt;br/&gt;
  union all &lt;br/&gt;
    select a as cola from nzhang_tt) s;&lt;/p&gt;

&lt;p&gt;returns 6 rows:&lt;/p&gt;

&lt;p&gt;1&lt;br/&gt;
1&lt;br/&gt;
2&lt;br/&gt;
2&lt;br/&gt;
3&lt;br/&gt;
3&lt;/p&gt;
</comment>
                            <comment id="12747611" author="athusoo" created="Tue, 25 Aug 2009 20:02:08 +0000"  >&lt;p&gt;Which one is the correct result?&lt;/p&gt;</comment>
                            <comment id="12747624" author="nzhang" created="Tue, 25 Aug 2009 20:27:23 +0000"  >&lt;p&gt;The 6-row one is correct since it is  &quot;union all&quot; operator. &lt;/p&gt;</comment>
                            <comment id="12747659" author="nzhang" created="Tue, 25 Aug 2009 21:30:28 +0000"  >&lt;p&gt;Another related bug:&lt;/p&gt;

&lt;p&gt;&amp;#8211; bug1&lt;br/&gt;
select * from (&lt;br/&gt;
    select transform(b) using &apos;cat&apos; as cola from nzhang_tt&lt;br/&gt;
  union all&lt;br/&gt;
    select transform(c) using &apos;cat&apos; as cola from nzhang_tt) s;&lt;/p&gt;

&lt;p&gt;results:&lt;br/&gt;
  NULL&lt;br/&gt;
  NULL&lt;br/&gt;
  NULL&lt;/p&gt;

&lt;p&gt;&amp;#8211; bug2&lt;br/&gt;
select * from (&lt;br/&gt;
    select b as cola from nzhang_tt&lt;br/&gt;
  union all&lt;br/&gt;
    select c as cola from nzhang_tt) s;&lt;br/&gt;
results:&lt;br/&gt;
  NULL&lt;br/&gt;
  b&lt;br/&gt;
  NULL&lt;br/&gt;
  e&lt;br/&gt;
  NULL&lt;br/&gt;
  i&lt;/p&gt;

&lt;p&gt;Data in the table:&lt;/p&gt;

&lt;p&gt;select b, c from nzhang_tt;&lt;/p&gt;

&lt;p&gt;results: &lt;br/&gt;
  b	c&lt;br/&gt;
  e	f&lt;br/&gt;
  i	j&lt;/p&gt;

&lt;p&gt;This bug may not be only due to race condition between threads. Investigating the more generic bug in UNION operator.&lt;/p&gt;</comment>
                            <comment id="12747681" author="nzhang" created="Tue, 25 Aug 2009 22:01:56 +0000"  >&lt;p&gt;Found out the reason for bug2: nzhang_tt is stored as RCFile and it turns out to be a bug in RCFile rather than UNION all. Will file a bug for RCFile. Bug1 and the original bug is still caused by multi-threading. &lt;/p&gt;</comment>
                            <comment id="12747743" author="he yongqiang" created="Wed, 26 Aug 2009 02:21:00 +0000"  >&lt;p&gt;Hi Ning, i uploaded a patch for hive-796. That is a bug in HiveInputFormat which incorrectly erases column ids previously set. Can you have a try again? Thanks.&lt;/p&gt;</comment>
                            <comment id="12748222" author="nzhang" created="Thu, 27 Aug 2009 00:39:00 +0000"  >&lt;p&gt;This patch solves the bug in &quot;UNION ALL&quot; two SCRIPT operators but only show results from one operator. The reason is because the UNION Operator has two parents and when one of the parent is still OPEN, it shouldn&apos;t close its child operator. &lt;/p&gt;

&lt;p&gt;Will look the race condition issue and try to reproduce it.&lt;/p&gt;</comment>
                            <comment id="12748229" author="zshao" created="Thu, 27 Aug 2009 01:32:13 +0000"  >&lt;p&gt;@Hive-790.patch:&lt;br/&gt;
1547:  If this operator can be closed only if all parents are in the state FINISHED. &lt;br/&gt;
An extra &quot;If&quot; at the beginning?&lt;/p&gt;

&lt;p&gt;Do we need a new state? I think &quot;CLOSE&quot; is enough - it means CLOSE is called on an operator. A child just need to check if all parents&apos; states are CLOSE.&lt;br/&gt;
We just need another function &quot;areAllParentsClosed&quot;.&lt;/p&gt;


&lt;p&gt;The result of the test case is non-deterministic. Can you add a &quot;SORT BY&quot; at the end?&lt;/p&gt;</comment>
                            <comment id="12748262" author="nzhang" created="Thu, 27 Aug 2009 05:05:34 +0000"  >&lt;p&gt;@zheng, I&apos;ll fix the comment and the test query.&lt;/p&gt;

&lt;p&gt;As for the new state, maybe &quot;FINISH&quot; is not a good name for it but I think we need two states since they have two different situations when an operator has two or more parents: &lt;br/&gt;
 1) the close() is called on this operator, but it doesn&apos;t guarantee all its child operators are also called close() (the FINISH state)&lt;br/&gt;
 2) the close() is called and all its children are called close() (the CLOSE state).&lt;/p&gt;

&lt;p&gt;The current code set the state CLOSE at the end of the function, which means all its children (eventually desendants) are closed. So it is the second semantics. What you proposed is the first semantics, to implement which we need to move the statement to set the state to CLOSE to the beginning of the close() function (just after the check of the CLOSE state and return if true). &lt;/p&gt;

&lt;p&gt;We need both both states since if we just have 1 state (CLOSE) and assign it in the beginning, if there are two parents to the operator, when the first parent call close(), this operator will set it state to CLOSE and just return without calling close() to all its children (since the other parent has not been closed). When the second parent call close(), it just return since its state is already closed. So this end up all children are not closed. We should not remove the CLOSE state checkup in the beginning since that may cause an operator being closed multiple times.&lt;/p&gt;

&lt;p&gt;We cannot use just the CLOSE state as it is in the current implementation as well since the CLOSE state is set at the end of the close() function. When a parent calls this operator&apos;s close(), the parent&apos;s state is still not in CLOSE. So we end up just return and don&apos;t close the child operators. If we have the FINISH state and this state is set at the beginning of close(), whenever a parent calls close(), the parent is in the FINISH state and this operator can check and treat FINISH the same as CLOSE except that this operator hasn&apos;t return yet. &lt;/p&gt;</comment>
                            <comment id="12748265" author="nzhang" created="Thu, 27 Aug 2009 05:44:03 +0000"  >&lt;p&gt;This patch incorporated Zheng&apos;s comments. &lt;/p&gt;

&lt;p&gt;Also changed the UnionOperator.processOp to synchronized. This seems fixed the race condition issue &amp;#8211; the 2nd mapping phase passed w/o IOException. The reducers are still running but the &quot;UNION&quot; and &quot;SCRIPT&quot; operators should already passed. &lt;/p&gt;

&lt;p&gt;Will look into any possible performance hit of the introduction of synchronized. We should open another JIRA if there is any. &lt;/p&gt;</comment>
                            <comment id="12748277" author="zshao" created="Thu, 27 Aug 2009 06:41:33 +0000"  >&lt;p&gt;Overall it looks good.&lt;/p&gt;

&lt;p&gt;Can you measure the performance impact by running a union of 2 simple &quot;select *&quot;? If it&apos;s less than 5%, let&apos;s just leave it as it is. Otherwise let&apos;s open another JIRA to improve it.&lt;/p&gt;

&lt;p&gt;UnionOperator&apos;s close() also needs to be synchronized.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;We need both both states since if we just have 1 state (CLOSE) and assign it in the beginning, if there are two parents to the operator, when the first parent call close(), this operator will set it state to CLOSE and just return without calling close() to all its children (since the other parent has not been closed). When the second parent call close(), it just return since its state is already closed. So this end up all children are not closed. We should not remove the CLOSE state checkup in the beginning since that may cause an operator being closed multiple times.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can we do this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void close(&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; abort) {
  &lt;span class=&quot;code-comment&quot;&gt;// only close when all parents are closed.
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!allParentsAreClosed()) {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
  }

  &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.state = CLOSE;

  &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;children.size(); i++) {
    children.get(i).close(abort);
  }
}

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="12748278" author="zshao" created="Thu, 27 Aug 2009 06:47:52 +0000"  >&lt;p&gt;The code above does not allow simple overriding of the close function.&lt;br/&gt;
The following code does.  It mimics the structure of initialize(...).&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void close(&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; abort) {
  &lt;span class=&quot;code-comment&quot;&gt;// only close when all parents are closed.
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!allParentsAreClosed()) {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
  }

  &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.state = CLOSE;
  &lt;span class=&quot;code-comment&quot;&gt;// Close &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.closeOp(&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; abort);

  &lt;span class=&quot;code-comment&quot;&gt;// Close all children
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;children.size(); i++) {
    children.get(i).close(abort);
  }
}

&lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; void closeOp(&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; abort) {
  &lt;span class=&quot;code-comment&quot;&gt;// Different &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; will have different states.
&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;I am also OK if you do want to add a new state, but please rename the states to something like &quot;CLOSING, CLOSED&quot;, instead of &quot;FINISHED&quot;, &quot;CLOSE&quot; which are harder to understand.&lt;/p&gt;</comment>
                            <comment id="12748279" author="nzhang" created="Thu, 27 Aug 2009 07:02:49 +0000"  >&lt;p&gt;These functions lacks the CLOSE state check at the beginning:&lt;/p&gt;

&lt;p&gt;    if ( state == State.CLOSE )&lt;br/&gt;
      return;&lt;/p&gt;

&lt;p&gt;So if the close() function is called twice, there is no guard to guarantee the body of the close()  (meaning closeOp and close() of all its children) is called only once. If we can guarantee the close() is called only once, then this implementation should be fine and we don&apos;t need two states. &lt;/p&gt;</comment>
                            <comment id="12748420" author="zshao" created="Thu, 27 Aug 2009 16:18:47 +0000"  >&lt;p&gt;Added the guard.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void close(&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; abort) {

  &lt;span class=&quot;code-comment&quot;&gt;// Do not close twice
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.state == CLOSE) {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
  }

  &lt;span class=&quot;code-comment&quot;&gt;// only close when all parents are closed.
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!allParentsAreClosed()) {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
  }

  &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.state = CLOSE;
  &lt;span class=&quot;code-comment&quot;&gt;// Close &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.closeOp(&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; abort);

  &lt;span class=&quot;code-comment&quot;&gt;// Close all children
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;children.size(); i++) {
    children.get(i).close(abort);
  }
}

&lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; void closeOp(&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; abort) {
  &lt;span class=&quot;code-comment&quot;&gt;// Different &lt;span class=&quot;code-keyword&quot;&gt;operator&lt;/span&gt; will have different states.
&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12748477" author="nzhang" created="Thu, 27 Aug 2009 17:54:09 +0000"  >&lt;p&gt;Discussed with Zheng offline. Zheng&apos;s proposal works as long as we change the semantics of CLOSE state from &quot;all its parents and children are closed&quot; to &quot;all its parents are closed, but not necessarily its children&quot;. It should be fine since we don&apos;t need to first semantics now. If it is needed later we probably need to add another state. &lt;/p&gt;

&lt;p&gt;Also for the close() to be synchronized, it seems not necessary for the script operator since close() is always called by the main thread and the union operator&apos;s close is called by one script operator at a time. &lt;/p&gt;



</comment>
                            <comment id="12748501" author="nzhang" created="Thu, 27 Aug 2009 18:49:16 +0000"  >&lt;p&gt;Incorporated Zheng&apos;s comments.&lt;/p&gt;</comment>
                            <comment id="12748522" author="nzhang" created="Thu, 27 Aug 2009 19:32:13 +0000"  >&lt;p&gt;Measured the performance of UnionOperator.processOp() sync vs. no-sync. Surprisingly the sync one performs a little bit better. Here&apos;s the query:&lt;/p&gt;

&lt;p&gt;insert overwrite table tmp_nzhang_ad_union select * from (select * from nzhang_ad_imps_2_lazysimple union all select * from nzhang_ad_imps_2_lazysimple) s;&lt;/p&gt;

&lt;p&gt;The table nzhang_ad_imps_2_lazysimple has 180k rows and about 100MB. I run the query twice for each test and looked at the mapper&apos;s log for the wallclock time (end_time-begin_time).&lt;/p&gt;

&lt;p&gt;Sync:&lt;br/&gt;
mappers of 1st MapRed job:    avg over all mappers of two runs: 3.75025 sec&lt;br/&gt;
mappers of 2nd MapRed Job: avg over all mappers of two runs: 5.152 sec.&lt;/p&gt;

&lt;p&gt;No-sync:&lt;br/&gt;
mappers of 1st MapRed job:    avg over all mappers of two runs: 4.1065 sec&lt;br/&gt;
mappers of 2nd MapRed Job: avg over all mappers of two runs: 5.252 sec.&lt;/p&gt;</comment>
                            <comment id="12748527" author="nzhang" created="Thu, 27 Aug 2009 19:35:15 +0000"  >&lt;p&gt;BTW, the performance testing is on the test cluster, so no other jobs are running. &lt;/p&gt;</comment>
                            <comment id="12748580" author="zshao" created="Thu, 27 Aug 2009 21:25:17 +0000"  >&lt;p&gt;@Hive-790_3.patch:&lt;br/&gt;
We need to change the close() method in all XXXOperator to be named closeOp() (and possibly remove the check of &quot;this.STATE == CLOSE&quot;)&lt;/p&gt;

&lt;p&gt;Also, please run all tests and make sure they all pass.&lt;/p&gt;</comment>
                            <comment id="12749041" author="nzhang" created="Sat, 29 Aug 2009 00:18:17 +0000"  >&lt;p&gt;Attached a new patch Hive-790_4.patch that solves some other issues when running unit tests. One issue is found that some operators are are called close(). This may cause problem for union_all operator that assumes all parents should be closed before it can close. &lt;br/&gt;
Also change the Operator.close() to be a generic close function for all operators. Other operators that inherent it shouldn&apos;t reimplement the logic over and over again. If they have special clean up to do, include it in closeOp() which can be override from Operator.. &lt;/p&gt;
</comment>
                            <comment id="12749579" author="namit" created="Mon, 31 Aug 2009 19:07:50 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;looks good - will commit if the tests pass&lt;/p&gt;</comment>
                            <comment id="12749635" author="namit" created="Mon, 31 Aug 2009 21:41:03 +0000"  >&lt;p&gt;Committed. Thanks Ning&lt;/p&gt;</comment>
                            <comment id="12749638" author="zshao" created="Mon, 31 Aug 2009 21:45:39 +0000"  >&lt;p&gt;do we want to commit to both 0.4 and trunk since this is a bug fix?&lt;/p&gt;</comment>
                            <comment id="12749757" author="nzhang" created="Tue, 1 Sep 2009 04:56:34 +0000"  >&lt;p&gt;Tested performance on a larger data set: the base table is 47 million rows of ad_imps_2 with compressed storage of 89MB. The query is &lt;/p&gt;

&lt;p&gt;insert overwrite table Tmp select * from (select * from Base union all select * from Base) s;&lt;/p&gt;

&lt;p&gt;With synchronized UnionOperator.processOp(), mapper 1 got average time of 476.05 secs, mapper2 average time = 648.5 secs&lt;br/&gt;
With non-sync UnionOperator.processOp(), mapper 1 average = 476.34 secs, mapper2 average time = 655.117 sec. &lt;/p&gt;

&lt;p&gt;The union operator is executed in mapper 1 and there is almost no difference by introducing the synchronized keyword. So no new JIRA is needed for performance regression.&lt;/p&gt;</comment>
                            <comment id="12749967" author="namit" created="Tue, 1 Sep 2009 16:23:54 +0000"  >&lt;p&gt;I will try to apply the existing patch to 0.4, and see if it works&lt;/p&gt;</comment>
                            <comment id="12749970" author="namit" created="Tue, 1 Sep 2009 16:28:26 +0000"  >&lt;p&gt;@Ning, there were some problems with the patch when I applied to 0.4 - can you re-generate the patch for 0.4 &lt;/p&gt;</comment>
                            <comment id="12749971" author="namit" created="Tue, 1 Sep 2009 16:28:38 +0000"  >&lt;p&gt;need to fix for 0.4 also &lt;/p&gt;</comment>
                            <comment id="12750084" author="nzhang" created="Tue, 1 Sep 2009 20:26:57 +0000"  >&lt;p&gt;patch Hive_790_0.4.0.patch is the patch for branch 0.4.0. &lt;/p&gt;</comment>
                            <comment id="12750115" author="namit" created="Tue, 1 Sep 2009 21:36:58 +0000"  >&lt;p&gt;committed in 0.4 also - thanks Ning&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12417833" name="Hive-790.patch" size="11063" author="nzhang" created="Thu, 27 Aug 2009 00:39:00 +0000"/>
                            <attachment id="12417848" name="Hive-790_2.patch" size="12066" author="nzhang" created="Thu, 27 Aug 2009 05:44:03 +0000"/>
                            <attachment id="12417913" name="Hive-790_3.patch" size="12636" author="nzhang" created="Thu, 27 Aug 2009 18:49:16 +0000"/>
                            <attachment id="12418042" name="Hive-790_4.patch" size="19053" author="nzhang" created="Sat, 29 Aug 2009 00:18:17 +0000"/>
                            <attachment id="12418293" name="Hive_790_0.4.0.patch" size="17971" author="nzhang" created="Tue, 1 Sep 2009 20:26:57 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 25 Aug 2009 15:15:09 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>73302</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 14 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0lbr3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>122554</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>