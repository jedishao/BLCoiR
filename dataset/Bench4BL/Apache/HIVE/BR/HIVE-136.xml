<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 00:39:51 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HIVE-136/HIVE-136.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HIVE-136] SerDe should escape some special characters</title>
                <link>https://issues.apache.org/jira/browse/HIVE-136</link>
                <project id="12310843" key="HIVE">Hive</project>
                    <description>&lt;p&gt;MetadataTypedColumnsetSerDe and DynamicSerDe should escape some special characters like &apos;\n&apos; or the column/item/key separator.&lt;br/&gt;
Otherwise the data will look corrupted.&lt;/p&gt;

&lt;p&gt;We plan to deprecate MetadataTypedColumnsetSerDe and DynamicSerDe for the simple delimited format, and use LazySimpleSerDe instead.&lt;br/&gt;
So LazySimpleSerDe needs to have the capability of escaping and unescaping.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12410221">HIVE-136</key>
            <summary>SerDe should escape some special characters</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="zshao">Zheng Shao</assignee>
                                    <reporter username="zshao">Zheng Shao</reporter>
                        <labels>
                    </labels>
                <created>Mon, 8 Dec 2008 21:36:23 +0000</created>
                <updated>Sat, 17 Dec 2011 00:07:52 +0000</updated>
                            <resolved>Thu, 2 Jul 2009 02:03:46 +0000</resolved>
                                    <version>0.3.0</version>
                                    <fixVersion>0.4.0</fixVersion>
                                    <component>Serializers/Deserializers</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12654585" author="zshao" created="Mon, 8 Dec 2008 21:41:56 +0000"  >&lt;p&gt;The problem breaks down to 3 items:&lt;/p&gt;

&lt;p&gt;1. When loading the data, the user would be responsible for providing data in the expected escaped format. For example, in order to represent in the text file one field containing a carriage return, it should be written as &quot;\n&quot;. Sequence file does not have to escape &quot;\n&quot; but that will be recommended. Both file formats would need to escape column/item/key separator.&lt;/p&gt;

&lt;p&gt;2. When the serde is reading the data, it should unescape the data. This means string.split need to be replaced by a scan, which will have a little performance loss.&lt;/p&gt;

&lt;p&gt;3. When the serde is writing the data, it should escape the data. This also means a scan of the string and conversion to a new string, which also have a little performance loss.&lt;/p&gt;</comment>
                            <comment id="12656498" author="hammer" created="Sun, 14 Dec 2008 23:08:21 +0000"  >&lt;p&gt;Adding to &quot;Serializers/Deserializers&quot; component.&lt;/p&gt;</comment>
                            <comment id="12665737" author="zshao" created="Wed, 21 Jan 2009 07:06:47 +0000"  >&lt;p&gt;Proposal:&lt;/p&gt;

&lt;p&gt;1. For serialization:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;\ -&amp;gt; &lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/li&gt;
	&lt;li&gt;newline -&amp;gt; \n&lt;/li&gt;
	&lt;li&gt;carriage return -&amp;gt; \r&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The following characters are escaped only if they are column/item/key separators or quotations:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;null character -&amp;gt; \000 (octal number)&lt;/li&gt;
	&lt;li&gt;^A -&amp;gt; \001&lt;/li&gt;
	&lt;li&gt;^B -&amp;gt; \002&lt;br/&gt;
...&lt;/li&gt;
	&lt;li&gt;tab -&amp;gt; \t&lt;br/&gt;
...&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;2. For deserialization:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt; -&amp;gt; \&lt;/li&gt;
	&lt;li&gt;\n -&amp;gt; newline&lt;/li&gt;
	&lt;li&gt;\r -&amp;gt; carriage return&lt;/li&gt;
	&lt;li&gt;\xxx (where xxx are octal number from 000 to 177 (127 in decimal) )&lt;/li&gt;
	&lt;li&gt;\0 -&amp;gt; null character&lt;/li&gt;
	&lt;li&gt;\ (without a match above) -&amp;gt; \&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;In this proposal, we don&apos;t support quotation (&quot; and &apos;). Quotation will be required to read mysql/oracle dumped data, but I hope to address it in a different serde since we need to distinguish the &lt;/p&gt;</comment>
                            <comment id="12666346" author="jsensarma" created="Thu, 22 Jan 2009 23:20:44 +0000"  >&lt;p&gt;looks like in right direction. questions:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;i like the logic of escaping row/column/key/item separators. do we allow anything other than newline to be row separator?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;for deserialization - shouldn&apos;t we only unescape what we might have escaped during serialization? (so should not be unescaping octals and nulls for example)&lt;/li&gt;
&lt;/ul&gt;


</comment>
                            <comment id="12666348" author="zshao" created="Thu, 22 Jan 2009 23:32:30 +0000"  >&lt;p&gt;1. The code does allow ROW SEPARATOR to be different from &apos;\n&apos;;&lt;/p&gt;

&lt;p&gt;2. For deserialization, we might deserialize from user-generated data (data generated outside of hive). If that data do escape a single back-slash to be double back-slashes, then &lt;/p&gt;

&lt;p&gt;Basically the principle of escaping in the serialization phase is to escape as less as possible, so in most cases, the user does not need to care about escaping when reading the data (if the data do not contain these special characters). And if the user does do unescaping, he just needs to follow the steps in the deserialization mentioned above - without considering what is the actual column separator.&lt;/p&gt;

&lt;p&gt;The principle of unescaping in the deserialization phase is to unescape as much as possible (well, if the user writes single backslash to be double backslash, then the only reason that there is still single backslash in the file is because user escaped something.) This also helps the user in that his escaping code does not need to be changed for different column separators.&lt;/p&gt;
</comment>
                            <comment id="12666627" author="jsensarma" created="Fri, 23 Jan 2009 17:52:54 +0000"  >&lt;p&gt;for #1 - so if the row separator can be other than newline - i am guessing u want to generalize to escaping to whatever the row separator is (as opposed to specifically escaping newlines) - right?&lt;/p&gt;

&lt;p&gt;also - if there is a literal &apos;\n&apos; sequence in the original string - are we going to convert into &apos;&lt;br class=&quot;atl-forced-newline&quot; /&gt;n&apos; during serialization and then match &apos;&lt;br class=&quot;atl-forced-newline&quot; /&gt;&apos; back in deserialization (so as to leave &apos;\n&apos; back in deserialized string). generalize to other separators as well of course.&lt;/p&gt;

&lt;p&gt;#2 - I am uncomfortable unescaping more than what we escape. for example - let&apos;s say there&apos;s a \XXX symbol in some text file. Now we need to feed it into a transform script. we unescape when reading the text file - but we do not escape it back when sending to script. So the user script does not see the raw data in the file. &lt;/p&gt;

&lt;p&gt;Presumably - if the user had put \XXX in the file - then they knew how to handle it in their scripts and we are needlessly tampering with this data.&lt;/p&gt;

&lt;p&gt;if more aggressive unescaping is required  - we can always provide unescape UDFs. That would be much better since we could have some standard semantics for the unescaping (json/html/xml etc)&lt;/p&gt;
</comment>
                            <comment id="12666830" author="jsensarma" created="Sat, 24 Jan 2009 03:07:30 +0000"  >&lt;p&gt;ignore the comment on &apos;\n&apos; -&amp;gt; &apos;&lt;br class=&quot;atl-forced-newline&quot; /&gt;n&apos; - looks like it&apos;s already covered. the jira is not showing the backslashes - but i happened to look at an unread email and it much more readable.&lt;/p&gt;</comment>
                            <comment id="12667347" author="zshao" created="Mon, 26 Jan 2009 18:45:36 +0000"  >&lt;p&gt;&amp;gt; if more aggressive unescaping is required - we can always provide unescape UDFs. That would be much better since we could have some standard semantics for the unescaping (json/html/xml etc)&lt;/p&gt;

&lt;p&gt;Let&apos;s say the content of the file contains something like &quot;\ \ 0 0 5&quot;, and also &quot;\ 0 0 5&quot;. After the unescaping, both of them will be &quot;\ 0 0 5&quot; so UDF won&apos;t be able to unescape it further.&lt;/p&gt;


&lt;p&gt;I think it&apos;s OK that the escaping and unescaping are not exactly the same, given that a string escaped using our logic will be unescaped back to the original value.&lt;/p&gt;

&lt;p&gt;The extra logic in unescaping is only used to deal with &quot;impossible&quot; cases - the cases that will never happen using our own escaping logic. In that case we can either throw an error or &quot;guess&quot; what the user means.  My guess is that most other escaping logic will escape &quot;\&quot; to &quot;\ \&quot; (if they escape something using &quot;\&quot;, they have to escape &quot;\&quot; too). And they don&apos;t do special handling according to the actual separator (most of them escape all special characters). So if there is actually a &quot;\ 0 0 5&quot;, it is most likely be the ascii code 5.&lt;/p&gt;


&lt;p&gt;I am also OK if we just escape (and unescape reflectively) all characters outside the range of 32-127, plus &quot;\&quot; and all separators.  That makes the logic simpler. But it is still a question what if we see an &quot;impossible&quot; sequence of characters in the escaped stream, e.g. &quot;\ 0 4 0 &quot; (0x20, 32, space).&lt;/p&gt;</comment>
                            <comment id="12670887" author="jsensarma" created="Thu, 5 Feb 2009 20:20:49 +0000"  >&lt;p&gt;sorry for dropping the ball on this:&lt;/p&gt;

&lt;p&gt;the case that concerned me was the case of transform. say we have an input file with &quot;\005&quot; that was produced outside hive. based on what i understand - the proposal is to convert it to code point 5. i feel uncomfortable with this - i would rather that we pass thru this data and let the user (either in the transform script or via an explicit UDF) deal with it.  same concern with \0. (let&apos;s say i dump out a directory listing from a windows machine - &quot;\0&quot; fragment would be for a filename beginning with char &apos;0&apos; - instead if we unescape it to character 0 and pass it to the script - it would make it difficult to analyze this kind of data. I am also not sure how different languages would deal with a null character - some (like C) might drop the part beyond the null character altogether).&lt;/p&gt;

&lt;p&gt;so my vote would be to keep the unescaping to the bare minimum required and provide other functions to provide any enhanced semantics.&lt;/p&gt;</comment>
                            <comment id="12670894" author="zshao" created="Thu, 5 Feb 2009 20:34:46 +0000"  >&lt;p&gt;In &lt;a href=&quot;https://issues.apache.org/jira/browse/HIVE-270&quot; title=&quot;Add a lazy-deserialized SerDe for space and cpu efficient serialization of rows with primitive types&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HIVE-270&quot;&gt;&lt;del&gt;HIVE-270&lt;/del&gt;&lt;/a&gt; I put a link to how MySQL does escaping. That seems to be a clean solution although it won&apos;t support string.split or even splitting lines using &quot;\n&quot;.&lt;/p&gt;

&lt;p&gt;If we change &quot;\005&quot; with &quot;&lt;br class=&quot;atl-forced-newline&quot; /&gt;&quot; in your case, it won&apos;t work with the symmetric escaping/unescaping logic as well.&lt;/p&gt;

&lt;p&gt;What about this? We explicitly allow users to enable/disable escaping. If the user disable it, then we just do nothing (and the data may look corrupt to them - but that&apos;s the only thing we can do). If the user enable it, then we do the escaping/unescaping logic as I mentioned (not symmetric, but try to guess what the user really means).&lt;/p&gt;</comment>
                            <comment id="12723018" author="zshao" created="Tue, 23 Jun 2009 09:41:40 +0000"  >&lt;p&gt;This patch adds the capability of escaping, following the MySQL way.&lt;/p&gt;

&lt;p&gt;The command to create an escaped table is:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
CREATE TABLE table1 (a STRING, b STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY &apos;\t&apos; ESCAPED BY &apos;\\&apos;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12723477" author="zshao" created="Wed, 24 Jun 2009 07:13:49 +0000"  >&lt;p&gt;This patch fixed all test failures (except the existing failure in trunk).&lt;/p&gt;</comment>
                            <comment id="12725904" author="zshao" created="Wed, 1 Jul 2009 03:50:17 +0000"  >&lt;p&gt;Added some comments.&lt;/p&gt;</comment>
                            <comment id="12726280" author="namit" created="Thu, 2 Jul 2009 00:21:25 +0000"  >&lt;p&gt;LazyFactory does not support boolean&lt;/p&gt;</comment>
                            <comment id="12726282" author="zshao" created="Thu, 2 Jul 2009 00:27:12 +0000"  >&lt;p&gt;Added the missing functionality. Also added some comments in GroupByOperator.&lt;/p&gt;</comment>
                            <comment id="12726283" author="namit" created="Thu, 2 Jul 2009 00:33:00 +0000"  >&lt;p&gt;Also, remove the reference to LazyString from GroupByOperator.&lt;/p&gt;


&lt;p&gt;All primitives have 3 representations: Integer, IntWritable, LazyInteger&lt;br/&gt;
Same goes for String.&lt;/p&gt;

&lt;p&gt;We know in groupby, since we have converted to Standard Writable, it cannot be LazyString.&lt;/p&gt;</comment>
                            <comment id="12726284" author="namit" created="Thu, 2 Jul 2009 00:33:37 +0000"  >&lt;p&gt;Other than that, it looks good.&lt;/p&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;I will commit if after that change if tests pass.&lt;/p&gt;</comment>
                            <comment id="12726290" author="zshao" created="Thu, 2 Jul 2009 01:07:23 +0000"  >&lt;p&gt;Removed LazyString from GroupByOperator.&lt;/p&gt;</comment>
                            <comment id="12726297" author="namit" created="Thu, 2 Jul 2009 02:03:46 +0000"  >&lt;p&gt;Committed. Thanks Zheng&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12416592">HIVE-337</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12494883">HIVE-1898</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12413976">HIVE-270</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12411514" name="HIVE-136.1.patch" size="204712" author="zshao" created="Tue, 23 Jun 2009 09:41:40 +0000"/>
                            <attachment id="12411619" name="HIVE-136.2.patch" size="207268" author="zshao" created="Wed, 24 Jun 2009 07:13:49 +0000"/>
                            <attachment id="12412230" name="HIVE-136.3.patch" size="208784" author="zshao" created="Wed, 1 Jul 2009 03:50:16 +0000"/>
                            <attachment id="12412343" name="HIVE-136.4.patch" size="209165" author="zshao" created="Thu, 2 Jul 2009 00:27:12 +0000"/>
                            <attachment id="12412345" name="HIVE-136.5.patch" size="208825" author="zshao" created="Thu, 2 Jul 2009 01:07:23 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 14 Dec 2008 23:08:21 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>73759</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 23 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0l833:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>121960</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>