<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 01:11:43 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HIVE-405/HIVE-405.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HIVE-405] Cleanup operator initialization</title>
                <link>https://issues.apache.org/jira/browse/HIVE-405</link>
                <project id="12310843" key="HIVE">Hive</project>
                    <description>&lt;p&gt;We are always passing the same ObjectInspector, so there is no need to pass it again and again in forward.&lt;/p&gt;

&lt;p&gt;Also there is a problem that can ONLY be fixed by passing ObjectInspector in init: Outer Joins - Outer Joins may not be able to get ObjectInspectors for all inputs, as a result, there is no way to construct an output ObjectInspector based on the inputs. Currently we have hard-coded code that assumes joins are always outputting Strings, which did break but was hidden by the old framework (because we do toString() when serializing the output, and toString() is defined for all Java Classes).&lt;/p&gt;</description>
                <environment></environment>
        <key id="12422546">HIVE-405</key>
            <summary>Cleanup operator initialization</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="prasadc">Prasad Chakka</assignee>
                                    <reporter username="zshao">Zheng Shao</reporter>
                        <labels>
                    </labels>
                <created>Fri, 10 Apr 2009 08:07:18 +0000</created>
                <updated>Sat, 17 Dec 2011 00:07:47 +0000</updated>
                            <resolved>Fri, 17 Jul 2009 03:42:38 +0000</resolved>
                                    <version>0.4.0</version>
                                    <fixVersion>0.4.0</fixVersion>
                                    <component>Query Processor</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12698338" author="zshao" created="Mon, 13 Apr 2009 07:52:09 +0000"  >&lt;p&gt;This will also fix another bug: Currently UNION operator will merge the 2 streams of row objects, even if their ObjectInspectors are different. This will definitely create problems since a lot of code in Hive assumes the ObjectInspector will never change.&lt;/p&gt;</comment>
                            <comment id="12699099" author="zshao" created="Wed, 15 Apr 2009 07:34:15 +0000"  >&lt;p&gt;As part of the fix, ExprNodeEvaluator will have the following signature:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; class ExprNodeEvaluator {

  /**
   * Initialize should be called once and only once.
   * Return the ObjectInspector &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; value, given the rowInspector.
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; ObjectInspector initialize(ObjectInspector rowInspector) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; HiveException;

  /**
   * Evaluate the expression given the row.
   * This method should use the rowInspector passed in from initialize to 
   * inspect the row object.
   * The &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; value will be inspected by the &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; value of initialize. 
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; evaluate(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; row) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; HiveException;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12699338" author="scorona" created="Wed, 15 Apr 2009 19:49:43 +0000"  >&lt;p&gt;It is my understanding that this will also fix the problem of joining on map-type columns.&lt;/p&gt;

&lt;p&gt;Ex.&lt;/p&gt;

&lt;p&gt;SELECT foobar.foo,&lt;br/&gt;
foobar.mapcolumn&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;bar&amp;#39;&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;FROM foobar&lt;br/&gt;
JOIN barfoo ON ( foobar.mapcolumn&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;bar&amp;#39;&amp;#93;&lt;/span&gt; = barfoo.bleh )&lt;/p&gt;

&lt;p&gt;Will result the following exception thrown in the reduce phase:&lt;/p&gt;

&lt;p&gt;java.io.IOException: org.apache.hadoop.hive.ql.metadata.HiveException: java.lang.RuntimeException: Hive 2 Internal error: cannot evaluate index expression on string&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.ExecReducer.reduce(ExecReducer.java:169)&lt;br/&gt;
       at org.apache.hadoop.mapred.ReduceTask.run(ReduceTask.java:430)&lt;br/&gt;
       at org.apache.hadoop.mapred.Child.main(Child.java:155)&lt;br/&gt;
Caused by: org.apache.hadoop.hive.ql.metadata.HiveException: java.lang.RuntimeException: Hive 2 Internal error: cannot evaluate index expression on string&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.GroupByOperator.process(GroupByOperator.java:451)&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.Operator.forward(Operator.java:315)&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.JoinOperator.createForwardJoinObject(JoinOperator.java:259)&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.JoinOperator.genObject(JoinOperator.java:502)&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.JoinOperator.genObject(JoinOperator.java:491)&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.JoinOperator.genObject(JoinOperator.java:491)&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.JoinOperator.genObject(JoinOperator.java:491)&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.JoinOperator.checkAndGenObject(JoinOperator.java:532)&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.JoinOperator.endGroup(JoinOperator.java:514)&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.ExecReducer.reduce(ExecReducer.java:140)&lt;br/&gt;
       ... 2 more&lt;br/&gt;
Caused by: java.lang.RuntimeException: Hive 2 Internal error: cannot evaluate index expression on string&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.ExprNodeIndexEvaluator.evaluate(ExprNodeIndexEvaluator.java:64)&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.ExprNodeFuncEvaluator.evaluate(ExprNodeFuncEvaluator.java:72)&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.ExprNodeFuncEvaluator.evaluate(ExprNodeFuncEvaluator.java:72)&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.ExprNodeFuncEvaluator.evaluate(ExprNodeFuncEvaluator.java:72)&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.GroupByOperator.updateAggregations(GroupByOperator.java:370)&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.GroupByOperator.processHashAggr(GroupByOperator.java:470)&lt;br/&gt;
       at org.apache.hadoop.hive.ql.exec.GroupByOperator.process(GroupByOperator.java:445)&lt;br/&gt;
       ... 11 more&lt;/p&gt;</comment>
                            <comment id="12699343" author="zshao" created="Wed, 15 Apr 2009 19:57:29 +0000"  >&lt;p&gt;@Steve: Yes&lt;/p&gt;</comment>
                            <comment id="12730665" author="zshao" created="Tue, 14 Jul 2009 03:13:34 +0000"  >&lt;p&gt;@hive-405.patch:&lt;/p&gt;

&lt;p&gt;Please use &quot;parentsObjectInspector&quot; instead of adding &quot;inputObjectInspectors&quot; to Operator.java.&lt;/p&gt;
</comment>
                            <comment id="12730670" author="prasadc" created="Tue, 14 Jul 2009 03:46:57 +0000"  >&lt;p&gt;why? the name of the argument to initialize() uses input. isn&apos;t input same as parents?&lt;/p&gt;</comment>
                            <comment id="12730673" author="zshao" created="Tue, 14 Jul 2009 03:54:15 +0000"  >&lt;p&gt;I think Operator.inputObjectInspectors and Operator.parentsObjectInspector contain the same information.&lt;br/&gt;
So we don&apos;t need to add inputObjectInspectors to Operator.&lt;/p&gt;</comment>
                            <comment id="12730685" author="prasadc" created="Tue, 14 Jul 2009 04:29:40 +0000"  >&lt;p&gt;are you sure about it? that doesn&apos;t seem to be correct. parentsObjectInspector doesn&apos;t seem to have been set in some cases, especially for TableScan (or topOps)&lt;/p&gt;</comment>
                            <comment id="12731563" author="prasadc" created="Wed, 15 Jul 2009 17:13:32 +0000"  >&lt;p&gt;currently the operator graph is walked multiple times setting one field each time (output collector, mapredwork, alias, joinalias). actually joinalias doesn&apos;t seem to be called from anywhere. i will try to refactor few other things as well.&lt;/p&gt;</comment>
                            <comment id="12731826" author="prasadc" created="Thu, 16 Jul 2009 06:20:08 +0000"  >&lt;p&gt;this refactors operator initialization&lt;/p&gt;

&lt;p&gt;1) removes ObjectInspector arg from Operator.process()&lt;br/&gt;
2) eliminates one of the 4 operator initialization functions&lt;br/&gt;
3) simplified and moved most of MapOperator.initiaizeOp() to a specific function since it modifies operator graph while initializing it. this move eliminates some of the work arounds put in initialization code.&lt;br/&gt;
4) moved initialization of operators to ExecMapper/ExceReducer.configure() from map() and reducer().&lt;/p&gt;

</comment>
                            <comment id="12731954" author="namit" created="Thu, 16 Jul 2009 14:15:03 +0000"  >&lt;p&gt;I will take a look and get back to you.&lt;/p&gt;</comment>
                            <comment id="12731970" author="namit" created="Thu, 16 Jul 2009 14:49:59 +0000"  >&lt;p&gt;Can you regenerate the patch - there are some conflicts&lt;/p&gt;</comment>
                            <comment id="12731996" author="prasadc" created="Thu, 16 Jul 2009 15:41:58 +0000"  >&lt;p&gt;resolved conflicts with GroupByOperator.java and UnionOperator.java. I am testing the later conflict but uploaded latest patch.&lt;/p&gt;</comment>
                            <comment id="12732016" author="namit" created="Thu, 16 Jul 2009 16:54:44 +0000"  >&lt;p&gt;Does initializeOp() even need to call initializeChildren() ?&lt;/p&gt;

&lt;p&gt;This can be removed from all implementations of initializeOp() and can be added to Operator.initialize() after initializeOp()&lt;/p&gt;</comment>
                            <comment id="12732019" author="namit" created="Thu, 16 Jul 2009 16:57:45 +0000"  >&lt;p&gt;Thinking about it more, you should add a outputObjectInspector to Operator, which can be defaulted to inputObjectInspector&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;, but can be overridden by&lt;br/&gt;
specific initializeOp() - for example, groupBy.&lt;/p&gt;

&lt;p&gt;This way, initializeChildren() in Operator need not be called with inputObjectInspector&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;, but it can be called with outputObjectInspector&lt;/p&gt;</comment>
                            <comment id="12732025" author="namit" created="Thu, 16 Jul 2009 17:07:28 +0000"  >&lt;p&gt;Other than that, it looks good, you dont need to set &lt;br/&gt;
state = State.INIT in initializeChildren()&lt;/p&gt;


&lt;p&gt;the operator.initialize() will look like:&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;initializeOp()&lt;br/&gt;
state = INIT&lt;br/&gt;
initializeChildren()&lt;br/&gt;
..&lt;/p&gt;


&lt;p&gt;initializechildren() can be a private method which no one else should call&lt;/p&gt;

</comment>
                            <comment id="12732029" author="prasadc" created="Thu, 16 Jul 2009 17:19:10 +0000"  >&lt;p&gt;i thought about it but didn&apos;t do it for two reasons&lt;/p&gt;

&lt;p&gt;1) any operator can choose not to call initializeChildren. eg. MapOperator does not call initializeChildren() directly but calls initialize() on children directly with different ObjectInspector object for each child.&lt;/p&gt;

&lt;p&gt;2) ScriptOperator.initializeOp() seems to do some more stuff after calling initializeChildren() which is different from calling initiaizeChildren() after calling initializeOp()&lt;/p&gt;

&lt;p&gt;Even if 2) doesn&apos;t matter, I don&apos;t see how we can get around 1) in the scheme you suggested&lt;/p&gt;

&lt;p&gt;If you agree then I am going to upload a new patch which fixes TestOperators (which was failing after merging with trunk).&lt;/p&gt;</comment>
                            <comment id="12732040" author="namit" created="Thu, 16 Jul 2009 17:32:36 +0000"  >&lt;p&gt;As you said 2. does not matter - I dont think if we move initializeChildren() to the end, anything will change&lt;/p&gt;

&lt;p&gt;1. is needed - MapOperator is an exception, and it needs a different walker - it can override initializeChildren() to do nothing.&lt;br/&gt;
In some sense, it has more than one outputObjectInspectors, which is not true for any other operator - ExecMapper and ExecReducer are&lt;br/&gt;
different.&lt;/p&gt;

&lt;p&gt;I still think we should do 1. - and treat MapOperator as a exception&lt;/p&gt;</comment>
                            <comment id="12732053" author="prasadc" created="Thu, 16 Jul 2009 17:55:37 +0000"  >&lt;p&gt;Are you suggesting that we keep initializeChildren() method and override in MapOperator()? I think the current initialization methods has distinct functionalities&lt;/p&gt;

&lt;p&gt;1) Operator.initialize() &amp;#8211; makes sure that all parents are initialized before the operator is initialized. this also initializes common structures needed for all operators. this the only public initialization method.&lt;br/&gt;
2) Operator.initializeOp() &amp;#8211; does operator specific initialization including initialization of children. It is up to the operator in what order child operators need to be initialized. the base implementation will just call initializeChildren() with the output ObjectInspector. this is a protected method.&lt;br/&gt;
3) Operator.initializeChildren() &amp;#8211; calls initialize() on all children. this is a protected method.&lt;/p&gt;

&lt;p&gt;I think what we have here and you are proposing are pretty similar except that MapOperator() become more customized.&lt;/p&gt;

&lt;p&gt;But I agree that there should be an OutputObjectInspector field in Operator.java and that should be used while calling initialize() on children in Operator.java. I will make that change.&lt;/p&gt;</comment>
                            <comment id="12732057" author="namit" created="Thu, 16 Jul 2009 18:03:16 +0000"  >&lt;p&gt;&amp;gt;&amp;gt; Are you suggesting that we keep initializeChildren() method and override in MapOperator()?&lt;br/&gt;
yes&lt;/p&gt;


&lt;p&gt;Yes, MapOperator() becomes more customized, but all other operators become simplified&lt;br/&gt;
initializeOp() just calls operator specific initialization, if any.&lt;br/&gt;
By default, all children are initialized after that, with the outputObjectInspector (assuming there is only one).&lt;/p&gt;

&lt;p&gt;MapOperator overrides this behavior &amp;#8211; &lt;/p&gt;

&lt;p&gt;If we want to make it more general, we can have an array of outputObjectInspectors, one for each child - they will be the same except for MapOperator,&lt;br/&gt;
but then mapOperator can also fit in this framework - I dont think it is worth it to generalize at that level.&lt;/p&gt;


</comment>
                            <comment id="12732234" author="zshao" created="Thu, 16 Jul 2009 23:05:52 +0000"  >&lt;p&gt;Talked with Prasad on this offline.&lt;/p&gt;

&lt;p&gt;Since we already have an example of initializing children before we can finish all the initializations (ScriptOperator kicking off the thread that gets data from the script), I think it makes sense to keep the &quot;initializeChildren&quot; call inside the customized initializeOp().&lt;/p&gt;

&lt;p&gt;Another way to do this is to add a post-order intialize recursive call to the Operator. That is probably the cleanest approach - we will first do pre-order initialization, and then post-order initialization.&lt;/p&gt;</comment>
                            <comment id="12732268" author="prasadc" created="Fri, 17 Jul 2009 00:41:16 +0000"  >&lt;p&gt;for now i will leave the initializeChildren() inside initializeOp(). what do you guys say?&lt;/p&gt;</comment>
                            <comment id="12732276" author="namit" created="Fri, 17 Jul 2009 00:52:06 +0000"  >&lt;p&gt;i dont like it - but it is a minor issue and can be done later&lt;br/&gt;
so fine&lt;/p&gt;</comment>
                            <comment id="12732326" author="zshao" created="Fri, 17 Jul 2009 03:42:38 +0000"  >&lt;p&gt;Committed. Thanks Prasad.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12419434">HIVE-369</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12425375">HIVE-485</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12410450">HIVE-164</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12413649" name="hive-405.6.patch" size="78742" author="prasadc" created="Thu, 16 Jul 2009 06:20:08 +0000"/>
                            <attachment id="12413701" name="hive-405.7.patch" size="80315" author="prasadc" created="Thu, 16 Jul 2009 15:41:58 +0000"/>
                            <attachment id="12413771" name="hive-405.9.patch" size="90929" author="prasadc" created="Fri, 17 Jul 2009 03:03:04 +0000"/>
                            <attachment id="12413372" name="hive-405.patch" size="38463" author="prasadc" created="Tue, 14 Jul 2009 01:58:59 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 15 Apr 2009 19:49:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>73556</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 21 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0l9mf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>122209</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>&lt;a href=&quot;https://issues.apache.org/jira/browse/HIVE-405&quot; title=&quot;Cleanup operator initialization&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HIVE-405&quot;&gt;&lt;strike&gt;HIVE-405&lt;/strike&gt;&lt;/a&gt;. Cleanup operator initialization. (Prasad Chakka via zshao)</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>