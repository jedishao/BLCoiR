<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun Dec 04 00:14:28 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HIVE-5762/HIVE-5762.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HIVE-5762] Implement vectorized support for the DECIMAL data type</title>
                <link>https://issues.apache.org/jira/browse/HIVE-5762</link>
                <project id="12310843" key="HIVE">Hive</project>
                    <description>&lt;p&gt;Add support to allow queries referencing DECIMAL columns and expression results to run efficiently in vectorized mode.  Include unit tests and end-to-end tests. &lt;/p&gt;

&lt;p&gt;Before starting or at least going very far, please write design specification (a new section for the design spec attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/HIVE-4160&quot; title=&quot;Vectorized Query Execution in Hive&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HIVE-4160&quot;&gt;HIVE-4160&lt;/a&gt;) for how support for the different DECIMAL types should work in vectorized mode, and the roadmap, and have it reviewed. &lt;/p&gt;

&lt;p&gt;It may be feasible to re-use LongColumnVector and related VectorExpression classes for fixed-point decimal in certain data ranges. That should be at least considered to get faster performance and save code. For unlimited precision DECIMAL, a new column vector subtype may be needed, or a BytesColumnVector could be re-used.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12677832">HIVE-5762</key>
            <summary>Implement vectorized support for the DECIMAL data type</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12636846">HIVE-4160</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="3" iconUrl="https://issues.apache.org/jira/images/icons/statuses/inprogress.png" description="This issue is being actively worked on at the moment by the assignee.">In Progress</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="ehans">Eric Hanson</assignee>
                                    <reporter username="ehans">Eric Hanson</reporter>
                        <labels>
                    </labels>
                <created>Wed, 6 Nov 2013 18:27:00 +0000</created>
                <updated>Tue, 17 Dec 2013 23:39:03 +0000</updated>
                                                                                <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13839178" author="ehans" created="Wed, 4 Dec 2013 18:34:12 +0000"  >&lt;p&gt;The new fixed precision/scale decimal type DECIMAL(p, s) has maximum precision and scale of 38. 38 decimal digits, signed, will fit in a signed, 128-bit int (2 longs). 2^127-1 is 1.70141E+38. In a column, every number must have the same precision and scale, so that can be abstracted into the column vector or the VectorExpression operator itself and out if the individual data elements. &lt;/p&gt;

&lt;p&gt;So I&apos;m thinking that a new DecimalColumnVector type could be created that contains 2 arrays of long. &lt;/p&gt;

&lt;p&gt;class DecimalColumnVector extends ColumnVector &lt;/p&gt;
{
  long[] vectorLow;  // low order 64 bits of 128 bit int
  long[] vectorHigh; // high order 64 bits of 128 bit int
  int precision;
  int scale;
}

&lt;p&gt;Then arithmetic and comparisons can be implemented that can be fast by relying on standard arithmetic and comparisons on long as a building block. How exactly to do the arithmetic and comparisons operations needs more thought.&lt;/p&gt;</comment>
                            <comment id="13839190" author="ehans" created="Wed, 4 Dec 2013 18:43:46 +0000"  >&lt;p&gt;If dealing with the sign/carry bits is too difficult with 2 arrays of long, an alternative would be to use 4 arrays of int.&lt;/p&gt;</comment>
                            <comment id="13839195" author="ehans" created="Wed, 4 Dec 2013 18:50:16 +0000"  >&lt;p&gt;For p, s of 18 or less, a single long can be used. Of course, optimizing for this would need special-case code. With fixed-point arithmetic, this allows re-use of the existing code that operates on LongColumnVector to do comparisons and arithmetic.&lt;/p&gt;</comment>
                            <comment id="13843601" author="ehans" created="Mon, 9 Dec 2013 22:04:02 +0000"  >&lt;p&gt;I&apos;m thinking about using this basic structure for a decimal column vector for limited-precision decimals. Then a utility package of static functions can be implemented to do decimal arithmetic on individual values. It should be possible to make this a lot faster than if the code relies on java.math.BigDecimal, because it is less general, and because new() and garbage collection will be reduced.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class DecimalColumnVector &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; ColumnVector {
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; precision; &lt;span class=&quot;code-comment&quot;&gt;// precision of all elements in vector (max 38)
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; scale;     &lt;span class=&quot;code-comment&quot;&gt;// scale of all elements in vector (max 38)
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; WORDS_PER_VALUE = 4;

  /**
   * Logically a vector of 128 bit unsigned &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, that is &lt;span class=&quot;code-quote&quot;&gt;&quot;little-endian.&quot;&lt;/span&gt;  This
   * means that &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; a value v, v[0] is least significant. The 4-word
   * 32 bit values are treated as unsigned. However,the high-order bit
   * of the highest word (word 3) must be 0.
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[][] vector;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] sign;  &lt;span class=&quot;code-comment&quot;&gt;// -1 &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; negative, 0 &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; zero, 1 &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; positive
&lt;/span&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; DecimalColumnVector() {
    &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(VectorizedRowBatch.DEFAULT_SIZE);
    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; len = VectorizedRowBatch.DEFAULT_SIZE;
    vector = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[len][];
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; len; i++) {
      vector[i] = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[WORDS_PER_VALUE];
    }
    sign = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[len];
  }
...
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13844625" author="ehans" created="Tue, 10 Dec 2013 20:24:56 +0000"  >&lt;p&gt;I&apos;ll take charge of the overall design for this and the DecimalColumnVector code. Then I&apos;ll create other JIRAs for the independent parts, like VectorExpression classes for comparision, arithmetic, and so forth.&lt;/p&gt;</comment>
                            <comment id="13848119" author="ehans" created="Sat, 14 Dec 2013 00:56:40 +0000"  >&lt;p&gt;The above approach was getting to be quite complex. So instead I am now planning to use an array of Decimal128 objects (&lt;a href=&quot;https://issues.apache.org/jira/browse/HIVE-6017&quot; title=&quot;Contribute Decimal128 high-performance decimal(p, s) package from Microsoft to Hive&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HIVE-6017&quot;&gt;&lt;del&gt;HIVE-6017&lt;/del&gt;&lt;/a&gt;) in the DecimalColumnVector. &lt;/p&gt;</comment>
                            <comment id="13851096" author="ehans" created="Tue, 17 Dec 2013 23:39:03 +0000"  >&lt;p&gt;See &lt;a href=&quot;https://issues.apache.org/jira/browse/HIVE-6051&quot; title=&quot;Create DecimalColumnVector and a representative VectorExpression for decimal&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HIVE-6051&quot;&gt;&lt;del&gt;HIVE-6051&lt;/del&gt;&lt;/a&gt; for column vector code based on Decimal128.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310060">
                    <name>Container</name>
                                            <outwardlinks description="contains">
                                        <issuelink>
            <issuekey id="12685274">HIVE-6051</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12682264">HIVE-5918</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12682585">HIVE-5937</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12684145">HIVE-6017</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>357207</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 50 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1pkv3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>357497</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                </customfields>
    </item>
</channel>
</rss>