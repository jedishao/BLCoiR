<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 16:40:29 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-5816/HBASE-5816.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-5816] Balancer and ServerShutdownHandler concurrently reassign the same region</title>
                <link>https://issues.apache.org/jira/browse/HBASE-5816</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;The first assign thread exits with success after updating the RegionState to PENDING_OPEN, while the second assign follows immediately into &quot;assign&quot; and fails the RegionState check in setOfflineInZooKeeper(). This causes the master to abort.&lt;/p&gt;

&lt;p&gt;In the below case, the two concurrent assigns occurred when AM tried to assign a region to a dying/dead RS, and meanwhile the ShutdownServerHandler tried to assign this region (from the region plan) spontaneously.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
2012-04-17 05:44:57,648 INFO org.apache.hadoop.hbase.master.HMaster: balance hri=TABLE_ORDER_CUSTOMER,,1334017820846.fe38fe31caf40b6e607a3e6bbed6404b., src=hadoop05.sh.intel.com,60020,1334544902186, dest=xmlqa-clv16.sh.intel.com,60020,1334612497253
2012-04-17 05:44:57,648 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Starting unassignment of region TABLE_ORDER_CUSTOMER,,1334017820846.fe38fe31caf40b6e607a3e6bbed6404b. (offlining)
2012-04-17 05:44:57,648 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Sent CLOSE to serverName=hadoop05.sh.intel.com,60020,1334544902186, load=(requests=0, regions=0, usedHeap=0, maxHeap=0) &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; region TABLE_ORDER_CUSTOMER,,1334017820846.fe38fe31caf40b6e607a3e6bbed6404b.
2012-04-17 05:44:57,666 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Handling &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; unassigned node: /hbase/unassigned/fe38fe31caf40b6e607a3e6bbed6404b (region=TABLE_ORDER_CUSTOMER,,1334017820846.fe38fe31caf40b6e607a3e6bbed6404b., server=hadoop05.sh.intel.com,60020,1334544902186, state=RS_ZK_REGION_CLOSING)
2012-04-17 05:52:58,984 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Forcing OFFLINE; was=TABLE_ORDER_CUSTOMER,,1334017820846.fe38fe31caf40b6e607a3e6bbed6404b. state=CLOSED, ts=1334612697672, server=hadoop05.sh.intel.com,60020,1334544902186
2012-04-17 05:52:58,984 DEBUG org.apache.hadoop.hbase.zookeeper.ZKAssign: master:60000-0x236b912e9b3000e Creating (or updating) unassigned node &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; fe38fe31caf40b6e607a3e6bbed6404b with OFFLINE state
2012-04-17 05:52:59,096 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Using pre-existing plan &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; region TABLE_ORDER_CUSTOMER,,1334017820846.fe38fe31caf40b6e607a3e6bbed6404b.; plan=hri=TABLE_ORDER_CUSTOMER,,1334017820846.fe38fe31caf40b6e607a3e6bbed6404b., src=hadoop05.sh.intel.com,60020,1334544902186, dest=xmlqa-clv16.sh.intel.com,60020,1334612497253
2012-04-17 05:52:59,096 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Assigning region TABLE_ORDER_CUSTOMER,,1334017820846.fe38fe31caf40b6e607a3e6bbed6404b. to xmlqa-clv16.sh.intel.com,60020,1334612497253
2012-04-17 05:54:19,159 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Forcing OFFLINE; was=TABLE_ORDER_CUSTOMER,,1334017820846.fe38fe31caf40b6e607a3e6bbed6404b. state=PENDING_OPEN, ts=1334613179096, server=xmlqa-clv16.sh.intel.com,60020,1334612497253
2012-04-17 05:54:59,033 WARN org.apache.hadoop.hbase.master.AssignmentManager: Failed assignment of TABLE_ORDER_CUSTOMER,,1334017820846.fe38fe31caf40b6e607a3e6bbed6404b. to serverName=xmlqa-clv16.sh.intel.com,60020,1334612497253, load=(requests=0, regions=0, usedHeap=0, maxHeap=0), trying to assign elsewhere instead; retry=0
java.net.SocketTimeoutException: Call to /10.239.47.87:60020 failed on socket timeout exception: java.net.SocketTimeoutException: 120000 millis timeout &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; waiting &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; channel to be ready &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; read. ch : java.nio.channels.SocketChannel[connected local=/10.239.47.89:41302 remote=/10.239.47.87:60020]
        at org.apache.hadoop.hbase.ipc.HBaseClient.wrapException(HBaseClient.java:805)
        at org.apache.hadoop.hbase.ipc.HBaseClient.call(HBaseClient.java:778)
        at org.apache.hadoop.hbase.ipc.HBaseRPC$Invoker.invoke(HBaseRPC.java:283)
        at $Proxy7.openRegion(Unknown Source)
        at org.apache.hadoop.hbase.master.ServerManager.sendRegionOpen(ServerManager.java:573)
        at org.apache.hadoop.hbase.master.AssignmentManager.assign(AssignmentManager.java:1127)
        at org.apache.hadoop.hbase.master.AssignmentManager.assign(AssignmentManager.java:912)
        at org.apache.hadoop.hbase.master.AssignmentManager.assign(AssignmentManager.java:892)
        at org.apache.hadoop.hbase.master.handler.ClosedRegionHandler.process(ClosedRegionHandler.java:92)
        at org.apache.hadoop.hbase.executor.EventHandler.run(EventHandler.java:162)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:662)
Caused by: java.net.SocketTimeoutException: 120000 millis timeout &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; waiting &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; channel to be ready &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; read. ch : java.nio.channels.SocketChannel[connected local=/10.239.47.89:41302 remote=/10.239.47.87:60020]
        at org.apache.hadoop.net.SocketIOWithTimeout.doIO(SocketIOWithTimeout.java:164)
        at org.apache.hadoop.net.SocketInputStream.read(SocketInputStream.java:155)
        at org.apache.hadoop.net.SocketInputStream.read(SocketInputStream.java:128)
        at java.io.FilterInputStream.read(FilterInputStream.java:116)
        at org.apache.hadoop.hbase.ipc.HBaseClient$Connection$PingInputStream.read(HBaseClient.java:301)
        at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
        at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
        at java.io.DataInputStream.readInt(DataInputStream.java:370)
        at org.apache.hadoop.hbase.ipc.HBaseClient$Connection.receiveResponse(HBaseClient.java:541)
        at org.apache.hadoop.hbase.ipc.HBaseClient$Connection.run(HBaseClient.java:479)
2012-04-17 05:54:59,035 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: No previous transition plan was found (or we are ignoring an existing plan) &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; TABLE_ORDER_CUSTOMER,,1334017820846.fe38fe31caf40b6e607a3e6bbed6404b. so generated a random one; hri=TABLE_ORDER_CUSTOMER,,1334017820846.fe38fe31caf40b6e607a3e6bbed6404b., src=, dest=hadoop06.sh.intel.com,60020,1334544901894; 7 (online=7, exclude=serverName=xmlqa-clv16.sh.intel.com,60020,1334612497253, load=(requests=0, regions=0, usedHeap=0, maxHeap=0)) available servers
2012-04-17 05:54:59,035 DEBUG org.apache.hadoop.hbase.zookeeper.ZKAssign: master:60000-0x236b912e9b3000e Creating (or updating) unassigned node &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; fe38fe31caf40b6e607a3e6bbed6404b with OFFLINE state
2012-04-17 05:54:59,045 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Using pre-existing plan &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; region TABLE_ORDER_CUSTOMER,,1334017820846.fe38fe31caf40b6e607a3e6bbed6404b.; plan=hri=TABLE_ORDER_CUSTOMER,,1334017820846.fe38fe31caf40b6e607a3e6bbed6404b., src=, dest=hadoop06.sh.intel.com,60020,1334544901894
2012-04-17 05:54:59,045 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Assigning region TABLE_ORDER_CUSTOMER,,1334017820846.fe38fe31caf40b6e607a3e6bbed6404b. to hadoop06.sh.intel.com,60020,1334544901894
2012-04-17 05:54:59,046 FATAL org.apache.hadoop.hbase.master.HMaster: Unexpected state trying to OFFLINE; TABLE_ORDER_CUSTOMER,,1334017820846.fe38fe31caf40b6e607a3e6bbed6404b. state=PENDING_OPEN, ts=1334613299045, server=hadoop06.sh.intel.com,60020,1334544901894
java.lang.IllegalStateException
        at org.apache.hadoop.hbase.master.AssignmentManager.setOfflineInZooKeeper(AssignmentManager.java:1167)
        at org.apache.hadoop.hbase.master.AssignmentManager.assign(AssignmentManager.java:1107)
        at org.apache.hadoop.hbase.master.AssignmentManager.assign(AssignmentManager.java:912)
        at org.apache.hadoop.hbase.master.AssignmentManager.assign(AssignmentManager.java:892)
        at org.apache.hadoop.hbase.master.handler.ServerShutdownHandler.process(ServerShutdownHandler.java:259)
        at org.apache.hadoop.hbase.executor.EventHandler.run(EventHandler.java:162)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:662)
2012-04-17 05:54:59,047 INFO org.apache.hadoop.hbase.master.HMaster: Aborting
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12551344">HBASE-5816</key>
            <summary>Balancer and ServerShutdownHandler concurrently reassign the same region</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="ram_krish">ramkrishna.s.vasudevan</assignee>
                                    <reporter username="maryannxue">Maryann Xue</reporter>
                        <labels>
                    </labels>
                <created>Wed, 18 Apr 2012 03:04:15 +0000</created>
                <updated>Tue, 30 Dec 2014 04:37:04 +0000</updated>
                            <resolved>Tue, 30 Dec 2014 04:37:04 +0000</resolved>
                                    <version>0.90.6</version>
                                                    <component>master</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="13256170" author="maryannxue" created="Wed, 18 Apr 2012 03:34:52 +0000"  >&lt;p&gt;Replace abort with LOG.WARN.&lt;/p&gt;</comment>
                            <comment id="13256617" author="hadoopqa" created="Wed, 18 Apr 2012 14:54:48 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12523068/HBASE-5816.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12523068/HBASE-5816.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    -1 tests included.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1565//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1565//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13256663" author="umamaheswararao" created="Wed, 18 Apr 2012 15:54:15 +0000"  >&lt;p&gt;Maryann, This looks to be an issue in trunk also right?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!hijack &amp;amp;&amp;amp; !state.isClosed() &amp;amp;&amp;amp; !state.isOffline()) {
      &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; msg = &lt;span class=&quot;code-quote&quot;&gt;&quot;Unexpected state : &quot;&lt;/span&gt; + state + &lt;span class=&quot;code-quote&quot;&gt;&quot; .. Cannot transit it to OFFLINE.&quot;&lt;/span&gt;;
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.master.abort(msg, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(msg));
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; -1;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since region already assigned by previos call, state might have changed to inRegionTransition. If we just log an return now, i think it will just skip this assignment. I think it may be ok.&lt;/p&gt;

</comment>
                            <comment id="13256799" author="stack" created="Wed, 18 Apr 2012 18:38:33 +0000"  >&lt;p&gt;Thanks for filing the issue Maryann.  I think we need to address the root problem of two threads in the master both at the same time trying to assign the same region rather than do as is done here where we just stop the abort.  The patch as is will only move the problem down the line (we&apos;ll likely end up w/ a single region double assigned?).  Let me update the issue title.  This log snippet is a really good find.&lt;/p&gt;</comment>
                            <comment id="13256806" author="stack" created="Wed, 18 Apr 2012 18:43:45 +0000"  >&lt;p&gt;Changing title and upping the priority.  At a minimum the balancer and shutdown handler should populate a queue that a single assignment process works on rather than as we have now, two threads doing independent assigns or balancer should not move regions that are currently in RIT or regions that were moved recently, etc.&lt;/p&gt;</comment>
                            <comment id="13257194" author="maryannxue" created="Thu, 19 Apr 2012 03:33:04 +0000"  >&lt;p&gt;stack, your suggestion seems an ultimate solution to the current HMaster workflow. trunk has the same problem.&lt;br/&gt;
The case i attached were actually introduced by &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5396&quot; title=&quot;Handle the regions in regionPlans while processing ServerShutdownHandler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5396&quot;&gt;&lt;del&gt;HBASE-5396&lt;/del&gt;&lt;/a&gt;, which tried to let ServerShutdownHandler assign the region in an earlier stage instead of waiting for the TimeoutMonitor to do the job. But the isRegionOnline test seems too weak here.&lt;br/&gt;
      for (HRegionInfo hri : regionsFromRegionPlansForServer) {&lt;br/&gt;
        if (!this.services.getAssignmentManager().isRegionOnline(hri)) &lt;/p&gt;
{
          this.services.getAssignmentManager().assign(hri, true);
          reassignedPlans++;
        }
&lt;p&gt;      }&lt;/p&gt;

&lt;p&gt;However, i think any client call to HBaseAdmin.assign() that coincide at this point would cause the same problem. There is a lock guarding the private assign() method to deal with concurrent assigns, but the entire assign process is not atomic. It should be safe for the later thread just return or get an exception if the region has already been assigned by an earlier thread.&lt;/p&gt;</comment>
                            <comment id="13257195" author="maryannxue" created="Thu, 19 Apr 2012 03:33:16 +0000"  >&lt;p&gt;stack, your suggestion seems an ultimate solution to the current HMaster workflow. trunk has the same problem.&lt;br/&gt;
The case i attached were actually introduced by &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5396&quot; title=&quot;Handle the regions in regionPlans while processing ServerShutdownHandler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5396&quot;&gt;&lt;del&gt;HBASE-5396&lt;/del&gt;&lt;/a&gt;, which tried to let ServerShutdownHandler assign the region in an earlier stage instead of waiting for the TimeoutMonitor to do the job. But the isRegionOnline test seems too weak here.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (HRegionInfo hri : regionsFromRegionPlansForServer) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.services.getAssignmentManager().isRegionOnline(hri)) {
          &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.services.getAssignmentManager().assign(hri, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
          reassignedPlans++;
        }
      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;However, i think any client call to HBaseAdmin.assign() that coincide at this point would cause the same problem. There is a lock guarding the private assign() method to deal with concurrent assigns, but the entire assign process is not atomic. It should be safe for the later thread just return or get an exception if the region has already been assigned by an earlier thread.&lt;/p&gt;</comment>
                            <comment id="13257217" author="zhihyu@ebaysf.com" created="Thu, 19 Apr 2012 04:19:31 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5396&quot; title=&quot;Handle the regions in regionPlans while processing ServerShutdownHandler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5396&quot;&gt;&lt;del&gt;HBASE-5396&lt;/del&gt;&lt;/a&gt; was only integrated to 0.90&lt;br/&gt;
So it shouldn&apos;t be the cause for problem in trunk.&lt;/p&gt;</comment>
                            <comment id="13257252" author="stack" created="Thu, 19 Apr 2012 05:36:13 +0000"  >&lt;p&gt;Great stuff Maryann.  Where is the above bit of code from?  I don&apos;t find it in trunk (could be me).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It should be safe for the later thread just return or get an exception if the region has already been assigned by an earlier thread.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What are you thinking?  When we go into the assign, we check if the region is in transition and unless its a force assign, just return?  Or would you do this earlier?  Maybe the balancer should be more deferential?  It could check if the regionserver its been asked move a region from is on the deadservers list.  This would still be racy though.  Would doing the check in the assign method be enough?  (I&apos;ve not looked at the code).&lt;/p&gt;

&lt;p&gt;Thanks for the help on this stuff.&lt;/p&gt;</comment>
                            <comment id="13257255" author="stack" created="Thu, 19 Apr 2012 05:45:51 +0000"  >&lt;p&gt;Should we have the servershutdownhandler and the balancer feed a single queue that assignment manager pulls from?  If the region is already in the queue then we&apos;d favor the purposed assignment (the balancers?) rather than the random one?&lt;/p&gt;</comment>
                            <comment id="13257298" author="maryannxue" created="Thu, 19 Apr 2012 06:28:59 +0000"  >&lt;p&gt;Yes, Zhihong, not in trunk now. It is only in 0.90 branch.&lt;/p&gt;

&lt;p&gt;I think there are two different problems here.&lt;br/&gt;
1. The ServerShutdownHandler should check more strictly before calling assign() for regions &quot;planned&quot; to move to it.&lt;br/&gt;
2. Master should handle concurrent requests of assign() more properly. In the case i attached, the later assign() call by ServerShutdownHandler could actually be ignored, since AssignmentManager is already doing assignment job for this region. There could be situations when client code calls assign() from interface level and cause the same problem.&lt;/p&gt;

&lt;p&gt;True, doing dead server check is not safe, for the private assign() method does a number of retry attempts in its own loop, and the server could be found dead just after the first attempt fails.&lt;/p&gt;

&lt;p&gt;stack, i think maintaining a queue for assign() requests, whether from the balancer or the ServerShutdownHandler or client calls, can be a good solution. However, if the AssignmentManager is now good in its own logic among region states and regionsInTransition, it should be justified to assume that if assign gets a wrong state, it simply indicates there is an another assign that has just succeeded. So it should be ok for an &quot;invalid/later&quot; assign to return.&lt;/p&gt;</comment>
                            <comment id="13257312" author="ram_krish" created="Thu, 19 Apr 2012 07:05:57 +0000"  >&lt;p&gt;I will try to dig in this more.  The code that Maryann says is in 0.90 only.  Some subtle changes are there between 0.90 and 0.92+ version regarding assignments.&lt;br/&gt;
So its better we investigate the bug in 0.92 also seperately.&lt;/p&gt;</comment>
                            <comment id="13257479" author="ram_krish" created="Thu, 19 Apr 2012 13:48:23 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
In our internal version of 0.90 which has changes as in 0.92 along with Timeout monitor related changes we did what ever Maryann did. It works.  But we had timeout monitor to rescue.&lt;br/&gt;
As you said its better to have some datastructure like a set or queue so that we need not allow any new assign to happen if something is present in the datastructure that we have added.&lt;br/&gt;
But we should be very careful as when to clear it as we have some retry attempts also made when assign fails.&lt;/p&gt;</comment>
                            <comment id="13257551" author="ram_krish" created="Thu, 19 Apr 2012 15:42:00 +0000"  >&lt;p&gt;In 0.94 i tried to reproduce i was not able to get it.  But note that the &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5396&quot; title=&quot;Handle the regions in regionPlans while processing ServerShutdownHandler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5396&quot;&gt;&lt;del&gt;HBASE-5396&lt;/del&gt;&lt;/a&gt; fix is not there in it. Will try tomorrow.&lt;/p&gt;</comment>
                            <comment id="13257729" author="stack" created="Thu, 19 Apr 2012 19:45:04 +0000"  >&lt;p&gt;@Maryann Agree on your 1., and 2. above.  Its possible to make a standalone AssignmentManager using mocks &amp;#8211; see TestAssignmentManager.  Maybe we should try some of your suppositions over in unit tests Maryann and find holes in AM by writing unit tests?&lt;/p&gt;</comment>
                            <comment id="13258055" author="maryannxue" created="Fri, 20 Apr 2012 06:54:40 +0000"  >&lt;p&gt;@stack, @ramkrishna Should be able to reproduce problem 2 in trunk in unit test by initiating concurrent assign() from two threads.&lt;/p&gt;</comment>
                            <comment id="13258301" author="ram_krish" created="Fri, 20 Apr 2012 15:18:52 +0000"  >&lt;p&gt;I thought more on this..  There are already some state management datastructures like RIT, regions and servers map. So adding more may again be redundant(my thought). and handling them should be clean.&lt;/p&gt;



</comment>
                            <comment id="13260240" author="stack" created="Tue, 24 Apr 2012 05:46:08 +0000"  >&lt;p&gt;@Ram I think the aim would be a simplification; one queue to assign from rather than from multiple.  Also as is, I think state a little distributed across multiple variables and maps.  We should coalesce if possible.  I think the Maryann suggestion of trying a double or triple concurrent assign in a unit test a good start.&lt;/p&gt;</comment>
                            <comment id="13262499" author="ram_krish" created="Thu, 26 Apr 2012 09:50:14 +0000"  >&lt;p&gt;@Maryann&lt;br/&gt;
If you are planning to work on this pls go ahead. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13396488" author="jxiang" created="Tue, 19 Jun 2012 03:54:34 +0000"  >&lt;p&gt;Trunk has bulk assignment. 0.90.6 ServerShutdownHandler assigns region one by one.&lt;/p&gt;

&lt;p&gt;With bulk assignment, do we still need to pull regions to assign from a shared queue?&lt;/p&gt;

&lt;p&gt;Should we fix 0.90.6 ServerShutdownHandler to do something similar to bulk assignment?&lt;/p&gt;</comment>
                            <comment id="13399080" author="jxiang" created="Fri, 22 Jun 2012 02:15:43 +0000"  >&lt;p&gt;I agree with Stack. This patch just moves the problem somewhere else.&lt;br/&gt;
Each assign() starts with force-offline the region state, if there are already&lt;br/&gt;
assign thread going on behind, the later assign thread could mess up the region&lt;br/&gt;
state transition.&lt;/p&gt;</comment>
                            <comment id="13399104" author="ram_krish" created="Fri, 22 Jun 2012 04:11:52 +0000"  >&lt;p&gt;@Jimmy&lt;br/&gt;
Yes, you are correct.  We are trying to solve such problems in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6060&quot; title=&quot;Regions&amp;#39;s in OPENING state from failed regionservers takes a long time to recover&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6060&quot;&gt;&lt;del&gt;HBASE-6060&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13497276" author="stack" created="Wed, 14 Nov 2012 17:51:58 +0000"  >&lt;p&gt;Shall we close this as now invalid?  Or, rather, we need to reproduce it on top of Jimmy&apos;s new refactor.  Or, should we keep this open and try and make a unit test to reproduce what MaryAnn saw here?&lt;/p&gt;</comment>
                            <comment id="13497797" author="maryannxue" created="Thu, 15 Nov 2012 06:29:47 +0000"  >&lt;p&gt;Since this is not fully addressed in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6060&quot; title=&quot;Regions&amp;#39;s in OPENING state from failed regionservers takes a long time to recover&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6060&quot;&gt;&lt;del&gt;HBASE-6060&lt;/del&gt;&lt;/a&gt;, how about test/reproduce it against Jimmy&apos;s fix?&lt;/p&gt;</comment>
                            <comment id="13498178" author="jxiang" created="Thu, 15 Nov 2012 18:02:56 +0000"  >&lt;p&gt;In the trunk branch, it should be fine to reassign the same region concurrently.  It may be hard to reproduce this issue.  I&apos;d like to give it a try.&lt;/p&gt;</comment>
                            <comment id="13498268" author="jxiang" created="Thu, 15 Nov 2012 19:35:46 +0000"  >&lt;p&gt;Looked into it.  I think it is not an issue in the trunk branch any more. The root cause is that SSH uses bulk assigning which doesn&apos;t do proper locking, and this is fixed in trunk. I think we can close it now.&lt;/p&gt;</comment>
                            <comment id="13498600" author="stack" created="Fri, 16 Nov 2012 04:35:04 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jxiang&quot; class=&quot;user-hover&quot; rel=&quot;jxiang&quot;&gt;Jimmy Xiang&lt;/a&gt; Can you say more why you think it not an issue so the likes of myself (or Maryann) can be more confident closing this issue?  Thanks boss.&lt;/p&gt;</comment>
                            <comment id="13499003" author="jxiang" created="Fri, 16 Nov 2012 18:36:52 +0000"  >&lt;p&gt;@Stack, sure. In 0.94, assigning the same region concurrently can easily lead to this issue.  The assign method is synchronized on the region state. Before going to the synchronized assign method, the region is moved to OFFLINE state and added into RIT if it is not already. If the region is already in transition, the region state is not changed (if not hijack, which is used by timeout monitor only). Once going into the synchronized assign method, AM tries to set the region offline in ZK. However, the region state is PENDING_OPEN/OPENING instead of offline in this case, so the master aborts.&lt;/p&gt;

&lt;p&gt;In trunk, it is different:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;      RegionState state = forceRegionStateToOffline(region, forceNewPlan);
      if (state != null) {
        assign(state, setOfflineInZK, forceNewPlan);
      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The forceRegionStateToOffline returns null if the region is already in transition, so we won&apos;t assign it again, so we won&apos;t get into the problem.&lt;/p&gt;

&lt;p&gt;As to assigning the region to a dead server, during the assign attempts, a new plan will be used.&lt;br/&gt;
As to assigning by SSH with forceNewPlan = true, forceRegionStateToOffline will abort the previous assignment if still assigning, close the region if already assigned.&lt;br/&gt;
All these assignment calls are synchronized on the region.&lt;br/&gt;
Region state change by ZK event thread is also synchronized on the region.&lt;/p&gt;

&lt;p&gt;That&apos;s why I think we are good with the trunk branch. &lt;/p&gt;</comment>
                            <comment id="13648874" author="jdcryans" created="Fri, 3 May 2013 23:15:39 +0000"  >&lt;p&gt;Aborting patch available status, the conversation is stale.&lt;/p&gt;</comment>
                            <comment id="14260781" author="ram_krish" created="Tue, 30 Dec 2014 04:37:04 +0000"  >&lt;p&gt;AM rewrite has done a lot of changes to handle these cases.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12556729">HBASE-6060</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12523068" name="HBASE-5816.patch" size="833" author="maryannxue" created="Wed, 18 Apr 2012 03:34:52 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 18 Apr 2012 14:54:48 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>236208</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 48 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00srb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2591</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>