<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Thu Dec 01 22:11:45 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-13686/HBASE-13686.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-13686] Fail to limit rate in RateLimiter</title>
                <link>https://issues.apache.org/jira/browse/HBASE-13686</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;While using the patch in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11598&quot; title=&quot;Add simple rpc throttling&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11598&quot;&gt;&lt;del&gt;HBASE-11598&lt;/del&gt;&lt;/a&gt; , I found that RateLimiter can&apos;t to limit the rate right.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; 
 /**
   * given the time interval, are there enough available resources to allow execution?
   * @param now the current timestamp
   * @param lastTs the timestamp of the last update
   * @param amount the number of required resources
   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; there are enough available resources, otherwise &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; canExecute(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; now, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; lastTs, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; amount) {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; avail &amp;gt;= amount ? &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt; : refill(now, lastTs) &amp;gt;= amount;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When avail &amp;gt;= amount, avail can&apos;t be refill. But in the next time to call canExecute, lastTs maybe update. So avail will waste some time to refill. Even we use smaller rate than the limit, the canExecute will return false. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12829768">HBASE-13686</key>
            <summary>Fail to limit rate in RateLimiter</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ashish singhi">Ashish Singhi</assignee>
                                    <reporter username="zghaobac">Guanghao Zhang</reporter>
                        <labels>
                            <label>multitenancy</label>
                            <label>quota</label>
                    </labels>
                <created>Thu, 14 May 2015 03:53:27 +0000</created>
                <updated>Fri, 18 Dec 2015 07:53:51 +0000</updated>
                            <resolved>Sun, 7 Jun 2015 17:00:25 +0000</resolved>
                                    <version>2.0.0</version>
                    <version>1.1.0</version>
                                    <fixVersion>2.0.0</fixVersion>
                    <fixVersion>1.2.0</fixVersion>
                    <fixVersion>1.1.1</fixVersion>
                                    <component>Client</component>
                        <due>Thu, 14 May 2015 00:00:00 +0000</due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="14543653" author="ashish singhi" created="Thu, 14 May 2015 13:15:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;When avail &amp;gt;= amount, avail can&apos;t be refill. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Correct, it should not.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So avail will waste some time to refill.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Call will go to refill only when available is consumed completely.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;we use smaller rate than the limit, the canExecute will return false.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;When we consume all the available resources then we will have to wait until &lt;tt&gt;RateLimiter#waitInternal()&lt;/tt&gt; return 0, then only we will be able to execute next request.&lt;/p&gt;

&lt;p&gt;If I am missing something, can you demonstrate the scenario you have mentioned using a test case. For reference you can use &lt;tt&gt;TestRateLimiter&lt;/tt&gt;.&lt;/p&gt;</comment>
                            <comment id="14543923" author="zghaobac" created="Thu, 14 May 2015 15:58:51 +0000"  >&lt;p&gt;Think this scenario, we have one RateLimter  which limit=10000 per seconds and the client want to have about 6000 resources/sec.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;                RateLimiter limiter = new RateLimiter();&lt;br/&gt;
		limiter.set(10000, TimeUnit.SECONDS); // set 10000 resources/sec&lt;br/&gt;
		limiter.consume(10000); // initialize the limiter to have no available resources&lt;/p&gt;

&lt;p&gt;		long lastTs = System.currentTimeMillis();&lt;br/&gt;
		while (true) {&lt;br/&gt;
			// client want get  about 6000 resources per seconds&lt;br/&gt;
			Thread.sleep(1);&lt;br/&gt;
			for (int i = 0; i &amp;lt; 6; i++) {&lt;br/&gt;
				long now = System.currentTimeMillis();&lt;br/&gt;
				boolean canExecute = limiter.canExecute(now, lastTs);&lt;br/&gt;
				if (!canExecute) &lt;/p&gt;
{
					System.out.println(&quot;rejected&quot;);
					Thread.sleep(limiter.waitInterval());
				}
&lt;p&gt;				limiter.consume();&lt;br/&gt;
				lastTs = now;&lt;br/&gt;
			}&lt;br/&gt;
		}&lt;/p&gt;
{/code}
&lt;p&gt;Test the above code, we will get a lot rejected in the console. Or you can add the assertTrue(canExecute). But the real is canExecute maybe false.&lt;br/&gt;
The key point is &quot;lastTs&quot;. The code update lastTs every consume, but don&apos;t refill the limiter. So a 10000 resources/sec limiter will reject the 6000 resources/sec request.&lt;br/&gt;
You maybe confused about why the code update lastTs every consume. See TimeBasedLimiter. When grabQuota, it update lastTs(writeLastTs or ReadLastTs).   &lt;/p&gt;</comment>
                            <comment id="14543924" author="zghaobac" created="Thu, 14 May 2015 15:58:53 +0000"  >&lt;p&gt;Think this scenario, we have one RateLimter  which limit=10000 per seconds and the client want to have about 6000 resources/sec.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;                RateLimiter limiter = new RateLimiter();&lt;br/&gt;
		limiter.set(10000, TimeUnit.SECONDS); // set 10000 resources/sec&lt;br/&gt;
		limiter.consume(10000); // initialize the limiter to have no available resources&lt;/p&gt;

&lt;p&gt;		long lastTs = System.currentTimeMillis();&lt;br/&gt;
		while (true) {&lt;br/&gt;
			// client want get  about 6000 resources per seconds&lt;br/&gt;
			Thread.sleep(1);&lt;br/&gt;
			for (int i = 0; i &amp;lt; 6; i++) {&lt;br/&gt;
				long now = System.currentTimeMillis();&lt;br/&gt;
				boolean canExecute = limiter.canExecute(now, lastTs);&lt;br/&gt;
				if (!canExecute) &lt;/p&gt;
{
					System.out.println(&quot;rejected&quot;);
					Thread.sleep(limiter.waitInterval());
				}
&lt;p&gt;				limiter.consume();&lt;br/&gt;
				lastTs = now;&lt;br/&gt;
			}&lt;br/&gt;
		}&lt;/p&gt;
{/code}
&lt;p&gt;Test the above code, we will get a lot rejected in the console. Or you can add the assertTrue(canExecute). But the real is canExecute maybe false.&lt;br/&gt;
The key point is &quot;lastTs&quot;. The code update lastTs every consume, but don&apos;t refill the limiter. So a 10000 resources/sec limiter will reject the 6000 resources/sec request.&lt;br/&gt;
You maybe confused about why the code update lastTs every consume. See TimeBasedLimiter. When grabQuota, it update lastTs(writeLastTs or ReadLastTs).   &lt;/p&gt;</comment>
                            <comment id="14543933" author="mbertozzi" created="Thu, 14 May 2015 16:04:47 +0000"  >&lt;p&gt;in your code, shouldn&apos;t now be updated after thread.sleep()?&lt;/p&gt;

&lt;p&gt;also, did you see how the RateLimiter is used inside TestRateLimiter and TimeBasedLimiter? why are you using it directly?&lt;/p&gt;</comment>
                            <comment id="14543967" author="zghaobac" created="Thu, 14 May 2015 16:34:25 +0000"  >&lt;p&gt;1. In my code, now will be updated in every request. This code is just for test shortly.&lt;br/&gt;
2. RateLimiter will be used in TimeBasedLimiter. TimeBasedLimiter will be used in DefaultOperationQuota. When DefaultOperationQuota.checkQuota(), it will call TimeBasedLimiter.checkQuota() then call TimeBaseLimiter.grabQuota().  TimeBasedLimiter.checkQuota() will update now and lastTs, then call RateLimiter.canExecute(). TimeBaseLimiter.grabQuota() will call RateLimiter.consume() and update lastTs(writeLastTs or ReadLastTs).&lt;/p&gt;

&lt;p&gt;my code is just for test the above step shortly.....&lt;/p&gt;</comment>
                            <comment id="14543971" author="mbertozzi" created="Thu, 14 May 2015 16:37:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;1. In my code, now will be updated in every request. This code is just for test shortly.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;yeah, you update now at the beginning of the for loop, but you pass lastTs to the checkExecute() and lastTs was not updated with the sleep time (you should update now with sleep time before assigning now to lastTs at the end of the for) otherwise your check is against an old time that does not include your sleep, so that will not refill, because for the RateLimiter you didn&apos;t do a sleep&lt;/p&gt;</comment>
                            <comment id="14544759" author="zghaobac" created="Fri, 15 May 2015 01:47:58 +0000"  >&lt;p&gt;Did you mean add &quot;now = System.currentTimeMillis(); &quot; after &quot;Thread.sleep(limiter.waitInterval());&quot;? &lt;/p&gt;</comment>
                            <comment id="14544762" author="mbertozzi" created="Fri, 15 May 2015 01:49:05 +0000"  >&lt;p&gt;yes&lt;/p&gt;</comment>
                            <comment id="14544776" author="zghaobac" created="Fri, 15 May 2015 02:00:33 +0000"  >&lt;p&gt;I test again. The code will output a lot of &quot;rejected&quot;. When the limit is 10000 and a client want get 6000 resources per sec, canExecute (canExecute = limiter.canExecute(now, lastTs)&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; should always be ture. But in this code, canExecute maybe false.&lt;/p&gt;</comment>
                            <comment id="14544883" author="zghaobac" created="Fri, 15 May 2015 04:02:29 +0000"  >&lt;p&gt;This is a new TestCase in TestRateLimiter.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  @Test 
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testLimiterBySmallerRate() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; InterruptedException {
    RateLimiter limiter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RateLimiter();
    &lt;span class=&quot;code-comment&quot;&gt;// set limiter is 10 resources per seconds
&lt;/span&gt;    limiter.set(10, TimeUnit.SECONDS);

    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; lastTs = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; count = 0; &lt;span class=&quot;code-comment&quot;&gt;// control the test count
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; ( (count++) &amp;lt; 100) {
      &lt;span class=&quot;code-comment&quot;&gt;// test will get 3 resources per 0.5 sec. so it will get 6 resources per sec.  
&lt;/span&gt;      &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.sleep(500);
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 3; i++) {
        &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; nowTs = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
        &lt;span class=&quot;code-comment&quot;&gt;// 6 resources/sec &amp;lt; limit, so limiter.canExecute(nowTs, lastTs) should be &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;        assertEquals(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;, limiter.canExecute(nowTs, lastTs));
        limiter.consume();
        lastTs = nowTs;
      }
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14544999" author="ashish singhi" created="Fri, 15 May 2015 06:17:42 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zghaobac&quot; class=&quot;user-hover&quot; rel=&quot;zghaobac&quot;&gt;Guanghao Zhang&lt;/a&gt;&lt;br/&gt;
Thanks for the test case.&lt;br/&gt;
As per the current code implementation of &lt;tt&gt;RateLimiter&lt;/tt&gt; what I have understand is, if your limit is set for 10resources/sec, then you will be able to consume one resource every 0.1sec. So if we modify your test case like below it will always pass.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@Test
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testLimiterBySmallerRate() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; InterruptedException {
    RateLimiter limiter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RateLimiter();
    &lt;span class=&quot;code-comment&quot;&gt;// set limiter is 10 resources per seconds
&lt;/span&gt;    limiter.set(10, TimeUnit.SECONDS);

    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; lastTs = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; count = 0; &lt;span class=&quot;code-comment&quot;&gt;// control the test count
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; ((count++) &amp;lt; 100) {
      &lt;span class=&quot;code-comment&quot;&gt;// test will get 3 resources per 0.5 sec. so it will get 6 resources per sec.
&lt;/span&gt;      &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.sleep(125);
      &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 1; i++) {
&lt;/span&gt;      &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; nowTs = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
      &lt;span class=&quot;code-comment&quot;&gt;// 6 resources/sec &amp;lt; limit, so limiter.canExecute(nowTs, lastTs) should be &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;      assertEquals(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;, limiter.canExecute(nowTs, lastTs));
      limiter.consume();
      lastTs = nowTs;
      &lt;span class=&quot;code-comment&quot;&gt;// }
&lt;/span&gt;    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14545275" author="zghaobac" created="Fri, 15 May 2015 10:15:44 +0000"  >&lt;p&gt;I don&apos;t think so. As your understand, 60 resources per minute will equal to 1 resources per sec. So the RateLimiter  doesn&apos;t need so many TimeUnit.&lt;br/&gt;
If user set quota is 60 resources per minute, the RateLimiter can&apos;t be effected by the distribution of request.  The user can get 60 resources in the first sec of one minute or get 60 resources in the last sec of one minute. As long as user&apos;s request rate is samller than 60 in one minute, the RateLimiter should guarantee the request canExecute.&lt;/p&gt;</comment>
                            <comment id="14545289" author="ashish singhi" created="Fri, 15 May 2015 10:39:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;As long as user&apos;s request rate is samller than 60 in one minute, the RateLimiter should guarantee the request canExecute.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, I totally understand that and even we have internally thought about it. We are internally discussing on this to get to a conclusion.&lt;/p&gt;</comment>
                            <comment id="14545327" author="zghaobac" created="Fri, 15 May 2015 11:17:26 +0000"  >&lt;p&gt;The RateLimiter can be considered as a leaky bucket (see &lt;a href=&quot;http://en.wikipedia.org/wiki/Leaky_bucket&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/Leaky_bucket&lt;/a&gt;). It will refill itself as a limit rate. So lastTs should be one property of RateLimiter and initialize when new RateLimiter(). When refill, RateLimiter will update lastTs to now by itself and avail will be refill to limit at most. &lt;/p&gt;</comment>
                            <comment id="14550398" author="ashish singhi" created="Tue, 19 May 2015 13:10:50 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zghaobac&quot; class=&quot;user-hover&quot; rel=&quot;zghaobac&quot;&gt;Guanghao Zhang&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mbertozzi&quot; class=&quot;user-hover&quot; rel=&quot;mbertozzi&quot;&gt;Matteo Bertozzi&lt;/a&gt; and others can you please review the patch.&lt;/p&gt;

&lt;p&gt;Regarding the implementation.&lt;br/&gt;
1. I could not find a way to combine the refill logic implemented by AverageIntervalRefillStrategy and FixedIntervalRefillStrategy so I have added a interface RefillStrategy which defines how the RateLimiter will refill the resources availability.&lt;br/&gt;
2. Added a new configuration property &lt;tt&gt;hbase.quota.refill.strategy&lt;/tt&gt;, where in user can configure the refill strategy he/she wants to use. With default being AverageIntervalRefillStrategy.&lt;br/&gt;
3. Created a conf object in TimeBasedLimiter, could not a find a better way to pass this object. If you know any other way then please suggest.&lt;br/&gt;
4. With this implementation the timestamps in not in client control, instead will be controlled by the refill strategy.&lt;br/&gt;
5. I have commented the test for Minutes, Hours, Days in TestRateLimiter, as to verify these test cases will involve high time sleep to refill as timestamps are not in client control.&lt;br/&gt;
If you feel the class or methods can be better documented then please suggest, I am happy to do that.&lt;/p&gt;</comment>
                            <comment id="14550679" author="hadoopqa" created="Tue, 19 May 2015 16:04:53 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12733806/HBASE-13686.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12733806/HBASE-13686.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 5e7e626ef54ada9e75b18b31bb49e23b22ae9fe9.&lt;br/&gt;
  ATTACHMENT ID: 12733806&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 4 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1899 checkstyle errors (more than the master&apos;s current 1898 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14088//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14088//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14088//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14088//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14088//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14088//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14088//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14088//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14551764" author="zghaobac" created="Wed, 20 May 2015 03:54:34 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ashish+singhi&quot; class=&quot;user-hover&quot; rel=&quot;ashish singhi&quot;&gt;Ashish Singhi&lt;/a&gt; Thanks for your patch.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; delta = (limit * (now - refillTime)) / intervalInMillis;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (delta &amp;gt; 0) {
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; nextRefillTime.compareAndSet(refillTime, now) ? &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.min(limit, available + delta) : 0;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;if limit and available is Long.MAX_VALUE, when delta &amp;gt; 0, available + delta will be negative. The return value will be negative. Although &quot;check positive overflow&quot; can catch this case.&lt;br/&gt;
In my opinion, move &quot;check positive overflow&quot; in refill method maybe better. And the refill should return the new avail, not the refillAmount.&lt;br/&gt;
Welcome to discuss about that.&lt;/p&gt;</comment>
                            <comment id="14551834" author="ashish singhi" created="Wed, 20 May 2015 05:21:51 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zghaobac&quot; class=&quot;user-hover&quot; rel=&quot;zghaobac&quot;&gt;Guanghao Zhang&lt;/a&gt; for reviewing the patch.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;if limit and available is Long.MAX_VALUE, when delta &amp;gt; 0, available + delta will be negative&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;When can this case occur ? I can think of only one scenario, that is client executing canExecute for the first time where nextRefillTime will still be equal to default value i.e., -1 and that case is been already handled by below code.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (refillTime == -1) {
      &lt;span class=&quot;code-comment&quot;&gt;// Till now no resource has been consumed.
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.nextRefillTime.compareAndSet(nextRefillTime.get(), EnvironmentEdgeManager.currentTime());
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; limit;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;&lt;p&gt;refill should return the new avail, not the refillAmount&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Why you think so ? the new avail value will be calculated based on this refillAmount in the canExecute which I thought is ok.&lt;/p&gt;</comment>
                            <comment id="14551871" author="ashish singhi" created="Wed, 20 May 2015 05:59:15 +0000"  >&lt;p&gt;I will fix the check style warnings in the next patch. Waiting for the feedback on the patch.&lt;/p&gt;</comment>
                            <comment id="14552001" author="ashish singhi" created="Wed, 20 May 2015 08:37:58 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mbertozzi&quot; class=&quot;user-hover&quot; rel=&quot;mbertozzi&quot;&gt;Matteo Bertozzi&lt;/a&gt; can you please review the patch. I would also like to hear from you as you being the main developer of this feature.&lt;/p&gt;</comment>
                            <comment id="14552138" author="zghaobac" created="Wed, 20 May 2015 11:11:43 +0000"  >&lt;p&gt;Assume there is a RateLimiter which limit and avail is Long.MAX_VALUE. Then consume(1). The avail will be Long.MAX_VALUE - 1. After a long time, canExecute(1) again.  This will refill again. The delta will be much greater than 1. Then available + delta will be negative.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Why you think so ? the new avail value will be calculated based on this refillAmount in the canExecute which I thought is ok.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yeah, your code is ok. But as the below code shows, if refill return the new avail, the code in canExecute will be very simple to understand. Different refill strategy can refill the avail by themselves. The canExecute() should not to handle the special case of refillStrategy.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; refillStrategy.refill(limit, avail) &amp;gt;= amount;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14552301" author="ashish singhi" created="Wed, 20 May 2015 13:17:54 +0000"  >&lt;p&gt;The work of refillStrategy.refill is to give the number of resources that are refilled and that can then be checked and added to the existing avail to form a new avail.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The canExecute() should not to handle the special case of refillStrategy&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;All the special case of refillStrategy is handled by themselves in &lt;tt&gt;refill&lt;/tt&gt; method &lt;tt&gt;canExecute&lt;/tt&gt; has only the code which will be common to all the refillStrategy after they finish calculating the refill amount and can avoid duplicating the code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Assume there is a RateLimiter which limit and avail is Long.MAX_VALUE. Then consume(1). The avail will be Long.MAX_VALUE - 1. After a long time, canExecute(1) again. This will refill again. The delta will be much greater than 1. Then available + delta will be negative.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This you have already answered in your first comment that *&lt;b&gt;&quot;check positive overflow&quot; can catch this case&lt;/b&gt;*. So I feel better to leave this piece of code in &lt;tt&gt;canExecute&lt;/tt&gt; only and avoid duplicating this code in each refill method as of now.&lt;/p&gt;

&lt;p&gt;I do not see any strong reason to move this code in &lt;tt&gt;refill&lt;/tt&gt; of each &lt;tt&gt;RefillStrategy&lt;/tt&gt;&lt;/p&gt;</comment>
                            <comment id="14552932" author="mbertozzi" created="Wed, 20 May 2015 19:22:52 +0000"  >&lt;p&gt;can you post the patch on review board, it is not short. so it will be easier to review there.&lt;/p&gt;

&lt;p&gt;can we lose one level and maybe some fields? having the RateLimiter extended by RefillStrategy or similar. we are going to have tons of those objects around if you starting configuring it by user.&lt;br/&gt;
what is the point of the AtomicLong in refill strategy we are under lock when we call that code.&lt;br/&gt;
can we go back to external times? otherwise tests must sleep, and aside the slowness they will be always flaky&lt;/p&gt;</comment>
                            <comment id="14553757" author="ashish singhi" created="Thu, 21 May 2015 07:09:47 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mbertozzi&quot; class=&quot;user-hover&quot; rel=&quot;mbertozzi&quot;&gt;Matteo Bertozzi&lt;/a&gt; for reviewing the patch.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;what is the point of the AtomicLong in refill strategy we are under lock when we call that code.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Will address this in my next patch.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;can we go back to external times? otherwise tests must sleep, and aside the slowness they will be always flaky&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, I can create a api visible only for testing and avoid sleep.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;we are going to have tons of those objects around if you starting configuring it by user.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;As per the patch, one RateLimiter will have one RefillStartegy object based on the configuration. Can you give more details on this.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;can we lose one level and maybe some fields? having the RateLimiter extended by RefillStrategy or similar.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;RateLimiter uses RefillStrategy to find the new refill amount and calculate the new available amount based on it. Or may be what other thing I can think off is to have RateLimiter a abstract class and then have other two class AverageIntervalRateLimiter and FixdIntervalRateLimiter extending this class. Then user can decide which RateLimiter he/she wants to use.&lt;/p&gt;

&lt;p&gt;In this patch the refill strategy conf is at system level. I think we should allow user to configure this for each quota setting, I will do this in a separate jira and can discuss more on this in that jira.&lt;/p&gt;

&lt;p&gt;I have uploaded the existing patch in the RB &lt;a href=&quot;https://reviews.apache.org/r/34531/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/34531/&lt;/a&gt;, to capture other comments you have on this patch in my next patch.&lt;/p&gt;</comment>
                            <comment id="14553804" author="zghaobac" created="Thu, 21 May 2015 07:51:34 +0000"  >&lt;blockquote&gt;&lt;p&gt;we are going to have tons of those objects around if you starting configuring it by user.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I thinks this means there will be tons of RateLimiter. So we will have tons of RefillStrategy, too.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Or may be what other thing I can think off is to have RateLimiter a abstract class and then have other two class AverageIntervalRateLimiter and FixdIntervalRateLimiter extending this class.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Good idea. Two name for you: FixedRateLimiter and BurstAllowedRateLimiter. When refill by fixed interval, this means the users&apos; request rate must slow than the limit. But when refill by every average interval, sometimes the users&apos; burst request rate wiil be allowed. The burst request rate which can be allowed is (avail + limit) per intervalInMillis. &lt;/p&gt;</comment>
                            <comment id="14554253" author="ashish singhi" created="Thu, 21 May 2015 13:13:33 +0000"  >&lt;p&gt;Updated the patch as per the comments and uploaded the same on RB.&lt;br/&gt;
In this &lt;tt&gt;RateLimiter&lt;/tt&gt; is an abstract class and &lt;tt&gt;AverageIntervalRateLimiter&lt;/tt&gt;  and &lt;tt&gt;FixedIntervalRateLimiter&lt;/tt&gt; are extending it.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zghaobac&quot; class=&quot;user-hover&quot; rel=&quot;zghaobac&quot;&gt;Guanghao Zhang&lt;/a&gt; I did not keep the AverageIntervalRateLimiter  as BurstAllowedRateLimiter, as I felt the former was straight forward name to get a hint what the class will do. Hope you don&apos;t mind.&lt;/p&gt;</comment>
                            <comment id="14554255" author="ashish singhi" created="Thu, 21 May 2015 13:13:55 +0000"  >&lt;p&gt;Please review.&lt;/p&gt;</comment>
                            <comment id="14554259" author="ashish singhi" created="Thu, 21 May 2015 13:15:03 +0000"  >&lt;p&gt;Also I am not sure whether the v1 patch will be acceptable for branch-1.1 !&lt;/p&gt;</comment>
                            <comment id="14554638" author="hadoopqa" created="Thu, 21 May 2015 16:47:40 +0000"  >&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12734446/HBASE-13686-v1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12734446/HBASE-13686-v1.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 6c3fd34475fa956deb570c92d55a3cc08c71c5f0.&lt;br/&gt;
  ATTACHMENT ID: 12734446&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 4 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14145//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14145//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14145//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14145//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14145//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14145//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14145//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14145//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14555703" author="ashish singhi" created="Fri, 22 May 2015 07:01:51 +0000"  >&lt;p&gt;Addressed the comment from RB.&lt;/p&gt;</comment>
                            <comment id="14555907" author="hadoopqa" created="Fri, 22 May 2015 09:55:33 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12734757/HBASE-13686-v2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12734757/HBASE-13686-v2.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit f8893e0012031a8c623d9da3839e757006878396.&lt;br/&gt;
  ATTACHMENT ID: 12734757&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 4 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.tika.parser.fork.ForkParserIntegrationTest.testAttachingADebuggerOnTheForkedParserShouldWork(ForkParserIntegrationTest.java:234)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14154//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14154//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14154//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14154//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14154//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14154//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14154//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14154//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14556443" author="mbertozzi" created="Fri, 22 May 2015 17:05:06 +0000"  >&lt;p&gt;+1 looks good to me&lt;/p&gt;</comment>
                            <comment id="14558755" author="ashish singhi" created="Tue, 26 May 2015 06:58:48 +0000"  >&lt;p&gt;Thanks for the review.&lt;br/&gt;
Can we commit this?&lt;/p&gt;</comment>
                            <comment id="14566975" author="zghaobac" created="Mon, 1 Jun 2015 06:21:01 +0000"  >&lt;p&gt;refill in AverageIntervalRateLimiter.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (nextRefillTime == -1) {
      &lt;span class=&quot;code-comment&quot;&gt;// Till now no resource has been consumed.
&lt;/span&gt;      nextRefillTime = EnvironmentEdgeManager.currentTimeMillis();
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; limit;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If set the RateLimiter is 10 res per minute. In the first minute, we can consume 30 res (10 from avail, 10 from above &quot;return limit&quot;, 10 from refill).&lt;br/&gt;
nextRefillTime should be one property of RateLimiter and initialized when new RateLimiter.&lt;/p&gt;</comment>
                            <comment id="14566984" author="ashish singhi" created="Mon, 1 Jun 2015 06:39:10 +0000"  >&lt;blockquote&gt;&lt;p&gt;If set the RateLimiter is 10 res per minute. In the first minute, we can consume 30 res (10 from avail, 10 from above &quot;return limit&quot;, 10 from refill).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;How ? In this case refill will return 10. Then if you check the logic of RateLimiter#canExceute(long), available will calculated using below code in this case&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
avail = &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.max(0, &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.min(avail + refillAmount, limit));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So in the first minute the calculation will be like avail = Math.max(0, Math.min(10+ 10, 10)); as per this avail be equal to 10.&lt;/p&gt;</comment>
                            <comment id="14567067" author="zghaobac" created="Mon, 1 Jun 2015 08:36:14 +0000"  >&lt;p&gt;Thanks. It can handle the case.&lt;/p&gt;</comment>
                            <comment id="14575818" author="ashish singhi" created="Sat, 6 Jun 2015 16:41:13 +0000"  >&lt;p&gt;Can anyone help to commit this!&lt;/p&gt;</comment>
                            <comment id="14575836" author="ram_krish" created="Sat, 6 Jun 2015 17:15:58 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ashish+singhi&quot; class=&quot;user-hover&quot; rel=&quot;ashish singhi&quot;&gt;Ashish Singhi&lt;/a&gt;&lt;br/&gt;
I can commit this.  I will do it by tomorrow or on monday IST. What are the branches this should be committed?&lt;/p&gt;</comment>
                            <comment id="14575838" author="ashish singhi" created="Sat, 6 Jun 2015 17:27:24 +0000"  >&lt;p&gt;Thank you so much &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ramkrishna.s.vasudevan%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;ramkrishna.s.vasudevan@gmail.com&quot;&gt;ramkrishna vasudevan&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;What are the branches this should be committed?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;As per the &lt;tt&gt;Fix Version/s&lt;/tt&gt;&lt;/p&gt;</comment>
                            <comment id="14576266" author="hudson" created="Sun, 7 Jun 2015 14:38:33 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #6550 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6550/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6550/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13686&quot; title=&quot;Fail to limit rate in RateLimiter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13686&quot;&gt;&lt;del&gt;HBASE-13686&lt;/del&gt;&lt;/a&gt; - Fail to limit rate in RateLimiter (Ashish Singhi) (ramkrishna: rev 9f43a3bea6a996a93f3c960801a0200b52419b34)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/RateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/TimeBasedLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/FixedIntervalRateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/AverageIntervalRateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestRateLimiter.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14576330" author="ashish singhi" created="Sun, 7 Jun 2015 16:29:41 +0000"  >&lt;p&gt;Attached patch for branch-1.&lt;br/&gt;
Found that &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13411&quot; title=&quot;Misleading error message when request size quota limit exceeds&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13411&quot;&gt;&lt;del&gt;HBASE-13411&lt;/del&gt;&lt;/a&gt; was not there in branch-1 and branch-1.1.&lt;br/&gt;
Thanks Ram.&lt;/p&gt;</comment>
                            <comment id="14576337" author="ram_krish" created="Sun, 7 Jun 2015 17:00:25 +0000"  >&lt;p&gt;Pushed to master and branch-1, branch 1.1.  Thanks for the patch &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ashish+singhi&quot; class=&quot;user-hover&quot; rel=&quot;ashish singhi&quot;&gt;Ashish Singhi&lt;/a&gt; and thanks to all reviewers to get this to closure. &lt;/p&gt;</comment>
                            <comment id="14576392" author="hadoopqa" created="Sun, 7 Jun 2015 19:18:42 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12738257/HBASE-13686-branch-1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12738257/HBASE-13686-branch-1.patch&lt;/a&gt;&lt;br/&gt;
  against branch-1 branch at commit 9f43a3bea6a996a93f3c960801a0200b52419b34.&lt;br/&gt;
  ATTACHMENT ID: 12738257&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 4 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 3812 checkstyle errors (more than the master&apos;s current 3811 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.rest.TestScannersWithLabels.testSimpleScannerXMLWithLabelsThatReceivesData(TestScannersWithLabels.java:227)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14321//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14321//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14321//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14321//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14321//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14321//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14321//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14321//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14576398" author="hudson" created="Sun, 7 Jun 2015 19:30:31 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.1 #528 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.1/528/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.1/528/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13686&quot; title=&quot;Fail to limit rate in RateLimiter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13686&quot;&gt;&lt;del&gt;HBASE-13686&lt;/del&gt;&lt;/a&gt; - Fail to limit rate in RateLimiter (Ashish Singhi) (ramkrishna: rev 69ec2f4eed88a447230bac98c48567c3caf941d0)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/AverageIntervalRateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestRateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-client/src/main/java/org/apache/hadoop/hbase/quotas/ThrottlingException.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/TimeBasedLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/FixedIntervalRateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/RateLimiter.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14576403" author="hudson" created="Sun, 7 Jun 2015 19:40:32 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-1.2 #136 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2/136/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2/136/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13686&quot; title=&quot;Fail to limit rate in RateLimiter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13686&quot;&gt;&lt;del&gt;HBASE-13686&lt;/del&gt;&lt;/a&gt; - Fail to limit rate in RateLimiter (Ashish Singhi) (ramkrishna: rev d34e9c5c5ccc211999f057cdc50a6916d87b7b15)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/RateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/FixedIntervalRateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-client/src/main/java/org/apache/hadoop/hbase/quotas/ThrottlingException.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/AverageIntervalRateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/TimeBasedLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestRateLimiter.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14587399" author="hudson" created="Tue, 16 Jun 2015 03:30:47 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-1.1 #543 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.1/543/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.1/543/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13888&quot; title=&quot;Fix refill bug from HBASE-13686&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13888&quot;&gt;&lt;del&gt;HBASE-13888&lt;/del&gt;&lt;/a&gt; Fix refill bug from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13686&quot; title=&quot;Fail to limit rate in RateLimiter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13686&quot;&gt;&lt;del&gt;HBASE-13686&lt;/del&gt;&lt;/a&gt; (Guanghao Zhang) (tedyu: rev 49700460dabf90562b6f9b4f1f5c45df98668c6c)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestRateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/AverageIntervalRateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/FixedIntervalRateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/RateLimiter.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14587430" author="hudson" created="Tue, 16 Jun 2015 04:17:40 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #6575 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6575/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6575/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13888&quot; title=&quot;Fix refill bug from HBASE-13686&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13888&quot;&gt;&lt;del&gt;HBASE-13888&lt;/del&gt;&lt;/a&gt; Fix refill bug from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13686&quot; title=&quot;Fail to limit rate in RateLimiter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13686&quot;&gt;&lt;del&gt;HBASE-13686&lt;/del&gt;&lt;/a&gt; (Guanghao Zhang) (tedyu: rev 84a50393ee56d09abb68f54b44b64f5279bd33c9)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/AverageIntervalRateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/RateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/FixedIntervalRateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestRateLimiter.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14587468" author="hudson" created="Tue, 16 Jun 2015 04:41:40 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.2 #14 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2/14/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2/14/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13888&quot; title=&quot;Fix refill bug from HBASE-13686&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13888&quot;&gt;&lt;del&gt;HBASE-13888&lt;/del&gt;&lt;/a&gt; Fix refill bug from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13686&quot; title=&quot;Fail to limit rate in RateLimiter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13686&quot;&gt;&lt;del&gt;HBASE-13686&lt;/del&gt;&lt;/a&gt; (Guanghao Zhang) (tedyu: rev e8821d1806d9455038cd9e80ddcaba68f49f3b77)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/FixedIntervalRateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestRateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/AverageIntervalRateLimiter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/RateLimiter.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12730184">HBASE-11598</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12738257" name="HBASE-13686-branch-1.patch" size="29613" author="ashish singhi" created="Sun, 7 Jun 2015 16:29:41 +0000"/>
                            <attachment id="12734446" name="HBASE-13686-v1.patch" size="26000" author="ashish singhi" created="Thu, 21 May 2015 13:06:14 +0000"/>
                            <attachment id="12734757" name="HBASE-13686-v2.patch" size="26051" author="ashish singhi" created="Fri, 22 May 2015 07:01:51 +0000"/>
                            <attachment id="12733806" name="HBASE-13686.patch" size="31833" author="ashish singhi" created="Tue, 19 May 2015 12:59:57 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 14 May 2015 13:15:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 24 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2eprj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>As per this jira contribution. We now support two kinds of RateLimiter.&lt;br/&gt;
1) org.apache.hadoop.hbase.quotas.AverageIntervalRateLimiter : This limiter will refill resources at every TimeUnit/resources interval.&lt;br/&gt;
Example: For a limiter configured with 10resources/second, then 1resource will be refilled after every 100ms.&lt;br/&gt;
&lt;br/&gt;
2) org.apache.hadoop.hbase.quotas.FixedIntervalRateLimiter: This limiter will refill resources only after a given fixed interval of time.&lt;br/&gt;
&lt;br/&gt;
Client can configure anyone of this rate limiter for the cluster by setting the value for the property &amp;quot;hbase.quota.rate.limiter&amp;quot; in the hbase-site.xml. org.apache.hadoop.hbase.quotas.AverageIntervalRateLimiter is the default value.&lt;br/&gt;
Note: Client needs to restart the cluster for the configuration to take into effect.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>