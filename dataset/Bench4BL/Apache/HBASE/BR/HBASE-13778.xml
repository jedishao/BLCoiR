<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Thu Dec 01 22:47:38 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-13778/HBASE-13778.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-13778] BoundedByteBufferPool incorrectly increasing runningAverage buffer length</title>
                <link>https://issues.apache.org/jira/browse/HBASE-13778</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;I was testing &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13158&quot; title=&quot;When client supports CellBlock, return the result Cells as controller payload for get(Get) API also&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13158&quot;&gt;&lt;del&gt;HBASE-13158&lt;/del&gt;&lt;/a&gt; and noticed this. In BoundedByteBufferPool, we are having an intial value for &apos;runningAverage&apos; which defaults to 16K. So the pool will make initial buffers of this size. This buffer may grow while used in ByteBufferOuputStream as the data has to be written is getting more. On return back the BB to the pool, we try to adjust this &apos;runningAverage&apos; size by considering the capacity of the returned BB. We lack proper synchronization here and this makes this runningAverage to grow till its max (1 MB)&lt;/p&gt;

&lt;p&gt;I am testing with PE tool with randomRead and having 20 client threads. So each get op returns one cell with almost like 1KB data. The default size of the BB created by Pool is 16K and ideally there is no room for getting this resized.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
2015-05-26 20:12:21,965 INFO  [PriorityRpcServer.handler=5,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=2
2015-05-26 20:12:21,966 INFO  [PriorityRpcServer.handler=2,queue=0,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=4
2015-05-26 20:12:21,966 INFO  [PriorityRpcServer.handler=8,queue=0,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=6
2015-05-26 20:12:21,966 INFO  [PriorityRpcServer.handler=12,queue=0,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=9
2015-05-26 20:12:21,966 INFO  [PriorityRpcServer.handler=13,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=10
2015-05-26 20:12:21,966 INFO  [PriorityRpcServer.handler=18,queue=0,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=12
2015-05-26 20:12:21,966 INFO  [PriorityRpcServer.handler=16,queue=0,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=14
2015-05-26 20:12:21,966 INFO  [PriorityRpcServer.handler=7,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=5
2015-05-26 20:12:21,966 INFO  [PriorityRpcServer.handler=19,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=15
2015-05-26 20:12:21,966 INFO  [PriorityRpcServer.handler=1,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=4
2015-05-26 20:12:21,965 INFO  [PriorityRpcServer.handler=11,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=2
2015-05-26 20:12:21,966 INFO  [PriorityRpcServer.handler=3,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=13
2015-05-26 20:12:21,966 INFO  [PriorityRpcServer.handler=9,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=11
2015-05-26 20:12:21,966 INFO  [PriorityRpcServer.handler=6,queue=0,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=8
2015-05-26 20:12:21,966 INFO  [PriorityRpcServer.handler=15,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=7
2015-05-26 20:12:21,966 INFO  [PriorityRpcServer.handler=4,queue=0,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=16
2015-05-26 20:12:21,967 INFO  [PriorityRpcServer.handler=10,queue=0,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=17
2015-05-26 20:12:21,967 INFO  [PriorityRpcServer.handler=14,queue=0,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=19
2015-05-26 20:12:21,967 INFO  [PriorityRpcServer.handler=17,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=0, count=0, alloctions=18
2015-05-26 20:12:22,146 INFO  [PriorityRpcServer.handler=18,queue=0,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=16384, totalCapacity=-16384, count=2, alloctions=20
2015-05-26 20:12:22,707 INFO  [PriorityRpcServer.handler=9,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=212992, totalCapacity=-32768, count=4, alloctions=21
2015-05-26 20:12:23,208 INFO  [PriorityRpcServer.handler=3,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=212992, totalCapacity=-81920, count=1, alloctions=22
2015-05-26 20:12:29,567 INFO  [PriorityRpcServer.handler=0,queue=0,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=234837, totalCapacity=-49152, count=6, alloctions=23
2015-05-26 20:12:29,974 INFO  [PriorityRpcServer.handler=0,queue=0,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=311296, totalCapacity=442368, count=6, alloctions=24
2015-05-26 20:12:31,356 INFO  [PriorityRpcServer.handler=7,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=606208, totalCapacity=1054037, count=9, alloctions=25
2015-05-26 20:12:31,894 INFO  [PriorityRpcServer.handler=3,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=901120, totalCapacity=742741, count=1, alloctions=26
2015-05-26 20:12:32,961 INFO  [PriorityRpcServer.handler=11,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=920234, totalCapacity=2479445, count=12, alloctions=27
2015-05-26 20:12:36,965 INFO  [PriorityRpcServer.handler=2,queue=0,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=1037653, totalCapacity=3836586, count=18, alloctions=28
2015-05-26 20:12:42,212 INFO  [PriorityRpcServer.handler=6,queue=0,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=1048120, totalCapacity=11203921, count=12, alloctions=29
2015-05-26 20:12:45,387 INFO  [PriorityRpcServer.handler=13,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=1048302, totalCapacity=10174915, count=1, alloctions=30
2015-05-26 20:12:46,171 INFO  [PriorityRpcServer.handler=1,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=1048302, totalCapacity=14177342, count=7, alloctions=31
2015-05-26 20:12:52,401 INFO  [PriorityRpcServer.handler=13,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=1048495, totalCapacity=19454171, count=8, alloctions=32
2015-05-26 20:12:52,541 INFO  [PriorityRpcServer.handler=2,queue=0,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=1048495, totalCapacity=16778574, count=1, alloctions=33
2015-05-26 20:12:56,631 INFO  [PriorityRpcServer.handler=5,queue=1,port=16020] io.BoundedByteBufferPool: Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=1048495, totalCapacity=28925990, count=2, alloctions=34
...
..
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;getBuffer()  on 1st line removes the BB from the Queue. putBuffer() put it back 1st and then in next line checks the size of the buffer. During this time period many other threads might have taken buffers. &lt;br/&gt;
putBuffer(ByteBuffer bb)&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
	&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; size = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.buffers.size(); &lt;span class=&quot;code-comment&quot;&gt;// This size may be inexact.
&lt;/span&gt;	&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.totalReservoirCapacity += bb.capacity();
	&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; average = 0;
	&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (size != 0) {
	  average = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.totalReservoirCapacity / size;
	}
	&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (average &amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.runningAverage &amp;amp;&amp;amp; average &amp;lt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.maxByteBufferSizeToCache) {
	  &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.runningAverage = average;
	}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;getBuffer() &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
	ByteBuffer bb = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.buffers.poll();
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (bb != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;code-comment&quot;&gt;// Clear sets limit == capacity.  Postion == 0.
&lt;/span&gt;      bb.clear();
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.totalReservoirCapacity -= bb.capacity();
    } 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;totalReservoirCapacity might not have reduced while do above division for calc avg.  From above log lines it is clear.&lt;/p&gt;

&lt;p&gt;As a result we will create much bigger sized buffers and we will not allow GC it as we keep them in pool.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12832772">HBASE-13778</key>
            <summary>BoundedByteBufferPool incorrectly increasing runningAverage buffer length</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="anoop.hbase">Anoop Sam John</assignee>
                                    <reporter username="anoop.hbase">Anoop Sam John</reporter>
                        <labels>
                    </labels>
                <created>Tue, 26 May 2015 16:50:35 +0000</created>
                <updated>Fri, 18 Dec 2015 05:12:32 +0000</updated>
                            <resolved>Thu, 28 May 2015 06:28:53 +0000</resolved>
                                    <version>1.1.0</version>
                    <version>0.98.12</version>
                                    <fixVersion>2.0.0</fixVersion>
                    <fixVersion>0.98.13</fixVersion>
                    <fixVersion>1.2.0</fixVersion>
                    <fixVersion>1.1.1</fixVersion>
                                    <component>io</component>
                    <component>util</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="14559373" author="anoop.hbase" created="Tue, 26 May 2015 16:52:43 +0000"  >&lt;p&gt;The log comes from a temp patching I have done&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (bb != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;code-comment&quot;&gt;// Clear sets limit == capacity.  Postion == 0.
&lt;/span&gt;      bb.clear();
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.totalReservoirCapacity -= bb.capacity();
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
      bb = ByteBuffer.allocate(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.runningAverage);
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.allocations.incrementAndGet();
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(LOG.isInfoEnabled()) {
        LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Allocated &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BB runningAverage=&quot;&lt;/span&gt; + &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.runningAverage + &lt;span class=&quot;code-quote&quot;&gt;&quot;, totalCapacity=&quot;&lt;/span&gt;
            + &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.totalReservoirCapacity + &lt;span class=&quot;code-quote&quot;&gt;&quot;, count=&quot;&lt;/span&gt; + &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.buffers.size() + &lt;span class=&quot;code-quote&quot;&gt;&quot;, alloctions=&quot;&lt;/span&gt;
            + &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.allocations.get());
      }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14559402" author="stack" created="Tue, 26 May 2015 17:07:23 +0000"  >&lt;p&gt;Good one &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; I thought my sloppy math would &apos;average out&apos;. Thanks for finding this one.&lt;/p&gt;</comment>
                            <comment id="14559419" author="anoop.hbase" created="Tue, 26 May 2015 17:14:06 +0000"  >&lt;p&gt;&apos;runningAverage&apos; would have increased much more but we do have a max cap which defaults to 1MB.  &lt;br/&gt;
I have pasted only some initial log. My full run has resulted in 175 new BB creations by the pool.&lt;br/&gt;
runningAverage will never come down.  So all these remaining ~140 BBs were created with 1MB size.  What we actually need is a buffer of just over 1KB size.&lt;/p&gt;

&lt;p&gt;The pool is creating part of perf issue with &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13158&quot; title=&quot;When client supports CellBlock, return the result Cells as controller payload for get(Get) API also&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13158&quot;&gt;&lt;del&gt;HBASE-13158&lt;/del&gt;&lt;/a&gt; change tests.  With PE tool and single client thread, the patch there makes latency bit better only. But when the #threads increases, I can see latency is coming out more.&lt;/p&gt;</comment>
                            <comment id="14559428" author="stack" created="Tue, 26 May 2015 17:18:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;My full run has resulted in 175 new BB creations by the pool.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Because of resizings? If fix how we do runningAverage, we won&apos;t have as many allocations?&lt;/p&gt;</comment>
                            <comment id="14559443" author="anoop.hbase" created="Tue, 26 May 2015 17:24:02 +0000"  >&lt;p&gt;No not because of resize.  There is not a single case of resize. I am doing PE random reads and every row is ~1KB.  The default 16KB BB size is good enough.&lt;/p&gt;

&lt;p&gt;The new BB creation is because responder thread giving back BBs to pool and this is slower compared to handlers grab it do work make cellblock and give it for responder (and take the next one)..  All the data is in cache.&lt;/p&gt;</comment>
                            <comment id="14559460" author="stack" created="Tue, 26 May 2015 17:34:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;The new BB creation is because responder thread giving back BBs to pool and this is slower compared to handlers grab it do work make cellblock and give it for responder (and take the next one).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why is it 175 and not count of handlers + count of responders?&lt;/p&gt;</comment>
                            <comment id="14559484" author="anoop.hbase" created="Tue, 26 May 2015 17:56:54 +0000"  >&lt;p&gt;It can be by this way&lt;br/&gt;
10 handlers done their work and their 1st time request made 10 BBs&lt;br/&gt;
Handlers - cellBlock is created handed over to Reponder thread.  So it is not yet putBack to pool&lt;br/&gt;
Now 10 threads done work and again need BBs.&lt;br/&gt;
By this time Responder has not released all previous 10 BBs.   So it has to create some new BBs&lt;br/&gt;
Like this way we will create more BBs than the number of Handlers&lt;/p&gt;</comment>
                            <comment id="14559491" author="apurtell" created="Tue, 26 May 2015 17:58:42 +0000"  >&lt;p&gt;Setting fix versions. All active branches need the fix. (except 0.94)&lt;/p&gt;</comment>
                            <comment id="14559546" author="stack" created="Tue, 26 May 2015 18:20:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;Like this way we will create more BBs than the number of Handlers&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Handlers cannot outrun responders, unless I am missing something (the Esteban patch from last week that makes it so we set call as &apos;done&apos; though response has not been returned?), so I still only see handlers + responders as total count of BBs in pool.&lt;/p&gt;</comment>
                            <comment id="14559572" author="anoop.hbase" created="Tue, 26 May 2015 18:31:58 +0000"  >&lt;p&gt;You mean &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13694&quot; title=&quot;CallQueueSize is incorrectly decremented until the response is sent&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13694&quot;&gt;&lt;del&gt;HBASE-13694&lt;/del&gt;&lt;/a&gt; right?&lt;br/&gt;
That has not changed the done() call part.   We call done on Call once the response is sent by Responder.. Then only we return back BB to pool.&lt;/p&gt;</comment>
                            <comment id="14561264" author="stack" created="Wed, 27 May 2015 16:58:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;You mean &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13694&quot; title=&quot;CallQueueSize is incorrectly decremented until the response is sent&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13694&quot;&gt;&lt;del&gt;HBASE-13694&lt;/del&gt;&lt;/a&gt; right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We call done on Call once the response is sent by Responder.. Then only we return back BB to pool.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok. Good.&lt;/p&gt;

&lt;p&gt;Did you figure then how handlers are able to outrun responders?&lt;/p&gt;

&lt;p&gt;Think we need a test for this new queue and reproducing the scenario that failed before this patch to prove this patch fixes my messup?&lt;/p&gt;

&lt;p&gt;Otherwise, patch looks good.&lt;/p&gt;

&lt;p&gt;Any idea of perf implications?&lt;/p&gt;
</comment>
                            <comment id="14561266" author="stack" created="Wed, 27 May 2015 16:59:53 +0000"  >&lt;blockquote&gt;&lt;p&gt;Any idea of perf implications?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;d think it not any different given we swap reentrant lock and simple queue for a concurrent queue....&lt;/p&gt;</comment>
                            <comment id="14561297" author="anoop.hbase" created="Wed, 27 May 2015 17:13:05 +0000"  >&lt;p&gt;There is single Responder thread. It writes data to socket and the data comes back to client very fast (am on local host)   Then the Call#close() is returning BB back to pool.  We need synchorinization here any way. For the lock it has to compete with 30 threads( default handlers count) and I believe this single thread is starving..  By this time clients has sent again set of RPCs and there are free handlers to do the work and immediately they need BBs.&lt;br/&gt;
With patch we make sure we are not unnecessarily creating bigger sized BBs.   Still there are new BBs getting created as we see in the issue description.&lt;br/&gt;
I am planning to test keeping BBs at handler level. &lt;br/&gt;
In the PE random read test, I am able to see clearly some gain..  As the need to create bigger sized BBs are not there, this helps.&lt;/p&gt;</comment>
                            <comment id="14561310" author="stack" created="Wed, 27 May 2015 17:17:00 +0000"  >&lt;blockquote&gt;&lt;p&gt;and I believe this single thread is starving.. .&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Makes sense (excellent!) We are bottlenecked here returning responses (Remove the bottleneck and we can use all CPU... so this is a good place to focus on).&lt;/p&gt;</comment>
                            <comment id="14561335" author="ram_krish" created="Wed, 27 May 2015 17:30:15 +0000"  >&lt;p&gt;In cases like PE tool with multi threads as the results are fixed size we end up creating more BBs - infact we only need the first BB that was created of the required size and that could be reused for all the other threads. May be the impact would be lesser if the client and server are in different hosts.&lt;/p&gt;</comment>
                            <comment id="14561345" author="anoop.hbase" created="Wed, 27 May 2015 17:37:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;Think we need a test for this new queue and reproducing the scenario that failed before this patch to prove this patch fixes my messup?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Sure Stack.&lt;/p&gt;</comment>
                            <comment id="14561503" author="stack" created="Wed, 27 May 2015 18:57:13 +0000"  >&lt;p&gt;+1 if hadoopqa is good w/ it.&lt;/p&gt;</comment>
                            <comment id="14561832" author="hadoopqa" created="Wed, 27 May 2015 22:05:51 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12735660/HBASE-13778_V2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12735660/HBASE-13778_V2.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 19a57f1e7e57b83e17e0ef91e35b02dfd5af2893.&lt;br/&gt;
  ATTACHMENT ID: 12735660&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14201//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14201//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14201//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14201//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14201//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14201//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14201//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14201//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14561872" author="stack" created="Wed, 27 May 2015 22:35:16 +0000"  >&lt;p&gt;Retry&lt;/p&gt;</comment>
                            <comment id="14562092" author="hadoopqa" created="Thu, 28 May 2015 00:43:32 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12735713/HBASE-13778_V2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12735713/HBASE-13778_V2.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 6529d8833d965fb201b9fe6927eed425bf31607f.&lt;br/&gt;
  ATTACHMENT ID: 12735713&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14206//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14206//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14206//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14206//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14206//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14206//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14206//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14206//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14562159" author="anoop.hbase" created="Thu, 28 May 2015 01:40:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;-1 core tests. The patch failed these unit tests:&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;But the test results say 0 failures/errors&lt;br/&gt;
Also the new tests passed&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Class&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Duration&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Fail&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;(diff)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Skip&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;(diff)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Pass&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;(diff)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Total&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;(diff)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;TestBoundedByteBufferPool&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;	2.1 sec&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;	0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;	3&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;	+1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;	3&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;	+1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;TestBoundedArrayQueue&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;	0.14 sec&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;	0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;	0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;	1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;	+1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;	1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;	+1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</comment>
                            <comment id="14562162" author="anoop.hbase" created="Thu, 28 May 2015 01:43:23 +0000"  >&lt;p&gt;QA retry&lt;/p&gt;</comment>
                            <comment id="14562308" author="hadoopqa" created="Thu, 28 May 2015 05:20:38 +0000"  >&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12735763/HBASE-13778_V2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12735763/HBASE-13778_V2.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit ef18d75d001370ae43a6462491b3aae7ccce0703.&lt;br/&gt;
  ATTACHMENT ID: 12735763&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14212//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14212//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14212//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14212//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14212//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14212//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14212//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14212//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14562363" author="anoop.hbase" created="Thu, 28 May 2015 06:28:53 +0000"  >&lt;p&gt;Pushed to 0.98, branch-1.1, branch-1 and master.&lt;br/&gt;
This optimization of Reuse the IPCUtil#buildCellBlock buffer, was not done in branch-1.0 so bug not applicable there.&lt;/p&gt;</comment>
                            <comment id="14562364" author="anoop.hbase" created="Thu, 28 May 2015 06:29:44 +0000"  >&lt;p&gt;Thanks for the reviews Stack and Ram.&lt;/p&gt;</comment>
                            <comment id="14562365" author="anoop.hbase" created="Thu, 28 May 2015 06:30:44 +0000"  >&lt;p&gt;This is the version I committed to branch-1 which applies cleanly on branch-1.1 as well as 0.98&lt;/p&gt;</comment>
                            <comment id="14562496" author="hudson" created="Thu, 28 May 2015 08:23:41 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-1.1 #507 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.1/507/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.1/507/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13778&quot; title=&quot;BoundedByteBufferPool incorrectly increasing runningAverage buffer length&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13778&quot;&gt;&lt;del&gt;HBASE-13778&lt;/del&gt;&lt;/a&gt; BoundedByteBufferPool incorrectly increasing runningAverage buffer length. (anoopsamjohn: rev 9310fbb4b2a17711221a0eed25cf0d73ac289cf4)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/BoundedArrayQueue.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestBoundedArrayQueue.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/io/BoundedByteBufferPool.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/io/TestBoundedByteBufferPool.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14562559" author="hudson" created="Thu, 28 May 2015 09:17:58 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.2 #108 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2/108/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2/108/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13778&quot; title=&quot;BoundedByteBufferPool incorrectly increasing runningAverage buffer length&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13778&quot;&gt;&lt;del&gt;HBASE-13778&lt;/del&gt;&lt;/a&gt; BoundedByteBufferPool incorrectly increasing runningAverage buffer length. (anoopsamjohn: rev 21332418499469e4affd48731f31c55c3d2cf2a7)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/io/BoundedByteBufferPool.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/io/TestBoundedByteBufferPool.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/BoundedArrayQueue.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestBoundedArrayQueue.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14562660" author="hudson" created="Thu, 28 May 2015 10:40:53 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-TRUNK #6520 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6520/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6520/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13778&quot; title=&quot;BoundedByteBufferPool incorrectly increasing runningAverage buffer length&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13778&quot;&gt;&lt;del&gt;HBASE-13778&lt;/del&gt;&lt;/a&gt; BoundedByteBufferPool incorrectly increasing runningAverage buffer length. (anoopsamjohn: rev 81b9abab0c93cb338dc3c9b91d5a917bb7f9972a)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/io/BoundedByteBufferPool.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestBoundedArrayQueue.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/BoundedArrayQueue.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/io/TestBoundedByteBufferPool.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14562693" author="hudson" created="Thu, 28 May 2015 11:14:59 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-0.98 #1007 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.98/1007/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.98/1007/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13778&quot; title=&quot;BoundedByteBufferPool incorrectly increasing runningAverage buffer length&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13778&quot;&gt;&lt;del&gt;HBASE-13778&lt;/del&gt;&lt;/a&gt; BoundedByteBufferPool incorrectly increasing runningAverage buffer length. (anoopsamjohn: rev c0aca94f6a91282bf1db69cac6690b897db2ca70)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/io/TestBoundedByteBufferPool.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/io/BoundedByteBufferPool.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/BoundedArrayQueue.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestBoundedArrayQueue.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14562776" author="hudson" created="Thu, 28 May 2015 12:06:08 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-0.98-on-Hadoop-1.1 #958 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/958/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/958/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13778&quot; title=&quot;BoundedByteBufferPool incorrectly increasing runningAverage buffer length&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13778&quot;&gt;&lt;del&gt;HBASE-13778&lt;/del&gt;&lt;/a&gt; BoundedByteBufferPool incorrectly increasing runningAverage buffer length. (anoopsamjohn: rev c0aca94f6a91282bf1db69cac6690b897db2ca70)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/io/BoundedByteBufferPool.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/BoundedArrayQueue.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestBoundedArrayQueue.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/io/TestBoundedByteBufferPool.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12778952">HBASE-13142</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12735806" name="HBASE-13778-branch-1.patch" size="11737" author="anoop.hbase" created="Thu, 28 May 2015 06:30:44 +0000"/>
                            <attachment id="12735630" name="HBASE-13778_V1.patch" size="5839" author="anoop.hbase" created="Wed, 27 May 2015 16:46:26 +0000"/>
                            <attachment id="12735763" name="HBASE-13778_V2.patch" size="11824" author="anoop.hbase" created="Thu, 28 May 2015 01:43:23 +0000"/>
                            <attachment id="12735713" name="HBASE-13778_V2.patch" size="11824" author="stack" created="Wed, 27 May 2015 22:35:16 +0000"/>
                            <attachment id="12735660" name="HBASE-13778_V2.patch" size="11824" author="anoop.hbase" created="Wed, 27 May 2015 18:54:30 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 26 May 2015 17:07:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 27 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2f7jb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>