<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 19:32:38 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-6060/HBASE-6060.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-6060] Regions&apos;s in OPENING state from failed regionservers takes a long time to recover</title>
                <link>https://issues.apache.org/jira/browse/HBASE-6060</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;we have seen a pattern in tests, that the regions are stuck in OPENING state for a very long time when the region server who is opening the region fails. My understanding of the process: &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;master calls rs to open the region. If rs is offline, a new plan is generated (a new rs is chosen). RegionState is set to PENDING_OPEN (only in master memory, zk still shows OFFLINE). See HRegionServer.openRegion(), HMaster.assign()&lt;/li&gt;
	&lt;li&gt;RegionServer, starts opening a region, changes the state in znode. But that znode is not ephemeral. (see ZkAssign)&lt;/li&gt;
	&lt;li&gt;Rs transitions zk node from OFFLINE to OPENING. See OpenRegionHandler.process()&lt;/li&gt;
	&lt;li&gt;rs then opens the region, and changes znode from OPENING to OPENED&lt;/li&gt;
	&lt;li&gt;when rs is killed between OPENING and OPENED states, then zk shows OPENING state, and the master just waits for rs to change the region state, but since rs is down, that wont happen.&lt;/li&gt;
	&lt;li&gt;There is a AssignmentManager.TimeoutMonitor, which does exactly guard against these kind of conditions. It periodically checks (every 10 sec by default) the regions in transition to see whether they timedout (hbase.master.assignment.timeoutmonitor.timeout). Default timeout is 30 min, which explains what you and I are seeing.&lt;/li&gt;
	&lt;li&gt;ServerShutdownHandler in Master does not reassign regions in OPENING state, although it handles other states.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Lowering that threshold from the configuration is one option, but still I think we can do better. &lt;/p&gt;

&lt;p&gt;Will investigate more. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12556729">HBASE-6060</key>
            <summary>Regions&apos;s in OPENING state from failed regionservers takes a long time to recover</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jxiang">Jimmy Xiang</assignee>
                                    <reporter username="enis">Enis Soztutar</reporter>
                        <labels>
                    </labels>
                <created>Mon, 21 May 2012 18:53:51 +0000</created>
                <updated>Sat, 10 Jan 2015 01:38:23 +0000</updated>
                            <resolved>Thu, 1 Nov 2012 20:53:10 +0000</resolved>
                                                    <fixVersion>0.95.0</fixVersion>
                                    <component>master</component>
                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>22</watches>
                                                                <comments>
                            <comment id="13280453" author="apurtell" created="Mon, 21 May 2012 20:31:11 +0000"  >&lt;p&gt;The TimeoutMonitor timeout was increased to 30 minutes in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4126&quot; title=&quot;Make timeoutmonitor timeout after 30 minutes instead of 3&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4126&quot;&gt;&lt;del&gt;HBASE-4126&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13280469" author="enis" created="Mon, 21 May 2012 20:45:46 +0000"  >&lt;p&gt;Thanks Andrew for the pointer. Agreed that lowering the timeout can have deeper impacts. We should fix the issue properly instead. &lt;/p&gt;</comment>
                            <comment id="13286323" author="ram_krish" created="Thu, 31 May 2012 05:07:20 +0000"  >&lt;p&gt;@Eris&lt;br/&gt;
We are working on a patch for that.  &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5396&quot; title=&quot;Handle the regions in regionPlans while processing ServerShutdownHandler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5396&quot;&gt;&lt;del&gt;HBASE-5396&lt;/del&gt;&lt;/a&gt; tries to address a similar issue but it is not in trunk and it is only in 0.90. But it caused &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5816&quot; title=&quot;Balancer and ServerShutdownHandler concurrently reassign the same region&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5816&quot;&gt;&lt;del&gt;HBASE-5816&lt;/del&gt;&lt;/a&gt; in 0.90.&lt;br/&gt;
We are trying to work on better patch.  Will come up with a patch in a day or two.&lt;/p&gt;</comment>
                            <comment id="13286438" author="ram_krish" created="Thu, 31 May 2012 09:49:30 +0000"  >&lt;p&gt;Today we will come up with a patch for this.  We are already working on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5396&quot; title=&quot;Handle the regions in regionPlans while processing ServerShutdownHandler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5396&quot;&gt;&lt;del&gt;HBASE-5396&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5816&quot; title=&quot;Balancer and ServerShutdownHandler concurrently reassign the same region&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5816&quot;&gt;&lt;del&gt;HBASE-5816&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13286795" author="enis" created="Thu, 31 May 2012 18:16:14 +0000"  >&lt;p&gt;@Ramkrishna, that is great. I have also noticed regions in CLOSING to stay in RIT as well, and strangely enough, showing the master as their assigned server. Do you think that it can be related? &lt;/p&gt;</comment>
                            <comment id="13287140" author="ram_krish" created="Fri, 1 Jun 2012 04:16:25 +0000"  >&lt;p&gt;@Enis&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I have also noticed regions in CLOSING to stay in RIT as well,&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I have not specifically seen this.  We will check this also.&lt;br/&gt;
Pls take a look at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6016&quot; title=&quot;ServerShutdownHandler#processDeadRegion could return false for disabling table regions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6016&quot;&gt;&lt;del&gt;HBASE-6016&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5927&quot; title=&quot;SSH and DisableTableHandler happening together does not clear the znode of the region and RIT map.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5927&quot;&gt;&lt;del&gt;HBASE-5927&lt;/del&gt;&lt;/a&gt;.  Just in case if you feel they are related.&lt;/p&gt;</comment>
                            <comment id="13287489" author="rajesh23" created="Fri, 1 Jun 2012 15:51:29 +0000"  >&lt;p&gt;This patch is also a backport of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5396&quot; title=&quot;Handle the regions in regionPlans while processing ServerShutdownHandler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5396&quot;&gt;&lt;del&gt;HBASE-5396&lt;/del&gt;&lt;/a&gt;.  But this is more exhaustive and also tries to address &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5816&quot; title=&quot;Balancer and ServerShutdownHandler concurrently reassign the same region&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5816&quot;&gt;&lt;del&gt;HBASE-5816&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6147&quot; title=&quot;SSH and AM.joinCluster leads to region assignment inconsistency in many cases.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6147&quot;&gt;&lt;del&gt;HBASE-6147&lt;/del&gt;&lt;/a&gt; has been raised to solve other assign related issues that comes from SSH and joincluster.  Pls review and provide your comments.&lt;/p&gt;</comment>
                            <comment id="13287547" author="zhihyu@ebaysf.com" created="Fri, 1 Jun 2012 17:26:25 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(!plan.canUsePlan()){
+        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Please insert a space after if. It would be helpful to add LOG.debug() before returning.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void usePlan(&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; usePlan) {
+    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.usePlan = usePlan;
+  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I would name the boolean &apos;usable&apos;. The setter can be named setUsable().&lt;br/&gt;
A bigger question is:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (newPlan) {
+            randomPlan.usePlan(&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
+            &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.regionPlans.remove(randomPlan.getRegionName());
+          } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
+            existingPlan.usePlan(&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
+            &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.regionPlans.remove(existingPlan.getRegionName());
+          }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;why cannot we return null above so that we don&apos;t need to add the boolean member to RegionPlan ?&lt;br/&gt;
At least we shouldn&apos;t return an unusable randomPlan.&lt;/p&gt;</comment>
                            <comment id="13287561" author="zhihyu@ebaysf.com" created="Fri, 1 Jun 2012 17:44:40 +0000"  >&lt;p&gt;I ran the tests in TestAssignmentManager and they passed.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.regionPlans) {
+      regionsOnDeadServer = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RegionsOnDeadServer();
+      regionsFromRegionPlansForServer = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ConcurrentSkipListSet&amp;lt;HRegionInfo&amp;gt;();
+      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.deadServerRegionsFromRegionPlan.put(sn, regionsOnDeadServer);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Can the first two assignments be placed outside synchronized block ?&lt;br/&gt;
Before making the deadServerRegionsFromRegionPlan.put() call, I think we should check that sn isn&apos;t currently in deadServerRegionsFromRegionPlan.&lt;br/&gt;
For isRegionOnline(HRegionInfo hri):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
+      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
+        &lt;span class=&quot;code-comment&quot;&gt;// Remove the assignment mapping &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; sn.
&lt;/span&gt;+        Set&amp;lt;HRegionInfo&amp;gt; hriSet = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.servers.get(sn);
+        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (hriSet != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+          hriSet.remove(hri);
+        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The else keyword isn&apos;t needed.&lt;br/&gt;
What if hriSet contains other regions apart from hri, should they be removed as well ?&lt;/p&gt;</comment>
                            <comment id="13287568" author="ram_krish" created="Fri, 1 Jun 2012 18:04:37 +0000"  >&lt;p&gt;@Ted&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;why cannot we return null above so that we don&apos;t need to add the boolean member to RegionPlan ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The reason here is incase of null region plan we have a different behaviour.  We consider it as a case where we dont have any live RS and hence set some flag such that the timeoutmonitor can be skipped. Hence we need to differentiate the null behaviour from this.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (plan == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
        LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;Unable to determine a plan to assign &quot;&lt;/span&gt; + state);
        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.timeoutMonitor.setAllRegionServersOffline(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;; &lt;span class=&quot;code-comment&quot;&gt;// Should get reassigned later when RIT times out.
&lt;/span&gt;      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I was not sure of which name to give for the usePlan.  May be &apos;usable&apos; is better.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Before making the deadServerRegionsFromRegionPlan.put() call
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I think as the SSH calls per server it should be ok. &lt;br/&gt;
I will check on other comments before changing it. Thanks for your detailed review.&lt;/p&gt;</comment>
                            <comment id="13287579" author="zhihyu@ebaysf.com" created="Fri, 1 Jun 2012 18:23:11 +0000"  >&lt;p&gt;Thanks for working on this issue.&lt;/p&gt;

&lt;p&gt;I will review the next version in more detail &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13287599" author="zhihyu@ebaysf.com" created="Fri, 1 Jun 2012 18:52:47 +0000"  >&lt;p&gt;Thinking more about the usable RegionPlan flag, we don&apos;t really need it.&lt;br/&gt;
We can introduce an &apos;unusable&apos; RegionPlan singleton which signifies the fact that it is not to be used.&lt;/p&gt;</comment>
                            <comment id="13287656" author="zhihyu@ebaysf.com" created="Fri, 1 Jun 2012 20:50:26 +0000"  >&lt;p&gt;Patch v3 illustrates my proposal.&lt;/p&gt;

&lt;p&gt;I also created a singleton for the null RegionPlan that signifies there is no server to assign region.&lt;/p&gt;

&lt;p&gt;TestAssignmentManager passes.&lt;/p&gt;</comment>
                            <comment id="13287831" author="rajesh23" created="Sat, 2 Jun 2012 01:54:56 +0000"  >&lt;p&gt;@Ted &lt;br/&gt;
in v3 patch small change.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      RegionPlan plan = getRegionPlan(state, forceNewPlan);
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (plan == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
        LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;Unable to determine a plan to assign &quot;&lt;/span&gt; + state);
        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.timeoutMonitor.setAllRegionServersOffline(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;; &lt;span class=&quot;code-comment&quot;&gt;// Should get reassigned later when RIT times out.
&lt;/span&gt;      }

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;in this place also instead of null check, we need to give&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
plan == RegionPlan.NO_SERVERS_TO_ASSIGN
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="13287842" author="zhihyu@ebaysf.com" created="Sat, 2 Jun 2012 03:21:53 +0000"  >&lt;p&gt;Patch v4 addresses Rajesh&apos;s comment and some of my own comments.&lt;/p&gt;

&lt;p&gt;TestAssignmentManager passes.&lt;/p&gt;

&lt;p&gt;Running test suite.&lt;/p&gt;</comment>
                            <comment id="13287934" author="ram_krish" created="Sat, 2 Jun 2012 13:10:53 +0000"  >&lt;p&gt;+1 on v4. Hope test suite passes.&lt;/p&gt;</comment>
                            <comment id="13287937" author="zhihyu@ebaysf.com" created="Sat, 2 Jun 2012 13:34:16 +0000"  >&lt;p&gt;Test suite passed.&lt;/p&gt;</comment>
                            <comment id="13288086" author="ram_krish" created="Sun, 3 Jun 2012 06:21:23 +0000"  >&lt;p&gt;Attached patch for trunk and 0.94.  In 0.94 just added one info log from the previous patch. Will submit to hadoopQA.&lt;/p&gt;</comment>
                            <comment id="13288092" author="hadoopqa" created="Sun, 3 Jun 2012 07:16:25 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12530682/6060-trunk.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12530682/6060-trunk.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 hadoop2.0.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to cause Findbugs (version 1.3.9) to fail.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     -1 core tests.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestMultiParallel&lt;br/&gt;
                  org.apache.hadoop.hbase.replication.TestReplication&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestHRegionOnCluster&lt;br/&gt;
                  org.apache.hadoop.hbase.master.TestRollingRestart&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2091//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2091//testReport/&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2091//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2091//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13288141" author="ram_krish" created="Sun, 3 Jun 2012 11:09:54 +0000"  >&lt;p&gt;Updated patch.&lt;/p&gt;</comment>
                            <comment id="13288151" author="hadoopqa" created="Sun, 3 Jun 2012 11:54:26 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12530688/6060-trunk.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12530688/6060-trunk.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 hadoop2.0.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to cause Findbugs (version 1.3.9) to fail.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     -1 core tests.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.io.hfile.TestForceCacheImportantBlocks&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestServerCustomProtocol&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2092//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2092//testReport/&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2092//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2092//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13288168" author="zhihyu@ebaysf.com" created="Sun, 3 Jun 2012 14:32:45 +0000"  >&lt;p&gt;When I tried to produce a patch for 0.92 branch, I found that &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5546&quot; title=&quot;Master assigns region in the original region server when opening region failed  &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5546&quot;&gt;&lt;del&gt;HBASE-5546&lt;/del&gt;&lt;/a&gt; wasn&apos;t integrated to 0.92&lt;/p&gt;

&lt;p&gt;@Ram:&lt;br/&gt;
Do you think &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5546&quot; title=&quot;Master assigns region in the original region server when opening region failed  &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5546&quot;&gt;&lt;del&gt;HBASE-5546&lt;/del&gt;&lt;/a&gt; and this JIRA should go to 0.92 ?&lt;/p&gt;</comment>
                            <comment id="13288172" author="rajesh23" created="Sun, 3 Jun 2012 14:59:12 +0000"  >&lt;p&gt;@Ram&lt;br/&gt;
Few changes in TestAssignmentManager.&lt;br/&gt;
-&amp;gt;In mocked assignment manager we are overriding assign method and if we invoke this we are setting assignInvoked to true.&lt;br/&gt;
But in bulk assign case if regions to be assigned is empty then we should not set assignInvoked to true because in SSH we are always calling assign even regions is empty.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void assign(java.util.List&amp;lt;HRegionInfo&amp;gt; regions, java.util.List&amp;lt;ServerName&amp;gt; servers) 
    {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!regions.isEmpty()) {
        assignInvoked = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
        assignInvoked = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
      }
    };
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;-&amp;gt;processServerShutdownHandler should behave based on servername we are passing.changed as in 94 patch.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    ServerShutdownHandler handler = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (sn != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      handler = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ServerShutdownHandler(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.server, services, deadServers, sn, &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
      handler = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ServerShutdownHandler(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.server, services, deadServers, SERVERNAME_A, &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Uploaded patch for trunk with these changes.&lt;br/&gt;
TestAssignmentManager passes.&lt;/p&gt;
</comment>
                            <comment id="13288182" author="ram_krish" created="Sun, 3 Jun 2012 15:37:48 +0000"  >&lt;p&gt;@Ted&lt;br/&gt;
I feel this JIRA is needed for 0.92 as it is related to the recovery time.  But &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5546&quot; title=&quot;Master assigns region in the original region server when opening region failed  &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5546&quot;&gt;&lt;del&gt;HBASE-5546&lt;/del&gt;&lt;/a&gt; may not be so important.  May be if someone needs it they can just backport it i feel.&lt;/p&gt;</comment>
                            <comment id="13288184" author="hadoopqa" created="Sun, 3 Jun 2012 15:58:15 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12530693/6060-trunk_2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12530693/6060-trunk_2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 hadoop2.0.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to cause Findbugs (version 1.3.9) to fail.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     -1 core tests.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.TestAtomicOperation&lt;br/&gt;
                  org.apache.hadoop.hbase.master.TestSplitLogManager&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2093//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2093//testReport/&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2093//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2093//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13288187" author="zhihyu@ebaysf.com" created="Sun, 3 Jun 2012 16:05:24 +0000"  >&lt;p&gt;@Ram:&lt;br/&gt;
That is fine.&lt;/p&gt;

&lt;p&gt;@Rajesh:&lt;br/&gt;
Can you prepare patch for 0.92 (and run test suite) ? In the future, publishing trunk patch on review board would allow reviewers to easily spot the differences across patches.&lt;/p&gt;</comment>
                            <comment id="13288189" author="rajesh23" created="Sun, 3 Jun 2012 16:09:50 +0000"  >&lt;p&gt;@Ted&lt;/p&gt;

&lt;p&gt;Ok. I will prepare and run test suite.&lt;/p&gt;</comment>
                            <comment id="13288190" author="zhihyu@ebaysf.com" created="Sun, 3 Jun 2012 16:10:19 +0000"  >&lt;p&gt;I ran the two tests flagged by Hadoop QA and they passed.&lt;/p&gt;</comment>
                            <comment id="13288336" author="ram_krish" created="Mon, 4 Jun 2012 04:22:17 +0000"  >&lt;p&gt;@Rajesh&lt;br/&gt;
Thanks for that testcase change.  I forgot doing that, i remember we discussed that change internally.&lt;/p&gt;</comment>
                            <comment id="13288593" author="ram_krish" created="Mon, 4 Jun 2012 14:40:34 +0000"  >&lt;p&gt;@Ted&lt;br/&gt;
In trunk if we take up this patch we need to solve &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6012&quot; title=&quot;Handling RegionOpeningState for bulk assign&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6012&quot;&gt;&lt;del&gt;HBASE-6012&lt;/del&gt;&lt;/a&gt;. Without that master will get aborted.  But i feel the current patch in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6012&quot; title=&quot;Handling RegionOpeningState for bulk assign&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6012&quot;&gt;&lt;del&gt;HBASE-6012&lt;/del&gt;&lt;/a&gt; needs more testing.&lt;/p&gt;</comment>
                            <comment id="13288599" author="ram_krish" created="Mon, 4 Jun 2012 14:43:46 +0000"  >&lt;p&gt;I also feel if this patch is fine we can commit the patch to trunk also and work on HBASe-6012 and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6147&quot; title=&quot;SSH and AM.joinCluster leads to region assignment inconsistency in many cases.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6147&quot;&gt;&lt;del&gt;HBASE-6147&lt;/del&gt;&lt;/a&gt; to solve such scenarios mentioned in the above comment.&lt;/p&gt;</comment>
                            <comment id="13288608" author="zhihyu@ebaysf.com" created="Mon, 4 Jun 2012 15:00:07 +0000"  >&lt;p&gt;Agreed.&lt;br/&gt;
We can integrate once patch for 0.92 is ready.&lt;/p&gt;</comment>
                            <comment id="13288679" author="rajesh23" created="Mon, 4 Jun 2012 17:02:54 +0000"  >&lt;p&gt;Patch for 92. Running test suite.&lt;/p&gt;</comment>
                            <comment id="13288695" author="hadoopqa" created="Mon, 4 Jun 2012 17:12:38 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12530816/HBASE-6060-92.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12530816/HBASE-6060-92.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    -1 tests included.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2098//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2098//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13288868" author="stack" created="Mon, 4 Jun 2012 20:19:02 +0000"  >&lt;p&gt;Lads, signaling using plan types seems perverse.  Why do we need UNUSABLE_PLAN?  How is that different from the absence of a plan?  And why do we need NO_SERVERS_TO_ASSIGN?  Can&apos;t we just check for there being servers before we assign?&lt;/p&gt;

&lt;p&gt;Do we have to make the new internal data structure accessible to others publically?  I&apos;m talking about the method: &apos;getDeadServerRegionsFromRegionPlan&apos;.&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;More later.&lt;/p&gt;</comment>
                            <comment id="13289018" author="stack" created="Tue, 5 Jun 2012 00:21:23 +0000"  >&lt;p&gt;I see the question of difference between null plan and UNUSABLE_PLAN was raised already.  Null plan means no servers apparently.  Does that have to be so?  That don&apos;t seem right either.&lt;/p&gt;

&lt;p&gt;Nice tests.&lt;/p&gt;</comment>
                            <comment id="13289047" author="rajesh23" created="Tue, 5 Jun 2012 01:13:56 +0000"  >&lt;p&gt;@stack&lt;br/&gt;
Thanks for review.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Do we have to make the new internal data structure accessible to others publically? I&apos;m talking about the method: &apos;getDeadServerRegionsFromRegionPlan&apos;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;deadServerRegionsFromRegionPlan is not accessible to SSH.&lt;br/&gt;
made the getDeadServerRegionsFromRegionPlan public to clear the entries of server from deadServerRegionsFromRegionPlan after processing SSH.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (regionsFromRegionPlansForServer != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
        regionsFromRegionPlansForServer.clear();
      }
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (regionsInTransition != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
        regionsInTransition.clear();
      }
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.services.getAssignmentManager().getDeadServerRegionsFromRegionPlan()
          .remove(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.serverName);
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.deadServers.finish(serverName);
    }

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;please correct me if wrong&lt;/p&gt;</comment>
                            <comment id="13289048" author="rajesh23" created="Tue, 5 Jun 2012 01:14:26 +0000"  >&lt;p&gt;@Ted&lt;br/&gt;
Test suite passes for 92&lt;/p&gt;</comment>
                            <comment id="13289150" author="stack" created="Tue, 5 Jun 2012 04:45:23 +0000"  >&lt;p&gt;Rajeshbabu If you are just doing clear and remove, then maybe expose a clear and remove only rather than give out the Map for anyone to do anything to.  Also, any chance of reworking this patch so we don&apos;t have &apos;special&apos; regionplans to signal different processing?  Thanks.&lt;/p&gt;</comment>
                            <comment id="13289177" author="ram_krish" created="Tue, 5 Jun 2012 05:56:17 +0000"  >&lt;blockquote&gt;&lt;p&gt;Also, any chance of reworking this patch so we don&apos;t have &apos;special&apos; regionplans to signal different processing&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;NO_SERVERS_TO_ASSIGN - I think we can remove this and use null as it was previously.&lt;br/&gt;
But to signify if to use the plan or not, its better we use some region plan, may be say  REGION_PLAN_INUSE. The reason is, in future if we work on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6147&quot; title=&quot;SSH and AM.joinCluster leads to region assignment inconsistency in many cases.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6147&quot;&gt;&lt;del&gt;HBASE-6147&lt;/del&gt;&lt;/a&gt;, such states can be useful.(this what we feel currently, but not started working on that).&lt;/p&gt;</comment>
                            <comment id="13289462" author="rajesh23" created="Tue, 5 Jun 2012 14:45:39 +0000"  >&lt;p&gt;@Stack&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;then maybe expose a clear and remove only rather than give out the Map&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Done&lt;/p&gt;

&lt;p&gt;NO_SERVERS_TO_ASSIGN  has been removed.  But we have one case saying REGION_PLAN_ALREADY_INUSE to differnetiate null and the special case.  It may be better to have if in future we try to solve double assignment scenarios w.r.t so SSH and AM. Pls provide your comments.  Any other better way you feel?&lt;br/&gt;
If you are ok, I can rebase the patches for 0.92 and 0.94.&lt;/p&gt;</comment>
                            <comment id="13289490" author="hadoopqa" created="Tue, 5 Jun 2012 15:39:47 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12530962/6060-trunk_3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12530962/6060-trunk_3.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 hadoop2.0.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 3 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     -1 core tests.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.master.TestSplitLogManager&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestSplitTransactionOnCluster&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2107//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2107//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2107//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2107//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2107//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2107//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2107//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2107//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13289503" author="zhihyu@ebaysf.com" created="Tue, 5 Jun 2012 16:01:31 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (newPlan) {
+            &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.regionPlans.remove(randomPlan.getRegionName());
+            LOG
+            .info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Server shutdown handler already in progress &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the region &quot;&lt;/span&gt;
+                + randomPlan.getRegionName());
+            randomPlan = RegionPlan.REGION_PLAN_ALREADY_INUSE;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It would be confusing to label a new plan &apos;ALREADY_INUSE&apos;.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-comment&quot;&gt;// the following singleton signifies that the plan is not usable
&lt;/span&gt;+  &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; RegionPlan REGION_PLAN_ALREADY_INUSE = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RegionPlan(&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I think UNUSABLE_REGION_PLAN would be a better name.&lt;/p&gt;</comment>
                            <comment id="13289561" author="stack" created="Tue, 5 Jun 2012 17:35:07 +0000"  >&lt;p&gt;First, thanks for working on this awkward issue.  Its a good find and needs to be fixed.&lt;/p&gt;

&lt;p&gt;Thanks too for removing NO_SERVERS_TO_ASSIGN.&lt;/p&gt;

&lt;p&gt;I&apos;m trying to get clear on why we need the REGION_PLAN_INUSE at all.  The idea is that the call to getRegionPlan needs to return something which says &quot;do not assign this region just yet&quot; and somehow, returning null is not enough because that means something else?  It means that there are no servers available to assign the region too?  Why can we not broaden what null means so it means no servers or don&apos;t assign just yet?&lt;/p&gt;

&lt;p&gt;FYI, this will confuse: &apos;+    if (this == REGION_PLAN_ALREADY_INUSE) return &quot;&quot;;&apos;  Should probably print out something here.  Null string will make people think the toSTring doesn&apos;t work.&lt;/p&gt;



</comment>
                            <comment id="13289576" author="ram_krish" created="Tue, 5 Jun 2012 17:53:47 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; encodedName = state.getRegion().getEncodedName();
    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;ServerName&amp;gt; destServers =
      serverManager.createDestinationServersList(serverToExclude);

    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (destServers.isEmpty()){
      LOG.warn(&lt;span class=&quot;code-quote&quot;&gt;&quot;Can&apos;t move the region &quot;&lt;/span&gt; + encodedName +
        &lt;span class=&quot;code-quote&quot;&gt;&quot;, there is no destination server available.&quot;&lt;/span&gt;);
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thought we can extract this out before calling getRegionPlan so that if we get a null we know there are no servers to assign.  &lt;br/&gt;
After this we should use the destServers and pass it to getRegionPlan. Now if getRegionPlan gives a null then we are sure that dont assign the regions yet.&lt;br/&gt;
But  now if someone needs to use getRegionPlan they need to make a call to the code above know the result and then use getRegionPlan passing the destServers (which again can be null).&lt;br/&gt;
If you see the patch attached earlier we tried to use a boolean var in regionplan to know if we can use the plan or not.&lt;br/&gt;
Can we try to make the destination as null if we want to say dont assign the region yet? &lt;/p&gt;</comment>
                            <comment id="13289623" author="stack" created="Tue, 5 Jun 2012 18:21:58 +0000"  >&lt;p&gt;Why move this out of getRegionPlan? Don&apos;t we want getRegionPlan to return actionable plans?  If no servers to assign, then a plan is not possible so just return null?  Why is it important to distingush case of no servers?  Because we do not have a mechanism for parking regions to assign until a server comes up?  That seems like something we need?  Can the region hang out in zk and be retried?  Thats the timeout monitor&apos;s job?   But we dont&apos; want timeout monitor and SSH racing against each other?  Can&apos;t we use zk znode sequence numbers to prevent this?  Just throwing out some ideas Ram.&lt;/p&gt;</comment>
                            <comment id="13289931" author="zjushch" created="Wed, 6 Jun 2012 03:57:27 +0000"  >&lt;p&gt;Could we fix the problem as the following?:&lt;br/&gt;
AssignmentManager#processServerShutdown&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;RegionState&amp;gt; processServerShutdown(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; ServerName sn){
...

&lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; (regionsInTransition) {
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (RegionState regionState : &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.regionsInTransition.values()) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (deadRegions.remove(regionState.getRegion())) {
          rits.add(regionState);
        }
        &lt;span class=&quot;code-comment&quot;&gt;// make &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; region in RIT will time out at once
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (sn.equals(regionState.getServerName())
            &amp;amp;&amp;amp; (regionState.isOpening() || regionState.isPendingOpen())) {
          LOG.debug(sn + &lt;span class=&quot;code-quote&quot;&gt;&quot; is already dead and make rs=&quot;&lt;/span&gt; + regionState
              + &lt;span class=&quot;code-quote&quot;&gt;&quot; time out in RIT&quot;&lt;/span&gt;);
          regionState.updateTimestamp(0L);
        }
      }
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; rits;
}

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I only see the description, correct me if wrong, thanks.&lt;/p&gt;</comment>
                            <comment id="13289936" author="stack" created="Wed, 6 Jun 2012 04:19:27 +0000"  >&lt;p&gt;@Chunhui That is inventive.  It has merit in that we only do the processing in the one place and no new special states are introduced.  Does it work?&lt;/p&gt;</comment>
                            <comment id="13289945" author="ram_krish" created="Wed, 6 Jun 2012 04:37:28 +0000"  >&lt;p&gt;@Stack and @Chunhui&lt;br/&gt;
As a whole if you see this patch it is a rebase of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5396&quot; title=&quot;Handle the regions in regionPlans while processing ServerShutdownHandler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5396&quot;&gt;&lt;del&gt;HBASE-5396&lt;/del&gt;&lt;/a&gt;.  If you see &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5396&quot; title=&quot;Handle the regions in regionPlans while processing ServerShutdownHandler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5396&quot;&gt;&lt;del&gt;HBASE-5396&lt;/del&gt;&lt;/a&gt; (now in 0.90) there are no special states.  But the fix there caused &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5816&quot; title=&quot;Balancer and ServerShutdownHandler concurrently reassign the same region&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5816&quot;&gt;&lt;del&gt;HBASE-5816&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
Now Chunhui&apos;s suggestion will make the timeout to work but the problem in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5816&quot; title=&quot;Balancer and ServerShutdownHandler concurrently reassign the same region&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5816&quot;&gt;&lt;del&gt;HBASE-5816&lt;/del&gt;&lt;/a&gt; will easily occur i.e two assignments will go in parallel.  And every time you hit this problem there are high chances master will abort.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!hijack &amp;amp;&amp;amp; !state.isClosed() &amp;amp;&amp;amp; !state.isOffline()) {
      &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; msg = &lt;span class=&quot;code-quote&quot;&gt;&quot;Unexpected state : &quot;&lt;/span&gt; + state + &lt;span class=&quot;code-quote&quot;&gt;&quot; .. Cannot transit it to OFFLINE.&quot;&lt;/span&gt;;
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.master.abort(msg, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(msg));
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; -1;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Why this double assignment happens? It is because&lt;br/&gt;
In the assign() code there is a retry mechanism if we fail the first assign.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
LOG.warn(&lt;span class=&quot;code-quote&quot;&gt;&quot;Failed assignment of &quot;&lt;/span&gt; +
          state.getRegion().getRegionNameAsString() + &lt;span class=&quot;code-quote&quot;&gt;&quot; to &quot;&lt;/span&gt; +
          plan.getDestination() + &lt;span class=&quot;code-quote&quot;&gt;&quot;, trying to assign elsewhere instead; &quot;&lt;/span&gt; +
          &lt;span class=&quot;code-quote&quot;&gt;&quot;retry=&quot;&lt;/span&gt; + i, t);
        &lt;span class=&quot;code-comment&quot;&gt;// Clean out plan we failed execute and one that doesn&apos;t look like it&apos;ll
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// succeed anyways; we need a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; plan!
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// Transition back to OFFLINE
&lt;/span&gt;        state.update(RegionState.State.OFFLINE);
        &lt;span class=&quot;code-comment&quot;&gt;// Force a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; plan and reassign.  Will &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; no servers.
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (getRegionPlan(state, plan.getDestination(), &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;) == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
          &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.timeoutMonitor.setAllRegionServersOffline(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
          LOG.warn(&lt;span class=&quot;code-quote&quot;&gt;&quot;Unable to find a viable location to assign region &quot;&lt;/span&gt; +
            state.getRegion().getRegionNameAsString());
          &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now because of the retry we start an assignment and SSH also will try to do an assignement(Either with the soln in patch or with Chunhui&apos;s suggestion). Now this will cause the master abort to happen.  And the same was reported in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5816&quot; title=&quot;Balancer and ServerShutdownHandler concurrently reassign the same region&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5816&quot;&gt;&lt;del&gt;HBASE-5816&lt;/del&gt;&lt;/a&gt; by Maryann.  This is the reason we were trying to address both the problems as part of this patch with some workarounds.  Also we try to use such mechanism so that in future we can avoid double assignments.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Can&apos;t we use zk znode sequence numbers to prevent this&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I am not very clear on this.  I think before setting a node to OFFLINE already we have some code checking the version no of znode inside createOrForceNodeOffline().&lt;/p&gt;




</comment>
                            <comment id="13289971" author="stack" created="Wed, 6 Jun 2012 05:51:54 +0000"  >&lt;p&gt;@Ram I looked at Chunhui&apos;s suggestion and read it as a fix in SSH that avoided our doing assigns in SSH but rather we punted to the timeout monitor letting it assign.  I now see after your explanation above that this is a change in AM#processServerShutdown.  Pardon me.  Thanks for the reminder on whats going on here and also for the reminder on hbase-5816.&lt;/p&gt;

&lt;p&gt;The issue in hbase-5816 seems to be the one to fix first.  Making the timeout monitor run more promptly will always make us bump up against hbase-5816 (our current config just mitigates how many threads can run at the one time manipulating regions.  Its not a fix by any means).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Now because of the retry we start an assignment and SSH also will try to do an assignement(Either with the soln in patch or with Chunhui&apos;s suggestion). Now this will cause the master abort to happen.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If we are to continue to have multiple threads doing assign, then we need to have each claim ownership of the region first by writing zk and then verifying the seqid each time they move the region state.  If they fali to grab the znode, then someone else is operating on it and they should give up.&lt;/p&gt;

&lt;p&gt;Are you thinking that the patches posted earlier address this issue and hbase-5816?&lt;/p&gt;</comment>
                            <comment id="13289974" author="ram_krish" created="Wed, 6 Jun 2012 06:03:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;Are you thinking that the patches posted earlier address this issue and hbase-5816?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes.  It addresses HBASe-5396, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6060&quot; title=&quot;Regions&amp;#39;s in OPENING state from failed regionservers takes a long time to recover&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6060&quot;&gt;&lt;del&gt;HBASE-6060&lt;/del&gt;&lt;/a&gt; and HBASe-5816.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;If we are to continue to have multiple threads doing assign, then we need to have each claim ownership of the region first by writing zk and then verifying the seqid each time they move the region state. If they fali to grab the znode, then someone else is operating on it and they should give up.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is already happening as per the current code. Before master tries to write the data on the znode there is a version check.  Even when RS tries to update the znode there is a version check.  But on top of this there are also some inmemory states in master which is getting updated by various threads. And that will also lead to some abnormalities like&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!hijack &amp;amp;&amp;amp; !state.isClosed() &amp;amp;&amp;amp; !state.isOffline()) {
      &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; msg = &lt;span class=&quot;code-quote&quot;&gt;&quot;Unexpected state : &quot;&lt;/span&gt; + state + &lt;span class=&quot;code-quote&quot;&gt;&quot; .. Cannot transit it to OFFLINE.&quot;&lt;/span&gt;;
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.master.abort(msg, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(msg));
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; -1;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 
&lt;p&gt;leading to issues like &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5816&quot; title=&quot;Balancer and ServerShutdownHandler concurrently reassign the same region&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5816&quot;&gt;&lt;del&gt;HBASE-5816&lt;/del&gt;&lt;/a&gt;.  One more thing if you see in the patches attached here,  logic of manipulating the region plan happens in the synchronized(regionplans) block.  Thus helping us to make only one assign thread to succeed.  Either AM or SSH.&lt;/p&gt;</comment>
                            <comment id="13289979" author="stack" created="Wed, 6 Jun 2012 06:17:04 +0000"  >&lt;p&gt;On znode check, yes, the rs is doing the checks before it does any transition.  This is not the case in master when SSH or TimeoutMonitor assume they own a region (else we would not be running into illegalstateexceptions).&lt;/p&gt;

&lt;p&gt;Agree, the updating of in-memory states also needs review.&lt;/p&gt;

&lt;p&gt;Synchronize on regionplans making change will shut out other threads while regionplan is being manipulated but after we leave the synchronization, is having a region named REGION_PLAN_ALREADY_INUSE the only way we have of blocking another thread trying to operate on a region?  Can we not check RIT or can we not look at the RegionPlan to see if its in process being assigned (we could add another field to RegionPlan with where it is in the assignment process?)&lt;/p&gt;

&lt;p&gt;I&apos;ll rereview your last patch in morning w/ the above in mind.  Thanks for bringing me along.&lt;/p&gt;</comment>
                            <comment id="13289984" author="ram_krish" created="Wed, 6 Jun 2012 06:40:08 +0000"  >&lt;p&gt;Thanks Stack.&lt;br/&gt;
Just to give more details so that you can review with these points also in mind.&lt;br/&gt;
When SSH starts processing&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.services.getAssignmentManager().
          processServerShutdown(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.serverName);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.regionPlans) {
+      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.deadServerRegionsFromRegionPlan.put(sn, regionsOnDeadServer);
       &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Iterator &amp;lt;Map.Entry&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, RegionPlan&amp;gt;&amp;gt; i =
           &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.regionPlans.entrySet().iterator(); i.hasNext();) {
         Map.Entry&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, RegionPlan&amp;gt; e = i.next();
@@ -3210,9 +3265,11 @@
         &lt;span class=&quot;code-comment&quot;&gt;// The name will be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the region is planned &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; a random assign.
&lt;/span&gt;         &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (otherSn != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; otherSn.equals(sn)) {
           &lt;span class=&quot;code-comment&quot;&gt;// Use iterator&apos;s remove &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; we&apos;ll get CME
&lt;/span&gt;+          regionsFromRegionPlansForServer.add(e.getValue().getRegionInfo());
           i.remove();
         }
       }
+      regionsOnDeadServer.setRegionsFromRegionPlansForServer(regionsFromRegionPlansForServer);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If the SSH first sees that the region plan was part of the destination that had gone down, as per the patch we add the region plan into the new datastructure.  &lt;/p&gt;

&lt;p&gt;This time the getREgionPlan will be blocked as it is synchronzied.  &lt;br/&gt;
Now after this step when getRegionPlan proceeds we again synchronize on regionplans&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.regionPlans) {
.....
.....
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (serverToExclude != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+        RegionsOnDeadServer regionsOnDeadServer = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.deadServerRegionsFromRegionPlan
+            .get(serverToExclude);
+        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (regionsOnDeadServer != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
+            &amp;amp;&amp;amp; regionsOnDeadServer.getRegionsFromRegionPlansForServer().
+            contains(state.getRegion())) {
+          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (newPlan) {
+            &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.regionPlans.remove(randomPlan.getRegionName());
+            LOG
+            .info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Server shutdown handler already in progress &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the region &quot;&lt;/span&gt;
+                + randomPlan.getRegionName());
+            randomPlan = RegionPlan.REGION_PLAN_ALREADY_INUSE;
+          } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
+            &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.regionPlans.remove(existingPlan.getRegionName());
+            LOG
+            .info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Server shutdown handler already in progress &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the region &quot;&lt;/span&gt;
+                + existingPlan.getRegionName());
+            existingPlan = RegionPlan.REGION_PLAN_ALREADY_INUSE;
+          }
+        }
+      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now if the getRegionPlan will see that already SSH populated the datastructure and so he will say do not use this plan. And hence the assign does not happen.&lt;br/&gt;
Next if suppose getRegionPlan happens first, any way he will populate a new region plan and add it into the region plan and for sure it will not be the server that has gone down becuase it will not be in onlineServerlist.&lt;br/&gt;
Now after this if SSH processServerShutdown starts, when he starts to iterate the region Plan he will not find the destination server as the dead server and hence SSH need  not bother about it.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;(we could add another field to RegionPlan with where it is in the assignment process?)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In our first patch we have used some boolean flag to say if to use the plan or not. Later changed it to special states.&lt;/p&gt;




</comment>
                            <comment id="13289988" author="zjushch" created="Wed, 6 Jun 2012 07:01:02 +0000"  >&lt;p&gt;@ram&lt;br/&gt;
Thanks to explain the detail about double assignment.&lt;/p&gt;

&lt;p&gt;Is there any availability that only one thread doing assign/unassign work?&lt;br/&gt;
I mean we only allow one thread to handle RIT and other threads only add region to RIT&lt;/p&gt;
</comment>
                            <comment id="13290017" author="ram_krish" created="Wed, 6 Jun 2012 08:31:40 +0000"  >&lt;p&gt;@Chunhui&lt;br/&gt;
It would be good to have such a thing where only one thread acts on RIT.  But current code is not so.  Hope i got your question? Correct me if wrong.&lt;/p&gt;</comment>
                            <comment id="13290804" author="ram_krish" created="Thu, 7 Jun 2012 05:29:02 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
Can you take a look at this if you have some time?&lt;/p&gt;</comment>
                            <comment id="13290805" author="stack" created="Thu, 7 Jun 2012 05:33:34 +0000"  >&lt;p&gt;Yes.  Been trying to get to it all day but looks like it&apos;ll be tomorrow now.  Sorry for delay Ram.&lt;/p&gt;</comment>
                            <comment id="13290807" author="ram_krish" created="Thu, 7 Jun 2012 05:37:23 +0000"  >&lt;p&gt;No problem Stack.  I know its late there already.&lt;/p&gt;</comment>
                            <comment id="13291416" author="stack" created="Thu, 7 Jun 2012 23:32:07 +0000"  >&lt;p&gt;I think I understand this patch now.&lt;/p&gt;

&lt;p&gt;In AM, we introduce a new Map, a Map of dead servers to their current set of region plans and regions-in-transition.&lt;/p&gt;

&lt;p&gt;This Map is populated in AM when SSH calls AM to say process a server that just died (processServerShutdown).&lt;/p&gt;

&lt;p&gt;If we try to assign a region in another thread at this time, a check by AM into this new Map will cause us to return a &apos;DON&apos;T DO ANYTHING&apos; flag because its being done elsewhere (in SSH eventually &amp;#8211; and we return a flag rather than null because null triggers a different kind of special handling).&lt;/p&gt;

&lt;p&gt;If SSH is running, it is what is meant to prevail assigning regions rather than any balance or user assignment that may have been made concurrently.&lt;/p&gt;

&lt;p&gt;When it finishes, SSH clears the dead server from the AM Map.&lt;/p&gt;

&lt;p&gt;Does this sound right?&lt;/p&gt;

&lt;p&gt;I have some feedback on details of this patch but I would first like to get high-level comments out of the way.&lt;/p&gt;

&lt;p&gt;1. Is this patch even handling the root cause of this JIRA: i.e. dealing w/ OPENING znodes that were made against the dead server?  In AM#processServerShutdown, we iterate the list of regions we get back from AM#this.servers and from this set we will remove RIT.  But won&apos;t this original set of regions be missing regions that are OPENING or even OPENED but not yet handled because its only after the OPENED region has updated its znode and the znode has been removed by the OPEN handler do we add a region to AM#this.servers?  Or is the OPENING region handled elsewhere?&lt;/p&gt;

&lt;p&gt;2. This patch distributes state and updating of the state across AM and SSH.  It makes it tough to follow what is going on (least, it makes it tough for lesser mortals like myself to figure it).  The new Map is populated as a side-effect of the call to AM#processServerShutdown.  The dead server is cleared explicitly from the AM Map on the tail of SSH on its way out (Reading SSH only, you&apos;d be clueless why this was being done).  During the processing of SSH, we are updating a data structure that is held by this Map over in AM.  Is there anything we can do to better encapsulate this new state management?  What is we changed the method in AM from processServerShutdown to startProcessingServerShutdown and closed it off with a finishProcessingServerShutdown?  Do we have to keep around a list of regionplans?  Can&apos;t we just keep list of dead servers and any attempt at getting a region plan related to the dead server or server being processed as dead is put off because SSH will get to it?&lt;/p&gt;

&lt;p&gt;Here are some minor items while they are on my mind:&lt;/p&gt;

&lt;p&gt;1. On REGION_PLAN_ALREADY_INUSE, why not return null and if we get a null back from getRegionPlan in assign, check  serverManager.createDestinationServersList(serverToExclude) is empty; if it is, update timeoutmonitor.  This&apos;d be cleaner than adding this override of RegionState data structure to do more than just carry a plan?&lt;br/&gt;
2. On the tail of SSH, we do this.services.getAssignmentManager().removeDeadServerRegions(this.serverName);  Just before that we clear regionsFromRegionPlansForServer and regionsInTransition.  The clearings are unnecessary?&lt;/p&gt;

&lt;p&gt;Good stuff Ram and Rajeshbabu.  I think this patch can work after a little cleanup.  I&apos;ll have some more feedback this evening.  Thought I&apos;d send this in meantime so you have something to chew on when you get up this morning.&lt;/p&gt;</comment>
                            <comment id="13291426" author="stack" created="Thu, 7 Jun 2012 23:43:47 +0000"  >&lt;p&gt;My other high level comment is:&lt;/p&gt;

&lt;p&gt;3. This patch will not fix a concurrent balance that goes to move a region and a concurrent user-orchestrated move?&lt;/p&gt;</comment>
                            <comment id="13291488" author="enis" created="Fri, 8 Jun 2012 01:29:20 +0000"  >&lt;p&gt;This issue, and the other related issues Ram has recently fixed makes me very nervous about all the state combinations distributed between zk / meta / rs-memory and master-memory. After this is done, do you think we can come up with a simpler design? I do not have any particular idea, so just spitballing here.  &lt;/p&gt;</comment>
                            <comment id="13291559" author="stack" created="Fri, 8 Jun 2012 06:01:46 +0000"  >&lt;p&gt;Suggestion.&lt;/p&gt;</comment>
                            <comment id="13291562" author="ram_krish" created="Fri, 8 Jun 2012 06:07:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;a Map of dead servers to their current set of region plans and regions-in-transition.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We are only maintaining regions and the RITS. not the regionplans&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Does this sound right?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes.  Exactly.  All this decision made on the current regionPlan.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Is this patch even handling the root cause of this JIRA: i.e. dealing w/ OPENING znodes that were made against the dead server?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes.  &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;In AM#processServerShutdown, we iterate the list of regions we get back from AM#this.servers and from this set we will remove RIT. But won&apos;t this original set of regions be missing regions that are OPENING or even OPENED but not yet handled because its only after the OPENED region has updated its znode and the znode has been removed by the OPEN handler do we add a region to AM#this.servers? Or is the OPENING region handled elsewhere?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;To answer this question, for the first part.  If region R1 was initially in RS A and now it is getting moved to RS B.  If the RS A is going down then the existing SSH flow for RS A will get the regions from AM#this.servers and remove the same from this.regions.  Because already something is in RIT it will not assign it and so assignment happens smoothly to RS B.&lt;/p&gt;

&lt;p&gt;Now take a case where the RS B goes down.  In the existing code no where we assigned those regions and left to the TM to assign.  Now that is where this patch comes into place and tries to assign it based on the regionplan.  When SSH sees that the dead server is in destination of the regionplan it will add to the new data structure and based on that it will start the assginment.  Surely this region will not be in AM#this.servers as RS B is not the owner of this.&lt;/p&gt;

&lt;p&gt;To answer the 2nd question about OPENED regions.  Again this should not be a problem.  There are 2 cases in this&lt;br/&gt;
1&amp;gt; OpenedRegionHandler is completed. -&amp;gt; Here this means that this.servers is already updated.  And the region plan is also cleared.  Now when SSH starts it will see the region in AM.this.servers and also there is nothing in RIT.  So SSH will scan the meta find this region and go and assign it to a new RS. (Patch is not needed here)&lt;br/&gt;
2&amp;gt; OpenedRegionHandler is not yet completed. -&amp;gt; Here there may be case OpenedRegionHandler has not yet done his work.  So the regionPlan is still available but the this.servers and this.regions are not yet updated.  Now as per patch we know that &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rit != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !rit.isClosing() &amp;amp;&amp;amp; !rit.isPendingClose() &amp;amp;&amp;amp; !rit.isSplitting()
+                &amp;amp;&amp;amp; !regionsFromRegionPlansForServer.contains(rit.getRegion())) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The new datastructure contatins that region and hence we don not skip the assignment and go ahead with assignment. This region got added here because we have it in Regionplan with the destination as the dead server.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;we can do to better encapsulate this new state management? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes we will try to do that.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Can&apos;t we just keep list of dead servers and any attempt at getting a region plan related to the dead server or server being processed as dead is put off because SSH will get to it?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Already we are doing this.  But we cannot guarentee at what point the RS had gone down, is it after forming the regionPlan or before forming the regionplan.  IF it is before forming the regionplan&lt;br/&gt;
we are already excluding the dead servers.  &lt;/p&gt;

&lt;p&gt;Pls correct me if am wrong and if you have any doubts&lt;/p&gt;</comment>
                            <comment id="13291565" author="ram_krish" created="Fri, 8 Jun 2012 06:13:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;This patch will not fix a concurrent balance that goes to move a region and a concurrent user-orchestrated move?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Currently does not handle this.  But if we are sure that the region assignments goes smoothly after this patch we can surely have a mechanism to initmate the user that some plan is already in progress and wait for that to complete before we initiate the user triggered move or assign.  &lt;br/&gt;
@Enis&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;very nervous about all the state combinations distributed between zk / meta / rs-memory and master-memory.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Can you tell me any problems that you foresee.  Happy to address that too here.  Infact we have not introduced any new states.  Just using the maps and zookeeper states available.  The REgionplan state we introduced here is something internal to know the difference which we will address in our next patch as per Stack&apos;s suggestion.&lt;br/&gt;
Your comments and feedback are always welcome.&lt;/p&gt;</comment>
                            <comment id="13291567" author="ram_krish" created="Fri, 8 Jun 2012 06:14:11 +0000"  >&lt;p&gt;@Stack &lt;br/&gt;
Our comments crossed.. Once i refresehed saw you have attached a patch.  Let me take a look at it.  Thanks &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13291568" author="stack" created="Fri, 8 Jun 2012 06:16:49 +0000"  >&lt;p&gt;@Enis Yeah, its a big problem.&lt;/p&gt;

&lt;p&gt;Ram and Rajeshbabu, I just uploaded a spin on your patch.  Its a bit more basic.&lt;/p&gt;

&lt;p&gt;It gets rid of REGION_PLAN_ALREADY_INUSE and returns null out of getRegionPlan instead.&lt;/p&gt;

&lt;p&gt;If a null region, we update the no servers flag if no regions else presume region assignment being done else where (in SSH or in timeoutmonitor).&lt;/p&gt;

&lt;p&gt;In AM, I changed the processServerShutdown to instead be processServerShutdownStart with a corresponding processServerShutdownFinish.  When the first is called, we add the servername being processed to a list.  When the latter is called, we remove it.  Getting a regionplan, we now exclude servers being processed from the set of assignable servers.  This simplifies getRegionPlan.&lt;/p&gt;

&lt;p&gt;processServerShutdownStart returns the Set of outstandingRegionPlans &amp;#8211; plans that were related to the server that is being processed by shutdown handler &amp;#8211; and the intersection of regions-in-transition with the set of regions the server was carrying.  The patch then does as you were doing minus the removing of region from the Set that was kept back in AM.&lt;/p&gt;

&lt;p&gt;I&apos;ve not verified this passes tests yet.  It still needs more work. Just putting it up as more feedback on your posted patch.&lt;/p&gt;

&lt;p&gt;Regards Enis comment, I tried poking around some and its hard to follow state transitions across memory, zk, and then across retries and force repossessions.  Any ideas for how we&apos;d simplify all of this?   I started to pull out a RegionsInTransition class.  It would be a &apos;database&apos; backed by zk.  There would be no more in memory state, just whats out in zk.  You&apos;d go to this new RIT db to get current state and to ask it make transistions.  Just a thought.  I haven&apos;t dug in enough.&lt;/p&gt;</comment>
                            <comment id="13291575" author="stack" created="Fri, 8 Jun 2012 06:39:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;We are only maintaining regions and the RITS. not the regionplans&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes.  I should have said that.&lt;/p&gt;

&lt;p&gt;Thanks for the explanation of OPENING.  I now understand.  Do you think we could get your explanation into comments in the code in any way to help those that come after?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;... But we cannot guarentee at what point the RS had gone down, is it after forming the regionPlan or before forming the regionplan. IF it is before forming the regionplan&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;we are already excluding the dead servers.&lt;/p&gt;

&lt;p&gt;Hmm... ok.  That means that in the patch I uploaded, the new Set of servers being processed by shutdown handler is redundant with the deadServers Set that the ServerManager is keeping up.  I can simplify my patch further (if you think the way getRegionPlan works in my patch is ok).&lt;/p&gt;
</comment>
                            <comment id="13291580" author="stack" created="Fri, 8 Jun 2012 06:55:30 +0000"  >&lt;p&gt;v2 is more basic still.&lt;/p&gt;

&lt;p&gt;It undoes the AM#processServerShutdownStart and AM#processServerShutdownFinish.  This is not needed since servers that are in the process of being handled by ServerShutdownHandler will be excluded from the list of assignable servers returned out of the ServerManager.&lt;/p&gt;

&lt;p&gt;See what you think Ram.  If you think this more basic patch viable, I&apos;ll go ahead and make it work w/ your unit tests.&lt;/p&gt;

&lt;p&gt;The remaining items are the isNullPlan and the return of a Pair out of AM#processServerShutdown.  This stuff could be improved.  I&apos;d also wind in your comments from this issue since they help with what is going on.&lt;/p&gt;</comment>
                            <comment id="13291755" author="ram_krish" created="Fri, 8 Jun 2012 12:56:38 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
Just to reiterate this JIRA is a backport of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5396&quot; title=&quot;Handle the regions in regionPlans while processing ServerShutdownHandler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5396&quot;&gt;&lt;del&gt;HBASE-5396&lt;/del&gt;&lt;/a&gt;.  The current patch that you gave is similar to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5396&quot; title=&quot;Handle the regions in regionPlans while processing ServerShutdownHandler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5396&quot;&gt;&lt;del&gt;HBASE-5396&lt;/del&gt;&lt;/a&gt; and it will solve the problem of assigning a region that has started opening in a RS but the RS went down.&lt;br/&gt;
But if we don&apos;t have any common sharing between AM and SSH&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
RegionPlan regionPlan = getRegionPlan(regionState, sn, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the first assign call we form a regionplan.  It so happened that we got the plan and issued sendRegionOpen().  By the time the RS had gone down.  Now as per your patch(&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5396&quot; title=&quot;Handle the regions in regionPlans while processing ServerShutdownHandler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5396&quot;&gt;&lt;del&gt;HBASE-5396&lt;/del&gt;&lt;/a&gt;) the SSH will trigger and he will start a new assignment.  At the same time &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        LOG.warn(&lt;span class=&quot;code-quote&quot;&gt;&quot;Failed assignment of &quot;&lt;/span&gt; +
          state.getRegion().getRegionNameAsString() + &lt;span class=&quot;code-quote&quot;&gt;&quot; to &quot;&lt;/span&gt; +
          plan.getDestination() + &lt;span class=&quot;code-quote&quot;&gt;&quot;, trying to assign elsewhere instead; &quot;&lt;/span&gt; +
          &lt;span class=&quot;code-quote&quot;&gt;&quot;retry=&quot;&lt;/span&gt; + i, t);
        &lt;span class=&quot;code-comment&quot;&gt;// Clean out plan we failed execute and one that doesn&apos;t look like it&apos;ll
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// succeed anyways; we need a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; plan!
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// Transition back to OFFLINE
&lt;/span&gt;        state.update(RegionState.State.OFFLINE);
        &lt;span class=&quot;code-comment&quot;&gt;// Force a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; plan and reassign.  Will &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; no servers.
&lt;/span&gt;                RegionPlan newPlan = getRegionPlan(state, plan.getDestination(), &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isNullPlan(newPlan, state, plan.getDestination())) {
                  &lt;span class=&quot;code-comment&quot;&gt;// Whether no servers to assign too or region assignment is being handled elsewhere,
&lt;/span&gt;                  &lt;span class=&quot;code-comment&quot;&gt;// skip out of &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; retry loop.
&lt;/span&gt;                  &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Excluding this server we will call one more assign because of retry logic.  And that is where there is a chance of getting the master abort problem.  In the current patch that u gave getRegionPlan will create the above problem.&lt;/p&gt;

&lt;p&gt;This is where we need to have a common structure and also a new state of region plan to say whether to make another assign call or not thro AM.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!hijack &amp;amp;&amp;amp; !state.isClosed() &amp;amp;&amp;amp; !state.isOffline()) {
      &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; msg = &lt;span class=&quot;code-quote&quot;&gt;&quot;Unexpected state : &quot;&lt;/span&gt; + state + &lt;span class=&quot;code-quote&quot;&gt;&quot; .. Cannot transit it to OFFLINE.&quot;&lt;/span&gt;;
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.master.abort(msg, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(msg));
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; -1;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now the problem of master abort was reported in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5816&quot; title=&quot;Balancer and ServerShutdownHandler concurrently reassign the same region&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5816&quot;&gt;&lt;del&gt;HBASE-5816&lt;/del&gt;&lt;/a&gt;.(Because &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5396&quot; title=&quot;Handle the regions in regionPlans while processing ServerShutdownHandler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5396&quot;&gt;&lt;del&gt;HBASE-5396&lt;/del&gt;&lt;/a&gt; is committed to 0.90).  Now what we are doing is to solve this as a whole so that we don&apos;t end up in any double assignment or any problem with master abort.&lt;/p&gt;

&lt;p&gt;One more problem in patch is &apos;outstandingRegionPlans&apos; should be cleared here &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
} &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (addressFromAM != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !addressFromAM.equals(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.serverName)) {
+              LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;Skip assigning region &quot;&lt;/span&gt; + e.getKey().getRegionNameAsString()
+                  + &lt;span class=&quot;code-quote&quot;&gt;&quot; because it has been opened in &quot;&lt;/span&gt; + addressFromAM.getServerName());
+            }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;STack i feel that sharing something common is necessary to avoid this problem.  &lt;br/&gt;
Just to add, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6147&quot; title=&quot;SSH and AM.joinCluster leads to region assignment inconsistency in many cases.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6147&quot;&gt;&lt;del&gt;HBASE-6147&lt;/del&gt;&lt;/a&gt; i have given one patch, which when combined with the patch here will solve many other issues also.  &lt;/p&gt;

&lt;p&gt;Do let me know if you still feel there are some more doubts on this?&lt;/p&gt;
</comment>
                            <comment id="13291835" author="stack" created="Fri, 8 Jun 2012 15:55:28 +0000"  >&lt;blockquote&gt;&lt;p&gt;Excluding this server we will call one more assign because of retry logic.  And that is where there is a chance of getting the master abort problem.  In the current patch that u gave getRegionPlan will create the above problem.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Because we will create a new plan and though the new plan will not land on the server that is being processed by shutdown handler, the assign trying to update the znode will bump into the illegalstateexception because SSH may be at the same time trying to assign?  If so, that is true.  That is a problem.&lt;/p&gt;

&lt;p&gt;But Ram, the problem w/ your patch is that getRegionPlan is being called with forceNewPlan=true and you are NOT forcing a new plan, right?, which is going to confuse no end?  We should break up getRegionPlan into region plan getting and then another method on whether to proceed w/ assign?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;One more problem in patch is &apos;outstandingRegionPlans&apos; should be cleared here...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes.  That is to prevent it being reassigned by SSH.  Good one.&lt;/p&gt;

&lt;p&gt;I appreciate your bringing me along.  Will look more when get to work.... will look at hbase-6147 too.&lt;/p&gt;</comment>
                            <comment id="13292114" author="stack" created="Sat, 9 Jun 2012 00:12:52 +0000"  >&lt;p&gt;Just some notes after looking more at this stuff.&lt;/p&gt;

&lt;p&gt;We have two different assigns; one that assigns a single region and then another that assigns multiple regions in the one go.  The first takes out a lock on the RegionState before it runs and is careful about using existing assignment plans if they exist.  It&apos;ll prevent concurrent assigns but it does not prevent hbase-5816 where to assigns of same region around the same time will cause master exit because the second assign will find zk in &quot;illegal&quot; state.&lt;/p&gt;

&lt;p&gt;The second assign does not respect existing plans nor does it synchronize on RegionState.  The second assign type is used bulk assigning. SSH now does bulk assign, since hbase-5914, a recent change, once its figured regions that need assigning.  The patch in here is careful about making sure the bulk assign is favored.  It tries to undo any ongoing assigns that are happening via the first method.&lt;/p&gt;</comment>
                            <comment id="13292154" author="stack" created="Sat, 9 Jun 2012 01:33:21 +0000"  >&lt;p&gt;What about this Ram?  Its about four lines.  I haven&apos;t tried it yet.  Would need clean up.  Just seeing what you think.  It just treats OPENING regions that are on the dead server as it does CLOSING, CLOSED, etc., so it gets assigned as part of the SSH bulk assign.&lt;/p&gt;

&lt;p&gt;Should not cause a &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5816&quot; title=&quot;Balancer and ServerShutdownHandler concurrently reassign the same region&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5816&quot;&gt;&lt;del&gt;HBASE-5816&lt;/del&gt;&lt;/a&gt; because that was our including in the bulk assign regions that could have been in OFFLINE/PENDING_OPEN RegionState; i.e. regions being handled by the &apos;normal&apos;, single assign.&lt;/p&gt;</comment>
                            <comment id="13292461" author="rajesh23" created="Sun, 10 Jun 2012 01:55:02 +0000"  >&lt;p&gt;@Stack&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It just treats OPENING regions that are on the dead server as it does CLOSING, CLOSED, etc., so it gets assigned as part of the SSH bulk assign.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We need to consider regions in OPEN state also(along with OPENING) for assignment.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Should not cause a &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5816&quot; title=&quot;Balancer and ServerShutdownHandler concurrently reassign the same region&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5816&quot;&gt;&lt;del&gt;HBASE-5816&lt;/del&gt;&lt;/a&gt; because that was our including in the bulk assign regions that could have been in OFFLINE/PENDING_OPEN RegionState; i.e. regions being handled by the &apos;normal&apos;, single assign.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;you mean to say skip assignment of the regions in OFFLINE or PENDING_OPEN while processing server shutdown, because they will be assigned as part of retry?&lt;br/&gt;
If this is the case there is one problem &lt;br/&gt;
-&amp;gt; Lets suppose Region server went down after spawning OpenRegionHandler and before transitioning to OPENING then its SSH responsibility to assign regions in OFFLINE/PENDING_OPEN.&lt;/p&gt;

&lt;p&gt;Alternative 2 itself may not solve &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6060&quot; title=&quot;Regions&amp;#39;s in OPENING state from failed regionservers takes a long time to recover&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6060&quot;&gt;&lt;del&gt;HBASE-6060&lt;/del&gt;&lt;/a&gt; because&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
          hris = MetaReader.getServerUserRegions(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.server.getCatalogTracker(),
            &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.serverName);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;during opening region if destination server details not updated in META then the region wont present in hris. In that case we are not calling assign for the regions which are opening( region info not present in hris) on the region server(waiting for timeout monitor to trigger assignment).&lt;/p&gt;

&lt;p&gt;Pls correct me if i am wrong.&lt;/p&gt;</comment>
                            <comment id="13292470" author="stack" created="Sun, 10 Jun 2012 04:42:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;We need to consider regions in OPEN state also(along with OPENING) for assignment.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes.  Makes sense.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;you mean to say skip assignment of the regions in OFFLINE or PENDING_OPEN while processing server shutdown, because they will be assigned as part of retry?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Lets suppose Region server went down after spawning OpenRegionHandler and before transitioning to OPENING then its SSH responsibility to assign regions in OFFLINE/PENDING_OPEN.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is a good one.  I&apos;d argue this is a hole in our transition states.  Region is OFFLINE but the regionserver is supposed to have control.  I&apos;d suggest that a regionserver not return from open region until its moved the znode from PENDING_OPEN to OPENING (need to look more into what would be involved making this happen &amp;#8211; and what to do on bulk assign though it seems we drop a bunch of the handling already when bulk assigning).  Shouldn&apos;t region belong to master or regionserver without a gray area in-between while PENDING_OPEN is going on?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;during opening region if destination server details not updated in META then the region wont present in hris...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is also a good one.  I found it earlier this afternoon making your tests work w/ the alternate patch (There is another &apos;hole&apos; that I found in the case where there are no regions on the server that died; in this case we&apos;ll skip out early and not find associated OPENING or OPEN regions &amp;#8211; my patch is much larger than four lines now (smile)).&lt;/p&gt;

&lt;p&gt;What do you think of this alternate solution Rajeshbabu?  Assuming I close the above holes, do you think it easier to reason about?  We don&apos;t have to keep up state distributed across AM and SSH (I think it more clear whats going on), we don&apos;t have to use a special RegionPlan to signal the single region assign method to give up on its assign (I&apos;d think we&apos;d want regions assigned by the single-assign call rather than the bulk assign since the single assign does more checking), and we are not built atop the current state of regionplans, which seems a little bit of an indirect foundation given we are trying to keep up RegionState in regionsInTransition.&lt;/p&gt;

&lt;p&gt;Thanks for the thorough review.&lt;/p&gt;</comment>
                            <comment id="13292473" author="ram_krish" created="Sun, 10 Jun 2012 05:49:37 +0000"  >&lt;p&gt;@Rajesh&lt;br/&gt;
Thanks for taking care of the reviews.&lt;br/&gt;
@Stack&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I&apos;d think we&apos;d want regions assigned by the single-assign call rather than the bulk assign since the single assign does more checking)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, I agree. But the gain with bulk assignment is its faster which we wanted in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5914&quot; title=&quot;Bulk assign regions in the process of ServerShutdownHandler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5914&quot;&gt;&lt;del&gt;HBASE-5914&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Shouldn&apos;t region belong to master or regionserver without a gray area in-between while PENDING_OPEN is going on?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Stack, in this case first the region belongs to master.  Only after the RS changes to OPENING the znode of the regions belongs to the RS. This still happens as per the current code.  Infact this behaviour of using the owner of the node is the logic behind how we do processRIT on a master restart.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (data.getOrigin() != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp;
            !serverManager.isServerOnline(data.getOrigin())) {
          &lt;span class=&quot;code-comment&quot;&gt;// to handle cases where offline node is created but sendRegionOpen
&lt;/span&gt;          &lt;span class=&quot;code-comment&quot;&gt;// RPC is not yet sent
&lt;/span&gt;          addToRITandCallClose(regionInfo, RegionState.State.OFFLINE, data);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But what if the RS goes down before sending the RPC call to RS and that is where the retry logic comes, which i feel is really needed.&lt;/p&gt;</comment>
                            <comment id="13292474" author="rajesh23" created="Sun, 10 Jun 2012 06:03:50 +0000"  >&lt;p&gt;@Ram &lt;br/&gt;
Attached patch. Just a suggestion to skip the regions in OFFLINE/PENDING_OPEN and RS went down before request sent.&lt;/p&gt;

&lt;p&gt;But need to handle this case:&lt;/p&gt;

&lt;p&gt;Lets suppose Region server went down after spawning OpenRegionHandler and before transitioning to OPENING then its SSH responsibility to assign regions in OFFLINE/PENDING_OPEN.&lt;/p&gt;

&lt;p&gt;In this patch skipping regions to be assigned in case rs went down before request&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ((region.getState() == RegionState.State.OFFLINE)
          &amp;amp;&amp;amp; (region.getState() == RegionState.State.PENDING_OPEN)) {
        regionPlans.remove(region.getRegion());
      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13292475" author="stack" created="Sun, 10 Jun 2012 06:19:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;But the gain with bulk assignment is its faster which we wanted in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5914&quot; title=&quot;Bulk assign regions in the process of ServerShutdownHandler&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5914&quot;&gt;&lt;del&gt;HBASE-5914&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes.  We are keeping bulk assigns, its just that the suggested patch favors the single-assign letting it do retries whereas the original patch wants to do all via bulk assign canceling any ongoing single-assigns.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Only after the RS changes to OPENING the znode of the regions belongs to the RS.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, this is the case for znode states.  The problem is the PENDING_OPEN state, an in-memory state kept in RegionState.  It exists across the sending of the rpc open to the regionserver until the OPENING callback comes into the master saying the regionserver has moved the znode from OFFLINE to OPENING.  This is the the messy state.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Infact this behaviour of using the owner of the node is the logic behind how we do processRIT on a master restart.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The context is different I think; there is no ongoing retry of single-assign here.  Its a cleaner case.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But what if the RS goes down before sending the RPC call to RS and that is where the retry logic comes, which i feel is really needed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Do you mean the master sending the RPC?&lt;/p&gt;</comment>
                            <comment id="13292476" author="stack" created="Sun, 10 Jun 2012 06:25:50 +0000"  >&lt;p&gt;@rajeshbabu So, you are allowing the single-assign to continue its retries?  Regions that are OFFINE or PENDING_OPEN are not bulk assigned? (Yes, there is still the case of RS going down before it moves region to OPENING)&lt;/p&gt;</comment>
                            <comment id="13292477" author="rajesh23" created="Sun, 10 Jun 2012 06:32:14 +0000"  >&lt;p&gt;@Stack&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;you are allowing the single-assign to continue its retries?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes.&lt;/p&gt;
</comment>
                            <comment id="13292479" author="hadoopqa" created="Sun, 10 Jun 2012 06:49:15 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12531590/6060_suggestion_toassign_rs_wentdown_beforerequest.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12531590/6060_suggestion_toassign_rs_wentdown_beforerequest.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    -1 tests included.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    +1 hadoop2.0.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 5 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    +1 core tests.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2134//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2134//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2134//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2134//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2134//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2134//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2134//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2134//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13292530" author="zhihyu@ebaysf.com" created="Sun, 10 Jun 2012 15:05:33 +0000"  >&lt;p&gt;For 6060_suggestion_toassign_rs_wentdown_beforerequest.patch:&lt;/p&gt;

&lt;p&gt;Can you give the following variable better name ?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    Set&amp;lt;HRegionInfo&amp;gt; regionPlans = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ConcurrentSkipListSet&amp;lt;HRegionInfo&amp;gt;();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The set doesn&apos;t hold region plans. The following javadoc needs to be adjusted accordingly.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Pair that has all regionplans that pertain to &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; dead server and a list that has
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ((region.getState() == RegionState.State.OFFLINE)
+          &amp;amp;&amp;amp; (region.getState() == RegionState.State.PENDING_OPEN)) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A region cannot be in both states at the same time. &apos;||&apos; should be used instead of &apos;&amp;amp;&amp;amp;&apos;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        deadRegions = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TreeSet&amp;lt;HRegionInfo&amp;gt;(assignedRegions);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Since the fulfillment of deadRegions above is in a different code block from the following:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
       &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (deadRegions.remove(region.getRegion())) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Running testSSHWhenSourceRSandDestRSInRegionPlanGoneDown (from v3) would lead to NPE w.r.t. deadRegions&lt;/p&gt;

&lt;p&gt;After fixing the above, testSSHWhenSourceRSandDestRSInRegionPlanGoneDown still fails.&lt;/p&gt;</comment>
                            <comment id="13292549" author="ram_krish" created="Sun, 10 Jun 2012 17:45:11 +0000"  >&lt;p&gt;@Ted&lt;br/&gt;
Myself or Rajesh, either of us will investigate the test failures tomorrw once we reach office.&lt;/p&gt;</comment>
                            <comment id="13292589" author="stack" created="Sun, 10 Jun 2012 21:19:12 +0000"  >&lt;p&gt;Rajesh says:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Lets suppose Region server went down after spawning OpenRegionHandler and before transitioning to OPENING then its SSH responsibility to assign regions in OFFLINE/PENDING_OPEN.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I say:&lt;br/&gt;
ba. Shouldn&apos;t region belong to master or regionserver without a gray area in-between while PENDING_OPEN is going on?&lt;/p&gt;

&lt;p&gt;Ram says:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Stack, in this case first the region belongs to master.  Only after the RS changes to OPENING the znode of the regions belongs to the RS.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So, Rajesh identifies a hole, I claim the hole is murky, inspecific, and Ram claims there is no hole really.&lt;/p&gt;

&lt;p&gt;Below I argue that there is a hole and a small change cleans up RegionState states making SSH processing more clean.&lt;/p&gt;

&lt;p&gt;Ram, what you say is true, if you are looking at znode states only.  If you are looking at RegionState, the in-memory reflection of what a regions&apos; state is according to the master, then what PENDING_OPEN covers, a state that does not have a corresponding znode state, is unclear.  &lt;/p&gt;

&lt;p&gt;I want to rely on whats in RegionState figuring what SSH should process (Rajesh&apos;s latest patch seems to want to walk this path too).&lt;/p&gt;

&lt;p&gt;PENDING_OPEN spans the master sending the rpc open currently.  It is set before we do the rpc invocation so if the regionserver goes down, if a region&apos;s state is PENDING_OPEN, should it be handled by SSH or will it get retried by the single-assign method?  I can&apos;t tell for sure.  If the regionserver went down while the rpc was outstanding, the single-assign will retry.  It will actually set the RegionState back to OFFLINE temporarily &amp;#8211; which makes it even harder figuring whats going on if looking from another thread.  PENDING_OPEN as is is worse than useless.&lt;/p&gt;

&lt;p&gt;How about this Ram and Rajesh&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java
@@ -1715,14 +1715,18 @@ &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class AssignmentManager &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; ZooKeeperListener {
       &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
         LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;Assigning region &quot;&lt;/span&gt; + state.getRegion().getRegionNameAsString() +
           &lt;span class=&quot;code-quote&quot;&gt;&quot; to &quot;&lt;/span&gt; + plan.getDestination().toString());
-        &lt;span class=&quot;code-comment&quot;&gt;// Transition RegionState to PENDING_OPEN
&lt;/span&gt;-        state.update(RegionState.State.PENDING_OPEN, &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis(),
-            plan.getDestination());
         &lt;span class=&quot;code-comment&quot;&gt;// Send OPEN RPC. This can fail &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the server on other end is is not up.
&lt;/span&gt;         &lt;span class=&quot;code-comment&quot;&gt;// Pass the version that was obtained &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; setting the node to OFFLINE.
&lt;/span&gt;         RegionOpeningState regionOpenState = serverManager.sendRegionOpen(plan
             .getDestination(), state.getRegion(), versionOfOfflineNode);
-        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (regionOpenState == RegionOpeningState.ALREADY_OPENED) {
+        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (regionOpenState.equals(RegionOpeningState.OPENED)) {
+          &lt;span class=&quot;code-comment&quot;&gt;// Transition RegionState to PENDING_OPEN. It covers the period between the send of the
&lt;/span&gt;+          &lt;span class=&quot;code-comment&quot;&gt;// rpc and our getting the callback setting the region state to OPENING.  This is
&lt;/span&gt;+          &lt;span class=&quot;code-comment&quot;&gt;// in-memory only change.   Out in zk the znode is OFFLINE and we are waiting on
&lt;/span&gt;+          &lt;span class=&quot;code-comment&quot;&gt;// regionserver to assume ownership by moving it to OPENING.
&lt;/span&gt;+          state.update(RegionState.State.PENDING_OPEN, &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis(),
+            plan.getDestination());
+        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (regionOpenState == RegionOpeningState.ALREADY_OPENED) {
           &lt;span class=&quot;code-comment&quot;&gt;// Remove region from in-memory transition and unassigned node from ZK
&lt;/span&gt;           &lt;span class=&quot;code-comment&quot;&gt;// While trying to enable the table the regions of the table were
&lt;/span&gt;           &lt;span class=&quot;code-comment&quot;&gt;// already enabled.&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we set region to be PENDING_OPEN AFTER we send the open rpc.  Now we know that a region that is PENDING_OPEN will not be retried by the single-assign and the state is clear; its that period post open rpc but before we get the znode callback which sets the RegionState to OPENING.&lt;/p&gt;

&lt;p&gt;Over in SSH, I can safely add PENDING_OPEN regions to the set of those to bulk assign if they are against the dead server currently being processed.&lt;/p&gt;

&lt;p&gt;What do you fellas think?&lt;/p&gt;

&lt;p&gt;I need to look at OFFLINE states too to see if they will always get retried by single-assign.  If so, we can leave these out of the SSH recover.&lt;/p&gt;</comment>
                            <comment id="13292646" author="ram_krish" created="Mon, 11 Jun 2012 05:42:28 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
Few comments,&lt;br/&gt;
First of all we need to do some more changes if we want to make the above change in handleRegion&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
          &lt;span class=&quot;code-comment&quot;&gt;// Should see OPENING after we have asked it to OPEN or additional
&lt;/span&gt;          &lt;span class=&quot;code-comment&quot;&gt;// times after already being in state of OPENING
&lt;/span&gt;          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (regionState == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; ||
              (!regionState.isPendingOpen() &amp;amp;&amp;amp; !regionState.isOpening())) {
            LOG.warn(&lt;span class=&quot;code-quote&quot;&gt;&quot;Received OPENING &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; region &quot;&lt;/span&gt; +
                prettyPrintedRegionName +
                &lt;span class=&quot;code-quote&quot;&gt;&quot; from server &quot;&lt;/span&gt; + data.getOrigin() + &lt;span class=&quot;code-quote&quot;&gt;&quot; but region was in &quot;&lt;/span&gt; +
                &lt;span class=&quot;code-quote&quot;&gt;&quot; the state &quot;&lt;/span&gt; + regionState + &lt;span class=&quot;code-quote&quot;&gt;&quot; and not &quot;&lt;/span&gt; +
                &lt;span class=&quot;code-quote&quot;&gt;&quot;in expected PENDING_OPEN or OPENING states&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Second is, you mean like the above change of making pending_open after the RPC call along with the changes in the earlier patches like having the new items lik &apos;ritintersection&apos; and &apos;outstandingRegionPlans&apos;?&lt;br/&gt;
Here there is one concern is, if before we update the state to PENDING_OPEN in master side if the OpenRegionHandler has really transitioned the node to OPENING then the inmemory state will also be changing to OPENING after we correct the code above i have mentioned.  Now in that case the OPENING state will be rewritten to PENDING_OPEN? So we may need to add a check to see if already a change has happened in the REgionState.&lt;/p&gt;


&lt;p&gt;The problem with Rajesh&apos;s patch is (6060_suggestion_toassign_rs_wentdown_beforerequest.patch&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ((region.getState() == RegionState.State.OFFLINE)
+          &amp;amp;&amp;amp; (region.getState() == RegionState.State.PENDING_OPEN)) {
+        regionPlans.remove(region.getRegion());
+      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What if the RS went down befor sending RPC. The SSH collected the regionPlan but before he could remove the collected regionplan in the above code, if the master completed the retry assignment and the OpenRegionHandler has changed to OPENING and the state is now Opening, then we will again try to assign thro SSH.&lt;/p&gt;

&lt;p&gt;The above problem can happen in the change that you mentioned also like moving PENDING_OPEN after RPC.&lt;/p&gt;

&lt;p&gt;So can we take a copy of RIT befor forming the RegionPlan and work based on that?  Will update the change that we are suggesting in some time.&lt;/p&gt;


</comment>
                            <comment id="13292835" author="stack" created="Mon, 11 Jun 2012 15:27:06 +0000"  >&lt;p&gt;What do I have to change in that section of code?  It seems fine as is.  Or are you thinking we need to allow it being in OFFLINE state?&lt;/p&gt;

&lt;p&gt;Yes, agree that before setting PENDING_OPEN, need to ensure it has not moved to OPENING.  That should be easy enough (in fact, its not possible now I think about it since there a lock on RegionState that surrounds the single-assign &amp;#8211; need to make sure handleRegion respects it).&lt;/p&gt;

&lt;p&gt;What do you think of this approach Ram?  The one where we rely on RegionState rather than on RegionPlan?&lt;/p&gt;

&lt;p&gt;I won&apos;t have the issue you see in Rajesh&apos;s patch, right?  I don&apos;t intend to collect regions from outstanding regionplans.  If the RS goes down before sending the RPC, then the single-assign will fail and retry but it won&apos;t be included in the SSH set? &lt;/p&gt;
</comment>
                            <comment id="13292883" author="ram_krish" created="Mon, 11 Jun 2012 17:01:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;I don&apos;t intend to collect regions from outstanding regionplans&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think we need this.(like the one in earlier patches). Or else if the region has been moved to OPENING and the destination RS goes down how do we try to process them.  It will not be in META also right as it is still not opened in the destination RS.  So a logic similar to Rajesh&apos;s patch will be needed but that along with your suggestion needs some minor tweaks.  &lt;br/&gt;
@Rajesh&lt;br/&gt;
Correct me if am wrong.  This is what we discussed today? &lt;br/&gt;
@Stack&lt;br/&gt;
We had a patch but could not upload it from office due to some other tasks. May be we could upload one by tomo morn once we reach office. &lt;br/&gt;
Pls correct me if am wrong. (We discussed lot of scenarios today also, may be i can miss somethings here).&lt;/p&gt;
</comment>
                            <comment id="13292884" author="stack" created="Mon, 11 Jun 2012 17:08:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;Or else if the region has been moved to OPENING and the destination RS goes down how do we try to process them.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The RegionState will have the server that reported the region in OPENING.  We don&apos;t need to get it from RegionPlan (in AM#processServerShutdown, as part of the run through all RITs, we need to look for RegionStates that are against the server that has just died).&lt;/p&gt;

&lt;p&gt;Looking forward to your patch tomorrow.  I&apos;ll upload one too (working on tests today).&lt;/p&gt;</comment>
                            <comment id="13293382" author="ram_krish" created="Tue, 12 Jun 2012 06:23:09 +0000"  >&lt;p&gt;In the lastest patch there is one more problem.  Uploaded to just sync up if this what you are trying Stack.&lt;/p&gt;

&lt;p&gt;Now after calling openregion if the OpenRegionHandler is spawned and just after that the RS goes down.And still the PENDING_OPEN is not yet updated and by the time SSH starts processing. Then as per the updated latest patch we will not be able to call assign.  No testcase runs with this patch needs modifications.&lt;/p&gt;</comment>
                            <comment id="13293390" author="stack" created="Tue, 12 Jun 2012 06:39:17 +0000"  >&lt;blockquote&gt;&lt;p&gt;Now after calling openregion if the OpenRegionHandler is spawned and just after that the RS goes down.And still the PENDING_OPEN is not yet updated and by the time SSH starts processing. Then as per the updated latest patch we will not be able to call assign.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can you explain more Ram?  The rpc open has been sent (successfully), the RS goes down, but we have not set it to PENDING_OPEN &amp;#8211; and at this time the SSH runs?  Is that what you are suggesting?  So, its the window between open rpc return, and the setting of PENDING_OPEN &amp;#8211; in this window, if the SSH runs to completion we&apos;ll have an unassigned region, one that will have to be picked up by the timeout monitor?  Is that what you are suggesting?&lt;/p&gt;

&lt;p&gt;Thanks Ram (Sorry that this stuff is taking so long...)&lt;/p&gt;</comment>
                            <comment id="13293449" author="ram_krish" created="Tue, 12 Jun 2012 08:32:20 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
Absolutely correct.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; May be you have someother idea for that?&lt;/p&gt;</comment>
                            <comment id="13293551" author="hadoopqa" created="Tue, 12 Jun 2012 11:49:14 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12531775/HBASE-6060-trunk_4.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12531775/HBASE-6060-trunk_4.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    -1 tests included.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    +1 hadoop2.0.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 5 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     -1 core tests.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.TestSplitTransactionOnCluster&lt;br/&gt;
                  org.apache.hadoop.hbase.util.TestFSUtils&lt;br/&gt;
                  org.apache.hadoop.hbase.catalog.TestMetaReaderEditor&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2145//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2145//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2145//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2145//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2145//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2145//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2145//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2145//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13293706" author="stack" created="Tue, 12 Jun 2012 15:42:30 +0000"  >&lt;p&gt;@Ram So, the rpc returns successfully.  The very next step is to set RegionState to PENDING_OPEN.  Somehow, in between these two points, a timeout of the RS znode will expire, a verification of ROOT and META will take place, a full scan of META (a new RPC) will happen, and all before we get to setting the PENDING_OPEN state?  Seems unlikely.  If it ever happens, I suppose this would be one for the timeout monitor to clean up?  Or do you have a scenario where this case is more likely?&lt;/p&gt;</comment>
                            <comment id="13293767" author="ram_krish" created="Tue, 12 Jun 2012 16:58:21 +0000"  >&lt;p&gt;This is the open point that we see in moving the PENDING_OPEN after rpc.  As far as we brainstormed we did not find any other gaps in this.  But our initial patch that shares state across AM and SSH solves all problems. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. &lt;br/&gt;
You have any new patch Stack? May be we need to work on testcases if the latest patch is fine with you..Thanks a lot for spending your time on this defect with your feedbacks and nice new ideas. &lt;/p&gt;</comment>
                            <comment id="13293849" author="rajesh23" created="Tue, 12 Jun 2012 19:04:03 +0000"  >&lt;p&gt;Patch with some test cases and corrections. TestAssignmentManager passes.&lt;/p&gt;</comment>
                            <comment id="13293883" author="hadoopqa" created="Tue, 12 Jun 2012 19:59:12 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12531867/HBASE-6060_trunk_5.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12531867/HBASE-6060_trunk_5.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 hadoop2.0.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 5 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     -1 core tests.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.TestAtomicOperation&lt;br/&gt;
                  org.apache.hadoop.hbase.master.TestDistributedLogSplitting&lt;br/&gt;
                  org.apache.hadoop.hbase.master.TestSplitLogManager&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2154//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2154//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2154//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2154//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2154//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2154//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2154//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2154//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13293973" author="stack" created="Tue, 12 Jun 2012 22:24:57 +0000"  >&lt;p&gt;@Ram Thinking on it, the way to plug the hole you and Rajesh have identfied is by having the RS update the znode to OPENING form OFFINE before returning from the open rpc call.&lt;/p&gt;

&lt;p&gt;The way I see it, we&apos;ve found problems in our RegionState.  As it is now, we cannot ask RegionState to reliably find the state of a region.  Its so bad, you fellas went and made a solution figuring where a region is at using another system altogether, the RegionPlan state which strikes me as a little odd; because the system we should be relying on is broke &amp;#8211; RegionState &amp;#8211; you fellas look at the ghost traces of region moves, the impression left in RegionPlan.  Is this a fair characterization?&lt;/p&gt;

&lt;p&gt;Don&apos;t you think we should fix RegionState while we&apos;re in here?&lt;/p&gt;

&lt;p&gt;I&apos;ve been working on a patch but was going to do it piecemeal, fix hbase-6199 first?&lt;/p&gt;</comment>
                            <comment id="13294154" author="ram_krish" created="Wed, 13 Jun 2012 05:07:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;Is this a fair characterization?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;RegionState is something which the master uses to see the current progress of the assignment. But regionplan is one thing which will tels me where the assignment is actually going on.&lt;br/&gt;
If master wants to start a new assignment its again the regionplan that gets changed.  So we thought of using that as an indicator. But i agree two systems AM and SSH take decision based on that..&lt;/p&gt;

&lt;p&gt;One more thing on RegionState in RIT is that it is reactive.  Based on some changes in RS it gets updated. But RegionPlan is the one decided by the master.&lt;br/&gt;
Every time Assignment starts RegionState in RIT goes thro a set of steps and may be that is why we are not sure as in what step the RIT is and who made that change.&lt;/p&gt;

&lt;p&gt;We also tried thought of one approach, like can we remove the retry logic itself in assign?  Always use SSH to trigger assignment as in TRUNK the expiry of server is very much spontaneous now.  May be some gaps are there which we have not yet found.&lt;/p&gt;

&lt;p&gt;I should accept one thing is I did not try to change the RegionState in RIT and was seeing to use the RegionPlan only.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;RS update the znode to OPENING form OFFINE before returning from the open rpc call.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Then this step has to be moved from OpenRegionHandler?&lt;/p&gt;
</comment>
                            <comment id="13295311" author="stack" created="Thu, 14 Jun 2012 20:55:22 +0000"  >&lt;blockquote&gt;&lt;p&gt;But i agree two systems AM and SSH take decision based on that..&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry, I don&apos;t follow?  Are you saying we should rely on RegionState?   Or on RegionPlan?  (Plan is what we &apos;want&apos; to happen; RegionState should be where regions actually &apos;are&apos;. I&apos;d think that we&apos;d want to deal w/ current state making a decision rather than planned state?)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;One more thing on RegionState in RIT is that it is reactive....Every time Assignment starts RegionState in RIT goes thro a set of steps and may be that is why we are not sure as in what step the RIT is and who made that change.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In SSH, we need the answer to one basic question only; i.e. who owns the region, master or regionserver.  Unless you have a better idea, I think setting of znode to OPENING before returning from the open rpc necessary to plug the gray area you fellas identified.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We also tried thought of one approach, like can we remove the retry logic itself in assign?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It seems like the retry has been there a long time (Originally we just recursed calling assign on exception but in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3263&quot; title=&quot;Stack overflow in AssignmentManager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3263&quot;&gt;&lt;del&gt;HBASE-3263&lt;/del&gt;&lt;/a&gt; we changed it to a bounded loop).  It seems like the retry is ok since we&apos;ll try a different server if we fail on first plan?  We also like this single-assign method because it more rigorous about state management than bulk-assign?  Its only a problem if a concurrent assign when we are unsure who is responsible for the region.&lt;/p&gt;
</comment>
                            <comment id="13393695" author="zjushch" created="Mon, 18 Jun 2012 07:00:41 +0000"  >&lt;p&gt;The lastest patch -&amp;gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6060&quot; title=&quot;Regions&amp;#39;s in OPENING state from failed regionservers takes a long time to recover&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6060&quot;&gt;&lt;del&gt;HBASE-6060&lt;/del&gt;&lt;/a&gt;_trunk_5.patch is easy to understand, Nice!&lt;br/&gt;
But I have one doubt, &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-comment&quot;&gt;// We have sent the open rpc to the region server.  We hold &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; state until regionserver
&lt;/span&gt;+      &lt;span class=&quot;code-comment&quot;&gt;// assumes control of the region by setting znode to OPENING from OFFLINE (This is an
&lt;/span&gt;+      &lt;span class=&quot;code-comment&quot;&gt;// in-memory state only with no corresponding znode state
&lt;/span&gt;+      PENDING_OPEN,
+
+      &lt;span class=&quot;code-comment&quot;&gt;// Set by zk callback when regionserver moves znode from OFFLINE to OPENING.  Regionserver now
&lt;/span&gt;+      &lt;span class=&quot;code-comment&quot;&gt;// has control of the region.
&lt;/span&gt;+      OPENING,
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since we change the sense of PENDING_OPEN and OPENING,&lt;br/&gt;
should we do corresponding change? &lt;/p&gt;

&lt;p&gt;e.g. &lt;br/&gt;
doing state.update(RegionState.State.PENDING_OPEN, System.currentTimeMillis(),&lt;br/&gt;
            plan.getDestination());&lt;br/&gt;
after &lt;br/&gt;
doing serverManager.sendRegionOpen&lt;/p&gt;


&lt;p&gt;Pardon me if wrong, thanks.&lt;/p&gt;</comment>
                            <comment id="13395828" author="rajesh23" created="Mon, 18 Jun 2012 11:37:49 +0000"  >&lt;p&gt;@chunhui&lt;br/&gt;
Sorry I forgot to add them in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6060&quot; title=&quot;Regions&amp;#39;s in OPENING state from failed regionservers takes a long time to recover&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6060&quot;&gt;&lt;del&gt;HBASE-6060&lt;/del&gt;&lt;/a&gt;_trunk_5.patch but available in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6060&quot; title=&quot;Regions&amp;#39;s in OPENING state from failed regionservers takes a long time to recover&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6060&quot;&gt;&lt;del&gt;HBASE-6060&lt;/del&gt;&lt;/a&gt;_trunk_4.patch.&lt;br/&gt;
Still there is one open problem with this solution. You can find here.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6060?focusedCommentId=13293382&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13293382&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-6060?focusedCommentId=13293382&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13293382&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="13401542" author="ram_krish" created="Tue, 26 Jun 2012 17:25:31 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
So for the latest version of patch, can we move the step where the node is changed from OFFLINE to OPENING and let the remaining part be in the OpenRegionHandler?&lt;/p&gt;</comment>
                            <comment id="13407482" author="stack" created="Thu, 5 Jul 2012 21:06:07 +0000"  >&lt;p&gt;@Ram Yes.&lt;/p&gt;

&lt;p&gt;I put something for discussion up in RB: &lt;a href=&quot;https://reviews.apache.org/r/5781/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/5781/&lt;/a&gt;  If you and/or Rajesh get a chance, see what you think.&lt;/p&gt;

&lt;p&gt;There are a million holes still as I see it in particular around bulk assign, etc. (See the TODO list).&lt;/p&gt;</comment>
                            <comment id="13407545" author="zhihyu@ebaysf.com" created="Thu, 5 Jul 2012 22:16:46 +0000"  >&lt;p&gt;I only see Review button on the above URL - maybe it is my review board account that malfunctions.&lt;/p&gt;</comment>
                            <comment id="13407620" author="lhofhansl" created="Fri, 6 Jul 2012 00:23:46 +0000"  >&lt;p&gt;It seems we are a bit away from a fix. Can this go into 0.94.2?&lt;/p&gt;</comment>
                            <comment id="13407748" author="stack" created="Fri, 6 Jul 2012 07:06:19 +0000"  >&lt;p&gt;@Lars Yes.&lt;/p&gt;

&lt;p&gt;@Ted My fault.  See &lt;a href=&quot;https://reviews.apache.org/r/5796/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/5796/&lt;/a&gt; instead.&lt;/p&gt;</comment>
                            <comment id="13408209" author="rajesh23" created="Fri, 6 Jul 2012 18:42:05 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
 In HRegionServer.openRegion() if zk transition from OFFLINE to OPENING fails we need to remove region from regionsInTransitionInRS of that RS as in OpenRegionHandler. Otherwise we end up with RegionAlreadyInTransitionException if we call assign to the same region(In bulk assign we will call assign in case of FAILED_OPENING)&lt;/p&gt;
</comment>
                            <comment id="13408242" author="stack" created="Fri, 6 Jul 2012 19:31:24 +0000"  >&lt;p&gt;@Ram Good one.  Will refresh patch up in RB.  Otherwise, do you think this approach will work.  Whats your thoughts on bulk assign problem?  Or on the variety of ways in which we can force OFFLINE a region?&lt;/p&gt;</comment>
                            <comment id="13408322" author="stack" created="Fri, 6 Jul 2012 21:00:05 +0000"  >&lt;p&gt;I added update up on RB to address Ted and Ram comments.&lt;/p&gt;</comment>
                            <comment id="13408388" author="zhihyu@ebaysf.com" created="Fri, 6 Jul 2012 22:01:38 +0000"  >&lt;p&gt;There seems to be compilation error for Stack&apos;s patch v2:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[ERROR] /Users/zhihyu/trunk-hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/MockRegionServer.java:[101,0] org.apache.hadoop.hbase.master.MockRegionServer is not &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; and does not override &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; method containsKeyInRegionsInTransition(org.apache.hadoop.hbase.HRegionInfo) in org.apache.hadoop.hbase.regionserver.RegionServerServices
[ERROR] 
[ERROR] /Users/zhihyu/trunk-hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/MockRegionServer.java:[326,2] method does not override or implement a method from a supertype
[ERROR] 
[ERROR] /Users/zhihyu/trunk-hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/MockRegionServerServices.java:[45,7] org.apache.hadoop.hbase.util.MockRegionServerServices is not &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; and does not override &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; method containsKeyInRegionsInTransition(org.apache.hadoop.hbase.HRegionInfo) in org.apache.hadoop.hbase.regionserver.RegionServerServices
[ERROR] 
[ERROR] /Users/zhihyu/trunk-hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/MockRegionServerServices.java:[92,2] method does not override or implement a method from a supertype
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13408404" author="stack" created="Fri, 6 Jul 2012 22:29:21 +0000"  >&lt;p&gt;I can fix that.&lt;/p&gt;

&lt;p&gt;But I just thought of something; the way I&apos;m doing the test of a region in transition over on the RS is wrong, the stuff I added to address the Ram feedback. I can actually bump aside an ongoing RIT.  Will fix in my morning.  Please do not review v2 yet Ram.&lt;/p&gt;</comment>
                            <comment id="13408601" author="stack" created="Sat, 7 Jul 2012 08:22:54 +0000"  >&lt;p&gt;v3 should be good.  I posted it up on RB.  Addresses Ted and Ram&apos;s issues.&lt;/p&gt;</comment>
                            <comment id="13408861" author="ram_krish" created="Sun, 8 Jul 2012 06:54:14 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
I am still reviewing this.  Tomorrow i will give all my comments once i reach office.  Just need to see few things carefully. Thanks Stack.&lt;/p&gt;</comment>
                            <comment id="13409359" author="ram_krish" created="Mon, 9 Jul 2012 11:44:25 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
Some comments on RB.&lt;/p&gt;</comment>
                            <comment id="13409546" author="stack" created="Mon, 9 Jul 2012 15:04:38 +0000"  >&lt;p&gt;Responded Ram.&lt;/p&gt;</comment>
                            <comment id="13409639" author="ram_krish" created="Mon, 9 Jul 2012 17:04:30 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
Ok with approach stack. Few cases may still be hiding out there &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Nice of you Stack.&lt;/p&gt;</comment>
                            <comment id="13409640" author="ram_krish" created="Mon, 9 Jul 2012 17:05:36 +0000"  >&lt;p&gt;Do we need to test the perf because now the transition from OFFLINE to OPENING is done in the main thread?&lt;/p&gt;</comment>
                            <comment id="13409749" author="stack" created="Mon, 9 Jul 2012 19:16:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do we need to test the perf because now the transition from OFFLINE to OPENING is done in the main thread?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, its going to take longer for the rpc to complete though we are doing the same amount of &apos;work&apos; opening a region.  I&apos;m not worried about the single region open case.  I&apos;d think we will add a few ticks.  But bulk opens will be interesting.  I&apos;ve not made the change there, yet.  These try to be async so maybe it&apos;ll be ok there... will see.&lt;/p&gt;

&lt;p&gt;What you think?&lt;/p&gt;
</comment>
                            <comment id="13409760" author="stack" created="Mon, 9 Jul 2012 19:24:28 +0000"  >&lt;p&gt;This won&apos;t be done for 0.94.1 is my guess. Moving it out.&lt;/p&gt;</comment>
                            <comment id="13424020" author="jxiang" created="Fri, 27 Jul 2012 17:58:24 +0000"  >&lt;p&gt;@Rajesh, could you update your patch since &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6272&quot; title=&quot;In-memory region state is inconsistent&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6272&quot;&gt;&lt;del&gt;HBASE-6272&lt;/del&gt;&lt;/a&gt; is in, and put the diff on RB?&lt;/p&gt;</comment>
                            <comment id="13424142" author="stack" created="Fri, 27 Jul 2012 20:57:32 +0000"  >&lt;p&gt;@Jimmy I did the last patch.  I think you should review it for &apos;merit&apos;.  If you think it worth it, I&apos;ll update to fit hbase-6272.&lt;/p&gt;</comment>
                            <comment id="13424209" author="jxiang" created="Fri, 27 Jul 2012 23:06:07 +0000"  >&lt;p&gt;@Stack, no problem, doesn&apos;t have to.&lt;/p&gt;</comment>
                            <comment id="13424368" author="jxiang" created="Sat, 28 Jul 2012 15:49:38 +0000"  >&lt;p&gt;Patch 5 is good to me. In addition to those assigned regions on the dead server, it also re-asssigns those regions in transition with destination server = the dead server.&lt;/p&gt;</comment>
                            <comment id="13424684" author="ram_krish" created="Mon, 30 Jul 2012 04:19:00 +0000"  >&lt;p&gt;@Jimmy/@Stack&lt;br/&gt;
If you can give me a couple of days i can give a patch.. Actually after discussing with Rajesh, the patch 5 has some things to be taken from Stack&apos;s patch up in RB.  And Stack&apos;s patch is not the final one as per the review comments over in RB.&lt;/p&gt;</comment>
                            <comment id="13432906" author="ram_krish" created="Mon, 13 Aug 2012 04:05:16 +0000"  >&lt;p&gt;I am working on an updated patch.. Should be able to submit it by today or tomorrow.&lt;/p&gt;</comment>
                            <comment id="13434380" author="ram_krish" created="Tue, 14 Aug 2012 18:48:49 +0000"  >&lt;p&gt;Latest patch.  This is a combined one that is available in RB and other patches submitted.  &lt;/p&gt;</comment>
                            <comment id="13434459" author="hadoopqa" created="Tue, 14 Aug 2012 20:13:45 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12540918/HBASE-6060_latest.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12540918/HBASE-6060_latest.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 15 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 hadoop2.0.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    -1 javac.  The applied patch generated 5 javac compiler warnings (more than the trunk&apos;s current 4 warnings).&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 8 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     -1 core tests.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.handler.TestOpenRegionHandler&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.handler.TestCloseRegionHandler&lt;br/&gt;
                  org.apache.hadoop.hbase.master.TestDistributedLogSplitting&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestSplitLogWorker&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2568//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2568//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2568//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2568//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2568//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2568//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2568//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2568//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2568//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2568//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2568//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2568//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2568//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2568//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13434821" author="ram_krish" created="Wed, 15 Aug 2012 05:47:49 +0000"  >&lt;p&gt;Some testcases are failing.  Let me check and update the patch.&lt;/p&gt;</comment>
                            <comment id="13435248" author="ram_krish" created="Wed, 15 Aug 2012 16:14:06 +0000"  >&lt;p&gt;Updated patch.. The failed testcases passes &lt;/p&gt;</comment>
                            <comment id="13435258" author="ram_krish" created="Wed, 15 Aug 2012 16:25:50 +0000"  >&lt;p&gt;New review board request created. &lt;a href=&quot;https://reviews.apache.org/r/6636/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/6636/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13435353" author="hadoopqa" created="Wed, 15 Aug 2012 18:03:34 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12541080/HBASE-6060_latest.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12541080/HBASE-6060_latest.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 21 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 hadoop2.0.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    -1 javac.  The applied patch generated 5 javac compiler warnings (more than the trunk&apos;s current 4 warnings).&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 8 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     -1 core tests.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.master.TestRollingRestart&lt;br/&gt;
                  org.apache.hadoop.hbase.master.TestDistributedLogSplitting&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.handler.TestOpenRegionHandler&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2589//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2589//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2589//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2589//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2589//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2589//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2589//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2589//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2589//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2589//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2589//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2589//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2589//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2589//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13436101" author="ram_krish" created="Thu, 16 Aug 2012 17:00:36 +0000"  >&lt;p&gt;Sorry for not updating the testcase TestOpenRegionhandler in two testcases.  I had done it only one testcase.  Sorry about that.&lt;/p&gt;</comment>
                            <comment id="13436159" author="hadoopqa" created="Thu, 16 Aug 2012 17:57:46 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12541239/HBASE-6060_latest.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12541239/HBASE-6060_latest.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 21 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 hadoop2.0.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    -1 javac.  The applied patch generated 5 javac compiler warnings (more than the trunk&apos;s current 4 warnings).&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 8 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     -1 core tests.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.master.TestDistributedLogSplitting&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestServerCustomProtocol&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2598//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2598//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2598//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2598//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2598//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2598//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2598//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2598//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2598//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2598//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2598//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2598//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2598//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2598//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13443255" author="ram_krish" created="Tue, 28 Aug 2012 16:36:59 +0000"  >&lt;p&gt;Pls review the latest patch in the RB and provide your comments.&lt;/p&gt;</comment>
                            <comment id="13445496" author="lhofhansl" created="Fri, 31 Aug 2012 00:18:09 +0000"  >&lt;p&gt;The last patch on RB is 7 weeks old. Is that still the one to review?&lt;/p&gt;</comment>
                            <comment id="13445497" author="lhofhansl" created="Fri, 31 Aug 2012 00:18:50 +0000"  >&lt;p&gt;Ah. NM, there is a new review request now.&lt;/p&gt;</comment>
                            <comment id="13445499" author="lhofhansl" created="Fri, 31 Aug 2012 00:20:26 +0000"  >&lt;p&gt;Still too much discussion than I am comfortable with for the upcoming 0.94.2.&lt;/p&gt;</comment>
                            <comment id="13445620" author="ram_krish" created="Fri, 31 Aug 2012 03:57:14 +0000"  >&lt;p&gt;@LArs&lt;br/&gt;
The latest one on the RB is &lt;a href=&quot;https://reviews.apache.org/r/6636/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/6636/&lt;/a&gt;.  It was created 2 weeks back and already 2 diffs have been added to it.&lt;br/&gt;
Anyway this is for trunk.  If Stack and Jimmy are ok with this I can surely give you a patch for 0.94.  &lt;/p&gt;</comment>
                            <comment id="13449825" author="ram_krish" created="Thu, 6 Sep 2012 17:18:12 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
Recently Jon&apos;s mail thread on rewriting AM altogether implies that the scenario mentioned here also will be covered ?&lt;/p&gt;</comment>
                            <comment id="13449830" author="stack" created="Thu, 6 Sep 2012 17:24:37 +0000"  >&lt;p&gt;@Ram He&apos;s not at &apos;total rewrite&apos; yet (smile).  What you think of that thread Ram?&lt;/p&gt;</comment>
                            <comment id="13449903" author="ram_krish" created="Thu, 6 Sep 2012 18:28:26 +0000"  >&lt;p&gt;@Stack, Jon&apos;s comments makes sense.  Lot of thought process is needed though.&lt;br/&gt;
A better FSM may be needed.  Surely can try it out.  &lt;/p&gt;</comment>
                            <comment id="13484706" author="lhofhansl" created="Fri, 26 Oct 2012 04:53:08 +0000"  >&lt;p&gt;Looking at the patches and trying to read through the comments here, I have to admit... I have NO idea what is going on.&lt;br/&gt;
I think in 0.96 Jimmy is ripping apart AM, which would hopefully cover this.&lt;/p&gt;

&lt;p&gt;Should we attempt this at all on 0.94, or just let it go? Please let me know.&lt;/p&gt;</comment>
                            <comment id="13485092" author="jxiang" created="Fri, 26 Oct 2012 18:19:36 +0000"  >&lt;p&gt;I think we can let it go for 0.94 since timeout monitor can handle it and there is no better way to fix it, because the region state in 0.94 is not so reliable.&lt;/p&gt;

&lt;p&gt;For 0.96, this one is not covered yet.  It still relies on timeout monitor. Let me cook up a patch for 0.96 now.&lt;/p&gt;</comment>
                            <comment id="13485173" author="jxiang" created="Fri, 26 Oct 2012 20:24:37 +0000"  >&lt;p&gt;I uploaded a simple patch for 0.96: trunk-6060.patch. Could you please review?&lt;/p&gt;</comment>
                            <comment id="13485188" author="stack" created="Fri, 26 Oct 2012 20:48:07 +0000"  >&lt;p&gt;How does this patch address this issue Jimmy?&lt;/p&gt;

&lt;p&gt;Way back I was trying to harden who owns the region in an earlier incarnation of this patch.  We had gray areas where region could be PENDING_OPEN and it was unclear if region was owned by the master or owned by the regionserver on failure, though repair was different depending on who had region control.  Fixing region states is for another JIRA?&lt;/p&gt;</comment>
                            <comment id="13485189" author="yuzhihong@gmail.com" created="Fri, 26 Oct 2012 20:50:51 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.stamp.set(&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis());
+    setTimestamp(&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;EnvironmentEdgeManager should be used.&lt;/p&gt;

&lt;p&gt;It would be nice to include test(s) from Rajesh&apos;s patch(s).&lt;/p&gt;</comment>
                            <comment id="13485206" author="hadoopqa" created="Fri, 26 Oct 2012 21:24:21 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12551016/trunk-6060.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12551016/trunk-6060.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 85 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 3 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3158//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3158//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3158//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3158//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3158//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3158//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3158//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3158//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3158//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3158//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3158//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3158//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3158//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3158//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13485209" author="jxiang" created="Fri, 26 Oct 2012 21:26:45 +0000"  >&lt;p&gt;@Stack, here is my understanding on the problem. Master calls a rs to open a region. Now, in master memory, the region is in pending_open state with this rs&apos; server name. Now the rs dies.  When SSH starts, it goes to meta to find all the regions on this rs, minus those regions already in transition, then assign the remaining regions. If the pending_open region (it could be opening too depending on timing) was on this region server before, SSH will take care of it.  Otherwise, if it was on a different region server, SSH will not pick it up.  In this patch, I just times out the region transition so that tm can change the state and re-assign it, instead of waiting for a long time (now, 20 minutes by default).&lt;/p&gt;

&lt;p&gt;I&apos;d like to make sure the region states in master memory is reliable.  Otherwise, it is of not much use. So I think master always has region control.&lt;br/&gt;
In 0.96, I think region states is very reliable now. Of course, there could be bugs I am not aware of yet.&lt;/p&gt;

&lt;p&gt;@Ted, good point.  I will include the test. For EnvironmentEdgeManager, I will leave it to another jira.&lt;/p&gt;</comment>
                            <comment id="13485515" author="jxiang" created="Sat, 27 Oct 2012 21:58:05 +0000"  >&lt;p&gt;Added a test, and uploaded v2: trunk-6060_v2.patch.&lt;/p&gt;</comment>
                            <comment id="13485523" author="hadoopqa" created="Sat, 27 Oct 2012 22:55:17 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12551096/trunk-6060_v2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12551096/trunk-6060_v2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 85 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 3 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestFromClientSideWithCoprocessor&lt;br/&gt;
                  org.apache.hadoop.hbase.io.hfile.TestForceCacheImportantBlocks&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3165//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3165//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3165//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3165//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3165//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3165//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3165//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3165//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3165//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3165//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3165//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3165//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3165//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3165//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13485607" author="rajesh23" created="Sun, 28 Oct 2012 11:30:35 +0000"  >&lt;p&gt;@Jimmy,&lt;br/&gt;
Patch looks good and it properly reassigns the regions transitioning(which are in PENDING_OPEN,OPENING state) to dead server by TM and also avoids double assignments.&lt;br/&gt;
But the regions which are in OPEN state may not be assigned. &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
          RegionState rit = services.getAssignmentManager()
            .getRegionStates().getRegionTransitionState(e.getKey());
          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (processDeadRegion(e.getKey(), e.getValue(),
              &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.services.getAssignmentManager(),
              &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.server.getCatalogTracker())) {
            ServerName addressFromAM = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.services.getAssignmentManager()
              .getRegionStates().getRegionServerOfRegion(e.getKey());
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rit != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !rit.isClosing() &amp;amp;&amp;amp; !rit.isPendingClose() &amp;amp;&amp;amp; !rit.isSplitting()) {
              &lt;span class=&quot;code-comment&quot;&gt;// Skip regions that were in transition unless CLOSING or
&lt;/span&gt;              &lt;span class=&quot;code-comment&quot;&gt;// PENDING_CLOSE
&lt;/span&gt;              LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Skip assigning region &quot;&lt;/span&gt; + rit.toString());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the region state is OPEN and server in RIT same as the dead server we can add it to toAssignRegions to assign.&lt;/p&gt;

&lt;p&gt;-&amp;gt; Before forcing region state to offline we are checking current state and if its other than CLOSED or OFFLINE(forceNewPlan is true in case of assign call from TM) we calling unassing on the region.&lt;br/&gt;
if the server in the RIT is dead we are deleting znode if its in M_ZK_REGION_CLOSING or RS_ZK_REGION_CLOSED but in case of PENDING_OPEN,OPENING,OPEN case znode state wont be both. May be we can avoid two network calls to zookeeper here by having region state check.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!serverManager.isServerOnline(server)) {
      &lt;span class=&quot;code-comment&quot;&gt;// delete the node. &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; no node exists need not bother.
&lt;/span&gt;      deleteClosingOrClosedNode(region);
      regionOffline(region);
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Please correct me if wrong. Great work Jimmy.&lt;/p&gt;</comment>
                            <comment id="13485830" author="ram_krish" created="Mon, 29 Oct 2012 04:33:01 +0000"  >&lt;p&gt;Good review Rajesh.&lt;br/&gt;
Yes the OPEN thing seems to be handled.  Also we have the code guarding&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (addressFromAM != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
                &amp;amp;&amp;amp; !addressFromAM.equals(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.serverName)) {
              LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;Skip assigning region &quot;&lt;/span&gt;
                    + e.getKey().getRegionNameAsString()
                    + &lt;span class=&quot;code-quote&quot;&gt;&quot; because it has been opened in &quot;&lt;/span&gt;
                    + addressFromAM.getServerName());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;if the server name got changed just after OPEN got processed.  This should be fine.&lt;/p&gt;</comment>
                            <comment id="13486333" author="jxiang" created="Mon, 29 Oct 2012 20:50:47 +0000"  >&lt;p&gt;Good review.  Thanks.  I posted a new patch on RB: &lt;a href=&quot;https://reviews.apache.org/r/7767/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/7767/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the new patch, I re-organized the SSH code a little bit, and handled regions in OPEN state too.&lt;br/&gt;
It also handles regions in OPENING/PENDING_OPEN/OFFLINE state, but was open on this region&lt;br/&gt;
server before that.  This could happen when the cluster starts up.&lt;/p&gt;</comment>
                            <comment id="13488488" author="lhofhansl" created="Thu, 1 Nov 2012 05:45:11 +0000"  >&lt;p&gt;What&apos;s the feeling w.r.t. 0.92 and 0.94?&lt;/p&gt;</comment>
                            <comment id="13488817" author="jxiang" created="Thu, 1 Nov 2012 16:47:17 +0000"  >&lt;p&gt;@Rajesh, are you ok with the latest patch on RB for trunk?&lt;/p&gt;

&lt;p&gt;@Lars, I am fine with letting it go with 0.92 and 0.94. My patch won&apos;t work well in 0.92/0.94 since it depends on other patches which are too big to backport.&lt;/p&gt;</comment>
                            <comment id="13488828" author="lhofhansl" created="Thu, 1 Nov 2012 16:54:11 +0000"  >&lt;p&gt;Removed from 0.92 and 0.94.&lt;/p&gt;</comment>
                            <comment id="13488858" author="rajesh23" created="Thu, 1 Nov 2012 17:30:52 +0000"  >&lt;p&gt;@Jimmy&lt;br/&gt;
Its good. +1&lt;/p&gt;</comment>
                            <comment id="13488930" author="hadoopqa" created="Thu, 1 Nov 2012 18:56:28 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12551735/trunk-6060_v3.3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12551735/trunk-6060_v3.3.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 85 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 3 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestFromClientSideWithCoprocessor&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3210//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3210//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3210//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3210//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3210//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3210//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3210//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3210//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3210//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3210//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3210//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3210//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3210//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3210//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13489020" author="jxiang" created="Thu, 1 Nov 2012 20:53:10 +0000"  >&lt;p&gt;Integrated into trunk. Thanks all.&lt;/p&gt;</comment>
                            <comment id="13489080" author="hudson" created="Thu, 1 Nov 2012 22:24:41 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #3506 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/3506/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/3506/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6060&quot; title=&quot;Regions&amp;#39;s in OPENING state from failed regionservers takes a long time to recover&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6060&quot;&gt;&lt;del&gt;HBASE-6060&lt;/del&gt;&lt;/a&gt; Regions&apos;s in OPENING state from failed regionservers takes a long time to recover (Revision 1404759)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
jxiang : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionState.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/ServerShutdownHandler.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestAssignmentManager.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13489243" author="hudson" created="Fri, 2 Nov 2012 04:18:54 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #247 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/247/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/247/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6060&quot; title=&quot;Regions&amp;#39;s in OPENING state from failed regionservers takes a long time to recover&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6060&quot;&gt;&lt;del&gt;HBASE-6060&lt;/del&gt;&lt;/a&gt; Regions&apos;s in OPENING state from failed regionservers takes a long time to recover (Revision 1404759)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
jxiang : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionState.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/ServerShutdownHandler.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestAssignmentManager.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13507760" author="sershe" created="Fri, 30 Nov 2012 23:42:16 +0000"  >&lt;p&gt;I can easily&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; repro this on 0.94.&lt;/p&gt;</comment>
                            <comment id="13507766" author="sershe" created="Fri, 30 Nov 2012 23:46:54 +0000"  >&lt;p&gt;oh, didn&apos;t read all the comments, nevermind&lt;/p&gt;</comment>
                            <comment id="13577006" author="hudson" created="Tue, 12 Feb 2013 20:57:31 +0000"  >&lt;p&gt;Integrated in HBase-0.94 #839 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94/839/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94/839/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7521&quot; title=&quot;fix HBASE-6060 (regions stuck in opening state) in 0.94&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7521&quot;&gt;&lt;del&gt;HBASE-7521&lt;/del&gt;&lt;/a&gt; fix &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6060&quot; title=&quot;Regions&amp;#39;s in OPENING state from failed regionservers takes a long time to recover&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6060&quot;&gt;&lt;del&gt;HBASE-6060&lt;/del&gt;&lt;/a&gt; (regions stuck in opening state) in 0.94 (Sergey and Rajeshbabu) (Revision 1445350)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
tedyu : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/master/handler/ServerShutdownHandler.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerServices.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/handler/CloseRegionHandler.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/handler/OpenRegionHandler.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/master/Mocking.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/master/TestAssignmentManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/master/TestZKBasedOpenCloseRegion.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/regionserver/handler/TestCloseRegionHandler.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/regionserver/handler/TestOpenRegionHandler.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/util/MockRegionServerServices.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13577168" author="hudson" created="Tue, 12 Feb 2013 23:32:27 +0000"  >&lt;p&gt;Integrated in HBase-0.94-security #110 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94-security/110/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94-security/110/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7521&quot; title=&quot;fix HBASE-6060 (regions stuck in opening state) in 0.94&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7521&quot;&gt;&lt;del&gt;HBASE-7521&lt;/del&gt;&lt;/a&gt; fix &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6060&quot; title=&quot;Regions&amp;#39;s in OPENING state from failed regionservers takes a long time to recover&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6060&quot;&gt;&lt;del&gt;HBASE-6060&lt;/del&gt;&lt;/a&gt; (regions stuck in opening state) in 0.94 (Sergey and Rajeshbabu) (Revision 1445350)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
tedyu : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/master/handler/ServerShutdownHandler.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerServices.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/handler/CloseRegionHandler.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/handler/OpenRegionHandler.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/master/Mocking.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/master/TestAssignmentManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/master/TestZKBasedOpenCloseRegion.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/regionserver/handler/TestCloseRegionHandler.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/regionserver/handler/TestOpenRegionHandler.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/util/MockRegionServerServices.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13593176" author="hudson" created="Tue, 5 Mar 2013 07:52:12 +0000"  >&lt;p&gt;Integrated in HBase-0.94-security-on-Hadoop-23 #12 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94-security-on-Hadoop-23/12/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94-security-on-Hadoop-23/12/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7521&quot; title=&quot;fix HBASE-6060 (regions stuck in opening state) in 0.94&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7521&quot;&gt;&lt;del&gt;HBASE-7521&lt;/del&gt;&lt;/a&gt; fix &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6060&quot; title=&quot;Regions&amp;#39;s in OPENING state from failed regionservers takes a long time to recover&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6060&quot;&gt;&lt;del&gt;HBASE-6060&lt;/del&gt;&lt;/a&gt; (regions stuck in opening state) in 0.94 (Sergey and Rajeshbabu) (Revision 1445350)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
tedyu : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/master/handler/ServerShutdownHandler.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerServices.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/handler/CloseRegionHandler.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/handler/OpenRegionHandler.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/master/Mocking.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/master/TestAssignmentManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/master/TestZKBasedOpenCloseRegion.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/regionserver/handler/TestCloseRegionHandler.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/regionserver/handler/TestOpenRegionHandler.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/util/MockRegionServerServices.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13775233" author="stack" created="Mon, 23 Sep 2013 18:31:02 +0000"  >&lt;p&gt;Marking closed.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="12630048">HBASE-7724</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12551344">HBASE-5816</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12560204">HBASE-6198</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12560214">HBASE-6199</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12542502">HBASE-5396</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12595937">HBASE-6272</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12629607">HBASE-7701</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12551766">HBASE-5843</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12530599" name="6060-94-v3.patch" size="27970" author="zhihyu@ebaysf.com" created="Fri, 1 Jun 2012 20:50:26 +0000"/>
                            <attachment id="12530633" name="6060-94-v4.patch" size="28163" author="zhihyu@ebaysf.com" created="Sat, 2 Jun 2012 03:21:53 +0000"/>
                            <attachment id="12530687" name="6060-94-v4_1.patch" size="28634" author="ram_krish" created="Sun, 3 Jun 2012 11:09:32 +0000"/>
                            <attachment id="12530681" name="6060-94-v4_1.patch" size="28516" author="ram_krish" created="Sun, 3 Jun 2012 06:20:41 +0000"/>
                            <attachment id="12530688" name="6060-trunk.patch" size="25988" author="ram_krish" created="Sun, 3 Jun 2012 11:09:54 +0000"/>
                            <attachment id="12530682" name="6060-trunk.patch" size="25870" author="ram_krish" created="Sun, 3 Jun 2012 06:21:23 +0000"/>
                            <attachment id="12530693" name="6060-trunk_2.patch" size="27159" author="rajesh23" created="Sun, 3 Jun 2012 14:59:41 +0000"/>
                            <attachment id="12530962" name="6060-trunk_3.patch" size="26263" author="rajesh23" created="Tue, 5 Jun 2012 14:41:19 +0000"/>
                            <attachment id="12531489" name="6060_alternative_suggestion.txt" size="2452" author="stack" created="Sat, 9 Jun 2012 01:33:21 +0000"/>
                            <attachment id="12531373" name="6060_suggestion2_based_off_v3.patch" size="30283" author="stack" created="Fri, 8 Jun 2012 06:55:30 +0000"/>
                            <attachment id="12531371" name="6060_suggestion_based_off_v3.patch" size="30805" author="stack" created="Fri, 8 Jun 2012 06:01:46 +0000"/>
                            <attachment id="12531590" name="6060_suggestion_toassign_rs_wentdown_beforerequest.patch" size="10124" author="rajesh23" created="Sun, 10 Jun 2012 05:59:46 +0000"/>
                            <attachment id="12530816" name="HBASE-6060-92.patch" size="14581" author="rajesh23" created="Mon, 4 Jun 2012 17:02:16 +0000"/>
                            <attachment id="12530561" name="HBASE-6060-94.patch" size="26386" author="rajesh23" created="Fri, 1 Jun 2012 15:47:07 +0000"/>
                            <attachment id="12531775" name="HBASE-6060-trunk_4.patch" size="14607" author="rajesh23" created="Tue, 12 Jun 2012 06:17:21 +0000"/>
                            <attachment id="12541239" name="HBASE-6060_latest.patch" size="60578" author="ram_krish" created="Thu, 16 Aug 2012 16:59:45 +0000"/>
                            <attachment id="12541080" name="HBASE-6060_latest.patch" size="60186" author="ram_krish" created="Wed, 15 Aug 2012 16:14:06 +0000"/>
                            <attachment id="12540918" name="HBASE-6060_latest.patch" size="58290" author="ram_krish" created="Tue, 14 Aug 2012 18:48:49 +0000"/>
                            <attachment id="12531867" name="HBASE-6060_trunk_5.patch" size="22057" author="rajesh23" created="Tue, 12 Jun 2012 19:01:32 +0000"/>
                            <attachment id="12551016" name="trunk-6060.patch" size="4358" author="jxiang" created="Fri, 26 Oct 2012 20:22:18 +0000"/>
                            <attachment id="12551096" name="trunk-6060_v2.patch" size="7579" author="jxiang" created="Sat, 27 Oct 2012 21:57:00 +0000"/>
                            <attachment id="12551735" name="trunk-6060_v3.3.patch" size="22556" author="jxiang" created="Thu, 1 Nov 2012 17:56:04 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 21 May 2012 20:31:11 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>239657</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 10 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00s4n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2489</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>