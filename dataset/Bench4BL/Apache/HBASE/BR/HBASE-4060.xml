<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 16:10:55 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-4060/HBASE-4060.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-4060] Making region assignment more robust</title>
                <link>https://issues.apache.org/jira/browse/HBASE-4060</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;From Eran Kutner:&lt;br/&gt;
My concern is that the region allocation process seems to rely too much on&lt;br/&gt;
timing considerations and doesn&apos;t seem to take enough measures to guarantee&lt;br/&gt;
conflicts do not occur. I understand that in a distributed environment, when&lt;br/&gt;
you don&apos;t get a timely response from a remote machine you can&apos;t know for&lt;br/&gt;
sure if it did or did not receive the request, however there are things that&lt;br/&gt;
can be done to mitigate this and reduce the conflict time significantly. For&lt;br/&gt;
example, when I run dbck it knows that some regions are multiply assigned,&lt;br/&gt;
the master could do the same and try to resolve the conflict. Another&lt;br/&gt;
approach would be to handle late responses, even if the response from the&lt;br/&gt;
remote machine arrives after it was assumed to be dead the master should&lt;br/&gt;
have enough information to know it had created a conflict by assigning the&lt;br/&gt;
region to another server. An even better solution, I think, is for the RS to&lt;br/&gt;
periodically test that it is indeed the rightful owner of every region it&lt;br/&gt;
holds and relinquish control over the region if it&apos;s not.&lt;br/&gt;
Obviously a state where two RSs hold the same region is pathological and can&lt;br/&gt;
lead to data loss, as demonstrated in my case. The system should be able to&lt;br/&gt;
actively protect itself against such a scenario. It probably doesn&apos;t need&lt;br/&gt;
saying but there is really nothing worse for a data storage system than data&lt;br/&gt;
loss.&lt;/p&gt;

&lt;p&gt;In my case the problem didn&apos;t happen in the initial phase but after&lt;br/&gt;
disabling and enabling a table with about 12K regions.&lt;/p&gt;

&lt;p&gt;For more background information, see &apos;Errors after major compaction&apos; discussion on user@hbase.apache.org&lt;/p&gt;</description>
                <environment></environment>
        <key id="12512748">HBASE-4060</key>
            <summary>Making region assignment more robust</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="ram_krish">ramkrishna.s.vasudevan</assignee>
                                    <reporter username="yuzhihong@gmail.com">Ted Yu</reporter>
                        <labels>
                    </labels>
                <created>Tue, 5 Jul 2011 03:25:58 +0000</created>
                <updated>Tue, 30 Dec 2014 04:34:40 +0000</updated>
                            <resolved>Tue, 30 Dec 2014 04:34:40 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13060008" author="apurtell" created="Tue, 5 Jul 2011 17:13:59 +0000"  >&lt;p&gt;Pulling into 0.92. We can push it out as determined by the RM.&lt;/p&gt;

&lt;p&gt;Some initial steps:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;After opening a region the RegionServer should claim ownership of the region in ZooKeeper with an ephemeral znode. If the znode already exists, refuse to open the region. (Pardon if we already do something like this... but then it seems to be not working correctly.)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In the master, watch for double assignments in the region lists reported by the RegionServers when they check in. If a double assignment is observed, issue close commands to both RS ASAP and yell about it in the logs.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13060036" author="yuzhihong@gmail.com" created="Tue, 5 Jul 2011 17:50:20 +0000"  >&lt;p&gt;On top of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3789&quot; title=&quot;Cleanup the locking contention in the master&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3789&quot;&gt;&lt;del&gt;HBASE-3789&lt;/del&gt;&lt;/a&gt;, we should consider the following two remedies for 0.90 branch:&lt;br/&gt;
1. how to speed up enabling table with large number of regions (12K in Eran&apos;s case)&lt;br/&gt;
2. AM.TimeoutMonitor.chore() may reassign a region which just completed OpenedRegionHandler.process()&lt;/p&gt;

&lt;p&gt;For #2 above, better coordination between OpenedRegionHandler and AM.TimeoutMonitor should be devised.&lt;/p&gt;</comment>
                            <comment id="13060183" author="streamy" created="Tue, 5 Jul 2011 22:56:46 +0000"  >&lt;p&gt;Andrew, we are already doing something like what you describe.  It seems the issue is what Ted describes in #2 but it&apos;s not clear to me how this bug is being triggered.&lt;/p&gt;

&lt;p&gt;In TimeoutMonitor, we attempt to do an atomic change of state from OPENING to OFFLINE.  If this fails, we don&apos;t do anything.  If it succeeds, we attempt to do a reassign.&lt;/p&gt;

&lt;p&gt;In OpenRegionHandler (in the RS), we attempt an atomic change of state from OPENING to OPENED.  If this fails, we roll back our open.  If it succeeds, we are opened and the node is at OPENED.&lt;/p&gt;

&lt;p&gt;In OpenedRegionHandler (in the master), the first thing we do is delete a node but only if in OPENED state.  If the TimeoutMonitor had done anything, it would have switched the state to OFFLINE.&lt;/p&gt;


&lt;p&gt;What am I missing?&lt;/p&gt;</comment>
                            <comment id="13060193" author="yuzhihong@gmail.com" created="Tue, 5 Jul 2011 23:34:28 +0000"  >&lt;p&gt;Here is related log snippet:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;2011-06-29 16:39:54,326 DEBUG
org.apache.hadoop.hbase.master.handler.OpenedRegionHandler: Opened region
gs_raw_events,GSLoad_1308518553_168_WEB204,1308533970928.584dac5cc70d8682f71c4675a843c309.
on hadoop1-s05.farm-ny.gigya.com,60020,1307349217076
2011-06-29 16:40:00,598 DEBUG org.apache.hadoop.hbase.zookeeper.ZKAssign:
master:60000-0x13004a31d7804c4 Creating (or updating) unassigned node for
584dac5cc70d8682f71c4675a843c309 with OFFLINE state
2011-06-29 16:40:00,877 DEBUG
org.apache.hadoop.hbase.master.AssignmentManager: No previous transition
plan was found (or we are ignoring an existing plan) for
gs_raw_events,GSLoad_1308518553_168_WEB204,1308533970928.584dac5cc70d8682f71c4675a843c309.
so generated a random one;
hri=gs_raw_events,GSLoad_1308518553_168_WEB204,1308533970928.584dac5cc70d8682f71c4675a843c309.,
src=, dest=hadoop1-s05.farm-ny.gigya.com,60020,1307349217076; 5 (online=5,
exclude=null) available servers
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;the log indicates that the following was executed:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; void assign(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; RegionState state, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; setOfflineInZK,
      &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; forceNewPlan) {
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.maximumAssignmentAttempts; i++) {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (setOfflineInZK &amp;amp;&amp;amp; !setOfflineInZooKeeper(state)) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above would have been called from either:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void assign(HRegionInfo region, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; setOfflineInZK) {
    assign(region, setOfflineInZK, &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or TimeoutMonitor.chore()&lt;/p&gt;</comment>
                            <comment id="13070154" author="erank" created="Sun, 24 Jul 2011 12:18:08 +0000"  >&lt;p&gt;I will try to elaborate a bit on what I had in mind, I think it is not very far from what Andrew suggested earlier.&lt;br/&gt;
First I should say that I am not familiar enough with the current implementation so my understanding may not be correct or accurate. However, based on what I understand, the current implementation doesn&apos;t seem to be robust enough, because it is based on active communication between the master and RSs, which leaves room for timeouts and failures.&lt;br/&gt;
My suggestion is to be more proactive about monitoring the assignment of regions and allow the RSs themselves to know which regions are assigned to them at any time.&lt;br/&gt;
I suggest opening a new znode in ZK for listing the regions and their assignment. It can be something like /hbase/regions/&amp;lt;table&amp;gt;/&amp;lt;region&amp;gt;, so each region will have a znode. Under that will be a znode for the assigned RS.&lt;br/&gt;
When the master assigns a region to a RS it should delete the old owner record from the list and add the new one.&lt;br/&gt;
When a RS gets an assignment command from the master it should list the children of the znode corresponding to the assigned region and set a watcher for that. The RS should verify it is indeed the owner registered in ZK. If it is not it should immediately refuse to accept the region assignment command.&lt;br/&gt;
If the RS receives an event trigger from one of the watchers it had set, it should re-check that region assignment and validate it is still the owner of the region. If it&apos;s not, it should relinquish control over the region.&lt;br/&gt;
The process so far should guarantee that there are never double assigned regions, however it may create orphan regions which are not assigned to any RS. To resolve that the master should periodically check for unassigned regions and reassign them.&lt;/p&gt;
</comment>
                            <comment id="13070218" author="streamy" created="Sun, 24 Jul 2011 17:40:32 +0000"  >&lt;p&gt;The primary difference between the suggestion by Eran and what is currently implemented is that the per-region znodes are never deleted in Eran&apos;s design.  The existing implementation uses znodes to track regions that are currently in transition.  An assigned and open region doesn&apos;t have a znode (nor would an unassigned and closed region of a disabled table).&lt;/p&gt;

&lt;p&gt;Check out ZKAssign and AssignmentManager for details on how that works.&lt;/p&gt;</comment>
                            <comment id="13234851" author="lhofhansl" created="Wed, 21 Mar 2012 18:50:08 +0000"  >&lt;p&gt;Moving out of 0.94.&lt;/p&gt;</comment>
                            <comment id="13468065" author="stack" created="Tue, 2 Oct 2012 20:55:44 +0000"  >&lt;p&gt;Moving out of 0.96.0.  Needs to be worked through more.  Won&apos;t be done for 0.96.0&lt;/p&gt;</comment>
                            <comment id="14260776" author="ram_krish" created="Tue, 30 Dec 2014 04:34:40 +0000"  >&lt;p&gt;AM rewrite as already done this robustness.  Resolving as &apos;duplicate&apos;.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 5 Jul 2011 17:13:59 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>27151</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 48 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02d4n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11728</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>