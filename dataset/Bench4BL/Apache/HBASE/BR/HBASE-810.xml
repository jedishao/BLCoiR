<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 02 18:47:30 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-810/HBASE-810.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-810] Prevent temporary deadlocks when, during a scan with write operations, the region splits</title>
                <link>https://issues.apache.org/jira/browse/HBASE-810</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-804&quot; title=&quot;A region split that occurs with live scanners breaks them&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-804&quot;&gt;&lt;del&gt;HBASE-804&lt;/del&gt;&lt;/a&gt; was not about the good problem, this one is. Anyone that iterates through the results of a scanner and that rewrites data back into the row at each iteration will hit a UnknownScannerException if a split occurs. See the stack in the referred jira. Timeline :&lt;/p&gt;

&lt;p&gt;Split occurs, acquires a write lock and waits for scanners to finish&lt;br/&gt;
The scanner in the custom code iterates and writes data until the write is blocked by the lock&lt;br/&gt;
deadlock&lt;br/&gt;
The scanner timeouts thus the region splits but the USE will be thrown when next() is called&lt;/p&gt;

&lt;p&gt;Inside a Map, the task will simply be retried when the first one fails. Elsewhere, it becomes more complicated.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12402046">HBASE-810</key>
            <summary>Prevent temporary deadlocks when, during a scan with write operations, the region splits</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jdcryans">Jean-Daniel Cryans</reporter>
                        <labels>
                    </labels>
                <created>Sat, 9 Aug 2008 01:14:46 +0000</created>
                <updated>Sat, 13 Sep 2008 23:22:45 +0000</updated>
                            <resolved>Thu, 21 Aug 2008 21:40:31 +0000</resolved>
                                    <version>0.2.0</version>
                                    <fixVersion>0.2.1</fixVersion>
                    <fixVersion>0.18.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12621469" author="srainville" created="Mon, 11 Aug 2008 14:57:42 +0000"  >&lt;p&gt;What&apos;s the most problematic about this issue is that if we&apos;re in the context of a map/reduce job and that a map task fails when a split occurs then when the task is restarted it will only scan the rows in the resulting first region... simply because the input of a hbase map/reduce job is split based on the regions. Actually, is it a bigger problem that could be the consequence of other &lt;b&gt;normal&lt;/b&gt; failures in a map task?&lt;/p&gt;</comment>
                            <comment id="12621519" author="stack" created="Mon, 11 Aug 2008 17:45:07 +0000"  >&lt;p&gt;I don&apos;t think so Sebastien.  A TableSplit is defined by a start and end row.  On MR job setup, these correspond to region demarcations.  If the region splits during the subsequent MR job, and the map fails and then reruns, it&apos;ll scan the two daughters since the map tasks TableSplit spans the two regions.&lt;/p&gt;
</comment>
                            <comment id="12621562" author="apurtell" created="Mon, 11 Aug 2008 19:26:15 +0000"  >&lt;p&gt;Is this resolved by &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-816&quot; title=&quot;TableMap should survive USE&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-816&quot;&gt;&lt;del&gt;HBASE-816&lt;/del&gt;&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="12621957" author="stack" created="Tue, 12 Aug 2008 20:29:19 +0000"  >&lt;p&gt;Marking as blocker.  Updating as you scan is a common operation.&lt;/p&gt;</comment>
                            <comment id="12623057" author="jimk" created="Fri, 15 Aug 2008 23:35:26 +0000"  >&lt;p&gt;This is very ugly. The locking as depicted in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-316&quot; title=&quot;[hbase] Increase parallelism in region servers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-316&quot;&gt;&lt;del&gt;HBASE-316&lt;/del&gt;&lt;/a&gt; is essentially correct.&lt;/p&gt;

&lt;p&gt;If we wanted to be more responsive during a split, we should use a tryLock in HRegion.getScanner(...)&lt;/p&gt;

&lt;p&gt;This would allow us to scan (if we get the lock) or split (and continue from the last scanned row if we don&apos;t).&lt;/p&gt;

&lt;p&gt;Maybe getScanner should do a synchronized(splitLock) as well.&lt;/p&gt;

&lt;p&gt;Or, maybe splits should be more like cache flushes in that they only acquire a write lock at the end, when they are ready to move new HStores into place? No, that won&apos;t work for splits because splits require the master to reassign the children, whereas flushes and compactions continue to be served from the same HRegionServer and the row range for HRegion is the same.&lt;/p&gt;

&lt;p&gt;It appears as if a region is splitting, any outstanding scanners either need to finish scanning the region (blocking the split) or the scanners need to be notified that a split is going to happen and they need to wait and recalibrate.&lt;/p&gt;</comment>
                            <comment id="12623692" author="jdcryans" created="Tue, 19 Aug 2008 15:03:13 +0000"  >&lt;blockquote&gt;
&lt;p&gt;It appears as if a region is splitting, any outstanding scanners either need to finish scanning the region (blocking the split) or the scanners need to be notified that a split is going to happen and they need to wait and recalibrate.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is also what I think we should do but like I said on IRC, we don&apos;t currently have a way to communicate from the region server to the scanner. Suppose the user code did a next() and while processing the info the split happens (and it will finally try to insert something but won&apos;t be able to since the split is blocking). What we need is an handle to the scanner to tell it to &quot;close&quot; itself and wait.&lt;/p&gt;</comment>
                            <comment id="12623877" author="jimk" created="Wed, 20 Aug 2008 02:10:22 +0000"  >&lt;p&gt;Looking at the code, I have realized that a lot has changed since &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-316&quot; title=&quot;[hbase] Increase parallelism in region servers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-316&quot;&gt;&lt;del&gt;HBASE-316&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am currently working on three diagrams:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;how it works today&lt;/li&gt;
	&lt;li&gt;how it should work&lt;/li&gt;
	&lt;li&gt;what needs to be changed.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I have already found several cases where different objects are being used for synchronization of the same operation. (Not sure how it got that way, but after looking at the code I&apos;d be surprised if there WERE NOT deadlocks).&lt;/p&gt;

&lt;p&gt;I have three operations left to analyze: compaction, split and log rolling. I hope to finish the analysis tomorrow.&lt;/p&gt;</comment>
                            <comment id="12624137" author="jimk" created="Wed, 20 Aug 2008 21:09:01 +0000"  >&lt;p&gt;I have attached two screenshots to this issue.&lt;/p&gt;

&lt;p&gt;locking-compatibility shows what operations are compatible and how they are protected from each other&lt;/p&gt;

&lt;p&gt;lock-sequencing shows how locking should work. There are a couple of changes from the current state of affairs:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;StoreFileScanner constructor takes out a read lock on the HStore. This is not necessary as a read lock is already held in HStore.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;HRegion.get(byte [] row, byte [] column, long timestamp,  int numVersions) (which all the other variants of get call) and HRegion.compactStores() should take out splitsAndClosesLock.readLock().lock() at the start of the method, and release it at the end, using try - finally&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12624163" author="jimk" created="Wed, 20 Aug 2008 22:24:23 +0000"  >&lt;p&gt;Ok, now I see the problem (duh!). HRegion.close acquires the splitsAndCloses write lock preventing further updates. But then it waits until all the scanners exit. But the process doing the scanning also wants to do updates, so it is blocked on the splitsAndCloses write lock. Thus all the scanners cannot exit so close is blocked, and the process cannot do updates so it is blocked.&lt;/p&gt;

&lt;p&gt;I will post a new lock sequence diagram that indicates the changes needed. All changes will be marked with RED.&lt;/p&gt;</comment>
                            <comment id="12624176" author="jimk" created="Wed, 20 Aug 2008 23:00:29 +0000"  >&lt;p&gt;To reiterate, the following changes should be made:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Remove HStore read lock in StoreFileScanner constructor&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;HRegion.get(byte [] row, byte [] column, long timestamp, int numVersions) (which all the other variants of get call) and HRegion.compactStores() should take out splitsAndClosesLock.readLock().lock() at the start of the method, and release it at the end, using try - finally&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In HRegion.close, move the wait for active scanners outside the acquisition of splitsAndClosesLock and prevent new scanners by adding a reentrant read write lock named something like new scanner lock. New code would look something like:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; ReentrantReadWriteLock newScannerLock = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ReentrantReadWriteLock();
...
In close(&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;):
    newScannerLock.writeLock().lock();
    LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;Scanners disabled &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; region &quot;&lt;/span&gt; + &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;);
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
        &lt;span class=&quot;code-comment&quot;&gt;// Wait &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; active scanners to finish.
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; (activeScannerCount) {
          &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (activeScannerCount.get() != 0) {
            LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;waiting &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &quot;&lt;/span&gt; + activeScannerCount.get() +
                &lt;span class=&quot;code-quote&quot;&gt;&quot; scanners to finish&quot;&lt;/span&gt;);
            &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
              activeScannerCount.wait();
            } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {
              &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt;
&lt;/span&gt;            }
          }
        }
        LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;No more active scanners &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; region &quot;&lt;/span&gt; + &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;);
        splitsAndClosesLock.writeLock().lock();
        LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;Updates disabled &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; region &quot;&lt;/span&gt; + &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;);
        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
...
        } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
          splitsAndClosesLock.writeLock().unlock();
        }
    } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
      newScannerLock.writeLock().unlock();
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then change the use of splitsAndClosesLock in getScanner to use newScannerLock instead.&lt;/p&gt;

&lt;p&gt;New sequencing diagram forthcoming.&lt;/p&gt;</comment>
                            <comment id="12624423" author="jdcryans" created="Thu, 21 Aug 2008 16:56:04 +0000"  >&lt;p&gt;Fixes what Jim told to fix. I also added a test that should fail without this patch.&lt;/p&gt;</comment>
                            <comment id="12624490" author="jimk" created="Thu, 21 Aug 2008 21:40:30 +0000"  >&lt;p&gt;Committed to 0.2 branch and trunk. Thanks for the patch JD!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12388680" name="hbase-810-v1.patch" size="11104" author="jdcryans" created="Thu, 21 Aug 2008 16:56:04 +0000"/>
                            <attachment id="12388643" name="lock-sequencing.jpg" size="635863" author="jimk" created="Wed, 20 Aug 2008 23:16:47 +0000"/>
                            <attachment id="12388630" name="locking-compatibility.jpg" size="129853" author="jimk" created="Wed, 20 Aug 2008 20:56:06 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 11 Aug 2008 14:57:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>25410</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 16 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0h9kv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>98814</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>