<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 16:27:06 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-9769/HBASE-9769.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-9769] Improve performance of a Scanner with explicit column list when rows are small/medium size</title>
                <link>https://issues.apache.org/jira/browse/HBASE-9769</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description></description>
                <environment></environment>
        <key id="12673948">HBASE-9769</key>
            <summary>Improve performance of a Scanner with explicit column list when rows are small/medium size</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="vrodionov">Vladimir Rodionov</assignee>
                                    <reporter username="vrodionov">Vladimir Rodionov</reporter>
                        <labels>
                    </labels>
                <created>Tue, 15 Oct 2013 18:22:48 +0000</created>
                <updated>Wed, 4 Mar 2015 22:26:50 +0000</updated>
                            <resolved>Wed, 4 Mar 2015 22:26:50 +0000</resolved>
                                    <version>0.98.0</version>
                    <version>0.94.12</version>
                    <version>0.96.0</version>
                                                    <component>Scanners</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>14</watches>
                                                                <comments>
                            <comment id="13795464" author="vrodionov" created="Tue, 15 Oct 2013 18:24:07 +0000"  >&lt;p&gt;From dev-hbase list:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Simple table: one column + one qualifier
Two type of scans:
1. Scan.addFamily(CF)
2. Scan.addColumn(CF, CQ)

Both run on block cache (all data in memory)
Tested on StoreScanner directly.
1. 4.2M KVs per sec per one thread
2. 1.5M KVs per second per one thread.
The difference? First scanner&apos;s ScanQueryMatcher returns INCLUDE, DONE, second - INCLUDE_NEXT_ROW, DONE
The cost of Row&apos;s reseek is huge.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="13795469" author="vrodionov" created="Tue, 15 Oct 2013 18:26:14 +0000"  >&lt;p&gt;From dev-list:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
I modified tests:
Now I created table with one CF and 5 columns: CQ1,..,CQ5
1. Scan.addColumn(CF, CQ1);
    Scan.addColumn(CF, CQ3);
2. Scan.addFamily(CF);
Scan performance from block cache:
1.  400K rows per sec
2.  1.6M rows per sec
The explicit columns scan performance  is even worse in &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt;. It is much faster to scan the WHOLE rows and filter columns later in a Filter, than specify columns directly in a Scan.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I profiled the last test case (5 columns total and 2 in a scan).&lt;/p&gt;

&lt;p&gt;80% of StoreScanner.next() execution time are in :&lt;/p&gt;

&lt;p&gt;StoreScanner.reseek() - 71%&lt;br/&gt;
ScanQueryMathcer.getKeyForNextColumn() - 6%&lt;br/&gt;
ScanQueryMathcer.getKeyForNextRow() - 2%&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13795473" author="vrodionov" created="Tue, 15 Oct 2013 18:27:57 +0000"  >&lt;p&gt;LarsH:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Interesting. Thanks &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; doing the testing/profiling Vladimir!

Generally reseeks are better &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; they can skip many KVs.

For example &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; you have many versions of the same row/col, INCLUDE_NEXT_COL will be better than issuing many INCLUDEs, same with INCLUDE_NEXT_ROW &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; there are many columns.

Since the number of columns/versions is not known at scan time (and can in fact vary between rows) it is hard to always &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; the right thing. It also depends on how large the KVs are average. So replacing INCLUDE_NEXT_XXX with INCLUDE is not always the right idea.

Thinking aloud... We could take the VERSIONS setting of the column family into account as a guideline &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the expected number of versions (but there&apos;s no guarantee about how many version we&apos;ll actually have until we had a compaction), and replace INCLUDE_NEXT_COL with INCLUDE &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; VERSIONS is small (maybe &amp;lt; 10 or so). Maybe that&apos;d be worth a jira...


There are some fixes in 0.94.12 (HBASE-8930, avoid a superfluous reseek in some cases), and HBASE-9732 might help in 0.94.13 (avoid memory fences on an &lt;span class=&quot;code-keyword&quot;&gt;volatile&lt;/span&gt; on each seek/reseek).

It also would be nice to figure out why reseek is so much more expensive. If the KV we reseek to is on the same block it should just scan forward, otherwise it&apos;ll look in the appropriate block. It probably is the creation of the fake KV we want to seek to (like firstOnRow, lastOnRow, etc), which &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; there&apos;s not much we can.

Lastly, I&apos;ve not spend much time profiling the ExplicitColumnMatcher, yet, looks like I should start doing that.

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13795481" author="vrodionov" created="Tue, 15 Oct 2013 18:31:42 +0000"  >&lt;p&gt;Optimization described with initial results:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Yes, I load data into HRegion (with CACHE_ON_WRITE) than call flashcache() (no data in memstore).

This is what I found: the &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; implementation of  ExplicitColumnMatcher is (possibly) tuned to very large rows, I would say - very large. We need a hint &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; scan which  tells StoreScanner which strategy to use :

1. ExplicitColumnMatcher with reseeks (what we have currently) &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; very large rows
Or &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; small/medium rows
2. Remove explicit columns/families  from a Scan and replace them with additional filter which actually keeps columnFamilyMap from scan and verifies every KV  matches with &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; map.

I have created such a filter (ExplicitColumnsFilter) and verified that it works much better than &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; 1. &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; small/medium rows. For 1 CF + 5 CQs and Scan with 2 CQs I have:

400K rows per sec with &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;
1.45M with ExplicitScanReplacementFilter (&amp;gt; 350% improvement)

Raw scanner (no columns specified) runs at 1.6M rows per sec. Its just 10% performance hit to run scanner with 2 explicit column qualifiers.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13795504" author="lhofhansl" created="Tue, 15 Oct 2013 18:51:33 +0000"  >&lt;p&gt;Show us the code &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13795509" author="vrodionov" created="Tue, 15 Oct 2013 18:54:21 +0000"  >&lt;p&gt;Lars. I am going (finally) to create the patch. The code is running inside my test bed which is slightly off from any HBase revs and trunk. &lt;/p&gt;</comment>
                            <comment id="13795519" author="vrodionov" created="Tue, 15 Oct 2013 19:05:32 +0000"  >&lt;p&gt;The main idea is to provide new Scanner&apos;s hint (via new attribute) for RS - something SCAN-SMALL-ROWS and in Store.getScanners we will  check for this attribute and if it is present we use StoreSCanner ctor with NULL as columns set:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; KeyValueScanner getScanner(Scan scan,
      &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; NavigableSet&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; []&amp;gt; targetCols) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    lock.readLock().lock();
    &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; smallRowsScan = scan.getAttribute(&lt;span class=&quot;code-quote&quot;&gt;&quot;SCAN-SMALL-ROWS&quot;&lt;/span&gt;) != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(smallRowsScan){
          Filter ecFilter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ExplicitColumnsFilter(targetCols);
          &lt;span class=&quot;code-comment&quot;&gt;// update filter in Scan with ecFilter
&lt;/span&gt;          &lt;span class=&quot;code-comment&quot;&gt;// remove  columnFamilyMap from Scan
&lt;/span&gt;    }
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      KeyValueScanner scanner = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (getHRegion().getCoprocessorHost() != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
        scanner = getHRegion().getCoprocessorHost().preStoreScannerOpen(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;, scan, smallRowsScan? &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;: targetCols);
      }
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (scanner == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
        scanner = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StoreScanner(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;, getScanInfo(), scan, smallRowsScan? &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;: targetCols:targetCols);
      }
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; scanner;
    } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
      lock.readLock().unlock();
    }
  }

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If no attribute than - default path&lt;/p&gt;
</comment>
                            <comment id="13795547" author="yuzhihong@gmail.com" created="Tue, 15 Oct 2013 19:36:52 +0000"  >&lt;blockquote&gt;&lt;p&gt;Generally reseeks are better if they can skip many KVs.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There is already a feature for small scans. If small in &quot;SCAN-SMALL-ROWS&quot; is replaced with narrow (or something similar), would it help clarify its purpose ?&lt;/p&gt;</comment>
                            <comment id="13795559" author="vrodionov" created="Tue, 15 Oct 2013 19:55:40 +0000"  >&lt;p&gt;Ted, is this suggestion to change the attribute name? Smallness  of rows is not easy to estimate automatically that is why I suggest using explicit hint in a Scan instance. &lt;/p&gt;</comment>
                            <comment id="13795694" author="lhofhansl" created="Tue, 15 Oct 2013 21:50:29 +0000"  >&lt;p&gt;Also try with 0.94.12. The specific issue you&apos;re seeing might be fixed there.&lt;/p&gt;</comment>
                            <comment id="13796242" author="vrodionov" created="Wed, 16 Oct 2013 00:24:15 +0000"  >&lt;p&gt;In 0.94.12 the difference is not so dramatic as in 0.94.6 but still exists:&lt;/p&gt;

&lt;p&gt;default: 500K rows per sec&lt;br/&gt;
filter-based: 1.2M rows per sec&lt;/p&gt;

&lt;p&gt;It seems that there is performance regression in scan filters in 0.94.12. The code which gives me almost 1.5M in 0.94.6 runs only 1.2M rows per sec in 0.94.12.&lt;/p&gt;</comment>
                            <comment id="13796311" author="zjushch" created="Wed, 16 Oct 2013 01:43:45 +0000"  >&lt;p&gt;Move the logic of above patch to Scan class, is it also OK?&lt;/p&gt;

&lt;p&gt;It means adding the ExplicitColumnsFilter in Scan.java when setting the attribute &quot;SCAN-SMALL-ROWS&quot;&lt;/p&gt;

&lt;p&gt;In addition, I worry about the data correctness if Scan already has complex filters.&lt;/p&gt;</comment>
                            <comment id="13796331" author="vrodionov" created="Wed, 16 Oct 2013 02:07:10 +0000"  >&lt;p&gt;Its a server-side filter and is not meant to be exposed to HBase client. The reason: it has only list of qualifiers - no columns. It is instantiated in StoreScanner. If Scan has already filter, the new FilterList is created with MUST_PASS_ALL operator. First goes  ExplicitColumnsFilter then existing filter.&lt;/p&gt;</comment>
                            <comment id="13796345" author="lhofhansl" created="Wed, 16 Oct 2013 02:31:28 +0000"  >&lt;p&gt;Another idea I had was to make use of the column family&apos;s VERSIONS setting. If it is &quot;small&quot; use INCLUDE and SKIP in the ExplicitColumnTracker, otherwise use INCLUDE_AND_SEEK_NEXT_COL and SEEK_NEXT_COL. In my tests this yields a nice improvement bringing ExplicitColumnTracker on par with ScanWildcardColumnTracker. For now I defined &quot;small&quot; as 10, but that needs to be tested more.&lt;/p&gt;</comment>
                            <comment id="13796346" author="lhofhansl" created="Wed, 16 Oct 2013 02:36:59 +0000"  >&lt;p&gt;Here&apos;s a &lt;b&gt;sample&lt;/b&gt; of what I mean.&lt;br/&gt;
10 is hardcoded. Alternatively we could only do this when VERSIONS=1, so this way the user would naturally provide a hint about how many version (s)he expects to keep and we use that hint.&lt;/p&gt;</comment>
                            <comment id="13796348" author="vrodionov" created="Wed, 16 Oct 2013 02:39:44 +0000"  >&lt;p&gt;Lars, HTable can have small number of versions and large number of  column qualifiers or large values (say 100K). &lt;/p&gt;</comment>
                            <comment id="13796354" author="lhofhansl" created="Wed, 16 Oct 2013 02:45:38 +0000"  >&lt;p&gt;With VERSIONS=1 only. I think I like this better. User declares to only be interested in 1 version, in that case we use SKIP and INCLUDE and not column seeking.&lt;/p&gt;</comment>
                            <comment id="13796408" author="lhofhansl" created="Wed, 16 Oct 2013 04:34:16 +0000"  >&lt;p&gt;Interestingly it depends on which column(s) is (are) selected.&lt;/p&gt;

&lt;p&gt;Some numbers: 4m rows, 5 cols each, 1 cf, 10 bytes values, VERSIONS=1. Everything measured in seconds.&lt;/p&gt;

&lt;p&gt;Without patch:&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Wildcard&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Col 1&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Col 2&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Col 4&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Col 5&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Col 2+4&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6.4&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8.5&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;14.3&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;14.6&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;20.3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;With patch sample1:&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Wildcard&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Col 1&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Col 2&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Col 4&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Col 5&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Col 2+4&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6.4&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8.4&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8.9&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;9.9&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6.4&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Variation here was +- 0.2s.&lt;/p&gt;

&lt;p&gt;So with this patch scanning is 2x faster than without in some cases, and never slower. No special hint needed, beyond declaring VERSIONS correctly.&lt;/p&gt;</comment>
                            <comment id="13796409" author="lhofhansl" created="Wed, 16 Oct 2013 04:35:08 +0000"  >&lt;p&gt;Even simpler. Same perf numbers.&lt;br/&gt;
(The previous patch was actually not correct when there are actually multiple versions).&lt;/p&gt;</comment>
                            <comment id="13796411" author="lhofhansl" created="Wed, 16 Oct 2013 04:37:30 +0000"  >&lt;p&gt;Note that Vladimir&apos;s small row hint still can be used to eliminate the NEXT_ROW seek. Maybe, again, it is prudent to split this in two issues.&lt;/p&gt;</comment>
                            <comment id="13796417" author="lhofhansl" created="Wed, 16 Oct 2013 04:46:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;Lars, HTable can have small number of versions and large number of column qualifiers or large values (say 100K). &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That is true. Seeking to the next column is not a good idea, though, if we know there are not going to be many versions to skip. So the suggested patch here will not be slower than before, and it will improve performance in many cases.&lt;/p&gt;

&lt;p&gt;As the size of a KV approaches the HFile blocksize (64k by default), SKIP and SEEK_NEXT_COL should become equivalent in performance (in both cases we&apos;ll need to find the KV in the next block).&lt;/p&gt;

&lt;p&gt;As I said, this does not eliminate the NEXT_ROW seeking.&lt;/p&gt;

&lt;p&gt;I fear the filter approach will lead to issues when there are already filters configured on the scan. You&apos;d have to convert this to a FilterList while keeping all the semantics and performance characteristics.&lt;br/&gt;
I think it might be best to ship your Filter and document its use.&lt;/p&gt;

&lt;p&gt;I&apos;ll file a separate issue for my patch.&lt;/p&gt;</comment>
                            <comment id="13796421" author="vrodionov" created="Wed, 16 Oct 2013 04:52:04 +0000"  >&lt;p&gt;Initial version of a patch&lt;/p&gt;</comment>
                            <comment id="13796426" author="vrodionov" created="Wed, 16 Oct 2013 04:53:26 +0000"  >&lt;p&gt;It contains check MAX_VERSIONS = 1 suggested by Lars (not sure if it is really a hint?).&lt;/p&gt;</comment>
                            <comment id="13796430" author="vrodionov" created="Wed, 16 Oct 2013 04:59:12 +0000"  >&lt;p&gt;It contains check MAX_VERSIONS = 1 suggested by Lars (not sure if it is really a hint?). Lars version gives improvements as well, but it relies on default hint of MAX_VERSIONS and is slower I think. I completely eliminated ExplicitColumnTracker from the code path. The more columns in a scan the more is going to be performance difference, I think (again). &lt;/p&gt;</comment>
                            <comment id="13796431" author="vrodionov" created="Wed, 16 Oct 2013 05:01:32 +0000"  >&lt;p&gt;To activate this feature (hint):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Scan scan = ...
    scan.setAttribute(Scan.SCAN_NARROW_ROWS, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;.getBytes());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OK. I think I will replace SCAN_NARROW_ROWS with HINT_NARROW_ROWS.&lt;/p&gt;</comment>
                            <comment id="13796433" author="vrodionov" created="Wed, 16 Oct 2013 05:03:31 +0000"  >&lt;p&gt;Lars, our patches are independent. I think they need to be merged into one, or you better create new JIRA for &lt;b&gt;do-not-seek-next-col&lt;/b&gt; thing.&lt;/p&gt;</comment>
                            <comment id="13796434" author="lhofhansl" created="Wed, 16 Oct 2013 05:04:38 +0000"  >&lt;p&gt;MAX_VERSIONS=1 (or a low number) can only be used to eliminate the NEXT_COL seek (as that is use to seek past versions of the same column). It does not indicate anything about the number of columns in a row, and hence we know nothing about whether SEEK_NEXT_ROW or a series of SKIPs is better.&lt;/p&gt;

&lt;p&gt;We need both, I think.&lt;/p&gt;

&lt;p&gt;(MAX_VERSIONS is a hint in the sense that there temporarily can be more versions in the memstore and/or distributed over various HFiles, only after a major compaction will the number of versions actually be &amp;lt;= MAX_VERSIONS.)&lt;/p&gt;</comment>
                            <comment id="13796435" author="lhofhansl" created="Wed, 16 Oct 2013 05:05:42 +0000"  >&lt;p&gt;I created &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9778&quot; title=&quot;Add hint to ExplicitColumnTracker to avoid seeking&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9778&quot;&gt;&lt;del&gt;HBASE-9778&lt;/del&gt;&lt;/a&gt; for my patch idea.&lt;/p&gt;</comment>
                            <comment id="13796436" author="lhofhansl" created="Wed, 16 Oct 2013 05:08:10 +0000"  >&lt;p&gt;Nit: Use the Eclipse formatter from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5961&quot; title=&quot;New standard HBase code formatter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5961&quot;&gt;&lt;del&gt;HBASE-5961&lt;/del&gt;&lt;/a&gt;. We use 2 spaces instead of a tab for indentation.&lt;/p&gt;</comment>
                            <comment id="13796461" author="vrodionov" created="Wed, 16 Oct 2013 06:06:44 +0000"  >&lt;p&gt;Some additional performance numbers on a patch:&lt;/p&gt;

&lt;p&gt;Table: 1 CF + 5 CQ, value ~ 10-15 bytes. Rows = 500000. All data in a block cache. Tested on *StoreScanner * directly.&lt;/p&gt;

&lt;p&gt;Default:&lt;br/&gt;
Raw                 = 1.28M rows per sec&lt;br/&gt;
1 CQ in Scan   = 0.7M&lt;br/&gt;
2 CQ in Scan   = 0.5M&lt;br/&gt;
3 CQ in Scan   = 0.4M&lt;br/&gt;
4 CQ in Scan  = 0.32M&lt;br/&gt;
5 CQ in Scan  = 0.33M&lt;/p&gt;

&lt;p&gt;Patch:&lt;/p&gt;

&lt;p&gt;Raw                 = 1.28M rows per sec&lt;br/&gt;
1 CQ in Scan   = 1.27M&lt;br/&gt;
2 CQ in Scan   = 1.2M&lt;br/&gt;
3 CQ in Scan   = 1.1M&lt;br/&gt;
4 CQ in Scan  = 1.05M&lt;br/&gt;
5 CQ in Scan  = 1M&lt;/p&gt;
</comment>
                            <comment id="13797105" author="vrodionov" created="Wed, 16 Oct 2013 18:40:44 +0000"  >&lt;p&gt;Patch v2. Replaced tab/with spaces, renamed Hint to HINT_NARROW_ROWS, removed check for MAX_VERSIONS (its in in a different JIRA).&lt;/p&gt;</comment>
                            <comment id="13797119" author="vrodionov" created="Wed, 16 Oct 2013 18:50:08 +0000"  >&lt;p&gt;First patch for 94-trunk.&lt;/p&gt;</comment>
                            <comment id="13797167" author="hadoopqa" created="Wed, 16 Oct 2013 19:33:49 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12608773/9769-94-v2.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12608773/9769-94-v2.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7570//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7570//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13797195" author="vrodionov" created="Wed, 16 Oct 2013 20:09:43 +0000"  >&lt;p&gt;What does &lt;b&gt;The patch command could not apply the patch.&lt;/b&gt; mean?&lt;br/&gt;
I used &lt;/p&gt;

&lt;p&gt;git diff --no-prefix  &amp;gt; patch.txt &lt;br/&gt;
to create the patch on 94-trunk.&lt;/p&gt;</comment>
                            <comment id="13797224" author="yuzhihong@gmail.com" created="Wed, 16 Oct 2013 20:29:52 +0000"  >&lt;p&gt;QA only applies patch on HBase trunk.&lt;/p&gt;

&lt;p&gt;Can you attach patch for trunk ?&lt;/p&gt;</comment>
                            <comment id="13797230" author="vrodionov" created="Wed, 16 Oct 2013 20:40:29 +0000"  >&lt;p&gt;I thought that I created patch for 0.94-trunk (which I created with branch 0.94).  &lt;/p&gt;</comment>
                            <comment id="13797234" author="yuzhihong@gmail.com" created="Wed, 16 Oct 2013 20:44:24 +0000"  >&lt;p&gt;This is what I meant with &apos;trunk&apos;:&lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/repos/asf/hbase/trunk&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/hbase/trunk&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13797454" author="vrodionov" created="Wed, 16 Oct 2013 23:56:25 +0000"  >&lt;p&gt;Trunk patch v1.&lt;/p&gt;</comment>
                            <comment id="13797524" author="hadoopqa" created="Thu, 17 Oct 2013 01:55:15 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12608840/9769-trunk-v1.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12608840/9769-trunk-v1.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7574//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13797559" author="yuzhihong@gmail.com" created="Thu, 17 Oct 2013 02:53:39 +0000"  >&lt;p&gt;Please add annotation for audience and stability:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class ExplicitScanReplacementFilter &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; FilterBase {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Should it be in org.apache.hadoop.hbase.filter package ?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+&lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.regionserver;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; doesUseExplicitColumnFilter(Scan scan) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Name the method shouldUseExplicitColumnFilter() ?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (cols != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; (cols.size() &amp;gt; 1 || cols.first() != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;)) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Why is cols.size() &amp;gt; 1 check needed ?&lt;/p&gt;

&lt;p&gt;Can you add a test for the new class ?&lt;/p&gt;</comment>
                            <comment id="13797574" author="vrodionov" created="Thu, 17 Oct 2013 03:51:22 +0000"  >&lt;p&gt;1. Its not a client side filter (keeps only column qualifiers - no column families). I decided to put it into regionserver, but I can move to hbase-client&lt;br/&gt;
2. OK, shouldUse is better&lt;br/&gt;
3. you right this check is not needed.&lt;/p&gt;

&lt;p&gt;I will add tests, of course.&lt;/p&gt;</comment>
                            <comment id="13797680" author="lhofhansl" created="Thu, 17 Oct 2013 07:17:14 +0000"  >&lt;p&gt;Did some profiling on why reseek() is so much slower than next() even when reseek just has to seek to the next key. The reason is all the compares we&apos;re doing... For each reseek:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;2 KV compares in KeyValueHeap.generalizedSeek to find the top scanner&lt;/li&gt;
	&lt;li&gt;2 key compares in HFileReaderV2.ScannerV2.reseekTo (one to check for reseek, one to check against the index key)&lt;/li&gt;
	&lt;li&gt;2 key compares in HFileReaderV2.ScannerV2.blockSeek to find the right key&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;After all that we finally read the KV we found.&lt;/p&gt;

&lt;p&gt;While next() just reads the next KV from the current HFile block.&lt;/p&gt;

&lt;p&gt;Nothing jumps here as to how we could simplify this.&lt;/p&gt;</comment>
                            <comment id="13798643" author="yuzhihong@gmail.com" created="Fri, 18 Oct 2013 00:08:44 +0000"  >&lt;p&gt;Minor comment:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; length; i++) {
+      h = 31 * h + buffer[off++];
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Both i and off are incremented in each iteration. Looks like &apos;off++&apos; can be replaced with &apos;offset+i&apos;.&lt;/p&gt;</comment>
                            <comment id="13798697" author="vrodionov" created="Fri, 18 Oct 2013 01:26:01 +0000"  >&lt;p&gt;Trunk patch v2.&lt;/p&gt;</comment>
                            <comment id="13798698" author="vrodionov" created="Fri, 18 Oct 2013 01:26:30 +0000"  >&lt;p&gt;New patch submitted.&lt;/p&gt;</comment>
                            <comment id="13798740" author="hadoopqa" created="Fri, 18 Oct 2013 02:57:02 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12609076/9769-trunk-v2.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12609076/9769-trunk-v2.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7584//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13798748" author="yuzhihong@gmail.com" created="Fri, 18 Oct 2013 03:09:07 +0000"  >&lt;p&gt;For ExplicitScanReplacementFilter:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+ * Copyright 2013 The Apache Software Foundation
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Year is not needed.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+&lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.regionserver;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I thought you were going to move this class to filter package.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; class SinkWriter {
+  &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; class SinkWriter {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Is the above needed for this JIRA ?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[][] CQ = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[][]{
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;nit: since CQ holds qualifiers, consider naming the variable CQs.&lt;/p&gt;</comment>
                            <comment id="13798788" author="vrodionov" created="Fri, 18 Oct 2013 04:31:31 +0000"  >&lt;p&gt;trunk v3&lt;/p&gt;</comment>
                            <comment id="13798819" author="hadoopqa" created="Fri, 18 Oct 2013 05:56:59 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12609092/9769-trunk-v3.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12609092/9769-trunk-v3.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 4 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7586//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13798831" author="vrodionov" created="Fri, 18 Oct 2013 06:06:27 +0000"  >&lt;p&gt;Fixed small type, sorry. New patch v4.&lt;/p&gt;</comment>
                            <comment id="13798874" author="hadoopqa" created="Fri, 18 Oct 2013 07:31:32 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12609099/9769-trunk-v4.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12609099/9769-trunk-v4.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 4 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.zookeeper.lock.TestZKInterProcessReadWriteLock&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7587//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13799235" author="vrodionov" created="Fri, 18 Oct 2013 16:11:02 +0000"  >&lt;p&gt;This patch has nothing to do with failed Zk test.&lt;/p&gt;</comment>
                            <comment id="13799607" author="yuzhihong@gmail.com" created="Fri, 18 Oct 2013 22:32:28 +0000"  >&lt;p&gt;+1 from me.&lt;/p&gt;

&lt;p&gt;Mind adding release note ?&lt;/p&gt;</comment>
                            <comment id="13799649" author="lhofhansl" created="Fri, 18 Oct 2013 23:24:45 +0000"  >&lt;p&gt;I would prefer if we just included the Filter and document its use.&lt;br/&gt;
Generally this approach will be slower with many columns &lt;b&gt;or&lt;/b&gt; many versions of few columns.&lt;/p&gt;

&lt;p&gt;What do you think about that (&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vrodionov&quot; class=&quot;user-hover&quot; rel=&quot;vrodionov&quot;&gt;Vladimir Rodionov&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=yuzhihong%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;yuzhihong@gmail.com&quot;&gt;Ted Yu&lt;/a&gt;)?&lt;/p&gt;</comment>
                            <comment id="13799657" author="vrodionov" created="Fri, 18 Oct 2013 23:43:02 +0000"  >&lt;p&gt;Sure, it will be slower for rows above 1-2K in size. I have not done any testing on max row size, but 5 cols rows of 150 bytes total is much faster with the filter. The filter is not client - side.&lt;/p&gt;</comment>
                            <comment id="13799666" author="vrodionov" created="Fri, 18 Oct 2013 23:49:24 +0000"  >&lt;p&gt;I prefer keeping the existing version, of course. The reason is new Scan hinting system. This is the first performance - oriented HINT for Scan operation. There are some others coming.&lt;/p&gt;</comment>
                            <comment id="13799670" author="yuzhihong@gmail.com" created="Fri, 18 Oct 2013 23:58:50 +0000"  >&lt;p&gt;Since HStore is modified, this feature is not totally client side.&lt;/p&gt;</comment>
                            <comment id="13801214" author="lhofhansl" created="Mon, 21 Oct 2013 21:54:26 +0000"  >&lt;p&gt;Some comments:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;shouldUseExplicitColumnFilter is misnamed. It has the side effect of adding the filter.&lt;/li&gt;
	&lt;li&gt;Curious how much slower just using HashMap was instead of having your own bucket array.&lt;/li&gt;
	&lt;li&gt;I think this would be cleaner if the Filter would be a proper filter that can serialized (i.e. protoful in trunk and readFields/write in 0.94). (FYI. I am debating the same in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9272&quot; title=&quot;A parallel, unordered scanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9272&quot;&gt;HBASE-9272&lt;/a&gt;. The parallel scanner could just be a sample scanner to use, or it could automatically triggered, but it is still 100% client side in either case)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13801471" author="lhofhansl" created="Tue, 22 Oct 2013 04:37:49 +0000"  >&lt;p&gt;Lastly (and sorry for being difficult), why is this faster than passing the small row hint to ExplicitColumnTracker and replace SEEK_NEXT_COL with SKIP? (this would be &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9778&quot; title=&quot;Add hint to ExplicitColumnTracker to avoid seeking&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9778&quot;&gt;&lt;del&gt;HBASE-9778&lt;/del&gt;&lt;/a&gt; but with your explicit hint)&lt;/p&gt;

&lt;p&gt;It seems the ExplicitColumnTracker then does close to the same work as ScanWildcardColumnTracker. &lt;/p&gt;</comment>
                            <comment id="13801510" author="vrodionov" created="Tue, 22 Oct 2013 05:44:13 +0000"  >&lt;p&gt;Performance-wise, I think this filter is going to be faster than ExplicitColumnTracker with a hint. To make it comparable to the ExplicitScanReplacementFilter, you will have to optimize the ExplicitColumnTracker&apos;s code.&lt;/p&gt;</comment>
                            <comment id="13801529" author="lhofhansl" created="Tue, 22 Oct 2013 06:14:06 +0000"  >&lt;p&gt;We should test end-to-end, not a microbenchmark of StoreScanner.&lt;/p&gt;

&lt;p&gt;Note that you cannot exercise the seeking code in checkVersion without returning data to the client, in which case network IO will dominate. If you filter KVs out with a filter before that checkVersion is never called, if the filter returns INCLUDE it&apos;ll call checkVersion and incur a seek. Only with a coprocessor would it be possible to exercise checkVersion and avoid the network IO.&lt;/p&gt;

&lt;p&gt;Also note that in your filter case you&apos;d still get the SEEK_NEXT_ROW/SEEK_NEXT_COL in ScanWildcardColumnTracker.checkVersion for each column that you included.&lt;/p&gt;

&lt;p&gt;When you get a chance, could you check out the last patch on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9778&quot; title=&quot;Add hint to ExplicitColumnTracker to avoid seeking&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9778&quot;&gt;&lt;del&gt;HBASE-9778&lt;/del&gt;&lt;/a&gt;? Maybe you could run it through your micro StoreScanner test, I&apos;d be curious how it compares.&lt;/p&gt;

&lt;p&gt;Generally, if that the column tracker code is not efficient we should fix that rather than circumventing it completely with a filter.&lt;/p&gt;</comment>
                            <comment id="13802059" author="vrodionov" created="Tue, 22 Oct 2013 17:49:30 +0000"  >&lt;p&gt;&lt;b&gt;Only with a coprocessor would it be possible to exercise checkVersion and avoid the network IO.&lt;/b&gt;&lt;br/&gt;
This is exactly what I am interested in - optimizing scan operation in coprocessors (think - Phoenix).  I will try your patch when I have a time this week.&lt;/p&gt;</comment>
                            <comment id="13802127" author="stack" created="Tue, 22 Oct 2013 18:53:27 +0000"  >&lt;p&gt;Patch looks good caveat above questions.  It was better having the filter in regionserver package as you originally had it &amp;#8211; then its access could have been shutdown confined to where it is used.  I like what &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; says about &quot;...if that the column tracker code is not efficient we should fix that rather than circumventing it completely with a filter.&quot;  Doc of this public static could be better explaining when a user would set the attribute:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;p&gt;+  /** Scan Hints */&lt;br/&gt;
+  static public final String HINT_NARROW_ROWS = &quot;&lt;em&gt;hint_narrow_rows&lt;/em&gt;&quot;;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Good stuff Vladimir.&lt;/p&gt;
</comment>
                            <comment id="13802634" author="zjushch" created="Wed, 23 Oct 2013 06:25:49 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5987&quot; title=&quot;HFileBlockIndex improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5987&quot;&gt;&lt;del&gt;HBASE-5987&lt;/del&gt;&lt;/a&gt; would greatly improve the performance for this case , I think.&lt;/p&gt;

&lt;p&gt;&apos;reseek&apos;  is  optimizated in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5987&quot; title=&quot;HFileBlockIndex improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5987&quot;&gt;&lt;del&gt;HBASE-5987&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;+            // The reader shall continue to scan the current data block instead of querying the
+            // block index as long as it knows the target key is strictly smaller than
+            // the next indexed key or the current data block is the last data block.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition, Performace difference is not so much between  expliciting column list  and scaning wildcard columns in my test environment.  I think it&apos;s the effect of  &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5987&quot; title=&quot;HFileBlockIndex improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5987&quot;&gt;&lt;del&gt;HBASE-5987&lt;/del&gt;&lt;/a&gt; since we applied it&lt;/p&gt;</comment>
                            <comment id="13803066" author="stack" created="Wed, 23 Oct 2013 17:54:44 +0000"  >&lt;p&gt;Isn&apos;t &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5987&quot; title=&quot;HFileBlockIndex improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5987&quot;&gt;&lt;del&gt;HBASE-5987&lt;/del&gt;&lt;/a&gt; committed on 0.94?  If so, I wonder why we do not see the benefit &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zjushch&quot; class=&quot;user-hover&quot; rel=&quot;zjushch&quot;&gt;chunhui shen&lt;/a&gt; talks of.&lt;/p&gt;</comment>
                            <comment id="13803178" author="vrodionov" created="Wed, 23 Oct 2013 19:17:32 +0000"  >&lt;p&gt;I just checked trunk AbstractScannerV2. The code of HBase-5987 is there:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; reseekTo(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] key, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; offset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; length) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; compared;
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isSeeked()) {
        ByteBuffer bb = getKey();
        compared = reader.getComparator().compare(key, offset,
            length, bb.array(), bb.arrayOffset(), bb.limit());
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (compared &amp;lt; 1) {
          &lt;span class=&quot;code-comment&quot;&gt;// If the required key is less than or equal to current key, then
&lt;/span&gt;          &lt;span class=&quot;code-comment&quot;&gt;// don&apos;t &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; anything.
&lt;/span&gt;          &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; compared;
        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.nextIndexedKey != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp;
              (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.nextIndexedKey == HConstants.NO_NEXT_INDEXED_KEY ||
               reader.getComparator().compare(key, offset, length,
                   nextIndexedKey, 0, nextIndexedKey.length) &amp;lt; 0)) {
            &lt;span class=&quot;code-comment&quot;&gt;// The reader shall &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt; to scan the current data block instead of querying the
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;// block index as &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; as it knows the target key is strictly smaller than
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;// the next indexed key or the current data block is the last data block.
&lt;/span&gt;            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; loadBlockAndSeekToKey(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.block, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.nextIndexedKey,
                &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;, key, offset, length, &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
          }
        }
      }
      &lt;span class=&quot;code-comment&quot;&gt;// Don&apos;t rewind on a reseek operation, because reseek implies that we are
&lt;/span&gt;      &lt;span class=&quot;code-comment&quot;&gt;// always going forward in the file.
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; seekTo(key, offset, length, &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but it seems that &lt;b&gt;nextIndexedKey&lt;/b&gt; is never initialized properly. I did not manage to find the place where the next block first key is assigned to this variable. &lt;/p&gt;</comment>
                            <comment id="13803184" author="stack" created="Wed, 23 Oct 2013 19:20:13 +0000"  >&lt;p&gt;Perhaps this was incorrectly forward-ported?&lt;/p&gt;</comment>
                            <comment id="13803186" author="vrodionov" created="Wed, 23 Oct 2013 19:21:57 +0000"  >&lt;p&gt;Never mind, I was wrong. The code is correct.&lt;/p&gt;</comment>
                            <comment id="13803203" author="stack" created="Wed, 23 Oct 2013 19:34:35 +0000"  >&lt;p&gt;Do we see the benefit &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zjushch&quot; class=&quot;user-hover&quot; rel=&quot;zjushch&quot;&gt;chunhui shen&lt;/a&gt; talks of?&lt;/p&gt;</comment>
                            <comment id="13803206" author="vrodionov" created="Wed, 23 Oct 2013 19:35:53 +0000"  >&lt;p&gt;Interesting. We check if sought key is inside current block only in &lt;b&gt;AbstractScannerV2.reseekTo&lt;/b&gt;. There are other public methods exposed by HFileScanner and implemented in AbstractScannerV2 : seekTo and seekBefore, which do not check current block and always goes to index. &lt;/p&gt;</comment>
                            <comment id="13803209" author="vrodionov" created="Wed, 23 Oct 2013 19:37:45 +0000"  >&lt;p&gt;Looks like HBase-5987 and related JIRAs need to be reopened. Can somebody go through HFileScanner&apos;s hierarchy and confirm my findings?&lt;/p&gt;</comment>
                            <comment id="13803214" author="vrodionov" created="Wed, 23 Oct 2013 19:40:46 +0000"  >&lt;p&gt;I think that  &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5987&quot; title=&quot;HFileBlockIndex improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5987&quot;&gt;&lt;del&gt;HBASE-5987&lt;/del&gt;&lt;/a&gt; does not work in 0.94 and trunk. This is why we are doing all this scanners hints and optimizations.&lt;/p&gt;</comment>
                            <comment id="13803317" author="stack" created="Wed, 23 Oct 2013 20:58:42 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5987&quot; title=&quot;HFileBlockIndex improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5987&quot;&gt;&lt;del&gt;HBASE-5987&lt;/del&gt;&lt;/a&gt; was forward-ported as &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6032&quot; title=&quot;Port HFileBlockIndex improvement from HBASE-5987&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6032&quot;&gt;&lt;del&gt;HBASE-6032&lt;/del&gt;&lt;/a&gt;  I reopened it.&lt;/p&gt;</comment>
                            <comment id="13803319" author="stack" created="Wed, 23 Oct 2013 20:58:58 +0000"  >&lt;p&gt;Or rather than reopen we should do a new issue.&lt;/p&gt;</comment>
                            <comment id="13804375" author="lhofhansl" created="Thu, 24 Oct 2013 16:39:29 +0000"  >&lt;p&gt;Let&apos;s do a new issue. &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5987&quot; title=&quot;HFileBlockIndex improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5987&quot;&gt;&lt;del&gt;HBASE-5987&lt;/del&gt;&lt;/a&gt; is for reseek only as we know we only scan forward in that case.&lt;br/&gt;
So it looks like &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5987&quot; title=&quot;HFileBlockIndex improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5987&quot;&gt;&lt;del&gt;HBASE-5987&lt;/del&gt;&lt;/a&gt; is working as expected for reseeks.&lt;/p&gt;</comment>
                            <comment id="13804780" author="vrodionov" created="Thu, 24 Oct 2013 22:52:19 +0000"  >&lt;p&gt;Yes, I can confirm that on scan operations  only reseeks are  used and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5987&quot; title=&quot;HFileBlockIndex improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5987&quot;&gt;&lt;del&gt;HBASE-5987&lt;/del&gt;&lt;/a&gt; works in 0.94 upwards. May be there is not much sense in this optimization for seekTo (as since it is for initial scan setup and we need anyway to go through block index)?&lt;/p&gt;</comment>
                            <comment id="13807632" author="stepinto" created="Tue, 29 Oct 2013 03:19:26 +0000"  >&lt;p&gt;Hi folks,&lt;/p&gt;

&lt;p&gt;I&apos;m running into a similar problem (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9811&quot; title=&quot;ColumnPaginationFilter is slow when offset is large&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9811&quot;&gt;HBASE-9811&lt;/a&gt;) and I got some interesting testing figures (in that ticket). Briefly speaking, 1) I get similar improvement when replace SEEK_NEXT_COL with SKIP and 2) the performance drops greatly as we get more HFiles. So did your test case use only 1 HFile, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vrodionov&quot; class=&quot;user-hover&quot; rel=&quot;vrodionov&quot;&gt;Vladimir Rodionov&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="13807637" author="vrodionov" created="Tue, 29 Oct 2013 03:33:45 +0000"  >&lt;p&gt;Yes, its 1 HFile and all data was cached in block cache.&lt;/p&gt;</comment>
                            <comment id="14347688" author="lhofhansl" created="Wed, 4 Mar 2015 22:26:50 +0000"  >&lt;p&gt;This should be fixed now in a general way with &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13109&quot; title=&quot;Make better SEEK vs SKIP decisions during scanning&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13109&quot;&gt;&lt;del&gt;HBASE-13109&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
Feel free to reopen if that is not the case.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12777756">HBASE-13109</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12608639" name="9769-0.94-sample.txt" size="1326" author="lhofhansl" created="Wed, 16 Oct 2013 02:36:59 +0000"/>
                            <attachment id="12608640" name="9769-0.94-sample1.txt" size="1326" author="lhofhansl" created="Wed, 16 Oct 2013 02:45:38 +0000"/>
                            <attachment id="12608653" name="9769-0.94-sample2.txt" size="885" author="lhofhansl" created="Wed, 16 Oct 2013 04:35:08 +0000"/>
                            <attachment id="12608773" name="9769-94-v2.txt" size="9400" author="vrodionov" created="Wed, 16 Oct 2013 18:40:44 +0000"/>
                            <attachment id="12608657" name="9769-94.txt" size="9180" author="vrodionov" created="Wed, 16 Oct 2013 04:52:04 +0000"/>
                            <attachment id="12608840" name="9769-trunk-v1.txt" size="8632" author="vrodionov" created="Wed, 16 Oct 2013 23:56:25 +0000"/>
                            <attachment id="12609076" name="9769-trunk-v2.txt" size="12550" author="vrodionov" created="Fri, 18 Oct 2013 01:26:01 +0000"/>
                            <attachment id="12609092" name="9769-trunk-v3.txt" size="12943" author="vrodionov" created="Fri, 18 Oct 2013 04:31:31 +0000"/>
                            <attachment id="12609099" name="9769-trunk-v4.txt" size="12256" author="vrodionov" created="Fri, 18 Oct 2013 06:06:27 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 15 Oct 2013 18:51:33 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>353571</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 39 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1oyj3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>353863</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>The feature allows to improve performance of scan operations when table rows are small/medium size and scan operation contains explicit set of column:qualifiers to filter on. By default, the feature is disabled. To enable it set Scan.HINT_NARROW_ROWS attribute of Scan object instance:&lt;br/&gt;
Scan scan = ...&lt;br/&gt;
scan.setAttribute(Scan.HINT_NARROW_ROWS, Bytes.toBytes(Boolean.TRUE));&lt;br/&gt;
&lt;br/&gt;
The performance improvement depends on a average row size. The smaller rows are - the larger performance improvement is.  </customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>