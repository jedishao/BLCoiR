<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 15:48:37 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-2332/HBASE-2332.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-2332] Remove client-exposed row locks from region server</title>
                <link>https://issues.apache.org/jira/browse/HBASE-2332</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Discussion in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2294&quot; title=&quot;Enumerate ACID properties of HBase in a well defined spec&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2294&quot;&gt;&lt;del&gt;HBASE-2294&lt;/del&gt;&lt;/a&gt; has surfaced that the client-exposed row lock feature in the HBase API may not be scalable/necessary. Additionally there are some benefits we can reap by removing the feature (or pushing it into the client).&lt;/p&gt;</description>
                <environment></environment>
        <key id="12459332">HBASE-2332</key>
            <summary>Remove client-exposed row locks from region server</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="tlipcon">Todd Lipcon</reporter>
                        <labels>
                    </labels>
                <created>Tue, 16 Mar 2010 22:31:18 +0000</created>
                <updated>Tue, 14 May 2013 02:22:36 +0000</updated>
                            <resolved>Sun, 20 Jan 2013 00:11:18 +0000</resolved>
                                                                    <component>Client</component>
                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="12846186" author="tlipcon" created="Tue, 16 Mar 2010 22:40:54 +0000"  >&lt;p&gt;To summarize some of the thoughts from the other JIRA (plus some conversation Ryan and I have been having):&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Row locks provided by HBase are not very scalable, since clients blocked on locks tie up valuable regionserver threads.&lt;/li&gt;
	&lt;li&gt;Row locks may not be correct in the current implementation, since they aren&apos;t logged in the HLog and thus don&apos;t survive region failover&lt;/li&gt;
	&lt;li&gt;We provide a compare-and-swap primitive, which is sufficient to achieve the same effect as row locks from the client side (using a spin lock pattern)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We&apos;ll still need row locking internally to achieve atomic operations (see &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2294&quot; title=&quot;Enumerate ACID properties of HBase in a well defined spec&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2294&quot;&gt;&lt;del&gt;HBASE-2294&lt;/del&gt;&lt;/a&gt; for more details). However, these should be a private implementation detail.&lt;/p&gt;

&lt;p&gt;Some benefits we can get by dropping the external exposure of the row locks:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The guarantees determined in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2294&quot; title=&quot;Enumerate ACID properties of HBase in a well defined spec&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2294&quot;&gt;&lt;del&gt;HBASE-2294&lt;/del&gt;&lt;/a&gt; may be achievable through more efficient means - eg lock free data structures, MVCC, etc.&lt;/li&gt;
	&lt;li&gt;Externally exposed row locks add complexity both to implementation and APIs (eg being able to specify an existing row lock id to other mutations)&lt;/li&gt;
	&lt;li&gt;Though we still need internal row locks, we can most likely get away with multiplexing multiple rows to a single lock. For example, we can have a few hundred locks in an array, then hash rows onto that array. Since internal locks are only held very shortly (enough time to mutate the memstore and sync), and only one row at a time, this should be safe and more memory-efficient.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If the row lock API is deemed important for users, we can implement it client-side using the CAS pattern. To make it more efficient, we could add a signaling mechanism - more details on this in the future if it comes up.&lt;/p&gt;</comment>
                            <comment id="12846255" author="apurtell" created="Wed, 17 Mar 2010 02:12:55 +0000"  >&lt;p&gt;Emulation of current row lock API with CAS is fine, but we do need something. For example today I needed an incrementColumnValue op that always adjusts timestamp. ICV won&apos;t modify timestamps while the value is in memstore. So I just used a get and put within a rowlock instead. &lt;/p&gt;</comment>
                            <comment id="12849029" author="tlipcon" created="Wed, 24 Mar 2010 02:29:44 +0000"  >&lt;p&gt;Another idea here suggested by a coworker of mine is to make row locks advisory, similar to flock(2). These locks would be entirely decoupled from the internal row locks used by HBase - that is to say, they wouldn&apos;t block other clients from doing mutations, unless the other clients were also taking locks on these rows.&lt;/p&gt;

&lt;p&gt;We could even offer shared/exclusive locks if we wanted to get fancy here &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12849059" author="jdcryans" created="Wed, 24 Mar 2010 05:32:06 +0000"  >&lt;blockquote&gt;&lt;p&gt;they wouldn&apos;t block other clients from doing mutations, unless the other clients were also taking locks on these rows.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s what I had in mind when I commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2294&quot; title=&quot;Enumerate ACID properties of HBase in a well defined spec&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2294&quot;&gt;&lt;del&gt;HBASE-2294&lt;/del&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&amp;lt;crazyidea&amp;gt;If we remove row locks from core HBase, maybe we should still support them at the HTable level but by using ZK directly instead of contacting region servers.&amp;lt;/crazyidea&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So it would be strictly between the clients and a coordinator like zookeeper, not involving the RS side at all.&lt;/p&gt;</comment>
                            <comment id="12849062" author="tlipcon" created="Wed, 24 Mar 2010 05:39:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;So it would be strictly between the clients and a coordinator like zookeeper, not involving the RS side at all.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think my response to that comment still applies - the locking has to be located at the storage layer to be useful (otherwise you don&apos;t know if you will still have the ZK lock by the time your mutation hits the RS).&lt;/p&gt;

&lt;p&gt;One thought is that we would provide the locking as an optional flag on single-row mutations - ie I can advisory-lock a row, and then do a get/put on that row with a flag that says &quot;only succeed this put if I still own the lock on the row.&quot; So the use case of &quot;lock, get, put, unlock&quot; is still possible, assuming all users of the row are using this API. We can just skip providing this API for bulk puts due to the issues raised in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2353?focusedCommentId=12849009&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#action_12849009&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;this comment&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12849226" author="streamy" created="Wed, 24 Mar 2010 15:36:57 +0000"  >&lt;p&gt;+1  I like the idea of retaining some type of client-exposed lock, but making them work so that they only work in conjunction with other client locks of the same type.&lt;/p&gt;</comment>
                            <comment id="12867032" author="stack" created="Thu, 13 May 2010 04:42:09 +0000"  >&lt;p&gt;Moved from 0.21 to 0.22 just after merge of old 0.20 branch into TRUNK.&lt;/p&gt;</comment>
                            <comment id="12869946" author="mwdalton" created="Fri, 21 May 2010 11:13:08 +0000"  >&lt;p&gt;One issue with implementing row locks client-side with CAS is that row locks have leases. So if a client holds a lock, blocks for some reason (swapping, etc) that is taking an indeterminate amount of time, and then loses its lock lease, the next lock holder is guaranteed that all future actions taken by the previous holder using the expired lock will fail. This is very useful when performing rename-type operations (e.g., moving a value from row A to row B) where you want the deletion of the source and the creation of the destination value to appear atomic (and you must recover from mid-rename failures). I currently use row locks for a few rename-style operations, and rename-failure-recovery.&lt;/p&gt;

&lt;p&gt;This could be emulated in CAS by requiring each row to hold a generation count or some equivalent, and then incrementing a generation count using CAS every time the row is mutated as a form of optimistic concurrency control. However, this would require each row to maintain persistent generation counts even for deleted rows in the general case, causing deleted rows to consume storage space. &lt;/p&gt;

&lt;p&gt;Is there an objection to just making row lock acquisition non-blocking and implementing all the blocking/retry/backoff client-side? This should be backwards compatible with existing APIs. I&apos;ve started work on this at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2584&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;HBASE-2584&lt;/a&gt;. If there is interest I would expand further on the patch as needed. Otherwise, advisory locks will solve the generation count issue I outlined above, at least for all of my needs, as long as they use leases and that  they ensure all operations performed using a lease-expired lock automatically fail. &lt;/p&gt;
</comment>
                            <comment id="12870055" author="tlipcon" created="Fri, 21 May 2010 17:03:36 +0000"  >&lt;blockquote&gt;&lt;p&gt;So if a client holds a lock, blocks for some reason (swapping, etc) that is taking an indeterminate amount of time, and then loses its lock lease, the next lock holder is guaranteed that all future actions taken by the previous holder using the expired lock will fail&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Only on that particular row, though, since the leases are per-regionserver.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is there an objection to just making row lock acquisition non-blocking and implementing all the blocking/retry/backoff client-side?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I definitely agree that this solves much of the scalability issue. Some of the other issues above still remain, though - for example, we don&apos;t currently persist lock acquisition/release in the HLog, so if the region moves to a new server, everyone loses their locks.&lt;/p&gt;


&lt;p&gt;Regarding the use case of moving rows, what does your lock based algorithm look like? Will it proceed correctly in the case of RS failure, loss of lease at arbitrary points, and failure of client?&lt;/p&gt;</comment>
                            <comment id="12870199" author="mwdalton" created="Fri, 21 May 2010 22:23:24 +0000"  >&lt;p&gt;Here&apos;s a rough sketch of the algorithm, sorry if it&apos;s a bit verbose. I take into account that row locks are per-RS. To give you a quick overview, we support reading, updating, and renaming a value V in a row. Renames move value V from one row to another. All reads occur without row locks (unless a rename failure occurs), and all updates (put/delete), which only affect a single row, use HBase CAS. The only situation where I need locking is to deal with renames and rename failure recovery. I need rename to appear to be atomic from the client&apos;s perspective, but I can perform rename failure recovery so long as it appears transparent.&lt;/p&gt;

&lt;p&gt;Rename of value V from row A to row B is accomplished with 5 steps: (1) acquire row locks on A and B in row key order (so that a deadly embrace does not occur where another client locks B and then A) (2) Update value V in row A using CAS with V~src~ which marks V as a rename source and includes the row key of B as the destination (3) Update B using CAS (using an empty value as the comparison value) with a modified copy of V, V~dst~, which marks B as the destination(and includes A&apos;s row key as source) (4) Delete V from Row A (5) Put original value V in Row B (this time not marked as a rename source or destination, just the exact original bytes). In steps 2-5, each of the CAS, Delete, and Put operations uses the appropriate row lock, so row lock A is used for any modifications to row A.&lt;/p&gt;

&lt;p&gt;At any one of these 5 steps row locks may be lost or the machine performing the rename may die. This will leave one or both of the rename source/destination in the &apos;pending rename&apos; state. Thus we must recover from any prefix of the rename operations executed by a failed rename, which occurs when we read a value that is marked as pending rename source (V~src~) or pending rename destination(V~dst~). &lt;br/&gt;
Initial reads occur without locks. However, reads are &lt;em&gt;not&lt;/em&gt; allowed to return &apos;pending rename&apos; values. Updates (Put/Delete) are not affected by renames, as all updates use CAS, and no &apos;read value&apos; operation is permitted to return a &apos;pending rename&apos; value, and thus no update will successfully modify a value marked &apos;pending rename&apos; as the CAS will fail. &lt;/p&gt;

&lt;p&gt;If a pending rename value is encountered, the read must recover from the rename failure. The recovery method acquires locks on A &lt;em&gt;and&lt;/em&gt; B (which it can do because pending values include the row key of the &apos;other&apos; row, i.e. V~src~ includes B&apos;s row key). Then the recovery process performs an undo or redo depending on if V~dst~ was written, undoing if V~dst~ was never written by writing the original value V to row A, and re-doing the rename by re-executing steps (4)-(5) of the rename otherwise. In either case, all modifications are performed with the appropriate row lock. &lt;br/&gt;
The critical benefit locks provide is that once the rename recovery procedure has acquired row locks on A and B, it is guaranteed that the original rename procedure (or previous failed rename recovery procedures) will never &apos;wake up&apos; later and successfully perform mutations related to the failed rename (as their locks will have expired).  I can provide more details about this algorithm in general if the above is unclear.&lt;/p&gt;

&lt;p&gt;This algorithm seems to work correctly given that locks may be lost at any time. If I understand what you said correctly, the major issue is that locks are not persisted in HLog currently. However, the only risk presented by lack of lock persistence is locks may be lost before lease expiration, correct? However, it is still the case that at most one client can lock at a row &amp;#8211; it&apos;s just that a client may lose their lock even before the lease expires due to lack of HLog persistence (and all future operations performed with the &apos;lost&apos; lock will fail).&lt;/p&gt;

&lt;p&gt;I don&apos;t see this as a huge drawback as anyone dealing with a critical section guarded by HBase row locks &lt;em&gt;must&lt;/em&gt; handle the case that locks may be lost because locks have leases that may expire. Thus any critical section may fail at an arbitrary point and complete only a prefix of the operations in the critical section. From a correctness perspective, ensuring that programs transparently handle lock failure due to lease expiration should also address losing locks due to lack of persistence in the HLog. Please correct me if I&apos;m missing something here concerning the HLog durability, or if the effect differs from what I&apos;ve described..&lt;/p&gt;</comment>
                            <comment id="13047564" author="stack" created="Fri, 10 Jun 2011 22:45:51 +0000"  >&lt;p&gt;Moving out of 0.92.0. Pull it back in if you think different.&lt;/p&gt;</comment>
                            <comment id="13047787" author="stack" created="Fri, 10 Jun 2011 23:55:00 +0000"  >&lt;p&gt;Lets get the deprecated flags added at least.&lt;/p&gt;</comment>
                            <comment id="13047790" author="stack" created="Fri, 10 Jun 2011 23:55:56 +0000"  >&lt;p&gt;Scratch that.  Need to be able to point at an alternative before can deprecate.  Moving out of 0.92 again.&lt;/p&gt;</comment>
                            <comment id="13558135" author="stack" created="Sun, 20 Jan 2013 00:11:18 +0000"  >&lt;p&gt;Resolving as duplicate of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7315&quot; title=&quot;Remove support for client-side RowLocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7315&quot;&gt;&lt;del&gt;HBASE-7315&lt;/del&gt;&lt;/a&gt; where rowlocks are removed from the API.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12647433">HBASE-8542</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12623302">HBASE-7315</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 17 Mar 2010 02:12:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32524</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10342"><![CDATA[Incompatible change]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 45 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02emf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11970</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>