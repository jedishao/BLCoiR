<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Thu Dec 01 22:04:06 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-14463/HBASE-14463.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-14463] Severe performance downgrade when parallel reading a single key from BucketCache</title>
                <link>https://issues.apache.org/jira/browse/HBASE-14463</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;We store feature data of online items in HBase, do machine learning on these features, and supply the outputs to our online search engine. In such scenario we will launch hundreds of yarn workers and each worker will read all features of one item(i.e. single rowkey in HBase), so there&apos;ll be heavy parallel reading on a single rowkey.&lt;/p&gt;

&lt;p&gt;We were using LruCache but start to try BucketCache recently to resolve gc issue, and just as titled we have observed severe performance downgrade. After some analytics we found the root cause is the lock in BucketCache#getBlock, as shown below&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
        lockEntry = offsetLock.getLockEntry(bucketEntry.offset());
        &lt;span class=&quot;code-comment&quot;&gt;// ...
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (bucketEntry.equals(backingMap.get(key))) {
          &lt;span class=&quot;code-comment&quot;&gt;// ...
&lt;/span&gt;          &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; len = bucketEntry.getLength();
          Cacheable cachedBlock = ioEngine.read(bucketEntry.offset(), len,
              bucketEntry.deserializerReference(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.deserialiserMap));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since ioEnging.read involves array copy, it&apos;s much more time-costed than the operation in LruCache. And since we&apos;re using synchronized in IdLock#getLockEntry, parallel read dropping on the same bucket would be executed in serial, which causes a really bad performance.&lt;/p&gt;

&lt;p&gt;To resolve the problem, we propose to use ReentranceReadWriteLock in BucketCache, and introduce a new class called IdReadWriteLock to implement it.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12895460">HBASE-14463</key>
            <summary>Severe performance downgrade when parallel reading a single key from BucketCache</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="carp84">Yu Li</assignee>
                                    <reporter username="carp84">Yu Li</reporter>
                        <labels>
                    </labels>
                <created>Tue, 22 Sep 2015 13:48:36 +0000</created>
                <updated>Wed, 25 Nov 2015 03:47:57 +0000</updated>
                            <resolved>Wed, 25 Nov 2015 03:37:48 +0000</resolved>
                                    <version>0.98.14</version>
                    <version>1.1.2</version>
                                    <fixVersion>2.0.0</fixVersion>
                    <fixVersion>1.2.0</fixVersion>
                    <fixVersion>1.3.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>15</watches>
                                                                <comments>
                            <comment id="14902664" author="carp84" created="Tue, 22 Sep 2015 13:52:33 +0000"  >&lt;p&gt;Attaching the initial patch&lt;/p&gt;</comment>
                            <comment id="14902674" author="carp84" created="Tue, 22 Sep 2015 13:58:19 +0000"  >&lt;p&gt;Actually the performance issue also shows in our UT case, say TestBucketCache#testCacheMultiThreadedSingleKey. Times to run this case w/ and w/o patch are as follows:&lt;/p&gt;

&lt;p&gt;w/ IdReadWriteLock and blocksize=16384: 0.172s&lt;br/&gt;
w/ IdLock and blocksize=16384: 19.676s&lt;/p&gt;

&lt;p&gt;Also attach the screenshots of JUnit result&lt;/p&gt;</comment>
                            <comment id="14902688" author="carp84" created="Tue, 22 Sep 2015 14:07:05 +0000"  >&lt;p&gt;rb link here: &lt;a href=&quot;https://reviews.apache.org/r/38626&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/38626&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Will submit the patch to ask HadoopQA to check first.&lt;/p&gt;</comment>
                            <comment id="14902912" author="mbertozzi" created="Tue, 22 Sep 2015 16:31:00 +0000"  >&lt;p&gt;in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13903&quot; title=&quot;Speedup IdLock&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13903&quot;&gt;HBASE-13903&lt;/a&gt; I had a simple perf test for the IdLock.&lt;br/&gt;
I did a try, and on my run looks like the ReadWrite lock has perf close to the patch proposed in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13903&quot; title=&quot;Speedup IdLock&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13903&quot;&gt;HBASE-13903&lt;/a&gt; even when used as &quot;write only&quot; lock.&lt;br/&gt;
&lt;a href=&quot;https://gist.github.com/matteobertozzi/b3ff0ce79eaac8ece446&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gist.github.com/matteobertozzi/b3ff0ce79eaac8ece446&lt;/a&gt;&lt;br/&gt;
so, in my opinion we should also move IdLock to be a Write-only ReadWrite lock. (if others can confirm the perf results)&lt;/p&gt;</comment>
                            <comment id="14902997" author="vrodionov" created="Tue, 22 Sep 2015 17:06:48 +0000"  >&lt;p&gt;You replaced synchronized access with ReentrantReadWriteLock and got 100x perf improvement? Am I missing something else?&lt;/p&gt;</comment>
                            <comment id="14903009" author="mbertozzi" created="Tue, 22 Sep 2015 17:11:47 +0000"  >&lt;p&gt;from what I have seen in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13903&quot; title=&quot;Speedup IdLock&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13903&quot;&gt;HBASE-13903&lt;/a&gt; the main problems was the while() loop ending up with too many calls to map.putIfAbsent()/synchronized to handle the &quot;entry removed&quot; case&lt;/p&gt;</comment>
                            <comment id="14903053" author="hadoopqa" created="Tue, 22 Sep 2015 17:40:17 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12761651/HBASE-14463.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12761651/HBASE-14463.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 45d67435adc9195325bfccc78b7e1a0202a446e5.&lt;br/&gt;
  ATTACHMENT ID: 12761651&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 7 warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1826 checkstyle errors (more than the master&apos;s current 1823 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestReplicationShell&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.TestNodeLabelContainerAllocation.testContainerAllocateWithComplexLabels(TestNodeLabelContainerAllocation.java:293)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15674//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15674//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15674//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15674//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15674//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15674//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Javadoc warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15674//artifact/patchprocess/patchJavadocWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15674//artifact/patchprocess/patchJavadocWarnings.txt&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15674//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15674//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14903062" author="vrodionov" created="Tue, 22 Sep 2015 17:44:00 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mbertozzi&quot; class=&quot;user-hover&quot; rel=&quot;mbertozzi&quot;&gt;Matteo Bertozzi&lt;/a&gt;, yes, that explains incr/append degradation as well. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=carp84&quot; class=&quot;user-hover&quot; rel=&quot;carp84&quot;&gt;Yu Li&lt;/a&gt;, can you test increment performance as well, multithreaded? &lt;/p&gt;</comment>
                            <comment id="14903082" author="carp84" created="Tue, 22 Sep 2015 17:52:31 +0000"  >&lt;p&gt;Thanks for the information about &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13903&quot; title=&quot;Speedup IdLock&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13903&quot;&gt;HBASE-13903&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mbertozzi&quot; class=&quot;user-hover&quot; rel=&quot;mbertozzi&quot;&gt;Matteo Bertozzi&lt;/a&gt;. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Yes, we almost focused on the same code segment, and the phenomenon is similar too. The only difference is that in our case I saw lots of handler waiting for the entry lock to be released(existing.wait) instead of map.putIfAbsent. Below is the jstack I got while encountering the online issue:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;&quot;B.DefaultRpcServer.handler=127,queue=10,port=60020&quot; daemon prio=10 tid=0x00007f7556bda800 nid=0x123b1 in Object.wait() [0x00000000449ae000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:503)
	at org.apache.hadoop.hbase.util.IdLock.getLockEntry(IdLock.java:79)
	- locked &amp;lt;0x000000017e2e0980&amp;gt; (a org.apache.hadoop.hbase.util.IdLock$Entry)
	at org.apache.hadoop.hbase.io.hfile.bucket.BucketCache.getBlock(BucketCache.java:413)
	at org.apache.hadoop.hbase.io.hfile.CombinedBlockCache.getBlock(CombinedBlockCache.java:77)
	at org.apache.hadoop.hbase.io.hfile.HFileReaderV2.readBlock(HFileReaderV2.java:360)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And this is the relative code:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
73    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; ((existing = map.putIfAbsent(entry.id, entry)) != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
74      &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; (existing) {
75        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (existing.isLocked) {
76          ++existing.numWaiters;  &lt;span class=&quot;code-comment&quot;&gt;// Add ourselves to waiters.
&lt;/span&gt;77          &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (existing.isLocked) {
78            &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
79              existing.wait();
80            } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Regarding move IdLock to be a write-only readwrite lock, I thought about using IdReadWriteLock to fully replace IdLock but saw reference from MobFileCache besides BucketCache. I guess it could also benefit since file open/close cost is also expensive but not that sure since I never tried MobFileCache in real env. Also I&apos;m not sure whether we shouldn&apos;t evict the block while still having threads reading it, if so I guess we still need read+write lock. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jingcheng.du%40intel.com&quot; class=&quot;user-hover&quot; rel=&quot;jingcheng.du@intel.com&quot;&gt;Jingcheng Du&lt;/a&gt; could you give some comments here about the MobFileCache case?&lt;/p&gt;</comment>
                            <comment id="14903083" author="stack" created="Tue, 22 Sep 2015 17:52:49 +0000"  >&lt;blockquote&gt;&lt;p&gt;...that explains incr/append degradation as well.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You talking &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14460&quot; title=&quot;[Perf Regression] Merge of MVCC and SequenceId (HBASE-8763) slowed Increments, CheckAndPuts, batch operations&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14460&quot;&gt;&lt;del&gt;HBASE-14460&lt;/del&gt;&lt;/a&gt; here &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vrodionov&quot; class=&quot;user-hover&quot; rel=&quot;vrodionov&quot;&gt;Vladimir Rodionov&lt;/a&gt; ? Thanks.&lt;/p&gt;</comment>
                            <comment id="14903107" author="vrodionov" created="Tue, 22 Sep 2015 18:00:18 +0000"  >&lt;p&gt;No. it is different, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14460&quot; title=&quot;[Perf Regression] Merge of MVCC and SequenceId (HBASE-8763) slowed Increments, CheckAndPuts, batch operations&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14460&quot;&gt;&lt;del&gt;HBASE-14460&lt;/del&gt;&lt;/a&gt; is about mvcc contention, this one is about IdLock contention. Both should be fixed.&lt;/p&gt;</comment>
                            <comment id="14903132" author="carp84" created="Tue, 22 Sep 2015 18:10:14 +0000"  >&lt;p&gt;Sorry but could you further clarify your thought &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vrodionov&quot; class=&quot;user-hover&quot; rel=&quot;vrodionov&quot;&gt;Vladimir Rodionov&lt;/a&gt;? I didn&apos;t quite catch you about the &lt;em&gt;inc/append&lt;/em&gt; part. The issue here exists in BlockCache(BucketCache) and there shouldn&apos;t be any inc/append involved based on my understanding&lt;/p&gt;

&lt;p&gt;Regarding the 100X perf enhancement, I didn&apos;t see as much enhancement in 0.98, but that&apos;s the testing result for trunk on my env. I tried 5 times for each case(IdLock/IdReadWriteLock) with TestBucketCache and got very similar result, so should be no occasional. In theory for read it&apos;s like serial v.s. parallel on race condition, so I think the enhancement is kind of expected.&lt;/p&gt;</comment>
                            <comment id="14903173" author="vrodionov" created="Tue, 22 Sep 2015 18:34:32 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Sorry but could you further clarify your thought Vladimir Rodionov&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The same IdLock is used in HFileReaderImpl.readBlock. We lock before accessing block cache. Multiple threads competing for block access on a read path is usual for incr/append, I presume. If counters are global.&lt;/p&gt;</comment>
                            <comment id="14903301" author="carp84" created="Tue, 22 Sep 2015 19:38:47 +0000"  >&lt;p&gt;Ok, got your point now. And yes, will check the incr/append performance when got the patch and UT done. Will also check whether could get some data from online, thanks for the reminder.&lt;/p&gt;</comment>
                            <comment id="14903489" author="jingcheng.du@intel.com" created="Tue, 22 Sep 2015 21:37:52 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=carp84&quot; class=&quot;user-hover&quot; rel=&quot;carp84&quot;&gt;Yu Li&lt;/a&gt;!&lt;br/&gt;
We have two places to use IdLock in mob, MobFileCache and HMobStore, where IdLock is used as a write lock. If the performance of IdReadWriteLock can be improved in write mode, I think you can use IdReadWriteLock in mob as well.&lt;br/&gt;
In MobFileCache, the evict is not to evict blocks from the cache, we just evict the un-referenced file reader from the cache. It&apos;s ok to evict when reading.&lt;br/&gt;
Besides, you remove the loop in getLockEntry, and remove sync from both getLockEntry and releaseLockEntry, what if a race condition in these methods of IdReadWriteLock, a thread acquires a write lock but it is removed from the map by another thread because of a race condition(the code &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;entry.readWriteLock.hasQueuedThreads()&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; and &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; removeSucceed = map.remove(entry.id, entry)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; in releaseLockEntry give the race condition a chance). It is possible, right?&lt;/p&gt;</comment>
                            <comment id="14904023" author="anoop.hbase" created="Wed, 23 Sep 2015 06:12:05 +0000"  >&lt;p&gt;Ya am agreeing with Jingcheng. I dont think we can remove synchronized fully this way.&lt;/p&gt;</comment>
                            <comment id="14905025" author="carp84" created="Wed, 23 Sep 2015 18:48:53 +0000"  >&lt;p&gt;Nice catch! Thanks for point this issue out &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jingcheng.du%40intel.com&quot; class=&quot;user-hover&quot; rel=&quot;jingcheng.du@intel.com&quot;&gt;Jingcheng Du&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; for the detailed explanation in rb.&lt;/p&gt;

&lt;p&gt;Let me think carefully about how to resolve this issue, I tried some methods but still haven&apos;t figured out a good way. Kind of understanding the original while loop there in IdLock now...&lt;/p&gt;</comment>
                            <comment id="14906408" author="carp84" created="Thu, 24 Sep 2015 14:26:04 +0000"  >&lt;p&gt;Upload v2 patch in sync with rb, addressing several review comments&lt;/p&gt;</comment>
                            <comment id="14906411" author="carp84" created="Thu, 24 Sep 2015 14:30:20 +0000"  >&lt;p&gt;Upload v3 patch to resolve the lock leak issue pointed by &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jingchengdu&quot; class=&quot;user-hover&quot; rel=&quot;jingchengdu&quot;&gt;JingchengDu&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, in sync with rb&lt;/p&gt;

&lt;p&gt;Time to run TestBucketCache#testCacheMultiThreadedSingleKey with the new implementation compared with old ones (also attached the JUnit screenshot):&lt;/p&gt;

&lt;p&gt;w/ IdLock with blocksize=16384: 19.676s&lt;br/&gt;
w/ IdReadWriteLock-old with blocksize=16384: 0.172s&lt;br/&gt;
w/ IdReadWriteLock-new with blocksize=16384: 0.318s&lt;/p&gt;</comment>
                            <comment id="14906663" author="hadoopqa" created="Thu, 24 Sep 2015 17:11:00 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12762157/HBASE-14463_v2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12762157/HBASE-14463_v2.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 5b7894f92ba3e9ff700da1e9194ebb4774d8b71e.&lt;br/&gt;
  ATTACHMENT ID: 12762157&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1807 checkstyle errors (more than the master&apos;s current 1805 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): &lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15719//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15719//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15719//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15719//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15719//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15719//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15719//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15719//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14906726" author="hadoopqa" created="Thu, 24 Sep 2015 17:48:47 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12762158/HBASE-14463_v3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12762158/HBASE-14463_v3.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 5b7894f92ba3e9ff700da1e9194ebb4774d8b71e.&lt;br/&gt;
  ATTACHMENT ID: 12762158&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1807 checkstyle errors (more than the master&apos;s current 1805 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15720//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15720//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15720//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15720//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15720//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15720//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15720//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15720//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14906813" author="carp84" created="Thu, 24 Sep 2015 18:47:18 +0000"  >&lt;p&gt;v4 patch resolves checkstyle issue reported by HadoopQA&lt;/p&gt;</comment>
                            <comment id="14907159" author="hadoopqa" created="Thu, 24 Sep 2015 22:31:35 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12762205/HBASE-14463_v4.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12762205/HBASE-14463_v4.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 20ed465d07ba02c66d8f1af5746ee59dd446cb95.&lt;br/&gt;
  ATTACHMENT ID: 12762205&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 2 zombie test(s): &lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15725//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15725//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15725//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15725//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15725//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15725//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15725//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15725//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14907492" author="ikeda" created="Fri, 25 Sep 2015 03:19:18 +0000"  >&lt;p&gt;Is it OK that releasing any lock is blocked while someone is blocked to get an unrelated lock?&lt;/p&gt;</comment>
                            <comment id="14907522" author="jingcheng.du@intel.com" created="Fri, 25 Sep 2015 03:50:53 +0000"  >&lt;p&gt;Agree with &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;, the lock acquire in one thread can block the lock release of unrelated threads.&lt;br/&gt;
Maybe we can use different ReentrantReadWriteLocks for different entries? Besides, what is the performance with this patch comparing with the existing code? Thanks!&lt;/p&gt;</comment>
                            <comment id="14908974" author="apurtell" created="Sat, 26 Sep 2015 01:34:40 +0000"  >&lt;p&gt;Bug/perf fix going back to 0.98, updated fix versions&lt;/p&gt;</comment>
                            <comment id="14909617" author="carp84" created="Sun, 27 Sep 2015 06:04:52 +0000"  >&lt;p&gt;I assume the &quot;lock&quot; mentioned above means the &quot;lockOnMap&quot;, right? Notice that it&apos;s the lock on the map recording entries for each block offset in the bucketcache, not the lock inside the entry, and we already use different ReentrantReadWriteLocks for different entries.&lt;/p&gt;

&lt;p&gt;Regarding the lockOnMap, yes you are right that read and write on the map will block each other. However, since cache is a &quot;one write many read&quot; thing, I think the read/write contention is limited. We could see this as a trade off: a little bit more cost when read/write on same block happens but lots of improvement for the parallel read which happens more frequently.&lt;/p&gt;

&lt;p&gt;The lockOnMap is necessary to prevent the lock leak issue you and Anoop mentioned previously. Actually I thought about removing the block-offset-&amp;gt;entry map by maintaining an array of locks for each offset during the buckets instantiation, however, I found this design not that efficient since an initial 64k bucket might change to 128k bucket later if more 128k blocks in need. So I&apos;m afraid we have to take the trade-off here. &lt;/p&gt;

&lt;p&gt;Performance of the exiting code is mentioned in my previous comments, so allow me to simply quote here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Time to run TestBucketCache#testCacheMultiThreadedSingleKey with the new implementation compared with old ones (also attached the JUnit screenshot):&lt;br/&gt;
w/ IdLock with blocksize=16384: 19.676s&lt;br/&gt;
w/ IdReadWriteLock-old with blocksize=16384: 0.172s&lt;br/&gt;
w/ IdReadWriteLock-new with blocksize=16384: 0.318s&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The current TestBucketCache#testCacheMultiThreadedSingleKey case only includes read operation on single key, but after all the discussion here, I&apos;d like to change it adding some write operations, and make sure write less than read.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jingchengdu&quot; class=&quot;user-hover&quot; rel=&quot;jingchengdu&quot;&gt;JingchengDu&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;, feel free to let me know your thoughts. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14909619" author="carp84" created="Sun, 27 Sep 2015 06:10:47 +0000"  >&lt;p&gt;Sure, I actually have one at hand since our online cluster is using 0.98. Will upload the patch when all discussions have a conclusion and patch looks good for everybody. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14909803" author="carp84" created="Sun, 27 Sep 2015 17:38:17 +0000"  >&lt;p&gt;New patch adds an additional thread to evict the single-key block every 10ms in CacheTestUtils#hammerSingleKey to check the performance with read/write contention, and perf number before/after patch are as follows:&lt;/p&gt;

&lt;p&gt;w/ IdLock and blocksize=16k: &lt;font color=&quot;red&quot;&gt;155.836s&lt;/font&gt;&lt;br/&gt;
w/ IdReadWriteLock and blocksize=16k: &lt;font color=&quot;green&quot;&gt;1.162s&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;Refer to the attached junit screenshot for more details.&lt;/p&gt;</comment>
                            <comment id="14909817" author="carp84" created="Sun, 27 Sep 2015 17:52:55 +0000"  >&lt;p&gt;Notice that in this UT case we are evicting a block every 10 &lt;b&gt;milliseconds&lt;/b&gt; to demo the read/write contention, which is the reason of the change on perf number (was 0.318s before adding the block evict thread). But in real world there should be much less read/write contention since BucketCache uses LRU as its eviction algorithm. I&apos;ve also confirmed on my local env that increasing the eviction period (like to 100ms) would bring a much better number (similar to 0.318s, with some deviation in different run)&lt;/p&gt;</comment>
                            <comment id="14909886" author="hadoopqa" created="Sun, 27 Sep 2015 20:43:18 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12762608/HBASE-14463_v5.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12762608/HBASE-14463_v5.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 526520de0a9d7a29fcf1b4c521f017ca75a46cbc.&lt;br/&gt;
  ATTACHMENT ID: 12762608&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 8 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestShell&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestReplicationShell&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.hadoop.mapred.TestFixedLengthInputFormat.testFormatCompressedIn(TestFixedLengthInputFormat.java:90)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15776//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15776//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15776//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15776//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15776//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15776//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15776//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15776//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14909969" author="ikeda" created="Mon, 28 Sep 2015 01:42:41 +0000"  >&lt;p&gt;If you use non-fair mode, it is possible to unexpectedly long wait to lock a write lock when reading is congest so that there is almost always an unrelated thread waiting an unrelated read-lock. But fair mode might unexpectedly block everything and quite reduce performance.&lt;/p&gt;

&lt;p&gt;Lock striping or using some tricks for ConcurrentMap is also applicable, but in this case &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; might help you, which uses weak references. If you prefer Google Guava, you can create your own class using Google Guava&apos;s CacheBuilder.&lt;/p&gt;</comment>
                            <comment id="14910019" author="carp84" created="Mon, 28 Sep 2015 04:20:07 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;Yes I totally understand your concern, that one block eviction will cause blocking on reading another unrelated block. However, as I mentioned before, the blockcache should be a &lt;b&gt;one write many read&lt;/b&gt; thing, or say much more hits than eviction (if not the case, I think it&apos;s recommended to disable blockcache to save the miss and load cost). So I think the cost is acceptable, and the test result with block-evicting thread could prove my statement.&lt;/p&gt;

&lt;p&gt;OTOH, I agree that we could do lock striping for further improvement, but per the above comment I think it&apos;s not that critical w/o such improvements, and I&apos;d prefer to open another JIRA for it instead of blocking this one (Rome was not built in a day, right &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;). Makes sense?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tedyu&quot; class=&quot;user-hover&quot; rel=&quot;tedyu&quot;&gt;Ted Yu&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jingcheng.du%40intel.com&quot; class=&quot;user-hover&quot; rel=&quot;jingcheng.du@intel.com&quot;&gt;Jingcheng Du&lt;/a&gt;, please also let me know your thoughts, thanks.&lt;/p&gt;</comment>
                            <comment id="14910045" author="ikeda" created="Mon, 28 Sep 2015 05:23:32 +0000"  >&lt;p&gt;Sorry I still don&apos;t understand the relation between read/write locks of &lt;tt&gt;lockOnMap&lt;/tt&gt; and &quot;one write many read&quot; block cache. It seems enough to cause contention around &lt;tt&gt;lockOnMap&lt;/tt&gt; by many reading block cache.&lt;/p&gt;</comment>
                            <comment id="14933145" author="carp84" created="Mon, 28 Sep 2015 10:48:49 +0000"  >&lt;p&gt;Sorry, you are right, I thought it in the wrong way...&lt;/p&gt;

&lt;p&gt;I checked your implementation of WeakObjectPool and it should be able to resolve the problem here. I have been thinking of a way to remove the map w/o generating garbage but never thought of using weak reference. Nice work there!&lt;/p&gt;

&lt;p&gt;I checked the performance w/ WeakObjectPool and it looks good (~0.5s with blocksize=16k). Will update the patch in &lt;a href=&quot;https://reviews.apache.org/r/38626/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;rb&lt;/a&gt; and mark this JIRA depending on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14933155" author="carp84" created="Mon, 28 Sep 2015 10:59:02 +0000"  >&lt;p&gt;Mark this JIRA depending on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; since it needs the WeakObjectPool introduced there.&lt;/p&gt;</comment>
                            <comment id="14934819" author="ndimiduk" created="Tue, 29 Sep 2015 08:01:24 +0000"  >&lt;p&gt;Dropping released versions of 1.x for now, we can reassess when the sum of changes necessary are understood.&lt;/p&gt;</comment>
                            <comment id="14935225" author="carp84" created="Tue, 29 Sep 2015 14:14:43 +0000"  >&lt;p&gt;A summary of the recent back and forth discussion and changes:&lt;/p&gt;

&lt;p&gt;Each block in the bucket cache has an offset recording its position in the buckets, and it&apos;s used to get/evict the block from the cache. By design we couldn&apos;t evict a block in read, so we need a lock (in this JIRA we use read write lock to replace synchronize) as the gate-keeper for each offset, and such offset-&amp;gt;lock pair (i.e. &quot;entry&quot;) are stored in a hash map.&lt;/p&gt;

&lt;p&gt;To avoid garbages, efforts are paid to remove the entry from the map when it&apos;s our of usage, but after removing synchronized block the original patch introduced a lock leak issue. Patch v3~v5 tried to resolve the problem but either with performance issue or went in the wrong way.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://reviews.apache.org/r/38626/diff/10#index_header&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;latest patch in rb&lt;/a&gt; (not attached here since it depends on some non-committed code) resolved the lock leak problem by saving the remove action instead of dealing with synchronization on it. It uses WeakObjectPool introduced in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; which utilizes weak reference object to let system gc clear the non-used entries automatically, meantime making sure lock in use won&apos;t got removed (gc won&apos;t clear object with strong reference). This should be a complete solution to the only issue left here, and I think the patch is ready to go after &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; got in&lt;/p&gt;

&lt;p&gt;Let me know if different thoughts, thanks.&lt;/p&gt;</comment>
                            <comment id="14954710" author="carp84" created="Tue, 13 Oct 2015 09:33:54 +0000"  >&lt;p&gt;Latest patch taking usage of WeakObjectPool introduced by &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt;. Since &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; is committed, let&apos;s see what HadoopQA says with this patch&lt;/p&gt;</comment>
                            <comment id="14954859" author="hadoopqa" created="Tue, 13 Oct 2015 12:41:16 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12766296/HBASE-14463_v11.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12766296/HBASE-14463_v11.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 657078b353f215ab02ff7ac2b449006090c0c971.&lt;br/&gt;
  ATTACHMENT ID: 12766296&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 8 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 2 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.cxf.systest.ws.addr_wsdl.AddNumberImpl.execute(AddNumberImpl.java:53)&lt;br/&gt;
	at org.apache.cxf.systest.ws.addr_wsdl.AddNumberImpl.addNumbers(AddNumberImpl.java:39)&lt;br/&gt;
	at org.apache.cxf.systest.ws.addr_wsdl.AddNumberImpl.execute(AddNumberImpl.java:53)&lt;br/&gt;
	at org.apache.cxf.systest.ws.addr_wsdl.AddNumberImpl.addNumbers(AddNumberImpl.java:39)&lt;br/&gt;
	at org.apache.cxf.systest.ws.addr_wsdl.jaxwsmm.WSDLAddrPolicyAttachmentJaxwsMMProviderTest.testUsingAddressing(WSDLAddrPolicyAttachmentJaxwsMMProviderTest.java:117)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15984//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15984//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15984//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15984//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15984//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15984//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Javadoc warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15984//artifact/patchprocess/patchJavadocWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15984//artifact/patchprocess/patchJavadocWarnings.txt&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15984//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15984//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14954978" author="stack" created="Tue, 13 Oct 2015 14:06:30 +0000"  >&lt;p&gt;Thanks for doing up the summary &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=carp84&quot; class=&quot;user-hover&quot; rel=&quot;carp84&quot;&gt;Yu Li&lt;/a&gt; Helps those of us trying to follow along.&lt;/p&gt;</comment>
                            <comment id="14955583" author="apurtell" created="Tue, 13 Oct 2015 20:31:00 +0000"  >&lt;p&gt;Check the javadoc warnings, otherwise the precommit result is good - the reported zombie is a false alarm.&lt;/p&gt;</comment>
                            <comment id="14956941" author="hadoopqa" created="Wed, 14 Oct 2015 13:31:44 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12766510/HBASE-14463_v12.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12766510/HBASE-14463_v12.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 94bfe909aff9fd74cb1a5d0c3f9209a19704c6cf.&lt;br/&gt;
  ATTACHMENT ID: 12766510&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 8 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.reef.io.network.NetworkServiceTest.testMessagingNetworkServiceRate(NetworkServiceTest.java:195)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16004//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16004//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16004//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16004//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16004//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16004//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Javadoc warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16004//artifact/patchprocess/patchJavadocWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16004//artifact/patchprocess/patchJavadocWarnings.txt&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16004//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16004//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14956993" author="carp84" created="Wed, 14 Oct 2015 14:11:14 +0000"  >&lt;p&gt;The left javadoc warning is introduced by &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; and have just uploaded an addendum patch to fix it there.&lt;/p&gt;</comment>
                            <comment id="14959497" author="yuzhihong@gmail.com" created="Thu, 15 Oct 2015 19:48:26 +0000"  >&lt;p&gt;Since the latest patch is quite different from initial patch, mind re-doing cluster testing to show the benefit ?&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="14960065" author="carp84" created="Fri, 16 Oct 2015 02:43:26 +0000"  >&lt;p&gt;Affter applying the changes to CacheTestUtils (add a thread to periodically evict and recache the block) and TestBucketCache (double parallel thread number and total queries number), perf number with IdLock and latest IdReadWriteLock are as follows:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;200 threads and 20,000 queries in total reading a single key

w/ IdLock and blocksize=16K: 35.597s
w/ IdReadWriteLock and blocksize=16K: 0.212s
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Attached is the screenshot of relative JUnit result&lt;/p&gt;</comment>
                            <comment id="14963209" author="carp84" created="Mon, 19 Oct 2015 12:14:12 +0000"  >&lt;p&gt;Launched several YCSB workloadc testing against a 4 nodes dev cluster with zipfian/hotspot requestdistributio, each round running for around 20 minutes and watch the GC status with VirsualVM, the result shows no memory leak in the new implementation with WeakObjectPool. See the attached screenshot for more details.&lt;/p&gt;</comment>
                            <comment id="14963215" author="carp84" created="Mon, 19 Oct 2015 12:20:22 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; boss, anything more to be addressed or could I get your +1 here? Thanks.&lt;/p&gt;</comment>
                            <comment id="14965431" author="anoop.hbase" created="Tue, 20 Oct 2015 17:34:47 +0000"  >&lt;p&gt;I am doing a cluster testing with this patch&lt;/p&gt;</comment>
                            <comment id="14965679" author="anoop.hbase" created="Tue, 20 Oct 2015 20:19:08 +0000"  >&lt;p&gt;On a single node cluster with 100 GB data.  The whole data is loaded in to off heap bucket cache.&lt;br/&gt;
Doing multi get test with performance evaluation tool. Having 25 client threads.&lt;br/&gt;
The patch slows down the operation a bit.  5% or so.&lt;br/&gt;
The read pattern may be such that different threads requesting for same block is rare.   Still there should not be a slow down.  &lt;/p&gt;</comment>
                            <comment id="14965840" author="lhofhansl" created="Tue, 20 Oct 2015 21:48:23 +0000"  >&lt;p&gt;Bit late to the party. We do have the IdLock in order to only lock the block(s) in question, and not take a &quot;global&quot; lock in a sense. That probably causes the 5% degradation. I&apos;d assume that&apos;d be worse if we only hit random blocks &lt;em&gt;and&lt;/em&gt; we have to load the blocks.&lt;/p&gt;

&lt;p&gt;On first blush this does not strike as the right solution.&lt;/p&gt;

&lt;p&gt;In HFileReaderXXX we do double-checked locking in order to avoid taking the lock completely when the block is already cached. Can we do something this that here?&lt;/p&gt;</comment>
                            <comment id="14965843" author="lhofhansl" created="Tue, 20 Oct 2015 21:51:52 +0000"  >&lt;p&gt;Never mind. Looked at the patch again - should have taken a closer look before I sent the previous. Looks good.&lt;/p&gt;</comment>
                            <comment id="14965848" author="lhofhansl" created="Tue, 20 Oct 2015 21:57:07 +0000"  >&lt;p&gt;Curious: What&apos;s the penalty of not having the lockPool? Past experiences taught me that these things will never be sized right. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14966356" author="ram_krish" created="Wed, 21 Oct 2015 07:22:40 +0000"  >&lt;p&gt;If we try hitting the same block over and over will it have different type of behaviour?  I doubt no. May be worth checking where is the actual time spent here. With 50 threads and default PE data size the with patch case is performing lesser. May be more the threads there is a time it has for clearing the weak references?&lt;/p&gt;</comment>
                            <comment id="14966389" author="jingcheng.du@intel.com" created="Wed, 21 Oct 2015 07:48:48 +0000"  >&lt;p&gt;It uses the WeakObjectPool, the lock can be collected by gc very fast if threads don&apos;t request the same lock. In acquireLock it has to purges the null reference from the pool every time. Maybe this slow down the performance.&lt;br/&gt;
Could we just add some threshold to the purge method, for example if the cached objects are larger than a threshold, we purge, otherwise, we don&apos;t. We can add such things to WeakObjectPool I think.&lt;/p&gt;</comment>
                            <comment id="14966410" author="ikeda" created="Wed, 21 Oct 2015 08:09:37 +0000"  >&lt;p&gt;I rather worry about using ReadWriteLock, which is heavier than simple Lock and there might be always trade-off.&lt;/p&gt;</comment>
                            <comment id="14966438" author="carp84" created="Wed, 21 Oct 2015 08:32:16 +0000"  >&lt;p&gt;Thanks all for taking a look here.&lt;/p&gt;

&lt;p&gt;Was trying to reproduce &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;/&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;&apos;s result and do some investigation but met with some problem, such as jvm crash during data ingestion with PE (haven&apos;t file any JIRA since not sure whether it&apos;s an env-specific issue) and AssertionError during multi get testing (see &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14660&quot; title=&quot;AssertionError found when using offheap BucketCache with assertion enabled&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14660&quot;&gt;&lt;del&gt;HBASE-14660&lt;/del&gt;&lt;/a&gt;). Now I could get the test run after disabling assertion and will do further debugging, will update my findings later.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jingcheng.du%40intel.com&quot; class=&quot;user-hover&quot; rel=&quot;jingcheng.du@intel.com&quot;&gt;Jingcheng Du&lt;/a&gt; I also doubt about the purge call slows down the performance, will add some threshold there and check the perf comparison. Thanks for point it out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; we need to store the lock(entry) somewhere and using lockPool is for reducing lock contention. I think the idea of using weak reference is good but lack of some perf testing here before. Or any better idea please let me know &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14966644" author="anoop.hbase" created="Wed, 21 Oct 2015 11:16:40 +0000"  >&lt;p&gt;The micro benchmark numbers you mentioned above -  That is in trunk code base?  Also in that test all threads try to read same key.  Can you test with diff cases like all try to read diff keys or a set of diff keys and change this set size and repeat the tests.&lt;/p&gt;

&lt;p&gt;In description u said&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Since ioEnging.read involves array copy, it&apos;s much more time-costed than the operation in LruCache. And since we&apos;re using synchronized in IdLock#getLockEntry, parallel read dropping on the same bucket would be executed in serial, which causes a really bad performance.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In trunk this is no longer true. We will not do any copy of the bucketed data into new buffer. We will just create a wrapper data structure across 1 or more ByteBuffers.&lt;/p&gt;</comment>
                            <comment id="14968374" author="carp84" created="Thu, 22 Oct 2015 02:07:07 +0000"  >&lt;blockquote&gt;
&lt;p&gt;The micro benchmark numbers you mentioned above - That is in trunk code base?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, it&apos;s the result of TestBucketCache#testCacheMultiThreadedSingleKey, in trunk code base.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In trunk this is no longer true&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Agree, but UT shows the change from IdLock to IdReadWriteLock still benifits&lt;/p&gt;

&lt;p&gt;Regarding the PE result, I tried to reproduce it on my local, also with 100GB data and multi get with 25 threads, cmdline like:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;bin/hbase org.apache.hadoop.hbase.PerformanceEvaluation --nomapred --multiGet=20 randomRead 25
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Each case for 3 times and get the average result to limit the deviation. And here is the result:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;before patch:
Min: 102832ms   Max: 103637ms   Avg: 103394ms
Min: 101003ms   Max: 101836ms   Avg: 101564ms
Min: 101464ms   Max: 102498ms   Avg: 102254ms
Average: 102404ms

after v12 patch:
Min: 99542ms    Max: 100141ms   Avg: 99932ms
Min: 102927ms   Max: 103863ms   Avg: 103580ms
Min: 104310ms   Max: 104880ms   Avg: 104683ms
Average: 102731ms

with slow purge (when lockPool size reach 500):
Min: 100144ms   Max: 101144ms   Avg: 100871ms
Min: 103764ms   Max: 104588ms   Avg: 104350ms
Min: 101310ms   Max: 102244ms   Avg: 102010ms
Average: 102410ms
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;From which I could see a bigger stddev after patch but similar average. Refer to the attached PE output for more details.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, is my testing the same as yours? Any difference or maybe you just ran once for each case and it happened to be best case w/o patch and worst w/ patch? Just let me know your thoughts, thanks.&lt;/p&gt;</comment>
                            <comment id="14968686" author="anoop.hbase" created="Thu, 22 Oct 2015 07:23:07 +0000"  >&lt;p&gt;I tried with multi get only but with --multiGet=100.  That is the only diff..   Yes I also did the test 4 times and taken the avg.&lt;/p&gt;</comment>
                            <comment id="14969211" author="carp84" created="Thu, 22 Oct 2015 14:14:43 +0000"  >&lt;p&gt;Checked multi get with --multiGet=100, and checked both 25 threads and 50 threads, results are as follows:&lt;/p&gt;

&lt;p&gt;25threads:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;w/o patch:
1. Min: 94303ms    Max: 94853ms    Avg: 94651ms
2. Min: 92547ms    Max: 93140ms    Avg: 92934ms
3. Min: 90562ms    Max: 91374ms    Avg: 91168ms
Average: 92917.67ms

w/ patch:
1. Min: 94026ms    Max: 94631ms    Avg: 94417ms
2. Min: 94086ms    Max: 94850ms    Avg: 94643ms
3. Min: 95041ms    Max: 95585ms    Avg: 95371ms
Average: 94810ms

with slow purge(lock pool size reach 5000):
1. Min: 94699ms    Max: 95276ms    Avg: 95031ms
2. Min: 97087ms    Max: 98106ms    Avg: 97871ms
3. Min: 93804ms    Max: 94743ms    Avg: 94519ms
Average: 95807ms
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;From which we could see there&apos;s indeed a ~2% downgrade w/ patch, and slow purge (only purge lockPool when its size reaches 5000) didn&apos;t bring any improvement&lt;/p&gt;

&lt;p&gt;However, with 50 threads:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;w/o patch
1. Min: 195573ms   Max: 199973ms   Avg: 199016ms
2. Min: 191126ms   Max: 194468ms   Avg: 193592ms
3. Min: 195415ms   Max: 198985ms   Avg: 198133ms
Average: 196913.67

w/ patch:
1. Min: 199279ms   Max: 202442ms   Avg: 201607ms
2. Min: 191189ms   Max: 194442ms   Avg: 193626ms
3. Min: 190235ms   Max: 193817ms   Avg: 192996ms
Average: 196076.33ms
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I got a better result w/ patch.&lt;/p&gt;

&lt;p&gt;Now my suspicion is the different distribution of chosen keys makes different result, so I&apos;m planning to test the 2 cases (w/ and w/o patch) with exactly the same randomly-generated keys and see what will happen&lt;/p&gt;</comment>
                            <comment id="14969691" author="carp84" created="Thu, 22 Oct 2015 19:10:46 +0000"  >&lt;p&gt;After supporting record/load keys for randomReads in PE tool (code changes refer to the attached patch), recheck the performance with --multiGet=100 and 25 threads,  results are as follows:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;w/o patch:
1. Min: 94220ms    Max: 95193ms    Avg: 94826ms
2. Min: 91405ms    Max: 92271ms    Avg: 91955ms
3. Min: 95314ms    Max: 96266ms    Avg: 95946ms
4. Min: 95545ms    Max: 96534ms    Avg: 96208ms
Average: 94733.75ms

w/ patch:
1. Min: 94887ms    Max: 95890ms    Avg: 95561ms
2. Min: 94681ms    Max: 95643ms    Avg: 95285ms
3. Min: 93880ms    Max: 94856ms    Avg: 94514ms
4. Min: 93418ms    Max: 94283ms    Avg: 93981ms
Average: 94835.25ms
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The correlated BucketCache status:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;w/o patch:
1. Hits Caching    18,821,913; Misses Caching  11,595
2. Hits Caching    18,821,913; Misses Caching  11,588
3. Hits Caching    18,821,913; Misses Caching  11,586
4. Hits Caching    18,821,913; Misses Caching  11,587

w/ patch:
1. Hits Caching    18,821,913; Misses Caching  11,586
2. Hits Caching    18,821,913; Misses Caching  11,590
3. Hits Caching    18,821,913; Misses Caching  11,587
4. Hits Caching    18,821,913; Misses Caching  11,588
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could see no more perf downgrade (~0.1%).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jingcheng.du%40intel.com&quot; class=&quot;user-hover&quot; rel=&quot;jingcheng.du@intel.com&quot;&gt;Jingcheng Du&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;, does this latest test result make sense to you? Or any comments? Thanks.&lt;/p&gt;</comment>
                            <comment id="14969712" author="carp84" created="Thu, 22 Oct 2015 19:18:31 +0000"  >&lt;p&gt;Some explanation about how to use the patched PE tool:&lt;/p&gt;

&lt;p&gt;First of all, run the same command as previously to generate the keys:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;bin/hbase org.apache.hadoop.hbase.PerformanceEvaluation --nomapred --multiGet=100 randomRead 25
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The keys will be generated in /tmp/getsForTest (a hard-coded path for now), one per line. Notice: result of this loading round should be excluded&lt;/p&gt;

&lt;p&gt;Then, add &quot;--loadGets&quot; option to the command, which will load the stored keys to form the multi gets&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;bin/hbase org.apache.hadoop.hbase.PerformanceEvaluation --nomapred --multiGet=100 --loadGets randomRead 25
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14970143" author="hadoopqa" created="Fri, 23 Oct 2015 00:01:49 +0000"  >&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12768112/pe_use_same_keys.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12768112/pe_use_same_keys.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 467bc098a9512afca38356da56d92c351f15b042.&lt;br/&gt;
  ATTACHMENT ID: 12768112&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16179//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16179//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16179//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16179//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16179//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16179//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16179//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16179//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14973118" author="carp84" created="Sun, 25 Oct 2015 07:26:28 +0000"  >&lt;p&gt;Ping, any more comments here fellows?&lt;/p&gt;

&lt;p&gt;A summary of testing done:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;For the multi thread reading single key scenario, it&apos;s covered by the existing UT case TestBucketCache#testCacheMultiThreaded. The testing result shows obvious perf improvement with current patch&lt;/li&gt;
	&lt;li&gt;For the more common random read case, with the same query key distribution and testing on one node real cluster, result shows no performance downgrade with current patch&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="14973266" author="yuzhihong@gmail.com" created="Sun, 25 Oct 2015 14:38:09 +0000"  >&lt;p&gt;I think the latest round of performance benchmarking shows acceptable results.&lt;/p&gt;

&lt;p&gt;+1 from me.&lt;/p&gt;</comment>
                            <comment id="14975722" author="ram_krish" created="Tue, 27 Oct 2015 04:45:02 +0000"  >&lt;p&gt;I think if there is no much of a degrade because of the patch then it should be fine. +1 from me too. &lt;/p&gt;</comment>
                            <comment id="14975744" author="anoop.hbase" created="Tue, 27 Oct 2015 05:18:12 +0000"  >&lt;p&gt;I tested it again and still seeing down as mentioned above.. PE tool with multi get and 100GB data..  But I did not do the fixed row keys part as u did for PE tool..  So the tool generates very random RKs..  There might be same keys being requested by 2 threads at same time..  But it is very random...  Why is this much down for that kind of a scenario? Can u measure the perf numbers with the micro benchmark test case where all RKs are different (U did it with all RKs same).. So what I say is the worst case where all RKs are different.&lt;/p&gt;</comment>
                            <comment id="14975824" author="carp84" created="Tue, 27 Oct 2015 06:46:47 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I did not do the fixed row keys part as u did for PE tool&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;well, the &quot;fixed&quot; row keys are also &lt;b&gt;randomly&lt;/b&gt; generated by PE tool, but I just save them to file and use it to test both scenarios to avoid deviations caused by different key distribution. You could regard the change I made to PE tool as: 1. generate very random keys for read query; 2. test cluster w/ and w/o patch; 3. compare the result.&lt;/p&gt;

&lt;p&gt;Notice that even with the same impl, perf number in different run diverges and the gap might be as much as 3~5%, which could prove it well that random key distribution could cause fluctuation in perf number. So the most fair way is to test with the same random keys, agree &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="14975845" author="anoop.hbase" created="Tue, 27 Oct 2015 07:03:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;So the most fair way is to test with the same random keys&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. I can do that tonight..&lt;/p&gt;

&lt;p&gt;Yes with random keys, with run to run there can be different completion time..  That is why with and with out patch doing the run at least 3 times.  So with out patch itself, we get slightly different times. But the deviation in not much..  5% down is a big number IMO.  So wanted to see why we perform poor with the patch. What are the reasons for that.&lt;/p&gt;</comment>
                            <comment id="14975868" author="carp84" created="Tue, 27 Oct 2015 07:14:51 +0000"  >&lt;blockquote&gt;
&lt;p&gt;5% down is a big number IMO. So wanted to see why we perform poor with the patch. What are the reasons for that.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, totally understand, and thanks for the double check here &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;. Will wait for your testing result with the same random keys.&lt;/p&gt;</comment>
                            <comment id="14988355" author="stack" created="Tue, 3 Nov 2015 22:52:56 +0000"  >&lt;p&gt;Any updates on this one &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; ? Thanks sir.&lt;/p&gt;</comment>
                            <comment id="14992448" author="anoop.hbase" created="Thu, 5 Nov 2015 20:49:31 +0000"  >&lt;p&gt;Sorry for the delay.&lt;br/&gt;
I did the tests again by fixing the RKs what we fetch (via multi get) every time.  ( Not exactly this way as in patchpe_use_same_keys.patch.  instead of doing a random RK generation, I can use the incoming int &apos;i&apos; to testRow(final int i) to make RKs )&lt;br/&gt;
Both with and with out patch gives almost similar avg total run time for threads.  So in my test, I have ensured that every thread doing distinct RK fetch only. And there also we don&apos;t degrade perf.&lt;/p&gt;

&lt;p&gt;So here is my +1&lt;/p&gt;

&lt;p&gt;Thanks for the perseverance &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=carp84&quot; class=&quot;user-hover&quot; rel=&quot;carp84&quot;&gt;Yu Li&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14993106" author="carp84" created="Fri, 6 Nov 2015 04:46:57 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; for the double check and confirmation!&lt;/p&gt;

&lt;p&gt;Checked and confirmed v12 patch could apply in the latest code base, re-attach to see what HadoopQA will say (with recent commits/code changes)&lt;/p&gt;</comment>
                            <comment id="14993307" author="hadoopqa" created="Fri, 6 Nov 2015 07:50:32 +0000"  >&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12770952/HBASE-14463_v12.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12770952/HBASE-14463_v12.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit bfa36891901b96b95d82f5307642c35fd2b9f534.&lt;br/&gt;
  ATTACHMENT ID: 12770952&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 8 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16422//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16422//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16422//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16422//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16422//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16422//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16422//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16422//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14993509" author="anoop.hbase" created="Fri, 6 Nov 2015 11:01:38 +0000"  >&lt;p&gt;Can you attach patches for other branches as well. We need fix this in 0.98+ versions&lt;/p&gt;</comment>
                            <comment id="14993831" author="yuzhihong@gmail.com" created="Fri, 6 Nov 2015 15:44:45 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; went into 1.2+&lt;/p&gt;

&lt;p&gt;For 0.98, we need to backport &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; first&lt;/p&gt;</comment>
                            <comment id="14994787" author="hudson" created="Sat, 7 Nov 2015 00:40:50 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-Trunk_matrix #440 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-Trunk_matrix/440/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-Trunk_matrix/440/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14463&quot; title=&quot;Severe performance downgrade when parallel reading a single key from BucketCache&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14463&quot;&gt;&lt;del&gt;HBASE-14463&lt;/del&gt;&lt;/a&gt; Severe performance downgrade when parallel reading a single (tedyu: rev 263a0adf79105b9dc166e21c3f5159ade6e2d0a7)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestIdReadWriteLock.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/bucket/TestBucketCache.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/CacheTestUtils.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketCache.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/IdReadWriteLock.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14994825" author="hadoopqa" created="Sat, 7 Nov 2015 01:17:39 +0000"  >&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12771116/14463-branch-1-v12.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12771116/14463-branch-1-v12.txt&lt;/a&gt;&lt;br/&gt;
  against branch-1 branch at commit 263a0adf79105b9dc166e21c3f5159ade6e2d0a7.&lt;br/&gt;
  ATTACHMENT ID: 12771116&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 8 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16438//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16438//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16438//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16438//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16438//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16438//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16438//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16438//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14994853" author="yuzhihong@gmail.com" created="Sat, 7 Nov 2015 01:37:00 +0000"  >&lt;p&gt;Integrated to branch-1.2 +&lt;/p&gt;

&lt;p&gt;0.98 needs backport of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; first&lt;/p&gt;</comment>
                            <comment id="14994990" author="hudson" created="Sat, 7 Nov 2015 03:24:04 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-1.3-IT #299 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.3-IT/299/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.3-IT/299/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14463&quot; title=&quot;Severe performance downgrade when parallel reading a single key from BucketCache&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14463&quot;&gt;&lt;del&gt;HBASE-14463&lt;/del&gt;&lt;/a&gt; Severe performance downgrade when parallel reading a single (tedyu: rev 61e2566c1cd9a83aa4e2bbb016d613ced01d7a6b)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketCache.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/CacheTestUtils.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/IdReadWriteLock.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestIdReadWriteLock.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/bucket/TestBucketCache.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14995029" author="hudson" created="Sat, 7 Nov 2015 04:39:27 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-1.2-IT #269 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2-IT/269/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2-IT/269/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14463&quot; title=&quot;Severe performance downgrade when parallel reading a single key from BucketCache&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14463&quot;&gt;&lt;del&gt;HBASE-14463&lt;/del&gt;&lt;/a&gt; Severe performance downgrade when parallel reading a single (tedyu: rev def0f6b6fe716db4988a5b98c837934122854006)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/CacheTestUtils.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/IdReadWriteLock.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestIdReadWriteLock.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketCache.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/bucket/TestBucketCache.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14995048" author="hudson" created="Sat, 7 Nov 2015 05:20:15 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.2 #353 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2/353/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2/353/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14463&quot; title=&quot;Severe performance downgrade when parallel reading a single key from BucketCache&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14463&quot;&gt;&lt;del&gt;HBASE-14463&lt;/del&gt;&lt;/a&gt; Severe performance downgrade when parallel reading a single (tedyu: rev def0f6b6fe716db4988a5b98c837934122854006)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/CacheTestUtils.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/bucket/TestBucketCache.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/IdReadWriteLock.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketCache.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestIdReadWriteLock.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14995138" author="hudson" created="Sat, 7 Nov 2015 10:08:11 +0000"  >&lt;p&gt;ABORTED: Integrated in HBase-1.3 #354 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.3/354/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.3/354/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14463&quot; title=&quot;Severe performance downgrade when parallel reading a single key from BucketCache&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14463&quot;&gt;&lt;del&gt;HBASE-14463&lt;/del&gt;&lt;/a&gt; Severe performance downgrade when parallel reading a single (tedyu: rev 61e2566c1cd9a83aa4e2bbb016d613ced01d7a6b)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/bucket/TestBucketCache.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/CacheTestUtils.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestIdReadWriteLock.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/IdReadWriteLock.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketCache.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14995627" author="carp84" created="Sun, 8 Nov 2015 13:26:18 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tedyu&quot; class=&quot;user-hover&quot; rel=&quot;tedyu&quot;&gt;Ted Yu&lt;/a&gt; for help commit, and thanks all for review!&lt;/p&gt;

&lt;p&gt;Regarding patch for 0.98, I could prepare a patch with only WeakObjectPool but no changes in KeyLocker, or a full backport of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt;. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt; please let me know which way you prefer. Thanks.&lt;/p&gt;</comment>
                            <comment id="14995978" author="carp84" created="Mon, 9 Nov 2015 03:25:35 +0000"  >&lt;p&gt;Patch for 0.98 which partially backports WeakObjectPool and its unit test case from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt;, to see what HadoopQA says&lt;/p&gt;</comment>
                            <comment id="14996106" author="hadoopqa" created="Mon, 9 Nov 2015 06:42:24 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12771270/HBASE-14463.branch-0.98.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12771270/HBASE-14463.branch-0.98.patch&lt;/a&gt;&lt;br/&gt;
  against 0.98 branch at commit 1cbcf1175e6ce497936f12c60fb2e897833ace39.&lt;br/&gt;
  ATTACHMENT ID: 12771270&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 10 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 28 warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 3891 checkstyle errors (more than the master&apos;s current 3890 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16453//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16453//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16453//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16453//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16453//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16453//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Javadoc warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16453//artifact/patchprocess/patchJavadocWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16453//artifact/patchprocess/patchJavadocWarnings.txt&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16453//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16453//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="15024412" author="carp84" created="Tue, 24 Nov 2015 12:32:15 +0000"  >&lt;p&gt;Ping, it seems the only work left is patch for 0.98 to close this JIRA.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt; any comments on the attached patch for 0.98 sir? Or you prefer a full backport of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; before this goes in? Thanks.&lt;/p&gt;</comment>
                            <comment id="15026111" author="anoop.hbase" created="Wed, 25 Nov 2015 03:37:15 +0000"  >&lt;p&gt;0.98 backport is not so straight as it need &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt;.   No need to keep the fixed jira open.  For 98 backport pls open a new jira referring to this. I will close this.&lt;/p&gt;</comment>
                            <comment id="15026120" author="carp84" created="Wed, 25 Nov 2015 03:47:57 +0000"  >&lt;p&gt;OK, thanks for the follow-up &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;, whenever you want this in 98, just let me know.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12857497">HBASE-14268</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12771116" name="14463-branch-1-v12.txt" size="17003" author="yuzhihong@gmail.com" created="Fri, 6 Nov 2015 21:28:05 +0000"/>
                            <attachment id="12767349" name="GC_with_WeakObjectPool.png" size="127004" author="carp84" created="Mon, 19 Oct 2015 12:14:12 +0000"/>
                            <attachment id="12771270" name="HBASE-14463.branch-0.98.patch" size="28171" author="carp84" created="Mon, 9 Nov 2015 03:25:35 +0000"/>
                            <attachment id="12761651" name="HBASE-14463.patch" size="16680" author="carp84" created="Tue, 22 Sep 2015 13:52:33 +0000"/>
                            <attachment id="12766296" name="HBASE-14463_v11.patch" size="19168" author="carp84" created="Tue, 13 Oct 2015 09:33:54 +0000"/>
                            <attachment id="12770952" name="HBASE-14463_v12.patch" size="18623" author="carp84" created="Fri, 6 Nov 2015 04:46:57 +0000"/>
                            <attachment id="12766510" name="HBASE-14463_v12.patch" size="18623" author="carp84" created="Wed, 14 Oct 2015 09:45:55 +0000"/>
                            <attachment id="12762157" name="HBASE-14463_v2.patch" size="15454" author="carp84" created="Thu, 24 Sep 2015 14:26:04 +0000"/>
                            <attachment id="12762158" name="HBASE-14463_v3.patch" size="15933" author="carp84" created="Thu, 24 Sep 2015 14:30:20 +0000"/>
                            <attachment id="12762205" name="HBASE-14463_v4.patch" size="15940" author="carp84" created="Thu, 24 Sep 2015 18:47:18 +0000"/>
                            <attachment id="12762608" name="HBASE-14463_v5.patch" size="17427" author="carp84" created="Sun, 27 Sep 2015 17:38:17 +0000"/>
                            <attachment id="12762609" name="TestBucketCache-new_with_IdLock.png" size="242540" author="carp84" created="Sun, 27 Sep 2015 17:38:17 +0000"/>
                            <attachment id="12762610" name="TestBucketCache-new_with_IdReadWriteLock.png" size="238727" author="carp84" created="Sun, 27 Sep 2015 17:38:17 +0000"/>
                            <attachment id="12766957" name="TestBucketCache_with_IdLock-latest.png" size="244550" author="carp84" created="Fri, 16 Oct 2015 02:43:26 +0000"/>
                            <attachment id="12761653" name="TestBucketCache_with_IdLock.png" size="240528" author="carp84" created="Tue, 22 Sep 2015 13:58:19 +0000"/>
                            <attachment id="12766958" name="TestBucketCache_with_IdReadWriteLock-latest.png" size="241874" author="carp84" created="Fri, 16 Oct 2015 02:43:26 +0000"/>
                            <attachment id="12762159" name="TestBucketCache_with_IdReadWriteLock-resolveLockLeak.png" size="238419" author="carp84" created="Thu, 24 Sep 2015 14:30:20 +0000"/>
                            <attachment id="12761654" name="TestBucketCache_with_IdReadWriteLock.png" size="232232" author="carp84" created="Tue, 22 Sep 2015 13:58:19 +0000"/>
                            <attachment id="12768112" name="pe_use_same_keys.patch" size="5767" author="carp84" created="Thu, 22 Oct 2015 19:10:46 +0000"/>
                            <attachment id="12767941" name="test-results.tar.gz" size="224827" author="carp84" created="Thu, 22 Oct 2015 02:07:56 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 22 Sep 2015 16:31:00 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 1 week, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2lejb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>