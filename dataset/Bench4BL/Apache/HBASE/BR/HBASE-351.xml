<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 02 19:05:13 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-351/HBASE-351.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-351] [hbase] Compactions should not block updates</title>
                <link>https://issues.apache.org/jira/browse/HBASE-351</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Currently, compactions take a long time.  During compaction, updates are carried by the HRegions&apos; memcache (+ backing HLog).  memcache is unable to flush to disk until compaction completes.&lt;/p&gt;

&lt;p&gt;Under sustained, substantial &amp;#8211;  rows that contain multiple columns one of which is a web page &amp;#8211; updates by multiple concurrent clients (10 in this case), a common hbase usage scenario, the memcache grows fast and often to orders of magnitude in excess of the configured &apos;flush-to-disk&apos; threshold.&lt;/p&gt;

&lt;p&gt;This throws the whole system out of kilter.  When memcache does get to run after compaction completes &amp;#8211; assuming you have sufficent RAM and the region server doesn&apos;t OOME &amp;#8211; then the resulting on-disk file will be way larger than any other on-disk HStoreFile bringing on a region split ..... but the resulting split will produce regions that themselves need to be immediately split because each half is beyond the configured limit, and so on...&lt;/p&gt;

&lt;p&gt;In another issue yet to be posted, tuning and some pointed memcache flushes makes the above condition less extreme but until compaction durations come close to the memcache flush threshold compactions will remain disruptive. &lt;/p&gt;

&lt;p&gt;Its allowed that compactions may never be fast enough as per bigtable paper (This is a &apos;wish&apos; issue).&lt;/p&gt;</description>
                <environment></environment>
        <key id="12374279">HBASE-351</key>
            <summary>[hbase] Compactions should not block updates</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Fri, 20 Jul 2007 17:57:34 +0000</created>
                <updated>Mon, 4 Feb 2008 18:41:50 +0000</updated>
                            <resolved>Thu, 16 Aug 2007 01:09:28 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12517588" author="jimk" created="Fri, 3 Aug 2007 17:23:24 +0000"  >&lt;p&gt;Compactions should never block updates.&lt;/p&gt;

&lt;p&gt;What follows is a proposed solution:&lt;/p&gt;

&lt;p&gt;1. A compaction is needed. This is the hard part. What conditions should trigger a compaction? Right after a split? Any other time?&lt;/p&gt;

&lt;p&gt;2. A new thread is started to do the compaction. Since all the MapFiles (SSTables) are immutable, the HStore can continue to service reads from the existing MapFiles while the compaction thread is creating the new compacted MapFile. The thread gets the list of MapFiles that exist at the time it is started and will only act on those. Cache flushes will create new MapFiles that aren&apos;t a part of the compaction.&lt;/p&gt;

&lt;p&gt;3. When the compaction is complete, the thread grabs a write lock on the HStore. (it might have to wait a bit if there are some scans going on, but that&apos;s ok)&lt;/p&gt;

&lt;p&gt;4. When the lock is acquired, the newly created compacted MapFile is put into place and the MapFiles it read from are removed. (very short time period).&lt;/p&gt;

&lt;p&gt;5. The lock is then released and the HStore services requests from the newly compacted MapFile and any new MapFiles that may have been created by cache flushes that occurred since the compaction started.&lt;/p&gt;

&lt;p&gt;6. The MapFiles that were the input to the compaction can now be deleted.&lt;/p&gt;</comment>
                            <comment id="12518867" author="stack" created="Thu, 9 Aug 2007 23:11:41 +0000"  >&lt;p&gt;Let me try your suggestion Jim of not having compactions disable flushes. &lt;/p&gt;

&lt;p&gt;Another thing I&apos;d like to try is that rather than flushing memory to a new file, instead flush by merging with an existant file.  I&apos;m thinking it will take the same amount of elapsed time but we&apos;ll have put off a full compaction by not producing an added file.&lt;/p&gt;

&lt;p&gt;Another element to consider is that compactions are the means by which HStoreFile references are cleaned up in a region (If references, then a region cannot be split) so compaction should be doing its best to clean up instances of reference files.&lt;/p&gt;
</comment>
                            <comment id="12519482" author="stack" created="Mon, 13 Aug 2007 18:15:30 +0000"  >&lt;p&gt;Patch to pick up an existing HStoreFIle from disk interlacing the memcache flush compacting as we go.  The notion was that interlacing would take as long as a pure flush with the added benefit of having one less file in the store when the flush completes. Experiments show that it takes about 1.5 to three times the amount of time flushing dependent on the number of column families  &amp;#8211; more column families makes it so the two timings come closer together &amp;#8211; but at the cost of complicating flush (since we are compounding flushing and compaction).  Not going to pursue this experiment further.&lt;/p&gt;</comment>
                            <comment id="12520073" author="stack" created="Wed, 15 Aug 2007 19:36:35 +0000"  >&lt;p&gt;Here is a patch that reworks compactions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-351&quot; title=&quot;[hbase] Compactions should not block updates&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-351&quot;&gt;&lt;del&gt;HADOOP-1644&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;hbase&amp;#93;&lt;/span&gt; Compactions should not block updates&lt;/p&gt;

&lt;p&gt;Disentangles flushes and compactions; flushes can proceed while a&lt;br/&gt;
compaction is happening.  Also, don&apos;t compact unless we hit&lt;br/&gt;
compaction threshold: i.e. don&apos;t automatically compact on HRegion&lt;br/&gt;
startup so regions can come online the faster.&lt;/p&gt;

&lt;p&gt;M src/contrib/hbase/conf/hbase-default.xml&lt;br/&gt;
    (hbase.hregion.compactionThreashold): Moved to be a hstore property&lt;br/&gt;
    as part of encapsulating compaction decision inside hstore.&lt;br/&gt;
M src/contrib/hbase/src/test/org/apache/hadoop/hbase/HBaseTestCase.java&lt;br/&gt;
    Refactored.  Moved here generalized content loading code that can&lt;br/&gt;
    be shared by tests.  Add to setup and teardown the setup and removal&lt;br/&gt;
    of local test dir (if it exists).&lt;br/&gt;
M src/contrib/hbase/src/test/org/apache/hadoop/hbase/TestCompare.java&lt;br/&gt;
    Added test of HStoreKey compare (It works other than one would at&lt;br/&gt;
    first expect).&lt;br/&gt;
M src/contrib/hbase/src/test/org/apache/hadoop/hbase/TestSplit.java&lt;br/&gt;
    Bulk of content loading code has been moved up into the parent class.&lt;br/&gt;
M src/contrib/hbase/src/java/org/apache/hadoop/hbase/HConnectionManager.java&lt;br/&gt;
    (tableExists): Restore to a check of if the asked-for table is in list of&lt;br/&gt;
    tables.  As it was, a check for tableExists would just wait on all timeouts&lt;br/&gt;
    and retries to expire and then report table does not exist..  Fixed up&lt;br/&gt;
    debug message listing regions of a table.  Added protection against meta&lt;br/&gt;
    table not having a COL_REGINFO (Seen in cluster testing &amp;#8211; probably a bug&lt;br/&gt;
    in row removal).&lt;br/&gt;
M src/contrib/hbase/src/java/org/apache/hadoop/hbase/HStoreFile.java&lt;br/&gt;
    Loading store files, even if it was noticed that there was no corresponding&lt;br/&gt;
    map file, was still counting file as valid.  Also fix merger &amp;#8211; was&lt;br/&gt;
    constructing MapFile.Reader directly rather than asking HStoreFile for&lt;br/&gt;
    the reader (HStoreFile knows how to do MapFile references)&lt;br/&gt;
    (rename): Added check that move succeeded and logging.  In cluster-testing,&lt;br/&gt;
    the hdfs move of compacted file into place has failed on occasion (Need&lt;br/&gt;
    more info).&lt;br/&gt;
M src/contrib/hbase/src/java/org/apache/hadoop/hbase/HStore.java&lt;br/&gt;
    Encapsulate ruling on whether a compaction should take place inside HStore.&lt;br/&gt;
    Added reading of the compactionThreshold her.  Compaction threshold is&lt;br/&gt;
    currently just number of store files.  Later may include other factors such&lt;br/&gt;
    as count of reference files.  Cleaned up debug messages around&lt;br/&gt;
    reconstruction log.  Removed compaction if size &amp;gt; 1 from constructor.  Let&lt;br/&gt;
    compaction happen after we&apos;ve been deployed (Compactions that happen while&lt;br/&gt;
    we are online can continue to take updates.  Compaction in the constructor&lt;br/&gt;
    puts off our being able to take in updates).&lt;br/&gt;
    (close): Changed so it now returns set of store files.  This used to be done&lt;br/&gt;
    by calls to flush. Since flush and compaction have been disentangled, a&lt;br/&gt;
    compaction can come in after flush and the list of files could be off.&lt;br/&gt;
    Having it done by close, can be sure list of files is complete.&lt;br/&gt;
    (flushCache): No longer returns set of store files.  Added &apos;merging compaction&apos;&lt;br/&gt;
    where we pick an arbitrary store file from disk and merge into it the content&lt;br/&gt;
    of memcache (Needs work).&lt;br/&gt;
    (getAllMapFiles): Renamed getAllStoreFiles.&lt;br/&gt;
    (needsCompaction): Added.&lt;br/&gt;
    (compactHelper): Added passing of maximum sequence number if already&lt;br/&gt;
    calculated. If compacting one file only, we used skip without rewriting&lt;br/&gt;
    the info file.  Fixed.&lt;br/&gt;
    Refactored.  Moved guts to new  compact(outFile, listOfStores)  method.&lt;br/&gt;
    (compact, CompactionReader): Added overrides and interface  to support&lt;br/&gt;
    &apos;merging compaction&apos; that takes files and memcache.  In compaction,&lt;br/&gt;
    if we failed the move of the compacted file, all data had already been&lt;br/&gt;
    deleted.  Changing, so deletion happens after confirmed move of&lt;br/&gt;
    compacted file.&lt;br/&gt;
    (getFull): Fixed bug where NPE when read of maps came back null.&lt;br/&gt;
    Revealed by our NOT compacting stores on startup.  Meant could be two&lt;br/&gt;
    backing stores one of which had no data regards queried key.&lt;br/&gt;
    (getNMaps): Renamed countOfStoreFiles.&lt;br/&gt;
    (toString): Added.&lt;br/&gt;
M src/contrib/hbase/src/java/org/apache/hadoop/hbase/HStoreKey.java&lt;br/&gt;
    Added comment on &apos;odd&apos;-looking comparison.&lt;br/&gt;
M src/contrib/hbase/src/java/org/apache/hadoop/hbase/HRegionServer.java&lt;br/&gt;
    Javadoc edit. &lt;br/&gt;
M src/contrib/hbase/src/java/org/apache/hadoop/hbase/HLogEdit.java&lt;br/&gt;
    Only return first 128 bytes of value when toStringing (On cluster,&lt;br/&gt;
    was returning complete web pages in log).&lt;br/&gt;
M src/contrib/hbase/src/java/org/apache/hadoop/hbase/HMaster.java&lt;br/&gt;
    Removed confusing debug message (made sense once &amp;#8211; but not now).&lt;br/&gt;
    Test rootRegionLocation for null before using it (can be null).&lt;br/&gt;
M  src/contrib/hbase/src/java/org/apache/hadoop/hbase/HMemcache.java&lt;br/&gt;
    Added comment that delete behavior needs study.&lt;br/&gt;
M src/contrib/hbase/src/java/org/apache/hadoop/hbase/HRegion.java&lt;br/&gt;
    Fixed merge so it doesn&apos;t do the incremental based off files&lt;br/&gt;
    returned by flush.  Instead all is done in the one go after&lt;br/&gt;
    region closes (using files returned by close).&lt;br/&gt;
    Moved duplicated code to new filesByFamily method.&lt;br/&gt;
    (WriteState): Removed writesOngoing in favor of compacting and&lt;br/&gt;
    flushing flags.&lt;br/&gt;
    (flushCache): No longer returns list of files.&lt;br/&gt;
M src/contrib/hbase/src/java/org/apache/hadoop/hbase/util/Writables.java&lt;br/&gt;
    Fix javadoc.&lt;/p&gt;</comment>
                            <comment id="12520124" author="stack" created="Thu, 16 Aug 2007 00:14:32 +0000"  >&lt;p&gt;Version 2 fixes bug where master was prematurely cleaning up parent regions.&lt;/p&gt;</comment>
                            <comment id="12520129" author="stack" created="Thu, 16 Aug 2007 01:09:28 +0000"  >&lt;p&gt;Committed after testing on three different machines &amp;#8211; macosx and two linux machines one of which was an old K6 single-processor &amp;#8211; and checking no javadoc errors.  Resolving.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12363712" name="interlacing.patch" size="31491" author="stack" created="Mon, 13 Aug 2007 18:15:30 +0000"/>
                            <attachment id="12363897" name="non-blocking-compaction-v2.patch" size="79753" author="stack" created="Thu, 16 Aug 2007 00:14:32 +0000"/>
                            <attachment id="12363881" name="non-blocking-compaction.patch" size="76619" author="stack" created="Wed, 15 Aug 2007 19:36:35 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 3 Aug 2007 17:23:24 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>25135</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 17 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0h6s7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>98361</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>