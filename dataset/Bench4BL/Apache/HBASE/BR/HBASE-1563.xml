<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 02 19:21:58 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-1563/HBASE-1563.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-1563] incrementColumnValue does not write to WAL</title>
                <link>https://issues.apache.org/jira/browse/HBASE-1563</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Incrementing never writes to the WAL.  Under failure scenarios, you will lose all increments since the last flush.&lt;/p&gt;

&lt;p&gt;Do we want to expose the option to the client as to whether to write to WAL or not?&lt;/p&gt;</description>
                <environment></environment>
        <key id="12428592">HBASE-1563</key>
            <summary>incrementColumnValue does not write to WAL</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="streamy">Jonathan Gray</assignee>
                                    <reporter username="streamy">Jonathan Gray</reporter>
                        <labels>
                    </labels>
                <created>Mon, 22 Jun 2009 17:26:07 +0000</created>
                <updated>Sun, 13 Sep 2009 22:24:46 +0000</updated>
                            <resolved>Thu, 25 Jun 2009 22:12:55 +0000</resolved>
                                    <version>0.20.0</version>
                                    <fixVersion>0.20.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12722694" author="streamy" created="Mon, 22 Jun 2009 17:27:10 +0000"  >&lt;p&gt;This patch adds a writeToWAL argument and appends to the edit log on every increment, however the boolean is not exposed to the client in this patch and is default true. Wanted to discuss with others before going further.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="12722702" author="apurtell" created="Mon, 22 Jun 2009 17:36:08 +0000"  >&lt;p&gt;IMHO, it&apos;s fine to expose the boolean to the client but there should be a client side API alternative which does not expose the boolean which internally sets writeToWAL as true. Everybody will be happy. Let&apos;s just do it. &lt;/p&gt;</comment>
                            <comment id="12722704" author="streamy" created="Mon, 22 Jun 2009 17:40:30 +0000"  >&lt;p&gt;+1 patch coming...&lt;/p&gt;</comment>
                            <comment id="12722737" author="streamy" created="Mon, 22 Jun 2009 18:16:19 +0000"  >&lt;p&gt;Please review.&lt;/p&gt;</comment>
                            <comment id="12722750" author="stack" created="Mon, 22 Jun 2009 18:38:04 +0000"  >&lt;p&gt;Why not have old incrementColumnValue call the new one with a flag set to &apos;true&apos;?&lt;/p&gt;</comment>
                            <comment id="12722751" author="apurtell" created="Mon, 22 Jun 2009 18:39:11 +0000"  >&lt;p&gt;Code is fine.&lt;/p&gt;

&lt;p&gt;This portion of the javadoc:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If the column value isn&apos;t long-like, this could throw an exception.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I understand what you are saying, but I think this may just confuse users. Can you consider an alternate wording? &lt;/p&gt;</comment>
                            <comment id="12722796" author="ryanobjc" created="Mon, 22 Jun 2009 20:18:42 +0000"  >&lt;p&gt;2 things:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;in the client code you build a &apos;get&apos; that isnt used.&lt;/li&gt;
	&lt;li&gt;we are writing to the WAL &lt;em&gt;after&lt;/em&gt; the increment, this may be the only way to do it effectively, but we should also think about this carefully.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12722841" author="erikholstad@gmail.com" created="Mon, 22 Jun 2009 21:31:25 +0000"  >&lt;p&gt;@Ryan I think the Get is just some old leftover when it was used to be sent over that way and should now be removed.&lt;/p&gt;</comment>
                            <comment id="12723337" author="streamy" created="Tue, 23 Jun 2009 22:44:14 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removes unnecessary Get in client code&lt;/li&gt;
	&lt;li&gt;Removed duplicate server calls in the client code, default just calls full w/ true&lt;/li&gt;
	&lt;li&gt;Replaced increment javadoc with &quot;Atomically increments a column value. If the column value already exists and is not a big-endian long, this could throw an exception.&quot;  Is that more clear?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@Ryan I got most the way through splitting up Store.incrementColumnValue logic so we figure out what we have to do first, then write to wal, then perform the insert.  The issue is when we increment in-place in the memcache.  If we truly don&apos;t want to write until the wal append, we&apos;d have to make a copy of the KV, perform the increment on it, and then either increment the original memcache value or swap.  This more or less negates the in-place increment optimization.  Thoughts?&lt;/p&gt;</comment>
                            <comment id="12723344" author="stack" created="Tue, 23 Jun 2009 23:02:23 +0000"  >&lt;p&gt;Patch looks good except for the identified weirdness where we write to WAL after the update.  To do this properly you&apos;d need to row lock and make a copy.  Is that too onerous a price to pay?&lt;/p&gt;</comment>
                            <comment id="12723356" author="stack" created="Tue, 23 Jun 2009 23:19:07 +0000"  >&lt;p&gt;Ryan notes that old code did row lock and was fast.&lt;/p&gt;

&lt;p&gt;So, we should go ahead and pull the KV from memcache, copy it, increment it, add to WAL, then insert back into memcache?  It won&apos;t be too slow?  Maybe only do this if write to wal is enabled?&lt;/p&gt;</comment>
                            <comment id="12723359" author="stack" created="Tue, 23 Jun 2009 23:21:20 +0000"  >&lt;p&gt;Why is there a race if a row lock is outstanding Ryan?&lt;/p&gt;</comment>
                            <comment id="12723389" author="streamy" created="Wed, 24 Jun 2009 00:49:38 +0000"  >&lt;p&gt;We are already getting a row lock, there is no race condition that I can see.&lt;/p&gt;

&lt;p&gt;I&apos;d really like the increment-in-place over making a new KV each time we increment.  The downside is if the regionserver dies in the brief window after the update and before the WAL append, we lose a single increment.  If it dies on either side, then nothing would change.&lt;/p&gt;

&lt;p&gt;The upside is we don&apos;t allocate a new KV each time.  That&apos;s what I&apos;m after with increments, doing them in place and not doing a new insertion each time (and new allocation).  I have an internal ID assignment system that uses custom patches on 0.19.  Was hoping to drop our custom patches and use this out of the box, but if we copy the KV each time I&apos;ll likely patch it to not do that &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  I&apos;d rather not lose any increments but the window is very small and you lose at most a single increment.  If a KV is 100 bytes, and I increment just 1M times in a day, i&apos;ve unnecessarily allocated 100MB (and the worst kind, lots of small 100 byte allocations that stick around for a bit).&lt;/p&gt;

&lt;p&gt;We still satisfy the property of &quot;Once the increment has returned successfully, it is safe&quot;.  This weird scenario would actually only happen in a case where the increment started but never returned (so client should not assume it was successful anyways).&lt;/p&gt;</comment>
                            <comment id="12723395" author="apurtell" created="Wed, 24 Jun 2009 01:51:59 +0000"  >&lt;blockquote&gt;&lt;p&gt;We still satisfy the property of &quot;Once the increment has returned successfully, it is safe&quot;. This weird scenario would actually only happen in a case where the increment started but never returned (so client should not assume it was successful anyways).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This makes sense to me. &lt;/p&gt;</comment>
                            <comment id="12723397" author="ryanobjc" created="Wed, 24 Jun 2009 02:04:29 +0000"  >&lt;p&gt;a row lock is only for writing.  The race happens when someone is reading the value you are incrementing.  They could copy a partially updated view into the RPC buffer, and the user could see something odd and unexpected (values going down for example).&lt;/p&gt;

&lt;p&gt;If we used a ConcurrentSkipListSet, we can&apos;t put a duplicate, which requires us to temporarily remove the KeyValue, then put it back, opens a hole whereby we can look for a value and it not be there.  &lt;/p&gt;

&lt;p&gt;So to support not-in-place modification we need to also move to a ConcurrentSkipListMap in memcache.&lt;/p&gt;</comment>
                            <comment id="12723415" author="stack" created="Wed, 24 Jun 2009 03:15:13 +0000"  >&lt;p&gt;/me man, i love OSS&lt;/p&gt;

&lt;p&gt;Someone please review 1577 &amp;#8211; it converts memcache to CSLM from CSLS.&lt;/p&gt;</comment>
                            <comment id="12723450" author="stack" created="Wed, 24 Jun 2009 05:37:59 +0000"  >&lt;p&gt;So, interesting, need to operate on copy so readers don&apos;t see partially changed KV.  That makes sense.&lt;/p&gt;</comment>
                            <comment id="12723454" author="streamy" created="Wed, 24 Jun 2009 05:51:50 +0000"  >&lt;p&gt;For now, let&apos;s just make the copy and make sure things are safe.  In addition to 1577.  Good stuff ryan.&lt;/p&gt;

&lt;p&gt;Stack, you&apos;ve brought your improper usage of /me onto the web now!&lt;/p&gt;</comment>
                            <comment id="12723455" author="streamy" created="Wed, 24 Jun 2009 05:52:10 +0000"  >&lt;p&gt;Will post patch tomorrow&lt;/p&gt;</comment>
                            <comment id="12723772" author="streamy" created="Wed, 24 Jun 2009 22:16:35 +0000"  >&lt;p&gt;New patch that copies the existing KV instead of incrementing in-place.&lt;/p&gt;

&lt;p&gt;This is now broken.  The CSLMap has the same behavior as the CSLSet.  Since the keys are considered &quot;equal&quot; the values might be updated in the map (in this case meaningless) but they don&apos;t swap the key with the new one (since it&apos;s equal).  It does not have the behavior we wanted, an atomic put that replaces the Key in case of collisions.&lt;/p&gt;</comment>
                            <comment id="12724086" author="irfanmohammed" created="Thu, 25 Jun 2009 13:33:29 +0000"  >&lt;p&gt;Can we please ensure that the &quot;atomic&quot; puts are honored? &lt;/p&gt;

&lt;p&gt;I migrated lot of my code to use the incrementColumnValue() because of the atomic nature of this call and it really reduces the data footprint and also the query time when aggregating the cell values.&lt;/p&gt;</comment>
                            <comment id="12724226" author="streamy" created="Thu, 25 Jun 2009 19:37:33 +0000"  >&lt;p&gt;@Irfan First and foremost, we need &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1577&quot; title=&quot;Move memcache to ConcurrentSkipListMap from ConcurrentSkipListSet&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1577&quot;&gt;&lt;del&gt;HBASE-1577&lt;/del&gt;&lt;/a&gt;, but that is looking good.  Beyond that, we need to think more about how to make this behave atomically.  In thinking about it now, I do see some potential issues/race conditions that will lead to missing increments (with &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1577&quot; title=&quot;Move memcache to ConcurrentSkipListMap from ConcurrentSkipListSet&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1577&quot;&gt;&lt;del&gt;HBASE-1577&lt;/del&gt;&lt;/a&gt; things will always &lt;em&gt;work&lt;/em&gt; but does not ensure atomicity of the increments).  Need to think more.&lt;/p&gt;</comment>
                            <comment id="12724235" author="streamy" created="Thu, 25 Jun 2009 19:46:28 +0000"  >&lt;p&gt;@Irfan  Excuse me... Got confused for a second.  Once &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1577&quot; title=&quot;Move memcache to ConcurrentSkipListMap from ConcurrentSkipListSet&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1577&quot;&gt;&lt;del&gt;HBASE-1577&lt;/del&gt;&lt;/a&gt; goes in, these absolutely &lt;b&gt;will&lt;/b&gt; have atomic behavior.  Each is guaranteed to have worked and performed the increment once it returns, and all readers will always see the latest value.&lt;/p&gt;</comment>
                            <comment id="12724320" author="stack" created="Thu, 25 Jun 2009 22:12:55 +0000"  >&lt;p&gt;Thanks for the patch Jon&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12411428" name="HBASE-1563-v1.patch" size="3169" author="streamy" created="Mon, 22 Jun 2009 17:27:10 +0000"/>
                            <attachment id="12411437" name="HBASE-1563-v2.patch" size="6459" author="streamy" created="Mon, 22 Jun 2009 18:16:19 +0000"/>
                            <attachment id="12411581" name="HBASE-1563-v3.patch" size="6500" author="streamy" created="Tue, 23 Jun 2009 22:44:14 +0000"/>
                            <attachment id="12411720" name="HBASE-1563-v4.patch" size="11169" author="streamy" created="Wed, 24 Jun 2009 22:16:35 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 22 Jun 2009 17:36:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>25829</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 24 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hdzz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>99530</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Adds new API with flag to incrementColumnValue for whether or not to write WAL</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>