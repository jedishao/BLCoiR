<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 16:39:01 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-1556/HBASE-1556.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-1556] [testing] optimize minicluster based testing in the test suite</title>
                <link>https://issues.apache.org/jira/browse/HBASE-1556</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;It is possible to tell junit to run all of the unit tests in a single forked JVM:
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &amp;lt;junit fork=&lt;span class=&quot;code-quote&quot;&gt;&quot;yes&quot;&lt;/span&gt; forkmode=&lt;span class=&quot;code-quote&quot;&gt;&quot;once&quot;&lt;/span&gt; ... &amp;gt;
  ...
  &amp;lt;/junit&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, use statics to manage miniclusters in background threads:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; HBaseConfiguration conf = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HBaseConfiguration();
  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; MiniZooKeeperCluster zooKeeperCluster;
  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; MiniHBaseCluster hbaseCluster;
  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; MiniDFSCluster dfsCluster;

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; isMiniClusterRunning() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; hbaseCluster != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
  }

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void startDFS() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (dfsCluster != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      LOG.error(&lt;span class=&quot;code-quote&quot;&gt;&quot;MiniDFSCluster already running&quot;&lt;/span&gt;);
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
    }
    Path path = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Path(
        conf.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;test.build.data&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;test/build/data&quot;&lt;/span&gt;), &lt;span class=&quot;code-quote&quot;&gt;&quot;MiniClusterTestCase&quot;&lt;/span&gt;);
    FileSystem testFS = FileSystem.get(conf);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (testFS.exists(path)) {
      testFS.delete(path, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
    }
    testDir = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; File(path.toString());
    dfsCluster = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MiniDFSCluster(conf, 2, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;, (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[])&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
    FileSystem filesystem = dfsCluster.getFileSystem();
    conf.set(&lt;span class=&quot;code-quote&quot;&gt;&quot;fs.&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;.name&quot;&lt;/span&gt;, filesystem.getUri().toString());     
    Path parentdir = filesystem.getHomeDirectory();
    conf.set(HConstants.HBASE_DIR, parentdir.toString());
    filesystem.mkdirs(parentdir);
    FSUtils.setVersion(filesystem, parentdir);
    LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;started MiniDFSCluster in &quot;&lt;/span&gt; + testDir.toString());
  }

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void stopDFS() {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (dfsCluster != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      dfsCluster.shutdown();
      dfsCluster = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {
      LOG.warn(StringUtils.stringifyException(e));
    }
  }

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void startZooKeeper() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (zooKeeperCluster != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      LOG.error(&lt;span class=&quot;code-quote&quot;&gt;&quot;ZooKeeper already running&quot;&lt;/span&gt;);
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
    }
    zooKeeperCluster = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MiniZooKeeperCluster();
    zooKeeperCluster.startup(testDir);
    LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;started &quot;&lt;/span&gt; + zooKeeperCluster.getClass().getName());
  }

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void stopZooKeeper() {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (zooKeeperCluster != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      zooKeeperCluster.shutdown();
      zooKeeperCluster = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {
      LOG.warn(StringUtils.stringifyException(e));
    }
  }
 
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void startHBase() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (hbaseCluster != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      LOG.error(&lt;span class=&quot;code-quote&quot;&gt;&quot;MiniHBaseCluster already running&quot;&lt;/span&gt;);
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
    }
    hbaseCluster = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MiniHBaseCluster(conf, 1);
    &lt;span class=&quot;code-comment&quot;&gt;// opening the META table ensures that cluster is running
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HTable(conf, HConstants.META_TABLE_NAME);
    LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;started MiniHBaseCluster&quot;&lt;/span&gt;);
  }
 
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void stopHBase() {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (hbaseCluster != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      HConnectionManager.deleteConnectionInfo(conf, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
      hbaseCluster.shutdown();
      hbaseCluster = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {
      LOG.warn(StringUtils.stringifyException(e));
    }
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void startMiniCluster() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      startDFS();
      startZooKeeper();
      startHBase();
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {
      stopHBase();
      stopZooKeeper();
      stopDFS();
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
    }
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void stopMiniCluster() {
    stopHBase();
    stopZooKeeper();
    stopDFS();
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The base class for cluster testing can do something like so in its startUp method:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; void setUp() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    &lt;span class=&quot;code-comment&quot;&gt;// start the mini cluster &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; it is not running yet
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!isMiniClusterRunning()) {
      startMiniCluster();
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For example, when testing Stargate, it is clear that the minicluster startup costs are included in the run time of the first unit test, which checks if the miniclusters are all running, and subsequent tests do not incur those costs:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; 
test:
   [delete] Deleting directory /home/apurtell/src/stargate.git/build/test/logs
    [mkdir] Created dir: /home/apurtell/src/stargate.git/build/test/logs
    [junit] Running org.apache.hadoop.hbase.stargate.Test00MiniCluster
    [junit] Tests run: 4, Failures: 0, Errors: 0, Time elapsed: 10.329 sec
    [junit] Running org.apache.hadoop.hbase.stargate.Test01VersionResource
    [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 1.243 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestCellModel
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.012 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestCellSetModel
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.018 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestRowModel
    [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 0.008 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestScannerModel
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.013 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestStorageClusterStatusModel
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.024 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestStorageClusterVersionModel
    [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 0.006 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestTableInfoModel
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.017 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestTableListModel
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.012 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestTableRegionModel
    [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 0.018 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestVersionModel
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.014 sec

BUILD SUCCESSFUL
Total time: 14 seconds
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;This can obviously shave a lot of time off the current HBase test suite. However, the current suite will need to be heavily modified. Each test case has been written with the expectation that it starts up a pristine minicluster, so there are assumptions made that will be invalidated, and many cases which duplicate the table creates of others, etc.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12428484">HBASE-1556</key>
            <summary>[testing] optimize minicluster based testing in the test suite</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="apurtell">Andrew Purtell</reporter>
                        <labels>
                    </labels>
                <created>Sat, 20 Jun 2009 18:50:22 +0000</created>
                <updated>Fri, 20 Nov 2015 13:01:42 +0000</updated>
                            <resolved>Thu, 15 Oct 2009 03:25:27 +0000</resolved>
                                                    <fixVersion>0.90.0</fixVersion>
                                    <component>test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12722250" author="apurtell" created="Sat, 20 Jun 2009 19:30:48 +0000"  >&lt;p&gt;In addition we can consider some kind of &quot;parallel/distributed junit&quot; to divide up and assign out unit tests to multiple runners on a cluster, if a test cluster environment is available. Also, EC2 friendliness and maybe a driver script for EC2 that can spin up instances, assign out the tests, collect the results, tear down the instances, and mail the result to the tester or hbase-dev@&lt;/p&gt;</comment>
                            <comment id="12722267" author="nitay" created="Sat, 20 Jun 2009 22:06:37 +0000"  >&lt;p&gt;Great idea Andrew. On the assumptions side, what if we just delete all the data in DFS/HBase/ZK after each test? I&apos;d expect the overhead from that shouldn&apos;t be as bad as re-spinning the servers as we currently do.&lt;/p&gt;</comment>
                            <comment id="12722388" author="apurtell" created="Sun, 21 Jun 2009 17:35:37 +0000"  >&lt;p&gt;&quot;GridGain&quot; includes a distributed JUnit3 test framework: &lt;a href=&quot;http://www.gridgainsystems.com/wiki/display/GG15UG/Distributed+JUnit+Overview&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.gridgainsystems.com/wiki/display/GG15UG/Distributed+JUnit+Overview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is also &quot;GridUnit&quot;: &lt;a href=&quot;http://sourceforge.net/projects/gridunit/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://sourceforge.net/projects/gridunit/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12722393" author="apurtell" created="Sun, 21 Jun 2009 17:45:09 +0000"  >&lt;p&gt;@Nitay: Waiting for table delete is pretty expensive. It may be relatively clean to shut down the HBase minicluster, do the equivalent of &apos;hadoop fs -mv /hbase /hbase.&amp;lt;timestamp&amp;gt;&apos; and then launch a new HBase minicluster. Trade space for time by using mv instead of rmr to avoid delete overhead.&lt;/p&gt;</comment>
                            <comment id="12722788" author="stack" created="Mon, 22 Jun 2009 20:07:39 +0000"  >&lt;p&gt;I can see how a unit test could start the mini cluster if not running but how do you shut it down when the test suite is done.  Do you know of a hook in the ant junit to let you do this?&lt;/p&gt;

&lt;p&gt;I looked at junit 4.x.  It has @Before and @After but seems good for the life of @Test only.  Not good enough it would seem.&lt;/p&gt;

&lt;p&gt;This seems a little richer &amp;#8211; &lt;a href=&quot;http://testng.org/doc/documentation-main.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://testng.org/doc/documentation-main.html&lt;/a&gt;.  See down a bit where it has annotations like @BeforeSuite and @AfterSuite.&lt;/p&gt;</comment>
                            <comment id="12722822" author="apurtell" created="Mon, 22 Jun 2009 21:02:08 +0000"  >&lt;p&gt;No need to go to TestNG. (Not that I am opposed to that...) Currently I do this for the Stargate test suite:
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  class MiniClusterShutdownThread &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt; {
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void run() {
      stopMiniCluster();
    }
  }

  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; void setUp() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    &lt;span class=&quot;code-comment&quot;&gt;// start the mini cluster &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; it is not running yet
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!isMiniClusterRunning()) {
      startMiniCluster();
      &lt;span class=&quot;code-object&quot;&gt;Runtime&lt;/span&gt;.getRuntime().addShutdownHook(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MiniClusterShutdownThread());
    }
    &lt;span class=&quot;code-comment&quot;&gt;// ...
&lt;/span&gt;  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because the tests are run with forkmode=&quot;once&quot;, the initialization cost of spinning up the minicluster is borne by the first test only, and the shutdown thread runs when junit has no more testcases to execute to clean up everything. &lt;/p&gt;</comment>
                            <comment id="12722900" author="stack" created="Mon, 22 Jun 2009 23:51:07 +0000"  >&lt;p&gt;OK.  That works for me.  How you suggest we proceed.  I&apos;d actually like to rewrite bulk of unit tests so consistent, well-grouped, redundancies have been removed, and they are pertinent to current hbase.&lt;/p&gt;</comment>
                            <comment id="12722911" author="apurtell" created="Tue, 23 Jun 2009 00:28:43 +0000"  >&lt;p&gt;I do think a major refactoring if not what amounts to a rewrite is needed. One option is to continue to use JUnit3 as the test rig but look at the distributed extensions such as GridUnit or GridGain. However because so much would be changed anyway, moving to a different testing framework might make sense if there is something better out there. &lt;/p&gt;</comment>
                            <comment id="12722913" author="apurtell" created="Tue, 23 Jun 2009 00:35:30 +0000"  >&lt;p&gt;How forkmode=&quot;once&quot; and a parallel JUnit framework might work nicely together is for each sub-package in the test suite to be executed on an EC2 instance. Group related tests and their initializations together. &lt;/p&gt;</comment>
                            <comment id="12722980" author="stack" created="Tue, 23 Jun 2009 06:07:59 +0000"  >&lt;p&gt;I&apos;m ok with different framework.  Your suggestion of per-package is good too.  I was going to add some &quot;judgements&quot; made after spending 30 seconds comparing junit4, testng, and gridunit but have decided to withhold them till I&apos;ve spent at least 5 minutes on each.&lt;/p&gt;</comment>
                            <comment id="12729773" author="stack" created="Fri, 10 Jul 2009 18:58:50 +0000"  >&lt;p&gt;Making critical for 0.21.  We have to have a better test story.&lt;/p&gt;</comment>
                            <comment id="12753975" author="apurtell" created="Fri, 11 Sep 2009 03:48:11 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1828&quot; title=&quot;CompareFilters are broken from client-side&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1828&quot;&gt;&lt;del&gt;HBASE-1828&lt;/del&gt;&lt;/a&gt; is an issue where store level unit tests for filters pass but client side tests lock up. This is an indication that we need more client side tests for major functions. A persistent minicluster both helps and hurts here. It may make the suite fast enough to run the tests in a reasonable time frame, but bad state from a previous test case may manifest in a later one, causing confusion. &lt;/p&gt;</comment>
                            <comment id="12765731" author="stack" created="Wed, 14 Oct 2009 20:17:37 +0000"  >&lt;p&gt;@Andrew I was going to implement the general idea here of spinning up cluster at start of a test suite and keeping it up while tests run using the suggestion made in hbase-1276; i.e. junit4s @BeforeClass and @AfterClass.  If thats ok w/ you, can we close this issue as sub task of hbase-410?&lt;/p&gt;</comment>
                            <comment id="12765867" author="apurtell" created="Thu, 15 Oct 2009 02:17:28 +0000"  >&lt;p&gt;Sure, close this issue.&lt;/p&gt;</comment>
                            <comment id="12765888" author="stack" created="Thu, 15 Oct 2009 03:25:27 +0000"  >&lt;p&gt;This issue will be addressed by hbase-410&lt;/p&gt;</comment>
                            <comment id="15017872" author="lars_francke" created="Fri, 20 Nov 2015 13:01:42 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 20 Jun 2009 22:06:37 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32190</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 2 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hdy7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>99522</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>