<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Thu Dec 01 22:41:37 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-14283/HBASE-14283.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-14283] Reverse scan doesn&#8217;t work with HFile inline index/bloom blocks</title>
                <link>https://issues.apache.org/jira/browse/HBASE-14283</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Reverse scans do not work if an HFile contains inline bloom blocks or leaf level index blocks.  The reason is because the seekBefore() call calculates the previous data block&#8217;s size by assuming data blocks are contiguous which is not the case in HFile V2 and beyond.&lt;/p&gt;

&lt;p&gt;Attached is a first cut patch (targeting bcef28eefaf192b0ad48c8011f98b8e944340da5 on trunk) which includes:&lt;br/&gt;
(1) a unit test which exposes the bug and demonstrates failures for both inline bloom blocks and inline index blocks&lt;br/&gt;
(2) a proposed fix for inline index blocks that does not require a new HFile version change, but is only performant for 1 and 2-level indexes and not 3+.  3+ requires an HFile format update for optimal performance.    &lt;/p&gt;

&lt;p&gt;This patch does not fix the bloom filter blocks bug.  But the fix should be similar to the case of inline index blocks.  The reason I haven&#8217;t made the change yet is I want to confirm that you guys would be fine with me revising the HFile.Reader interface.&lt;/p&gt;

&lt;p&gt;Specifically, these 2 functions (getGeneralBloomFilterMetadata and getDeleteBloomFilterMetadata) need to return the BloomFilter.  Right now the HFileReader class doesn&#8217;t have a reference to the bloom filters (and hence their indices) and only constructs the IO streams and hence has no way to know where the bloom blocks are in the HFile.  It seems that the HFile.Reader bloom method comments state that they &#8220;know nothing about how that metadata is structured&#8221; but I do not know if that is a requirement of the abstraction (why?) or just an incidental current property. &lt;/p&gt;

&lt;p&gt;We would like to do 3 things with community approval:&lt;br/&gt;
(1) Update the HFile.Reader interface and implementation to contain and return BloomFilters directly rather than unstructured IO streams&lt;br/&gt;
(2) Merge the fixes for index blocks and bloom blocks into open source&lt;br/&gt;
(3) Create a new Jira ticket for open source HBase to add a &#8216;prevBlockSize&#8217; field in the block header in the next HFile version, so that seekBefore() calls can not only be correct but performant in all cases.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12857913">HBASE-14283</key>
            <summary>Reverse scan doesn&#8217;t work with HFile inline index/bloom blocks</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="benlau">Ben Lau</assignee>
                                    <reporter username="benlau">Ben Lau</reporter>
                        <labels>
                    </labels>
                <created>Fri, 21 Aug 2015 17:30:55 +0000</created>
                <updated>Wed, 27 Jan 2016 15:28:27 +0000</updated>
                            <resolved>Mon, 26 Oct 2015 23:45:17 +0000</resolved>
                                                    <fixVersion>2.0.0</fixVersion>
                    <fixVersion>1.2.0</fixVersion>
                    <fixVersion>1.3.0</fixVersion>
                    <fixVersion>1.0.3</fixVersion>
                    <fixVersion>1.1.3</fixVersion>
                    <fixVersion>0.98.16</fixVersion>
                                        <due></due>
                            <votes>1</votes>
                                    <watches>20</watches>
                                                                <comments>
                            <comment id="14707088" author="benlau" created="Fri, 21 Aug 2015 17:31:08 +0000"  >&lt;p&gt;We suspect the person in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13830&quot; title=&quot;Hbase REVERSED may throw Exception sometimes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13830&quot;&gt;HBASE-13830&lt;/a&gt; also ran into this bug, based on his similar exception, but can&#8217;t know for sure without more information from him.&lt;/p&gt;</comment>
                            <comment id="14707096" author="benlau" created="Fri, 21 Aug 2015 17:34:27 +0000"  >&lt;p&gt;In the patch I also added an extra unit test to TestFromClientside, that also tests reverse scan, but is unrelated to this bug, just as an additional test to strengthen the test suite.  &lt;/p&gt;</comment>
                            <comment id="14710583" author="benlau" created="Tue, 25 Aug 2015 04:49:45 +0000"  >&lt;p&gt;Anyone have any comments on this bug and the fix?  Perhaps &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zjushch&quot; class=&quot;user-hover&quot; rel=&quot;zjushch&quot;&gt;chunhui shen&lt;/a&gt; (from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4811&quot; title=&quot;Support reverse Scan&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4811&quot;&gt;&lt;del&gt;HBASE-4811&lt;/del&gt;&lt;/a&gt; which implemented reverse scan) or &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mikhail&quot; class=&quot;user-hover&quot; rel=&quot;mikhail&quot;&gt;Mikhail Bautin&lt;/a&gt; (from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3857&quot; title=&quot;Change the HFile Format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3857&quot;&gt;&lt;del&gt;HBASE-3857&lt;/del&gt;&lt;/a&gt; which implemented HFileV2) or &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=liyintang&quot; class=&quot;user-hover&quot; rel=&quot;liyintang&quot;&gt;Liyin Tang&lt;/a&gt; (from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4532&quot; title=&quot;Avoid top row seek by dedicated bloom filter for delete family bloom filter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4532&quot;&gt;&lt;del&gt;HBASE-4532&lt;/del&gt;&lt;/a&gt; which added the bloom filter method(s) I have a question about)?  Or maybe one of them can tell me the person(s) who would be best suited to examine the bug and proposed fixes?&lt;/p&gt;</comment>
                            <comment id="14710616" author="ram_krish" created="Tue, 25 Aug 2015 05:37:11 +0000"  >&lt;p&gt;Attaching the patch for QA.  &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=benlau&quot; class=&quot;user-hover&quot; rel=&quot;benlau&quot;&gt;Ben Lau&lt;/a&gt;&lt;br/&gt;
Suggest to rename the patch based on the JIRA id.  Will take a look at the patch ASAP.  Thanks for the patch.  Lets see what the QA says. &lt;/p&gt;</comment>
                            <comment id="14710911" author="hadoopqa" created="Tue, 25 Aug 2015 08:50:40 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12752147/HBASE-14283.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12752147/HBASE-14283.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit d0873f5a8cc060adbc5a1ae0ed52b84a8942a868.&lt;br/&gt;
  ATTACHMENT ID: 12752147&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 11 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +      HTableDescriptor htd = new HTableDescriptor(TableName.valueOf(&quot;testReverseScanRandomTable&quot;+encoding.name()));&lt;br/&gt;
+    return String.format(&quot;Failed to match on iteration %s between %s and %s&quot;, iteration, Bytes.toStringBinary(a), Bytes.toStringBinary(b));&lt;br/&gt;
+        + Bytes.toStringBinary(keys&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;) + &quot;)&quot;, true, scanner.seekBefore(new KeyValue.KeyOnlyKeyValue(keys&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;)));&lt;br/&gt;
+        + Bytes.toStringBinary(keys&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;) + &quot;)&quot;, false, scanner.seekBefore(new KeyValue.KeyOnlyKeyValue(keys&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;)));&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15241//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15241//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15241//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15241//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15241//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15241//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15241//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15241//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14711760" author="benlau" created="Tue, 25 Aug 2015 18:44:41 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ramkrishna.s.vasudevan%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;ramkrishna.s.vasudevan@gmail.com&quot;&gt;ramkrishna vasudevan&lt;/a&gt; for showing me the conventions for the patch process.  The tests look like they passed, with 1 minor style comment.  I can fix that but want to address the bloom filter blocks issue first.  Who would be best for me to ask about it, how about you?  Is it reasonable to change the HFile.Reader interface so that the HFile reader (instead of the higher level StoreFile reader) is in charge of deserializing and holding the bloom filter data structures?  Can&apos;t see why not but maybe I&apos;m missing something.&lt;/p&gt;</comment>
                            <comment id="14713600" author="anoop.hbase" created="Wed, 26 Aug 2015 14:55:52 +0000"  >&lt;p&gt;We use below method to get the previous block&lt;br/&gt;
public HFileBlock readBlock(long dataBlockOffset, long onDiskBlockSize,&lt;br/&gt;
      final boolean cacheBlock, boolean pread, final boolean isCompaction,&lt;br/&gt;
      boolean updateCacheMetrics, BlockType expectedBlockType,&lt;br/&gt;
      DataBlockEncoding expectedDataBlockEncoding)&lt;/p&gt;

&lt;p&gt;So there no BlockType  check and looping?  May be it will read a block and see that block is not the expected one and go to next block and check for type. In seek before case instead of going fwd we should be going backward in case the expected block type is matching with the cur block type. That way of solution will work?&lt;/p&gt;</comment>
                            <comment id="14715147" author="benlau" created="Wed, 26 Aug 2015 16:58:25 +0000"  >&lt;p&gt;Hi Anoop.  The problem isn&apos;t that we read a previous block and see that the block is not the expected type.  prevBlockOffset guarantees that we can seek to the previous block of the same type as the current one.  See the comments on HFileBlock.getPrevBlockOffset().  We are always seeking to the previous data block, we are simply not calculating how much to read correctly once we have seeked to that previous data block because our prev data block size calculation can include other blocks because of the layout of scannable section in HFileV2+.  We need a way of knowing apriori what the size of the previous data block is.  The method you describe is used in HFileReaderImpl.readNextDataBlock().  Note that the reason this method works is because this method can use the method curBlock.getNextBlockOnDiskSizeWithHeader().  We need something similar to that when seeking backwards in order to achieve optimal performance.  Let me know if I misunderstood what you meant.  &lt;/p&gt;</comment>
                            <comment id="14715179" author="ram_krish" created="Wed, 26 Aug 2015 17:17:12 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=benlau&quot; class=&quot;user-hover&quot; rel=&quot;benlau&quot;&gt;Ben Lau&lt;/a&gt;&lt;br/&gt;
Let me take a look at this tomorrow morning my time. &lt;/p&gt;</comment>
                            <comment id="14716986" author="ram_krish" created="Thu, 27 Aug 2015 16:26:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;Is it reasonable to change the HFile.Reader interface so that the HFile reader (instead of the higher level StoreFile reader)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think you can try this if you think that will help in the bloom area.  Also it is an private interface so it is fine to change. &lt;/p&gt;</comment>
                            <comment id="14717095" author="benlau" created="Thu, 27 Aug 2015 17:20:05 +0000"  >&lt;p&gt;Thanks ramkrishna.  I will take a crack at fixing the calculation in the presence of bloom filters later and see how an interface update looks.  &lt;/p&gt;</comment>
                            <comment id="14720844" author="benlau" created="Sat, 29 Aug 2015 00:36:47 +0000"  >&lt;p&gt;Here&apos;s a V2 of the patch that handles bloom filter blocks.  It requires some interface changes that blur the line a bit between the StoreFile reader and the HFile reader which is not ideal but there isn&apos;t really any other way to fix this currently in a performant way for bloom filters.  Let me know what you guys think.  I have attached the patch to the ticket for review/feedback.  &lt;/p&gt;</comment>
                            <comment id="14720960" author="hadoopqa" created="Sat, 29 Aug 2015 04:08:38 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12753103/HBASE-14283-v2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12753103/HBASE-14283-v2.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 0d06d8ddd0aa9aff7476fb6a7acd6af1d24ba3fc.&lt;br/&gt;
  ATTACHMENT ID: 12753103&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 11 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1849 checkstyle errors (more than the master&apos;s current 1846 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15322//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15322//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15322//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15322//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15322//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15322//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15322//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15322//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14721255" author="yuzhihong@gmail.com" created="Sat, 29 Aug 2015 20:47:51 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Data block offset was provided that is actually &quot;&lt;/span&gt;
+            + &lt;span class=&quot;code-quote&quot;&gt;&quot;an index or bloom block offset: &quot;&lt;/span&gt; + dataBlockOffset1);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I understand the meaning of above message. But strictly speaking, offset is just a numeric value. Itself wouldn&apos;t indicate whether the block is a data block or index / bloom block.&lt;/p&gt;

&lt;p&gt;Providing number of index blocks found in the exception message would be helpful:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (indexBlocksFound &amp;gt; 1) {
+        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Found more than 1 block of &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; type between 2 &quot;&lt;/span&gt;
+            + &lt;span class=&quot;code-quote&quot;&gt;&quot;consecutive data blocks: &quot;&lt;/span&gt; + type);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; BloomFilter getGeneralBloomFilter(BloomType bloomFilterType) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (generalBloomFilterLoaded) {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; generalBloomFilter;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Can generalBloomFilterLoaded be replaced with checking generalBloomFilter not being null ? Similar comment applies to deleteBloomFilterLoaded&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (bloomFilterType == BloomType.NONE) {
+      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Valid bloom filter type not found in FileInfo&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Can information from FileInfo be included in the exception message to facilitate debugging ?&lt;/p&gt;

</comment>
                            <comment id="14724040" author="benlau" created="Mon, 31 Aug 2015 21:06:34 +0000"  >&lt;p&gt;Correct me if I&apos;m wrong but I think I can&apos;t do a generalBloomFilter == null check because there are 3 states not 2: (1) Tried to load filter and it exists (2) Tried to load filter and it does not exist (3) Have not tried to load filter yet.  If we rely on the generalBloomFilter == null check we can&apos;t distinguish between (2) and (3) which means we would end up trying to reload the filter unnecessarily.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Can information from FileInfo be included in the exception message to facilitate debugging ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What information from FileInfo should be provided?  The point of the message (maybe it needs to be revised for clarity) is that we found an unexpected BloomFilter in the HFile-- unexpected because the HFile FileInfo metadata claims there is no bloom filter (type = NONE).  I will clarify the msg a bit.  &lt;/p&gt;

&lt;p&gt;I&apos;ll fix the other issues, thanks.&lt;/p&gt;</comment>
                            <comment id="14724056" author="yuzhihong@gmail.com" created="Mon, 31 Aug 2015 21:13:34 +0000"  >&lt;p&gt;Can a singleton of type BloomFilter be created so that we can use it to denote case 2 ?&lt;br/&gt;
Meaning generalBloomFilter is initially null. When we find no bloom filter exists, assign generalBloomFilter the singleton.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="14724069" author="yuzhihong@gmail.com" created="Mon, 31 Aug 2015 21:22:40 +0000"  >&lt;p&gt;Putting patch on reviewboard would make review easier.&lt;/p&gt;

&lt;p&gt;There&apos;re some typo&apos;s in current patch.&lt;/p&gt;</comment>
                            <comment id="14724104" author="benlau" created="Mon, 31 Aug 2015 21:46:16 +0000"  >&lt;p&gt;The other parts of the code consider BloomFilter to be a nullable type, not just here.  I don&apos;t know if it makes sense to change that in this patch.  It is a bit overkill to use a null object here and seems to increase complexity more than it eliminates currently (new class to eliminate a load flag), since unlike in some common use cases of having a null object, we can&apos;t avoid checking for the null object here.&lt;/p&gt;</comment>
                            <comment id="14724107" author="benlau" created="Mon, 31 Aug 2015 21:46:59 +0000"  >&lt;p&gt;Alright I&apos;ll put it on reviewboard, thanks.&lt;/p&gt;</comment>
                            <comment id="14724112" author="yuzhihong@gmail.com" created="Mon, 31 Aug 2015 21:50:10 +0000"  >&lt;p&gt;Alright, you can keep the checking as it is now.&lt;/p&gt;</comment>
                            <comment id="14724357" author="benlau" created="Mon, 31 Aug 2015 23:05:44 +0000"  >&lt;p&gt;Reviewboard link with updated version of patch (v3): &lt;a href=&quot;https://reviews.apache.org/r/37971/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/37971/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14736047" author="anoop.hbase" created="Wed, 9 Sep 2015 02:54:07 +0000"  >&lt;p&gt;Going through the details of this issue and the patch. &lt;br/&gt;
We have the optimization of reading next block&apos;s header along with every block to avoid 2 reads (1st header and get data size and then do second read). This works well for forward read.  In case of backward read, where we have to read the prev block, we tried to solve the case by calculating the prev blocks size from offset of 2 blocks (considering no other blocks in btw these 2 data blocks)..  As per the bug, this assumption is not true. Good find.  If we have the prev block data size also along with prev block offset, we were good.  But we dont have that in current HFiles.  When we dont know the data size of a block already, we are passing -1 so that it will read block by 2 reads.&lt;br/&gt;
Seeing the patch it is very complex. And there are additional overhead also.  Also it is not complete fix as it can not handle more than 2 level index block.  So IMHO it will be better to avoid this kind of complex fix.  &lt;br/&gt;
We can do the fix in 2 steps.&lt;br/&gt;
1. Bump the minor version of the HFile and add the prev block size also along with offset.  When this info is there in HFile we can safely use that and do read of prev block in one read.&lt;br/&gt;
2. For reading old files where this meta data is NOT available, just pass -1 and let it read in 2 steps. It is ok..  Any way once the patch is applied and over the run the older files will get compacted to new file and this will have the additional meta info.&lt;/p&gt;</comment>
                            <comment id="14736093" author="benlau" created="Wed, 9 Sep 2015 03:33:25 +0000"  >&lt;p&gt;Yep, we talked with Anoop and agree that the patch adds a lot of complexity for a fix that doesn&apos;t fix the issue 100%.  The portion of the patch that is required to fix the bug for bloom filters is especially long.  We thought to aim for a longer term fix later, but based on our discussion with Anoop it sounds like a backwards compatible, complete fix that adds the necessary metadata to HFile should not be too complicated/much work (eg does not involve creating new HFileReader implementation or other infrastructure).  We will submit a new patch later with a final fix.  We will keep the unit tests from the 1st patch since they are still applicable.&lt;/p&gt;</comment>
                            <comment id="14736662" author="ram_krish" created="Wed, 9 Sep 2015 11:02:25 +0000"  >&lt;p&gt;Just to clarify, the prev block data size is what is missing here.  So that is going to be added per block and this information is added to the hfile&apos;s metadata?  So there is going to be a change in the HFileblock&apos;s SerDe format?&lt;/p&gt;</comment>
                            <comment id="14737171" author="benlau" created="Wed, 9 Sep 2015 16:46:51 +0000"  >&lt;p&gt;Yes we would be changing the serialization for HFileBlock header.  It would have a new field for the previous data block size, for block of the same type (same semantics as prevBlockOffset now).  Any objections?&lt;/p&gt;</comment>
                            <comment id="14737207" author="ram_krish" created="Wed, 9 Sep 2015 17:07:50 +0000"  >&lt;p&gt;Am fine. The HFile&apos;s metadata has to be used while reading the HFileblock. Can look at the patch once posted.&lt;/p&gt;</comment>
                            <comment id="14744844" author="benlau" created="Tue, 15 Sep 2015 05:13:09 +0000"  >&lt;p&gt;Hey guys, I started looking into updating the HFile serialization to support reverse scans per previous comments.  One thing that immediately struck me as being a possible problem is that the header sizes appear to be hardcoded into HConstants.java (HConstants.HFILEBLOCK_HEADER_SIZE), rather than being read from the HFile block header or HFile metadata itself.  &lt;/p&gt;

&lt;p&gt;This seems to imply that if I add more fields to the header and then do a rolling restart to update all region servers to have my code, any old region server that hasn&apos;t updated yet and is processing the new HFiles will not realize the header is bigger now and that there is stuff they need to skip / ignore.  This might necessitate a 2-step restart process with 2 rolling restarts.  &lt;/p&gt;

&lt;p&gt;Restart 1 to update all RS to have the appropriate new reading code.  Restart 2 will enable writes by setting an HBase config option (false by default) to start writing the new HFiles.  Am I missing something and this 2-step rolling restart is not necessary for some reason?  It seems unlikely people would find this process palatable but is there a better alternative?  &lt;/p&gt;

&lt;p&gt;Alternatively I can turn this into a non-backwards compatible major version update instead of a minor version update and require a full cluster restart but that is kind of harsh in its own way.  Opinions/thoughts?&lt;/p&gt;</comment>
                            <comment id="14746484" author="benlau" created="Tue, 15 Sep 2015 23:24:33 +0000"  >&lt;p&gt;After talking to some committers in HBase, it seems that unless there is a very strong case / no viable alternative, all new patches to HBase should not require a full cluster restart.  Hence, we will be going with the 2-rolling-restart approach as described above.  It requires the cluster operator to do 2 rolling restarts and set a new config but that should not be too burdensome for a major upgrade.  This rolling-restart-compatible approach is a bit more messy/complicated code-wise so let us look a bit into the best way to do this.&lt;/p&gt;</comment>
                            <comment id="14906704" author="benlau" created="Thu, 24 Sep 2015 17:33:43 +0000"  >&lt;p&gt;Hi guys, I have posted a new patch on review board.  See &lt;a href=&quot;https://reviews.apache.org/r/38720/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/38720/&lt;/a&gt;.  The patch adds support for HFileV4 and uses it to fix/optimize reverse scan.  The patch is designed to be rolling-restartable in 2 phases, as discussed in an above comment on Sep 14.&lt;/p&gt;

&lt;p&gt;As currently posted, I think the patch has to go into HBase 2.0 since it changes HConstants which is marked @Stable.  It turns out that assumptions about the header size and contents are hardcoded in several places, primarily HConstants.java.&lt;/p&gt;

&lt;p&gt;Let me know what you guys think of the patch.  More eyes would be better because the changes are somewhat farther reaching than they sounded initially and the HFile format has a long history that I&#8217;m not as familiar with as most people around here.&lt;/p&gt;

&lt;p&gt;I also need to reach out to Facebook later for feedback since this change seems like it will affect their external Memcached block cache.  I have marked TODO in the patch in several places where I will need to talk with Facebook.&lt;/p&gt;

&lt;p&gt;Also, since we are adding a new HFileV4, now would be a good time to fix anything else that is broken or add additional metadata for future optimizations that we missed out on in HFileV3.  Someone could add more metadata after the patch stands on its own as a complete fix for reverse scans.  &lt;/p&gt;</comment>
                            <comment id="14906709" author="ndimiduk" created="Thu, 24 Sep 2015 17:36:31 +0000"  >&lt;p&gt;HFileV4 would be a pretty drastic change. I suggest you raise a thread on dev to discuss what other things we might want to add/change with a v4.&lt;/p&gt;</comment>
                            <comment id="14906728" author="benlau" created="Thu, 24 Sep 2015 17:50:09 +0000"  >&lt;p&gt;Hi Nick, that sounds like a good idea, I will do that.&lt;/p&gt;</comment>
                            <comment id="14908964" author="apurtell" created="Sat, 26 Sep 2015 01:23:05 +0000"  >&lt;p&gt;We could do a v4 for 2.0. Should run this idea by &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mbertozzi&quot; class=&quot;user-hover&quot; rel=&quot;mbertozzi&quot;&gt;Matteo Bertozzi&lt;/a&gt; &lt;/p&gt;</comment>
                            <comment id="14908994" author="mbertozzi" created="Sat, 26 Sep 2015 01:58:05 +0000"  >&lt;p&gt;v4 probably is a bad name.. &lt;br/&gt;
this is more a v2/3.x since (the original idea) was just a fix in the format to solve a bug.&lt;br/&gt;
not a complete format redesign. everything should be the same aside adding one field on the level block. &lt;br/&gt;
Ben was also suggesting a double rolling upgrade to migrate to that, more or less like we did for 3.&lt;br/&gt;
I&apos;m ok to have it only in 2.0, but to me this can also be done in a 1.3. just switch the name from v4 to 3.x &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;if we want to extend the scope of redesigning the file-format, that will be another topic.&lt;br/&gt;
I know that &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;, during hbasecon, was suggesting format changes to group by qualifiers and similar.&lt;br/&gt;
but that will not be just related to fixing this bug and it will probably be in 2.0 only I guess.&lt;/p&gt;</comment>
                            <comment id="14909063" author="benlau" created="Sat, 26 Sep 2015 03:50:40 +0000"  >&lt;p&gt;As Matteo mentions, we discussed this issue briefly with him and Stack about a week ago or so.  &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mbertozzi&quot; class=&quot;user-hover&quot; rel=&quot;mbertozzi&quot;&gt;Matteo Bertozzi&lt;/a&gt; I thought we had asked if updating the major version would be fine and the answer was in the affirmative but I might&apos;ve misunderstood or misunderstood the degree of affirmation.  (IIRC the reason was something along the lines of cluster operators updating HFile.FORMAT_VERSION_KEY in their config being a desirable property of the 2nd rolling upgrade or something.)&lt;/p&gt;

&lt;p&gt;In any case though the reason we initially were going to do a 3.x but moved to a 4.0 was because (1) major versions (but not in HFiles?) generally denote level of backward compatibility and the new HFiles produced in this patch cannot be read by an HFileV3.X reader (2) the patch requires enough changes to assumptions in the serialization code (eg regarding header size or block cache) that it doesn&apos;t seem appropriate as a minor version change and (3) if we are following the rules we&apos;ve set for ourselves, the changes in HConstants alone (annotated as Stable) mean this patch should be going into HBase 2.0 (admittedly rules can always be bent).&lt;/p&gt;

&lt;p&gt;Updating only the minor version because the format change currently fixes only 1 bug (as opposed to 10 bugs or adding a new feature) seems to be the wrong way to think of versioning, IMO.  If our concern is that we would like a fix for this bug in 1.3 and not wait until 2.0, we could also commit a shorter term fix for 1.3 that just always reads the block header or does an optimistic read and falls back on reading the block header if the read fails from block size expectations (configurable, optimistic off by default).  In combination with an expected size correction for index blocks (perhaps not for bloom filter blocks since that fix is a messy addition and also violates some API abstraction layers in StoreFile) it might be fine in most scenarios, especially if the cluster operator is allowed to change the inline block chunking config for the cluster that needs to do reverse scans.  Within Yahoo internally we will probably go with a bandaid fix like this for now so that users can use reverse scans and still get &apos;ok&apos; even if not max performance.  (Also sub-100% performance is better than getting exceptions about block sizes &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; )&lt;/p&gt;

&lt;p&gt;If people would be okay with dividing it up this way-- short term fix (no HFile changes) for 1.3 and a longer term fix (HFileV4) for HBase 2.0 I could create a separate ticket with the newest patch as a starting point for HFileV4 and submit another patch for this ticket that implements a configurable &apos;choose your tradeoff&apos; fix as described in the previous paragraph.&lt;/p&gt;</comment>
                            <comment id="14909071" author="mbertozzi" created="Sat, 26 Sep 2015 04:22:01 +0000"  >&lt;p&gt;I was making the point for a 2/3.x just because, people was already scared by the name v4 for the format. even if there are no real changes to the format itself aside few things. also we had already an &quot;incompatibile&quot; change in a minor version of hfile (the reason the minor version was introduced) and it was more or less the same thing as this one. In that case was adding a field to the header for checksum &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5074&quot; title=&quot;support checksums in HBase block cache&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5074&quot;&gt;&lt;del&gt;HBASE-5074&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;in any case i&apos;m pretty sure we can get the changes in a 1.x too. off by default and people can decide if they care about that  or not. more or less the same thing happened for the hfile v2.1 (checksum), v2.2 (protobufs) and v3 (tags). &lt;br/&gt;
but that&apos;s not my call, the next RM for 1.3 will make the call. but you have a +1 for me to change the hfile format in 2.0&lt;/p&gt;</comment>
                            <comment id="14909091" author="lhofhansl" created="Sat, 26 Sep 2015 05:12:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;I know that Lars Hofhansl, during hbasecon, was suggesting format changes to group by qualifiers and similar.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ve suggested many things over the years &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I think this was about storing keys and values separately in HFile is indexing each with the start position. So if now scan with a filter, we can slog through the filters pretty quickly and only reassemble those Cells that match. Or we can do fast aggregates over the value... Both need significant other plumbing as well.&lt;/p&gt;</comment>
                            <comment id="14909362" author="apurtell" created="Sat, 26 Sep 2015 17:28:42 +0000"  >&lt;p&gt;When we were designing tags we accepted some limitations of HFile that later were problematic, specifically, we couldn&apos;t vary cell encoding on a block by block basis. Even if no cells use tags in a file, we&apos;d bloat each cell with a short. Later we introduced a whole file optimization for this issue but clearly we&apos;d have more opportunities to employ it if we could vary encoding strategy on a block-by-block basis. I thought about introducing an extensible pbufed block header. It didn&apos;t make sense for the tag serialization issue - we would trade one type of bloat for another, those additional header bytes will end up in the block cache - but if there are multiple use cases for it lined up, a new extensible pbufed &apos;block header&apos; could be worthwhile. Would make future block level changes less likely to be incompatible changes too. &lt;/p&gt;

&lt;p&gt;Does the introduction of something like that require a major version bump? I think so. I&apos;d like to see us be more like semver with HFile versioning, and if we&apos;re on the same page about that, this is a major version bump because earlier versioned readers won&apos;t be able to handle the change. &lt;/p&gt;

&lt;p&gt;Also opens the door to interesting things like using different block encoding strategies on a block by block basis according to characteristics of the cells to be encoded within.&lt;/p&gt;</comment>
                            <comment id="14943239" author="anoop.hbase" created="Mon, 5 Oct 2015 11:13:01 +0000"  >&lt;p&gt;We can fix this bug now (in all applicable versions) by reading the header and then data. This 2 reads have perf impact but better no bug. Can we get that in first?  For the 2.0 version (branch-1 also?)  we can decide on how to add the new data to header (with major version bump or minor bump)..  Fixing this bug as such we can give priority and get it done soon?&lt;/p&gt;</comment>
                            <comment id="14946197" author="benlau" created="Wed, 7 Oct 2015 04:07:03 +0000"  >&lt;p&gt;Hey guys, sorry, I should be able to get back to this soon.  Finishing up an unrelated project right now.  I didn&apos;t know that minor versions in HFiles were also non-backwards compatible.  That&apos;s one less reason then to make this a major version bump.  If anyone has a strong preference for this fix to go into a V3.X I can change the patch to use minor version (eg for header size calculation) when I have time to do it.  If not I&apos;ll leave it as V4 since it&apos;s a little simpler in the code as a major version bump.  My original intention btw if it wasn&apos;t clear was that this wouldn&apos;t be the only change in a V4, just the first change that would go into a V4, whose format/contents is not yet meant to be final even when this patch is committed, i.e. V4 would be essentially a WIP with more changes suggested and implemented in other tickets and eventually released in HBase 2.0.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; I&apos;m down for committing a short-term read-the-header-always fix for now and then discussing the longer term solution second.  Which branches do you want the patch for?&lt;/p&gt;</comment>
                            <comment id="14946672" author="anoop.hbase" created="Wed, 7 Oct 2015 10:59:03 +0000"  >&lt;p&gt;I would say commit for all applicable branches including Trunk.  The better fix wherever we need (trunk , branch-1) pls add a TODO in the patch with Jira# which will fix that.&lt;/p&gt;</comment>
                            <comment id="14947873" author="benlau" created="Thu, 8 Oct 2015 00:30:41 +0000"  >&lt;p&gt;Alright I&apos;ll work on that.  I created &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14576&quot; title=&quot;New HFile version for optimized reverse scans&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14576&quot;&gt;HBASE-14576&lt;/a&gt; for the longer term fix, so this ticket will just be to implement the short term fix we described.&lt;/p&gt;</comment>
                            <comment id="14948046" author="benlau" created="Thu, 8 Oct 2015 04:17:16 +0000"  >&lt;p&gt;Short term patches for this bug per discussion.&lt;/p&gt;</comment>
                            <comment id="14948049" author="benlau" created="Thu, 8 Oct 2015 04:23:16 +0000"  >&lt;p&gt;Hmmm, can&apos;t seem to edit Jira comments.  Anyways, I attached short term patches to the ticket per discussion for all versions of HBase from 0.98 to master.  The patches are mostly the same other than 0.98.  There were a couple of utility methods that were missing/private in earlier versions of HBase 1.X that I backported or changed to public to mirror the master version of the patch.  (Let me know if that isn&apos;t kosher for some reason.)  I probably won&apos;t have time to update the patches this week but I&apos;ll look at feedback and make appropriate changes when I get the chance next week.&lt;/p&gt;</comment>
                            <comment id="14948217" author="hadoopqa" created="Thu, 8 Oct 2015 07:41:25 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12765517/HBASE-14283-master.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12765517/HBASE-14283-master.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 7e30436e3fa84525b85b05b9e23cb01b2ada7c12.&lt;br/&gt;
  ATTACHMENT ID: 12765517&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 4 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.GenericTestUtils.waitFor(GenericTestUtils.java:164)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:222)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestingThread.run(MultithreadedTestUtil.java:189)&lt;br/&gt;
	at org.apache.hadoop.test.MultithreadedTestUtil$TestContext.waitFor(MultithreadedTestUtil.java:119)&lt;br/&gt;
	at org.apache.hadoop.hdfs.server.namenode.ha.TestPipelinesFailover.testPipelineRecoveryStress(TestPipelinesFailover.java:488)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15912//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15912//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15912//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15912//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15912//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15912//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15912//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15912//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14948230" author="yuzhihong@gmail.com" created="Thu, 8 Oct 2015 07:52:21 +0000"  >&lt;p&gt;lgtm&lt;/p&gt;

&lt;p&gt;QA report picked up hadoop tests.&lt;/p&gt;</comment>
                            <comment id="14950185" author="anoop.hbase" created="Fri, 9 Oct 2015 10:39:43 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="14956228" author="benlau" created="Wed, 14 Oct 2015 04:23:28 +0000"  >&lt;p&gt;So anything I should change in the patches?  How many +1&apos;s are needed?  Does someone else need to +1?  &lt;/p&gt;</comment>
                            <comment id="14956240" author="anoop.hbase" created="Wed, 14 Oct 2015 04:34:24 +0000"  >&lt;p&gt;Attach the same patch once more for a clean QA run.. Then we can commit it..  Ted can you pls commit it after QA? &lt;/p&gt;</comment>
                            <comment id="14956254" author="lhofhansl" created="Wed, 14 Oct 2015 04:45:48 +0000"  >&lt;p&gt;Am I understanding correctly that we always incur two reads now, even when we&apos;re scanning forward? If so, that seems unfortunate.&lt;/p&gt;</comment>
                            <comment id="14956263" author="anoop.hbase" created="Wed, 14 Oct 2015 04:58:53 +0000"  >&lt;p&gt;No it is for backward scan only.  &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=benlau&quot; class=&quot;user-hover&quot; rel=&quot;benlau&quot;&gt;Ben Lau&lt;/a&gt;  confirm once if am wrong.&lt;/p&gt;</comment>
                            <comment id="14956541" author="benlau" created="Wed, 14 Oct 2015 09:24:34 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, I probably should&#8217;ve called it out explicitly but yes technically, it would affect forward scans (among other things), but I don&#8217;t think in any noticeable way.  The patched code is called by HalfStoreFileReader.getLastKey().  &lt;/p&gt;

&lt;p&gt;This getLastKey() method is needed to figure out the split point of a region which is eg used in splitting a region.  Extra IO op there but given that region splits don&#8217;t happen frequently nor at a very high rate when they do I think it is fine.  The getLastKey() is also used by StoreFile.Reader for passesKeyRangeFilter() check to determine whether a store is applicable to a scan, both forward/reverse.  It affects the initial scan creation as well as later next() RPC calls I think.  Although this is too bad, it doesn&#8217;t really matter I think in practice, because the block of the last key will get cached in the BlockCache the first time we need to know the last key for that halfstore.  So repeated calls later in the region server will not incur any overhead.  Let me know if this addresses your concerns or not.&lt;/p&gt;

&lt;p&gt;Incidentally I think that caching is one of the primary reasons why there seems to be a decent # of people using reverse scan but almost no one reporting this bug&#8212; because caching often hides it, either completely or nondeterministically (requests succeeding on later retries).  We had some problems initially reproducing this bug reliably because if we ran forward scans in a table concurrently with the reverse scans, it would cause the blocks to become cached and so certain key ranges that previously would&#8217;ve caused reverse scan to fail suddenly started working just fine.&lt;/p&gt;

&lt;p&gt;Re: Attaching the same patch, let me know if I&apos;m doing this wrong but it sounds like all I should have to do is just upload the same patch file for master but with a different name and the QA tests will pick it up.  I will do that.&lt;/p&gt;</comment>
                            <comment id="14956547" author="benlau" created="Wed, 14 Oct 2015 09:26:37 +0000"  >&lt;p&gt;Attached a new patch for master, same as the previous patch but with &apos;reupload&apos; in the name..&lt;/p&gt;</comment>
                            <comment id="14956915" author="hadoopqa" created="Wed, 14 Oct 2015 13:17:45 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12766505/HBASE-14283-reupload-master.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12766505/HBASE-14283-reupload-master.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 94bfe909aff9fd74cb1a5d0c3f9209a19704c6cf.&lt;br/&gt;
  ATTACHMENT ID: 12766505&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 4 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16003//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16003//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16003//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16003//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16003//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16003//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Javadoc warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16003//artifact/patchprocess/patchJavadocWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16003//artifact/patchprocess/patchJavadocWarnings.txt&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16003//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16003//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14959934" author="apurtell" created="Fri, 16 Oct 2015 00:32:26 +0000"  >&lt;blockquote&gt;&lt;p&gt;Although this is too bad, it doesn&#8217;t really matter I think in practice, because the block of the last key will get cached in the BlockCache the first time we need to know the last key for that halfstore.  So repeated calls later in the region server will not incur any overhead.  Let me know if this addresses your concerns or not.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well... There are scanning workloads where the data being scanned won&apos;t fit into the blockcache and so the user would be calling Scan#setCacheBlocks(boolean) with &apos;false&apos;.&lt;/p&gt;

&lt;p&gt;If we are only doing twice as many reads as before per block only for HalfStoreFileReader, then I think this is ok, because HalfStoreFileReader is only used between the time when a split takes place and when compaction on the daughters is complete, references are removed, and the parent is deleted. Please add comments indicating where we are taking on suboptimal behavior. &lt;/p&gt;

&lt;p&gt;If we will always issue two reads for a block in all cases, then that is really unfortunate and I&apos;d ask that be revisited.&lt;/p&gt;</comment>
                            <comment id="14959998" author="benlau" created="Fri, 16 Oct 2015 01:29:11 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=andrew.purtell%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;andrew.purtell@gmail.com&quot;&gt;Andrew Purtell&lt;/a&gt; Let me know if I&apos;m missing something, but I think there is more than 1 scan in play here.  I think you&apos;re talking about an external hbase client scan.  I&apos;m talking about an internal hbase scan opened up by the regionserver and which we know for a fact caches the block.  See the implementation of HalfStoreFileReader.getLastKey(), it is creating an internal scanner that does cache.  Furthermore, the results of the method aren&apos;t cached in the Reader class (eg as a variable) and since the method is called repeatedly in the codebase it seems likely that the author&apos;s expectation was that the block cache would work correctly and make an internal cache for the file reader redundant.  So not only does this scenario happen only for newly split regions but it only happens for the first time.  I can add more comments to the patches if it is really necessary but there is already a comment in the code indicating that this fix is not performant and is meant to be updated by a later ticket whose jira # is listed.&lt;/p&gt;</comment>
                            <comment id="14965794" author="benlau" created="Tue, 20 Oct 2015 21:20:43 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=andrew.purtell%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;andrew.purtell@gmail.com&quot;&gt;Andrew Purtell&lt;/a&gt; Is the above explanation agreeable?&lt;/p&gt;</comment>
                            <comment id="14974587" author="benlau" created="Mon, 26 Oct 2015 17:25:15 +0000"  >&lt;p&gt;Still there &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=andrew.purtell%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;andrew.purtell@gmail.com&quot;&gt;Andrew Purtell&lt;/a&gt;?  Anyone else have comments/questions?&lt;/p&gt;</comment>
                            <comment id="14975059" author="apurtell" created="Mon, 26 Oct 2015 21:04:03 +0000"  >&lt;p&gt;Ok, agreeable.&lt;/p&gt;</comment>
                            <comment id="14975101" author="benlau" created="Mon, 26 Oct 2015 21:18:25 +0000"  >&lt;p&gt;Thanks Andrew.  Can we merge these patches or is there still something that needs to be done or reviewed?&lt;/p&gt;</comment>
                            <comment id="14975111" author="apurtell" created="Mon, 26 Oct 2015 21:21:43 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=benlau&quot; class=&quot;user-hover&quot; rel=&quot;benlau&quot;&gt;Ben Lau&lt;/a&gt; I don&apos;t see more outstanding feedback and there&apos;s already a +1 here from Anoop. Let me check on some things locally and then commit if it looks good.&lt;/p&gt;</comment>
                            <comment id="14975362" author="apurtell" created="Mon, 26 Oct 2015 23:45:17 +0000"  >&lt;p&gt;Pushed to 0.98 and up.&lt;/p&gt;</comment>
                            <comment id="14975440" author="hudson" created="Tue, 27 Oct 2015 00:46:35 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.1 #724 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.1/724/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.1/724/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14283&quot; title=&quot;Reverse scan doesn&#8217;t work with HFile inline index/bloom blocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14283&quot;&gt;&lt;del&gt;HBASE-14283&lt;/del&gt;&lt;/a&gt; Reverse scan doesn&#226;&#128;&#153;t work with HFile inline index/bloom (apurtell: rev 0db04a1705e5e8cc04cc9c010ddfc5612f60cfec)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestSeekBeforeWithInlineBlocks.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14975489" author="benlau" created="Tue, 27 Oct 2015 01:30:37 +0000"  >&lt;p&gt;That&apos;s odd, something went wrong with the patch for 1.1 branch.  That compiled fine for me but perhaps I overlooked something, or the patch became stale.  I will take a look later tonight.&lt;/p&gt;</comment>
                            <comment id="14975516" author="apurtell" created="Tue, 27 Oct 2015 01:38:49 +0000"  >&lt;p&gt;Not a problem. This compiled for me too so I thought but there&apos;s a small missing static helper function in CellUtil. I&apos;ll commit it as an addendum now.&lt;/p&gt;</comment>
                            <comment id="14975517" author="enis" created="Tue, 27 Oct 2015 01:40:00 +0000"  >&lt;p&gt;No worries. Just pushed this small addendum to branch-1.1.  &lt;/p&gt;</comment>
                            <comment id="14975520" author="enis" created="Tue, 27 Oct 2015 01:41:38 +0000"  >&lt;p&gt;Sorry, I was trying to commit &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14682&quot; title=&quot;CM restore functionality for regionservers is broken&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14682&quot;&gt;&lt;del&gt;HBASE-14682&lt;/del&gt;&lt;/a&gt;, and pushed the addendum in the process without checking here. &lt;/p&gt;</comment>
                            <comment id="14975523" author="apurtell" created="Tue, 27 Oct 2015 01:44:29 +0000"  >&lt;p&gt;I&apos;ll back mine out because the build is broken again (two CellUtil#matchingTimestamps) &lt;/p&gt;</comment>
                            <comment id="14975555" author="hudson" created="Tue, 27 Oct 2015 02:11:15 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.0 #1101 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.0/1101/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.0/1101/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14283&quot; title=&quot;Reverse scan doesn&#8217;t work with HFile inline index/bloom blocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14283&quot;&gt;&lt;del&gt;HBASE-14283&lt;/del&gt;&lt;/a&gt; Reverse scan doesn&#226;&#128;&#153;t work with HFile inline index/bloom (apurtell: rev 48a532875e31c15515fa6cb8320993a4efb3cae8)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestSeekBeforeWithInlineBlocks.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14975570" author="benlau" created="Tue, 27 Oct 2015 02:40:52 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=andrew.purtell%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;andrew.purtell@gmail.com&quot;&gt;Andrew Purtell&lt;/a&gt; Was the wrong patch applied to 1.1 or am I misunderstanding something?  So I looked at &lt;a href=&quot;https://github.com/apache/hbase/commits/branch-1.1&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/hbase/commits/branch-1.1&lt;/a&gt; specifically &lt;a href=&quot;https://github.com/apache/hbase/commit/0db04a1705e5e8cc04cc9c010ddfc5612f60cfec&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/hbase/commit/0db04a1705e5e8cc04cc9c010ddfc5612f60cfec&lt;/a&gt; and it is missing the CellUtil method that I had in my &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14283&quot; title=&quot;Reverse scan doesn&#8217;t work with HFile inline index/bloom blocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14283&quot;&gt;&lt;del&gt;HBASE-14283&lt;/del&gt;&lt;/a&gt;-branch-1.1.patch attached.  It&apos;s fine if this is fixed as an addendum but there&apos;s nothing else amiss right (i.e. the other branches have the right patches applied?)&lt;/p&gt;</comment>
                            <comment id="14975578" author="apurtell" created="Tue, 27 Oct 2015 02:54:00 +0000"  >&lt;p&gt;No worries Ben. Not sure how I can help. The other branches got the right patches. &lt;/p&gt;</comment>
                            <comment id="14975579" author="hudson" created="Tue, 27 Oct 2015 02:54:05 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #6963 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6963/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6963/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14283&quot; title=&quot;Reverse scan doesn&#8217;t work with HFile inline index/bloom blocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14283&quot;&gt;&lt;del&gt;HBASE-14283&lt;/del&gt;&lt;/a&gt; Reverse scan doesn&#65533;&#65533;&#65533;t work with HFile inline index/bloom (apurtell: rev 5c56e239c3af22e1232681cceaed7bd96480ed92)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestSeekBeforeWithInlineBlocks.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14975584" author="benlau" created="Tue, 27 Oct 2015 03:00:25 +0000"  >&lt;p&gt;Ok thanks just wanted to confirm the other branches were fine as far as we know, eg we didnt swap 1.1 patch with 0.98 patch and need to fix/update 0.98 branch.  Thanks.  It looks like there are some test failures but I think they are not related to the patch.  I will rerun the tests that fail tonight locally after they appear in this ticket.&lt;/p&gt;</comment>
                            <comment id="14975645" author="hudson" created="Tue, 27 Oct 2015 03:42:01 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-0.98 #1168 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.98/1168/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.98/1168/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14283&quot; title=&quot;Reverse scan doesn&#8217;t work with HFile inline index/bloom blocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14283&quot;&gt;&lt;del&gt;HBASE-14283&lt;/del&gt;&lt;/a&gt; Reverse scan doesn&#226;&#128;&#153;t work with HFile inline index/bloom (apurtell: rev 9f6d34bef3c1e066606530a58f6e9137d2515df3)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestSeekBeforeWithInlineBlocks.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14975649" author="hudson" created="Tue, 27 Oct 2015 03:45:12 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-1.2-IT #244 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2-IT/244/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2-IT/244/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14283&quot; title=&quot;Reverse scan doesn&#8217;t work with HFile inline index/bloom blocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14283&quot;&gt;&lt;del&gt;HBASE-14283&lt;/del&gt;&lt;/a&gt; Reverse scan doesn&#65533;&#65533;&#65533;t work with HFile inline index/bloom (apurtell: rev 0fd37a5bffacef56cca593dc22fb9d86c6dd081f)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestSeekBeforeWithInlineBlocks.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14975668" author="hudson" created="Tue, 27 Oct 2015 03:56:21 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-1.3-IT #273 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.3-IT/273/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.3-IT/273/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14283&quot; title=&quot;Reverse scan doesn&#8217;t work with HFile inline index/bloom blocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14283&quot;&gt;&lt;del&gt;HBASE-14283&lt;/del&gt;&lt;/a&gt; Reverse scan doesn&#226;&#128;&#153;t work with HFile inline index/bloom (apurtell: rev 288a27405206db38923fc730648d8f49367abf34)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestSeekBeforeWithInlineBlocks.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14975709" author="hudson" created="Tue, 27 Oct 2015 04:29:13 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-0.98-on-Hadoop-1.1 #1122 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/1122/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/1122/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14283&quot; title=&quot;Reverse scan doesn&#8217;t work with HFile inline index/bloom blocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14283&quot;&gt;&lt;del&gt;HBASE-14283&lt;/del&gt;&lt;/a&gt; Reverse scan doesn&#226;&#128;&#153;t work with HFile inline index/bloom (apurtell: rev 9f6d34bef3c1e066606530a58f6e9137d2515df3)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestSeekBeforeWithInlineBlocks.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14975738" author="hudson" created="Tue, 27 Oct 2015 05:06:27 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.1 #725 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.1/725/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.1/725/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14283&quot; title=&quot;Reverse scan doesn&#8217;t work with HFile inline index/bloom blocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14283&quot;&gt;&lt;del&gt;HBASE-14283&lt;/del&gt;&lt;/a&gt; Reverse scan doesn&#65533;&#65533;&#65533;t work with HFile inline index/bloom (enis: rev e80b447354f211fc21c2bbc42a0d9bc000835e71)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java&lt;br/&gt;
Amend &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14283&quot; title=&quot;Reverse scan doesn&#8217;t work with HFile inline index/bloom blocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14283&quot;&gt;&lt;del&gt;HBASE-14283&lt;/del&gt;&lt;/a&gt; Reverse scan doesn&#65533;&#65533;&#65533;t work with HFile inline (apurtell: rev 9d6e96ee11265cf2dc950619042ef22cf4d9fa00)&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java&lt;br/&gt;
Revert &quot;Amend &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14283&quot; title=&quot;Reverse scan doesn&#8217;t work with HFile inline index/bloom blocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14283&quot;&gt;&lt;del&gt;HBASE-14283&lt;/del&gt;&lt;/a&gt; Reverse scan doesn&#65533;&#65533;&#65533;t work with HFile inline (apurtell: rev d5a1b276270a1d41f21badd5b85d9502f8f9f415)&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14975748" author="anoop.hbase" created="Tue, 27 Oct 2015 05:20:49 +0000"  >&lt;p&gt;Thanks for the perseverance &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=benlau&quot; class=&quot;user-hover&quot; rel=&quot;benlau&quot;&gt;Ben Lau&lt;/a&gt;.. Hope u will now work on the other Jira to handle it in better way wrt perf impact.  Thanks...&lt;/p&gt;</comment>
                            <comment id="14975751" author="hudson" created="Tue, 27 Oct 2015 05:25:30 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.3 #310 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.3/310/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.3/310/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14283&quot; title=&quot;Reverse scan doesn&#8217;t work with HFile inline index/bloom blocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14283&quot;&gt;&lt;del&gt;HBASE-14283&lt;/del&gt;&lt;/a&gt; Reverse scan doesn&#226;&#128;&#153;t work with HFile inline index/bloom (apurtell: rev 288a27405206db38923fc730648d8f49367abf34)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestSeekBeforeWithInlineBlocks.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14975790" author="hudson" created="Tue, 27 Oct 2015 06:11:05 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.2 #309 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2/309/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2/309/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14283&quot; title=&quot;Reverse scan doesn&#8217;t work with HFile inline index/bloom blocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14283&quot;&gt;&lt;del&gt;HBASE-14283&lt;/del&gt;&lt;/a&gt; Reverse scan doesn&#226;&#128;&#153;t work with HFile inline index/bloom (apurtell: rev 0fd37a5bffacef56cca593dc22fb9d86c6dd081f)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestSeekBeforeWithInlineBlocks.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14976020" author="benlau" created="Tue, 27 Oct 2015 08:44:27 +0000"  >&lt;p&gt;Reran the failures that looked relevant on the various branches, seems the tests are just unstable.  When I get the time I&apos;ll try to restart the discussion about updating the HFile serialization for more efficient reverse scans in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14576&quot; title=&quot;New HFile version for optimized reverse scans&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14576&quot;&gt;HBASE-14576&lt;/a&gt;.  &lt;/p&gt;</comment>
                            <comment id="15119468" author="ndimiduk" created="Wed, 27 Jan 2016 15:28:27 +0000"  >&lt;p&gt;Bulk closing 1.1.3 issues.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12903203">HBASE-14576</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12765512" name="HBASE-14283-0.98.patch" size="10639" author="benlau" created="Thu, 8 Oct 2015 04:17:15 +0000"/>
                            <attachment id="12765513" name="HBASE-14283-branch-1.0.patch" size="11971" author="benlau" created="Thu, 8 Oct 2015 04:17:16 +0000"/>
                            <attachment id="12765514" name="HBASE-14283-branch-1.1.patch" size="11972" author="benlau" created="Thu, 8 Oct 2015 04:17:16 +0000"/>
                            <attachment id="12765515" name="HBASE-14283-branch-1.2.patch" size="10903" author="benlau" created="Thu, 8 Oct 2015 04:17:16 +0000"/>
                            <attachment id="12765516" name="HBASE-14283-branch-1.patch" size="10903" author="benlau" created="Thu, 8 Oct 2015 04:17:16 +0000"/>
                            <attachment id="12765517" name="HBASE-14283-master.patch" size="10220" author="benlau" created="Thu, 8 Oct 2015 04:17:16 +0000"/>
                            <attachment id="12766505" name="HBASE-14283-reupload-master.patch" size="10220" author="benlau" created="Wed, 14 Oct 2015 09:26:37 +0000"/>
                            <attachment id="12753103" name="HBASE-14283-v2.patch" size="33644" author="benlau" created="Sat, 29 Aug 2015 00:37:41 +0000"/>
                            <attachment id="12752147" name="HBASE-14283.patch" size="20618" author="ram_krish" created="Tue, 25 Aug 2015 05:37:11 +0000"/>
                            <attachment id="12768876" name="hbase-14283_add.patch" size="817" author="enis" created="Tue, 27 Oct 2015 01:40:00 +0000"/>
                            <attachment id="12751757" name="hfile-seek-before.patch" size="20618" author="benlau" created="Fri, 21 Aug 2015 17:31:24 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 25 Aug 2015 05:37:11 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            44 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2j7zj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>