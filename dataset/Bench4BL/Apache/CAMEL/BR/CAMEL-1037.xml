<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 03:56:11 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CAMEL-1037/CAMEL-1037.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CAMEL-1037] Messages in Resequencer between 2 JMS queues get stuck</title>
                <link>https://issues.apache.org/jira/browse/CAMEL-1037</link>
                <project id="12311211" key="CAMEL">Camel</project>
                    <description>&lt;p&gt;Martin describes the issue as follows in &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-1034&quot; title=&quot;Messages in StreamResequencer between 2 ActiveMQ queues seem to be stuck&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-1034&quot;&gt;&lt;del&gt;CAMEL-1034&lt;/del&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&quot;The issue with the regular resequencer (the one that extends the BatchProcessor) remains because the process(Exchange) method is empty. In addition to the BatchProcessor&apos;s polling consumer, an additional JmsConsumer is created by the JMS endpoint that competes with the polling consumer. The JmsConsumer then calls the empty process(Exchange) method and the exchange is lost.&quot;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12486175">CAMEL-1037</key>
            <summary>Messages in Resequencer between 2 JMS queues get stuck</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="wtam">William Tam</assignee>
                                    <reporter username="janstey">Jonathan Anstey</reporter>
                        <labels>
                    </labels>
                <created>Thu, 30 Oct 2008 16:00:11 +0000</created>
                <updated>Fri, 31 Jul 2009 06:33:37 +0000</updated>
                            <resolved>Tue, 9 Dec 2008 07:22:25 +0000</resolved>
                                    <version>1.5.0</version>
                                    <fixVersion>1.6.0</fixVersion>
                    <fixVersion>2.0-M1</fixVersion>
                                    <component>camel-core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                                                            <comments>
                            <comment id="12949439" author="mrt1nz" created="Fri, 31 Oct 2008 12:52:04 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-642&quot; title=&quot;jms aggregation does not work&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-642&quot;&gt;&lt;del&gt;CAMEL-642&lt;/del&gt;&lt;/a&gt; also mentions race between event-driven JMS consumer and BatchProcessor&apos;s polling consumer.&lt;/p&gt;</comment>
                            <comment id="12949451" author="mrt1nz" created="Fri, 31 Oct 2008 12:56:47 +0000"  >&lt;p&gt;Not sure if this issue is also related to &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-393&quot; title=&quot;BatchProcessor always consumes directly from endpoint ignoring previous steps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-393&quot;&gt;&lt;del&gt;CAMEL-393&lt;/del&gt;&lt;/a&gt;. I just mention it here so that I don&apos;t forget to investigate.&lt;/p&gt;</comment>
                            <comment id="12949951" author="mrt1nz" created="Mon, 8 Dec 2008 13:09:28 +0000"  >&lt;p&gt;Attached is a patch that fixes this issue and also issue &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-393&quot; title=&quot;BatchProcessor always consumes directly from endpoint ignoring previous steps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-393&quot;&gt;&lt;del&gt;CAMEL-393&lt;/del&gt;&lt;/a&gt;. What has been done in this patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I removed the polling consumer from the BatchProcessor because it
	&lt;ul&gt;
		&lt;li&gt;competes with other threads e.g. those that consume messages from a JMS queue (already described in &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-642&quot; title=&quot;jms aggregation does not work&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-642&quot;&gt;&lt;del&gt;CAMEL-642&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-1034&quot; title=&quot;Messages in StreamResequencer between 2 ActiveMQ queues seem to be stuck&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-1034&quot;&gt;&lt;del&gt;CAMEL-1034&lt;/del&gt;&lt;/a&gt;).&lt;/li&gt;
		&lt;li&gt;it consumes messages directly from the starting-endpoint of the current route (obtained via &lt;tt&gt;routeContext.getEndpoint()&lt;/tt&gt;). This caused &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-393&quot; title=&quot;BatchProcessor always consumes directly from endpoint ignoring previous steps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-393&quot;&gt;&lt;del&gt;CAMEL-393&lt;/del&gt;&lt;/a&gt;.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;BatchProcessor now queues up exchanges which are then sent by a separate thread. The separate thread is needed to deal with timeouts. The old BatchProcessor implementation also stored exchanges in memory so there is at least no decrease in QoS with this patch. Reliable batch processing (and stream-resequencing) will be addressed with issue &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-949&quot; title=&quot;Support for multi-threaded, reliable resequencing.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-949&quot;&gt;CAMEL-949&lt;/a&gt; (for which I don&apos;t have a patch yet).&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-393&quot; title=&quot;BatchProcessor always consumes directly from endpoint ignoring previous steps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-393&quot;&gt;&lt;del&gt;CAMEL-393&lt;/del&gt;&lt;/a&gt; was reported for the aggregator but the same problems arise for the batch resequencer and stream resequencer. All three can now be used in route definitions as requested in &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-393&quot; title=&quot;BatchProcessor always consumes directly from endpoint ignoring previous steps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-393&quot;&gt;&lt;del&gt;CAMEL-393&lt;/del&gt;&lt;/a&gt;. (This required to remove the polling consumer from the StreamResequencer too).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-1037&quot; title=&quot;Messages in Resequencer between 2 JMS queues get stuck&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-1037&quot;&gt;&lt;del&gt;CAMEL-1037&lt;/del&gt;&lt;/a&gt; came up because because in Camel 1.4 the &lt;tt&gt;org.apache.camel.Processor&lt;/tt&gt; interface was introduced for the BatchProcessor with an empty &lt;tt&gt;process(Exchange)&lt;/tt&gt; implementation. The JMS consumer threads competed with the polling thread of the batch processor where all exchanges delivered via the JMS consumer threads have been lost (i.e. &lt;tt&gt;process(Exchange)&lt;/tt&gt; ignored those exchanges). &lt;/p&gt;

&lt;p&gt;So far I created this patch for the Camel-1.x branch because I&apos;m not sure if you (comitters, others) already thought about a different solution to this problem for Camel 2.0. If you don&apos;t have any objections to this patch please tell me and I&apos;ll create one for the current trunk.&lt;/p&gt;</comment>
                            <comment id="12949879" author="davsclaus" created="Mon, 8 Dec 2008 13:49:16 +0000"  >&lt;p&gt;At the very first peek it looks like a yet again a really great patch Martin. &lt;/p&gt;

&lt;p&gt;To my knowledge we haven&apos;t thought of a different solution for this in Camel 2.0. Hadrian / Jonathan what do you say?&lt;/p&gt;</comment>
                            <comment id="12950003" author="janstey" created="Mon, 8 Dec 2008 14:10:55 +0000"  >&lt;p&gt;Very thorough patch + description Martin. Great work! &lt;/p&gt;

&lt;p&gt;To my knowledge we haven&apos;t come up with another solution in Camel 2.0. Would be good to get this fix into trunk as well.&lt;/p&gt;
</comment>
                            <comment id="12950004" author="mrt1nz" created="Mon, 8 Dec 2008 17:11:01 +0000"  >&lt;p&gt;... here it is. The file camel-2.0.patch fixes the aforementioned issues on the trunk.&lt;/p&gt;</comment>
                            <comment id="12949965" author="wtam" created="Mon, 8 Dec 2008 20:15:18 +0000"  >&lt;p&gt;Nice work, Martin!  I am looking to apply this patch but testBatchResequencer() is failing on me.  Do you have any suggestion?  I&apos;m on 1.x currently. &lt;/p&gt;

&lt;p&gt;java.lang.AssertionError: mock:result body == 9 failed on Exchange[JmsMessage: ActiveMQObjectMessage {commandId = 5, responseRequired = true, messageId = ID:lenw500-55044-1228766892918-2:113:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:lenw500-55044-1228766892918-2:113:1:1, destination = queue://out, transactionId = null, expiration = 0, timestamp = 1228766893813, arrival = 0, brokerInTime = 1228766893813, brokerOutTime = 1228766893813, correlationId = null, replyTo = null, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = org.apache.activemq.util.ByteSequence@56f2c96c, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 1106, properties = &lt;/p&gt;
{num=11}
&lt;p&gt;, readOnlyProperties = true, readOnlyBody = true, droppable = false}] with left value &amp;lt;11&amp;gt; right value &amp;lt;9&amp;gt;&lt;br/&gt;
	at org.apache.camel.builder.BinaryPredicateSupport.assertMatches(BinaryPredicateSupport.java:57)&lt;br/&gt;
	at org.apache.camel.builder.BinaryPredicateSupport.assertMatches(BinaryPredicateSupport.java:1)&lt;br/&gt;
	at org.apache.camel.component.mock.AssertionClause.applyAssertionOn(AssertionClause.java:114)&lt;br/&gt;
	at org.apache.camel.component.mock.MockEndpoint$8.run(MockEndpoint.java:496)&lt;br/&gt;
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:249)&lt;br/&gt;
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:214)&lt;br/&gt;
	at org.apache.camel.component.jms.issues.JmsResequencerTest.testResequencer(JmsResequencerTest.java:66)&lt;br/&gt;
	at org.apache.camel.component.jms.issues.JmsResequencerTest.testBatchResequencer(JmsResequencerTest.java:51)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at junit.framework.TestCase.runTest(TestCase.java:164)&lt;br/&gt;
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runManaged(AbstractJUnit38SpringContextTests.java:307)&lt;br/&gt;
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.access$000(AbstractJUnit38SpringContextTests.java:94)&lt;br/&gt;
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests$1.run(AbstractJUnit38SpringContextTests.java:193)&lt;br/&gt;
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runTest(AbstractJUnit38SpringContextTests.java:270)&lt;br/&gt;
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runTestTimed(AbstractJUnit38SpringContextTests.java:228)&lt;br/&gt;
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runBare(AbstractJUnit38SpringContextTests.java:191)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:120)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)&lt;/p&gt;
</comment>
                            <comment id="12949931" author="wtam" created="Tue, 9 Dec 2008 04:40:50 +0000"  >&lt;p&gt;The resequencer seems to be working properly.  I wonder the during the sending from activemq.queue:out to mock:result could mess up the message order?  If I change the routes to forward output of the resequencer directly to mock:result, it still verifies the working of the resequencer and tests pass.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 from(&lt;span class=&quot;code-quote&quot;&gt;&quot;activemq:queue:in1&quot;&lt;/span&gt;).resequence().body().batch().size(100).timeout(10000L).to(&lt;span class=&quot;code-quote&quot;&gt;&quot;mock:result&quot;&lt;/span&gt;);
 from(&lt;span class=&quot;code-quote&quot;&gt;&quot;activemq:queue:in2&quot;&lt;/span&gt;).resequence().header(&lt;span class=&quot;code-quote&quot;&gt;&quot;num&quot;&lt;/span&gt;).stream().timeout(2000L).to(&lt;span class=&quot;code-quote&quot;&gt;&quot;mock:result&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One question on the patch:  The BatchSender uses a private queue to buffer incoming messages.   The queue is drained to the &quot;collection&quot; until the batch of messages should be sent.  My concern is that the protected method getCollection() can fool the caller thinking the batch is empty.  I don&apos;t know if getCollection() is really needed, though.  It is only referenced by Aggregator to read the size of the collection.   &lt;/p&gt;</comment>
                            <comment id="12949939" author="wtam" created="Tue, 9 Dec 2008 07:21:06 +0000"  >&lt;p&gt;We can possibly remove the protected method BatchProcessor.getConnection().&lt;/p&gt;</comment>
                            <comment id="12949941" author="wtam" created="Tue, 9 Dec 2008 07:22:25 +0000"  >&lt;p&gt;Committed revision 724629 to camel-1.x.&lt;br/&gt;
Committed revision 724619 to trunk&lt;/p&gt;
</comment>
                            <comment id="12949916" author="wtam" created="Tue, 9 Dec 2008 07:27:05 +0000"  >&lt;p&gt;Martin, many thanks to your patch.  I&apos;ve checked it in with a modification to the test mentioned above.  Feel free to reopen with a new patch if you have a better way to do it.&lt;/p&gt;</comment>
                            <comment id="12949910" author="mrt1nz" created="Tue, 9 Dec 2008 08:49:19 +0000"  >&lt;p&gt;William,&lt;/p&gt;

&lt;p&gt;thanks for applying the patch. You are completly right that during the sending from activemq.queue:out to mock:result the exchange order is messed up because I&apos;ve configured 10 concurrent consumers. This is needed to test concurrent access to the resequencers but doesn&apos;t make any sense for sending re-ordered messages to the mock endpoint - sorry for messing that up. An alternative is to register a second JMS component configured with only one consumer, then the messages are kept in order (but this doesn&apos;t bring any better test because all related issues came from interaction with the first JMS queue (&lt;tt&gt;activemq.queue:in&lt;/tt&gt; in our example. So we should leave it as you suggested).&lt;/p&gt;

&lt;p&gt;Regarding &lt;tt&gt;getCollection&lt;/tt&gt;: The way how it is used in &lt;tt&gt;Aggregator&lt;/tt&gt; doesn&apos;t make sense to me either (even before the patch). In my opinion, it does make sense to keep the &lt;tt&gt;getCollection&lt;/tt&gt; method but it shouldn&apos;t be used to determine the current batch size. For that a separate &lt;tt&gt;getBatchSize&lt;/tt&gt; method should be provided that operates on the private queue (buffer) of the batch processor. &lt;/p&gt;</comment>
                            <comment id="12949934" author="davsclaus" created="Tue, 9 Dec 2008 11:44:07 +0000"  >&lt;p&gt;Maybe you can use expectedInAnyOrder mock assertions for the concurrent consumer test?&lt;/p&gt;</comment>
                            <comment id="12947479" author="davsclaus" created="Fri, 31 Jul 2009 06:33:37 +0000"  >&lt;p&gt;Closing 2.0m1 tickets&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12462795" name="camel-1.x.patch" size="34801" author="mrt1nz" created="Mon, 8 Dec 2008 13:09:27 +0000"/>
                            <attachment id="12462765" name="camel-2.0.patch" size="36149" author="mrt1nz" created="Mon, 8 Dec 2008 17:11:01 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12485552">CAMEL-642</subtask>
                            <subtask id="12486510">CAMEL-1159</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 31 Oct 2008 12:52:04 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>76964</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 19 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01fxz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6352</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>