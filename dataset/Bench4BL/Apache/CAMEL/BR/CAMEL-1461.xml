<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 02:33:52 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CAMEL-1461/CAMEL-1461.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CAMEL-1461] A request route with a topic node incurs a 20 second wait and refers to the wrong MEP.</title>
                <link>https://issues.apache.org/jira/browse/CAMEL-1461</link>
                <project id="12311211" key="CAMEL">Camel</project>
                    <description>&lt;p&gt;If a route contains a node that publishes to a topic, the route is incorrectly suspended for a default 20 seconds at the topic node.  Further, JmsProducer.java checks the MEP of the original request Exchange and not the endpoint of the topic.&lt;/p&gt;

&lt;p&gt;For example, say I have a route built like this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;from(&lt;span class=&quot;code-quote&quot;&gt;&quot;activemq:queue:request&quot;&lt;/span&gt;).
  to(&lt;span class=&quot;code-quote&quot;&gt;&quot;generate_news&quot;&lt;/span&gt;).
  to(&lt;span class=&quot;code-quote&quot;&gt;&quot;activemq:topic:news&quot;&lt;/span&gt;).
  to(&lt;span class=&quot;code-quote&quot;&gt;&quot;do_something_else&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The original request is expecting a reply. However, after the &quot;news&quot; is pumped into the news topic, there is a default 20 second wait (requestTimeout).  This wait always results in the exception: &quot;The OUT message was not received within: 20000 millis on the exchange...&quot; &lt;/p&gt;

&lt;p&gt;After reading the JmsProducer code, I changed the route to the following:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;from(&lt;span class=&quot;code-quote&quot;&gt;&quot;activemq:queue:request&quot;&lt;/span&gt;).
  to(&lt;span class=&quot;code-quote&quot;&gt;&quot;generate_news&quot;&lt;/span&gt;).
  to(&lt;span class=&quot;code-quote&quot;&gt;&quot;activemq:topic:news?exchangePattern=InOnly&quot;&lt;/span&gt;).
  to(&lt;span class=&quot;code-quote&quot;&gt;&quot;do_something_else&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This reveals the root of the bug, which is in the first few lines of method org.apache.camel.component.jms.JmsProducer.process(Exchange):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void process(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Exchange exchange) {
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; org.apache.camel.Message in = exchange.getIn();

        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (exchange.getPattern().isOutCapable()) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above if statement checks the MEP of the original request&apos;s Exchange and not the new endpoint of the news topic. This makes the above &quot;?exchangePattern=InOnly&quot; configuration useless, because the original request MEP is InOut.  The result is that after that 20 second time-out, the temporary queue for the original request has expired, so the whole request failed. Note that the next node &quot;do_something_else&quot; is never reached due to the time-out exception.&lt;/p&gt;</description>
                <environment>&lt;p&gt;ActiveMQ/Camel&lt;/p&gt;</environment>
        <key id="12484723">CAMEL-1461</key>
            <summary>A request route with a topic node incurs a 20 second wait and refers to the wrong MEP.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="davsclaus">Claus Ibsen</assignee>
                                    <reporter username="mwc_tonesoft">Michael Chen</reporter>
                        <labels>
                    </labels>
                <created>Mon, 16 Mar 2009 18:15:23 +0000</created>
                <updated>Sat, 21 Nov 2009 11:57:55 +0000</updated>
                            <resolved>Tue, 24 Mar 2009 11:19:23 +0000</resolved>
                                    <version>1.6.0</version>
                                    <fixVersion>1.6.1</fixVersion>
                    <fixVersion>2.0-M2</fixVersion>
                                    <component>camel-jms</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12951402" author="davsclaus" created="Mon, 23 Mar 2009 16:00:29 +0000"  >&lt;p&gt;Have you tried the inOnly() DSL&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
from
to
inOnly(&lt;span class=&quot;code-quote&quot;&gt;&quot;activemq:topic:news&quot;&lt;/span&gt;)
to
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12951367" author="davsclaus" created="Tue, 24 Mar 2009 09:07:29 +0000"  >&lt;p&gt;Okay I got this boiled down to&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;when you sent an inOnly to the jms topic the JMSReplyTo is still there from the original JMS Message. This one needs to be cleared so Camel wont try to send a reply from the topic.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This can however be disabled on the endpoint with &lt;tt&gt;&quot;activemq:topic:news?disableReplyTo=true&quot;&lt;/tt&gt;.&lt;/p&gt;</comment>
                            <comment id="12951392" author="davsclaus" created="Tue, 24 Mar 2009 09:11:01 +0000"  >&lt;p&gt;This one works:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
                from(&lt;span class=&quot;code-quote&quot;&gt;&quot;activemq:queue:inbox&quot;&lt;/span&gt;)
                    .to(&lt;span class=&quot;code-quote&quot;&gt;&quot;mock:inbox&quot;&lt;/span&gt;)
                    .inOnly(&lt;span class=&quot;code-quote&quot;&gt;&quot;activemq:topic:order&quot;&lt;/span&gt;)
                    .beanRef(&lt;span class=&quot;code-quote&quot;&gt;&quot;orderService&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;handleOrder&quot;&lt;/span&gt;);

                from(&lt;span class=&quot;code-quote&quot;&gt;&quot;activemq:topic:order?disableReplyTo=&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;)
                    .to(&lt;span class=&quot;code-quote&quot;&gt;&quot;mock:topic&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I will work on the &lt;tt&gt;disableReplyTo=true&lt;/tt&gt; so it is not needed to be specified. &lt;/p&gt;</comment>
                            <comment id="12951416" author="davsclaus" created="Tue, 24 Mar 2009 11:19:23 +0000"  >&lt;p&gt;Fixed now. The disableReplyTo is now not needed.&lt;/p&gt;

&lt;p&gt;trunk: r757693, 757730, 758617&lt;br/&gt;
1.x: 757728, 758638&lt;/p&gt;</comment>
                            <comment id="12951638" author="marat" created="Sat, 4 Apr 2009 00:44:51 +0000"  >&lt;p&gt;Michael,&lt;/p&gt;

&lt;p&gt;I think your analysis is incorrect. The from(...:queue/topic....) route would only create an INOUT Exchange if you&apos;ve explicitly set a Message.replyTo field in the code that sent the message into this queue/topic in the first place. So if you did that then it is expected that the route will return a reply unless you explicitly set disableReplyTo=true in the from() endpoint. The replyTo value would have still been propagated, just the runtime would not create a consumer to expect a reply from the to() endpoint&lt;/p&gt;

&lt;p&gt;Claus, &lt;/p&gt;

&lt;p&gt;I think the fact that the disableReplyTo=true does not mean that we need to reset the replyTo or correlationID on the outgoing message in the producer that belongs to to(...) endpoint&lt;/p&gt;

&lt;p&gt;The example shows a case in point:&lt;/p&gt;

&lt;p&gt;from(&quot;amq-1:request&quot;).to(&quot;amq-2:request&quot;); // route-1&lt;br/&gt;
from(&quot;amq-2:reply&quot;).to(&quot;amq-1:reply&quot;); // route-2&lt;/p&gt;

&lt;p&gt;so you can have:&lt;/p&gt;

&lt;p&gt;app-1 -&amp;gt; amq-1:request -&amp;gt; amq2:request -&amp;gt; app-2 -&amp;gt; amq-2:reply -&amp;gt; amq1:reply -&amp;gt; app-1&lt;/p&gt;

&lt;p&gt;Here we have app-1 and app-2 have a conversion over two queues In fact if you want to do any kind of transactional bridging this is the pattern you&apos;d have to use. &lt;/p&gt;

&lt;p&gt;Also when one would want to use CamelTemplate to produce messages to a JMS broker with the replyTo != null this change would reset replyTo = null unless explicitQosEnabled=true irrespective of whether we&apos;re sending to a destination that is used in a one-way or a two-way route.&lt;/p&gt;

&lt;p&gt;So I&apos;d revert the change as I think the use case that this bug was filed under can be simply resolved by using: from(&quot;...?disableReplyTo=true&quot;) and keeping the changes introduced changes to the contract that can really be avoided.&lt;/p&gt;

&lt;p&gt;Marat&lt;/p&gt;</comment>
                            <comment id="12951639" author="davsclaus" created="Sat, 4 Apr 2009 06:17:23 +0000"  >&lt;p&gt;@Marat,&lt;/p&gt;

&lt;p&gt;The problem is that the replyTo is inherited from the very first &lt;tt&gt;from(&quot;activemq:queue:request&quot;)&lt;/tt&gt; when you send a replyTo JMS Message to it in the first place - then this replyTo is propagated in the the route.&lt;br/&gt;
And we dont want this replyTo propgated when you send to other JMS destinations, such as the topic.&lt;/p&gt;

&lt;p&gt;The changes introduces check the MEP contract. If the MEP is &lt;b&gt;not&lt;/b&gt; out capable then it wont set a &lt;tt&gt;JMSReplyTo&lt;/tt&gt; on the &lt;tt&gt;javax.jms.Message&lt;/tt&gt; object when Camel sends it. &lt;br/&gt;
This is more correct than ignoring this fact, its very common to route messages with Camel using JMS and send it to other JMS destinations during the routing.&lt;/p&gt;

&lt;p&gt;Remembering to add &lt;tt&gt;jmsDisableReplyTo=true&lt;/tt&gt; is a pity workaround IMHO and many end users will face same problem as Michael and wont find the solution immediately. The JMS component has too many options and its hard to know which options to use for what. Maybe splitting the table into commonly used, rarely used and advanced only would help out. &lt;/p&gt;</comment>
                            <comment id="12951640" author="davsclaus" created="Sat, 4 Apr 2009 06:33:59 +0000"  >&lt;p&gt;Oh and not to forget. What if the topic we sent to in the original sample is &lt;b&gt;not&lt;/b&gt; based on Camel, then you cannot disable reply to on this destination.&lt;/p&gt;

&lt;p&gt;What if the topic was a WebSphereMQ destination? &lt;/p&gt;</comment>
                            <comment id="12951644" author="marat" created="Sat, 4 Apr 2009 17:37:50 +0000"  >&lt;p&gt;Claus,&lt;/p&gt;

&lt;p&gt;I disagree. &lt;/p&gt;

&lt;p&gt;&amp;gt; The problem is that the replyTo is inherited from the very first from(&quot;activemq:queue:request&quot;) when you send a replyTo JMS Message to it in the first place - then this replyTo is propagated in the the route.&lt;/p&gt;

&lt;p&gt;from() becomes an INOUT  &lt;b&gt;only&lt;/b&gt; from the fact that the original message came with replyTo != null or you explicitly set a replyDestination as part of from() endpoint configuration.&lt;/p&gt;

&lt;p&gt;The fact that the user choose to set the replyTo destination in the original message suggests that one wants to receive a reply to its original message. If the designer of the Camel route decided to drop this replyTo then he has to explicitly state that in the contract. Had Michael done that he&apos;d be all set. &lt;/p&gt;

&lt;p&gt;You want to make his live easier and not to require this flag. Fine. &lt;/p&gt;

&lt;p&gt;But you just broke the old contract and now people that use CamleTemplate to send JMS messages with replyTo not null will have to set explicitQoSEnabled=true on the from() endpoint they send messages to! You will soon have people coming back and complaining about what I just described.&lt;/p&gt;


&lt;p&gt;&amp;gt; And we dont want this replyTo propgated when you send to other JMS destinations, such as the topic.&lt;/p&gt;

&lt;p&gt;Why not? It is a very reasonable default to have the replyTo destination (topic or queue) be relayed along the route as this was the message originator intention. You &lt;b&gt;could&lt;/b&gt; plugin a HeaderFilterStrategy and exclude headers you wish were not propagated (including replyTo header). If HeaderFilterStrategy is not supported in JMS I&apos;d rather fix this than keep the changes comitted.&lt;/p&gt;

&lt;p&gt;&amp;gt; What if the topic we sent to in the original sample is not based on Camel, then you cannot disable reply to on this destination.&lt;/p&gt;

&lt;p&gt;Why not? &lt;/p&gt;

&lt;p&gt;&amp;gt; What if the topic was a WebSphereMQ destination? &lt;/p&gt;

&lt;p&gt;If you have a cross broker message flow then you need to have alwaysCopyMessage=true as you will not be able to send a AMQ message with replyTo != null to WebSphere with replyTo != null  This is already supported today. The replyTo will be resolved using WebSphere session.&lt;/p&gt;

&lt;p&gt;I still recommend to revert the change.&lt;/p&gt;</comment>
                            <comment id="12951643" author="davsclaus" created="Sat, 4 Apr 2009 18:05:47 +0000"  >&lt;p&gt;&amp;gt;&amp;gt; The problem is that the replyTo is inherited from the very first from(&quot;activemq:queue:request&quot;) when you send a replyTo JMS Message to it in the first place - then this replyTo is propagated in the the route.&lt;br/&gt;
&amp;gt; from() becomes an INOUT only from the fact that the original message came with replyTo != null or you explicitly set a replyDestination as part of from() endpoint configuration.&lt;br/&gt;
Agree&lt;/p&gt;

&lt;p&gt;&amp;gt; The fact that the user choose to set the replyTo destination in the original message suggests that one wants to receive a reply to its original message. If the designer of the Camel route decided to drop this&lt;br/&gt;
&amp;gt; replyTo then he has to explicitly state that in the contract. Had Michael done that he&apos;d be all set.&lt;br/&gt;
That is what he is in fact trying to do. He want to return a reply but at the same time send a fire and forget message to a topic. To send this &quot;fire and forget&quot; message he should use either:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;wireTap&lt;/li&gt;
	&lt;li&gt;inOnly&lt;/li&gt;
	&lt;li&gt;to with pattern=InOnly&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The problem is that when he does that Camel will propagate the original JMS headers along, and then Camel itself sees that there is a JMSReplyTo and therefore it want to wait as well.&lt;/p&gt;

&lt;p&gt;The original exchange will still be InOut and Camel will send a reply back. Its the &lt;em&gt;fire and forget&lt;/em&gt; JMS message that is the problem. This cannot be cleanup done out of the box with Camel if we revert the change, then you need to add clear all the JMS headers with a custom HeaderFilterStategy or whatever. This is not very easy. The route explicit states that its a &lt;em&gt;fire and forget&lt;/em&gt; and thus there should be &lt;b&gt;no&lt;/b&gt; JMSReplyTo send.&lt;/p&gt;

&lt;p&gt;The HeaderFilterStategy is a kinda advanced feature where you need to plug it in and add your own java implementation. This is not desired for doing a very common route such as spin off a &lt;em&gt;fire and forget&lt;/em&gt; while doing a JMS request/reply. &lt;/p&gt;


&lt;p&gt;&amp;gt; But you just broke the old contract and now people that use CamleTemplate to send JMS messages with replyTo not null will have to set explicitQoSEnabled=true on the from()&lt;br/&gt;
&amp;gt; endpoint they send messages to! You will soon have people coming back and complaining about what I just described.&lt;br/&gt;
What do you mean? If the use CamelTemplate and send a request/reply (eg requestXXX) then its an InOut and then the from endpoint should not have any special options.&lt;/p&gt;

&lt;p&gt;For instance in the code below:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
from(&lt;span class=&quot;code-quote&quot;&gt;&quot;activemq:queue:foo).to(&quot;&lt;/span&gt;bean:bye&quot;);

&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; out = template.requestBody(&lt;span class=&quot;code-quote&quot;&gt;&quot;activemq:queue:foo&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;Hello&quot;&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;.class);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Assuming the &lt;tt&gt;bye&lt;/tt&gt; bean returns a response such as: {{ return &quot;Bye World&quot; }} then the &lt;tt&gt;out&lt;/tt&gt; String will contain the value returned = &lt;tt&gt;Bye World&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;The method &lt;tt&gt;requestBody&lt;/tt&gt; is used for &lt;b&gt;InOut&lt;/b&gt; MEP and thus Camel will set a &lt;tt&gt;JMSReplyTo&lt;/tt&gt; when it send the &lt;tt&gt;Hello&lt;/tt&gt; message to the JMS foo queue. And when Camel receives this message it sees the JMSReplyTo and returns the response.&lt;/p&gt;

&lt;p&gt;The contract is &lt;b&gt;not&lt;/b&gt; broken.&lt;/p&gt;



&lt;p&gt;&amp;gt;&amp;gt; What if the topic we sent to in the original sample is not based on Camel, then you cannot disable reply to on this destination.&lt;br/&gt;
&amp;gt; Why not?&lt;br/&gt;
Why should Camel send a JMSReplyTo to a MQ destination in the first place where we &lt;b&gt;do not&lt;/b&gt; want a reply? Lets imagine the MQ destination is part of a production system you cannot change.&lt;br/&gt;
So what if it inspects this JMSReplyTo and want to send a reply that it was &lt;b&gt;never&lt;/b&gt; intended to send. It was after all just a &lt;em&gt;fire and forget&lt;/em&gt; message that was send to it. &lt;/p&gt;</comment>
                            <comment id="12951655" author="marat" created="Sat, 4 Apr 2009 20:30:08 +0000"  >&lt;p&gt;Claus,&lt;/p&gt;

&lt;p&gt;Ok I think there are a couple of things going on. My tests are failing not due to replyTo being set to null but rather correlationID set to null. I&apos;ll explain bellow.&lt;/p&gt;

&lt;p&gt;So let&apos;s take a look at the original requirement again.&lt;/p&gt;

&lt;p&gt;&amp;gt; That is what he is in fact trying to do. He want to return a reply but at the same time send a fire and forget message to a topic.&lt;/p&gt;

&lt;p&gt;So shouldn&apos;t his route look like this?&lt;/p&gt;

&lt;p&gt;/* 1 */  from(&quot;activemq:queue:inbox&quot;)                         &lt;br/&gt;
/* 2 */  .inOnly(&quot;mock:inbox&quot;)                                &lt;br/&gt;
/* 3 */  .inOnly(&quot;activemq:topic:order&quot;)                  &lt;br/&gt;
/* 4 */  .beanRef(&quot;orderService&quot;, &quot;handleOrder&quot;);  &lt;/p&gt;

&lt;p&gt;So the steps are &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Either a native JMS client or CamelTemplate send a message with replyTo != null to (1)&lt;/li&gt;
	&lt;li&gt;(1) would propagate the replyTo and correlationID and will expect a reply for up to timeout&lt;/li&gt;
	&lt;li&gt;(2) and (3) and (4) should send the messages along without expecting the reply, &lt;b&gt;but still propagating replyTo and correlationID&lt;/b&gt;&lt;br/&gt;
Now whatever endpoint (2, 3, 4)  or some external consumer off (3) would take that replyTo and correlationID values and will send the reply back to (1) completing the flow&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So the point Michael made about JMS component honoring the contract of the &apos;to&apos; endpoints is valid. We need to fix this so that if this is an inOnly MEP on the to() endpoint we won&apos;t be expecting a reply on the to() endpoint but will still propagate replyTo and correlationID values&lt;/p&gt;

&lt;p&gt;Now the reason my tests are all going busts is because of the following:&lt;/p&gt;

&lt;p&gt;I have a bridge scenario between two independent JMS brokers say AMQ and WMQ with XA in between. I need to use two one way routes in order to accommodate that due to transactional semantics.&lt;/p&gt;

&lt;p&gt;/*1 */ from(&quot;amq:queue:request&quot;).to(&quot;mq:queue:request&quot;);&lt;br/&gt;
/*2 */ from(&quot;mq:queue:reply&quot;).to(&quot;amq:queue:reply&quot;);&lt;/p&gt;

&lt;p&gt;So in order to be able to correlate a request message (1) I load a correlationID, but since that change the correlationID is dropped and when (2) writes a reply message I miss them since their correlationID is null now.&lt;/p&gt;

&lt;p&gt;So I think we can address both of the use cases if we were to still propagate replyTo and correlationID but honor the inOnly pattern of the to() endpoints even if the endpoint prior to it in the chain was an  in-out&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;</comment>
                            <comment id="12951649" author="davsclaus" created="Sat, 4 Apr 2009 21:01:20 +0000"  >&lt;p&gt;Marat,&lt;/p&gt;

&lt;p&gt;Just a quick reply.&lt;/p&gt;

&lt;p&gt;In your bridge scenario have you tried the &lt;b&gt;preserveMessageQos=true&lt;/b&gt; in the to destination?&lt;br/&gt;
That should keep the JMSReplyTo and JMSCorrelationID.&lt;/p&gt;

&lt;p&gt;On a side note I do think there are two scenarios here that is difficult to support out of the box without special configuration.&lt;br/&gt;
Just the most obvious should be the default one, that is IMHO the problem Michael faced.&lt;/p&gt;

&lt;p&gt;In your first example Camel will at (1) expect to return a reply, and that reply is when the current exchanges ends, and it ends after step (4). So the reply sent back is what the Exchange OUT message is after step (4) = what the order service bean returns.&lt;/p&gt;

&lt;p&gt;On the other hand, if you for instance at step (3) had a consumer on the other side, that &lt;b&gt;also&lt;/b&gt; sends a reply, then you end up with sending &lt;b&gt;x2&lt;/b&gt; replies. To prevent this you have to set the &lt;b&gt;disableReplyTo&lt;/b&gt; on the from endpoint, so Camel after step (4) does not return a reply, and the only reply is from the &quot;other side&quot;.&lt;/p&gt;


&lt;p&gt;&amp;gt; So the point Michael made about JMS component honoring the contract of the &apos;to&apos; endpoints is valid. We need to fix this so that if this is an inOnly MEP on the to() endpoint &lt;br/&gt;
&amp;gt; we won&apos;t be expecting a reply on the to() endpoint but will still propagate replyTo and correlationID values&lt;br/&gt;
We can only fix this in the JMS Producer to &lt;b&gt;not&lt;/b&gt; listen for a reply. But the problem is that if we also propagate JMSReplyTo/JMSCorrelationID then the consumer does not know its an &lt;b&gt;inOnly&lt;/b&gt; and this consumer can/will still send a reply. If this consumer is also Camel then it will send a reply to the JMSReplyTo, and thus we end up with the &lt;b&gt;x2&lt;/b&gt; reply situation, even thought the to was set with a &lt;tt&gt;pattern=InOnly&lt;/tt&gt;. As I understand there are no MEP standard for JMS, so we cannot propate the JMSReplyTo/JMSCorrelationID and then at the same time tell the consumer, &lt;b&gt;not&lt;/b&gt; to send a reply.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;</comment>
                            <comment id="12951650" author="davsclaus" created="Sat, 4 Apr 2009 21:21:31 +0000"  >&lt;p&gt;&amp;gt; So I think we can address both of the use cases if we were to still propagate replyTo and correlationID but honor the inOnly pattern of the to() endpoints even&lt;br/&gt;
&amp;gt; if the endpoint prior to it in the chain was an  in-out&lt;br/&gt;
Yeah, that should be our goal. We agree here.&lt;/p&gt;

&lt;p&gt;That should already be possible if you set the &lt;b&gt;preserveMessageQos=true&lt;/b&gt; option in the &lt;b&gt;to&lt;/b&gt;. That instructs Camel JMSProducer to &lt;em&gt;not&lt;/em&gt; drop the JMSReplyTo/JMSCorrelationID. See JMSProducer.java around codeline 275.&lt;/p&gt;

&lt;p&gt;Eg we kinda have reverse the problem between your bridge and Michaels use-case, for which must configure the JMS endpoints with special options.&lt;br/&gt;
Before Michael had to se the disableReplyTo=true on his from route. This was in fact quite wrong as the consumer could have been a non Camel one.&lt;br/&gt;
Well never the less its fixed now.&lt;/p&gt;

&lt;p&gt;Now its your situation that has to set the special &lt;b&gt;preserveMessageQos=true&lt;/b&gt; on the to endpoint, eg when sending.&lt;/p&gt;

&lt;p&gt;So dont we have the solution now?&lt;/p&gt;</comment>
                            <comment id="12951653" author="marat" created="Sun, 5 Apr 2009 06:16:29 +0000"  >&lt;p&gt;Claus,&lt;/p&gt;

&lt;p&gt;Yes I did manage to get all of the tests to pass before I restarted this thread, but as you said my use case is now quite cumbersome and I think it really does not have to be.&lt;/p&gt;

&lt;p&gt;Please take a look at the patch attached. I think this will keep all happy. &lt;/p&gt;

&lt;p&gt;I also show how the use case you described could be implemented. That is when one wants to have a request/reply over a queue and then also send a message (notification) over a topic and then collect correlated acknowledgement message(s) that those notification have been received.&lt;/p&gt;

&lt;p&gt;source app -&amp;gt; queue:request -&amp;gt; target app -&amp;gt; queue:reply -&amp;gt; source app&lt;br/&gt;
                     -&amp;gt; topic:notification&lt;/p&gt;

&lt;p&gt;topic:notification -&amp;gt; notification subscriber app 1 -&amp;gt; queue:notificationAck&lt;br/&gt;
topic:notification -&amp;gt; notification subscriber app 2 -&amp;gt; queue:notificationAck&lt;br/&gt;
queue:notificationAck -&amp;gt; source app correlates ack using original request correlationID or a unique selector&lt;/p&gt;

&lt;p&gt;The usual use case for topics are one way messages, so if the user really wants to reply to destination that came with a message received over a topic then the receiver should be ready to accept more than one reply correlated on the same source message. Since a request/reply pattern is 1 request 1 reply, then the reply destination embedded in the message that came over a topic should really be decoupled from the destination used to receive a reply from request/reply pattern.&lt;/p&gt;</comment>
                            <comment id="12951652" author="davsclaus" created="Sun, 5 Apr 2009 07:12:45 +0000"  >&lt;p&gt;Marat,&lt;/p&gt;

&lt;p&gt;&amp;gt; Yes I did manage to get all of the tests to pass before I restarted this thread, but as you said my use case is now quite cumbersome and I think it really does not have to be.&lt;br/&gt;
Did you try the option I suggested?&lt;/p&gt;


&lt;p&gt;&amp;gt; Please take a look at the patch attached. I think this will keep all happy.&lt;br/&gt;
Thanks a lot for the patch and that you kept pushing your views. And not the least had the patience to explain it in details so I could understand it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I have applied the patch:&lt;br/&gt;
trunk: 762047&lt;br/&gt;
1.x: 762050&lt;/p&gt;


&lt;p&gt;&amp;gt; The usual use case for topics are one way messages, so if the user really wants to reply to destination that came with a message received over a topic then the receiver&lt;br/&gt;
&amp;gt; should be ready to accept more than one reply correlated on the same source message. &lt;br/&gt;
Agree&lt;/p&gt;

&lt;p&gt;&amp;gt; Since a request/reply pattern is 1 request 1 reply, then the reply destination embedded in the message&lt;br/&gt;
&amp;gt; that came over a topic should really be decoupled from the destination used to receive a reply from request/reply pattern.&lt;br/&gt;
Agree if you by decoupled mean the original request/reply pattern - eg the original caller JMSReplyTo should be decoupled from the JMSReplyTo that came over the topic. &lt;/p&gt;
</comment>
                            <comment id="12951663" author="marat" created="Mon, 6 Apr 2009 14:12:08 +0000"  >&lt;p&gt;Claus,&lt;/p&gt;

&lt;p&gt;Thanks for applying the patch. Yes I was aware that I could work around the change made, but with the patch you just applied no changes will be required either to my tests/demos and Michael will still be happy.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Marat&lt;/p&gt;</comment>
                            <comment id="12953571" author="davsclaus" created="Sat, 21 Nov 2009 11:57:55 +0000"  >&lt;p&gt;Closing all 2.0M2 tickets&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12462912" name="CAMEL-1461-2009-04-05-01-58.patch" size="6910" author="marat" created="Sun, 5 Apr 2009 05:59:11 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 23 Mar 2009 16:00:29 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>76849</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 2 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01ik7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6776</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>