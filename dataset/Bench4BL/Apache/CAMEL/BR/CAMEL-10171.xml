<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 01:30:13 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CAMEL-10171/CAMEL-10171.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CAMEL-10171] Camel CXF expired continuations cause memory leak</title>
                <link>https://issues.apache.org/jira/browse/CAMEL-10171</link>
                <project id="12311211" key="CAMEL">Camel</project>
                    <description>&lt;p&gt;Looks like exchanges expired by CXF continuation timeout are being accumulated in InflightRepository. Tested with Camel 2.17.1 and cxf-rt-transports-http-jetty:&lt;/p&gt;

&lt;p&gt;Dependencies:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;camel-core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.17.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;camel-cxf&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.17.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.cxf&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;cxf-rt-transports-http-jetty&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.1.5&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Reproducer:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.camel.CamelContext;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.camel.builder.RouteBuilder;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.camel.component.cxf.CxfEndpoint;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.camel.component.cxf.DataFormat;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.camel.impl.DefaultCamelContext;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.springframework.util.StreamUtils;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.w3c.dom.Document;

&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; javax.xml.parsers.DocumentBuilder;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; javax.xml.parsers.DocumentBuilderFactory;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; javax.xml.soap.MessageFactory;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; javax.xml.soap.SOAPMessage;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.ByteArrayInputStream;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.ByteArrayOutputStream;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.net.HttpURLConnection;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.net.URL;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.Timer;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.TimerTask;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.Executor;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.Executors;

&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class Sample {

    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; URI = &lt;span class=&quot;code-quote&quot;&gt;&quot;http:&lt;span class=&quot;code-comment&quot;&gt;//127.0.0.1:8080/&quot;&lt;/span&gt;;
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; CONTINUATION_TIMEOUT = 100L;
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; DELAYER_VALUE = 200L;
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; SENDER_THREADS = &lt;span class=&quot;code-object&quot;&gt;Runtime&lt;/span&gt;.getRuntime().availableProcessors();
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; MESSAGES_PER_SENDER = 10000;

    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void setupCamel() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; CamelContext camelContext = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DefaultCamelContext();
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; CxfEndpoint endpoint = (CxfEndpoint)camelContext.getEndpoint( &lt;span class=&quot;code-quote&quot;&gt;&quot;cxf:&lt;span class=&quot;code-comment&quot;&gt;//&quot;&lt;/span&gt; + URI );
&lt;/span&gt;        endpoint.setContinuationTimeout( CONTINUATION_TIMEOUT );
        endpoint.setDataFormat( DataFormat.PAYLOAD );
        camelContext.addRoutes( &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RouteBuilder() {
            &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void configure() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
                from( endpoint )
                .threads()
                .setBody( constant( &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;ok /&amp;gt;&quot;&lt;/span&gt; ) )
                .delay( DELAYER_VALUE )
                .end();
            }
        });
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; TimerTask repoSizeReporter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TimerTask() {
            &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void run() {
                &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println( &lt;span class=&quot;code-quote&quot;&gt;&quot;Inflight repository size: &quot;&lt;/span&gt; + camelContext.getInflightRepository().size() );
                &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.gc();
                &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println( &lt;span class=&quot;code-quote&quot;&gt;&quot;Memory usage: &quot;&lt;/span&gt; + (&lt;span class=&quot;code-object&quot;&gt;Runtime&lt;/span&gt;.getRuntime().totalMemory() - &lt;span class=&quot;code-object&quot;&gt;Runtime&lt;/span&gt;.getRuntime().freeMemory())/(1024*1024) + &lt;span class=&quot;code-quote&quot;&gt;&quot;MB&quot;&lt;/span&gt; );
            }
        };
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Timer repoSizeReporterTimer = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Timer();
        repoSizeReporterTimer.schedule( repoSizeReporter, 1000, 1000 );
        camelContext.start();
    }

    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] createSoapMessage() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; StringBuilder payloadBuilder = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StringBuilder( &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;payload&amp;gt;&quot;&lt;/span&gt; );
        &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 5000; i++ ) {
            payloadBuilder.append( &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;payloadElement /&amp;gt;&quot;&lt;/span&gt; );
        }
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; payload = payloadBuilder.append( &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;/payload&amp;gt;&quot;&lt;/span&gt; ).toString();
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; DocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Document payloadDocument = documentBuilder.parse( &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ByteArrayInputStream( payload.getBytes() ) );
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; ByteArrayOutputStream soapOutStream = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ByteArrayOutputStream();
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; SOAPMessage message = MessageFactory.newInstance().createMessage();
        message.getSOAPBody().addDocument( payloadDocument );
        message.writeTo( soapOutStream );
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; soapOutStream.toByteArray();
    }

    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Runnable&lt;/span&gt; soapSender() {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; () -&amp;gt; {
            &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
                &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] soapMessage = createSoapMessage();
                &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; MESSAGES_PER_SENDER; i++ ) {
                    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; HttpURLConnection connection = (HttpURLConnection)&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; URL( URI ).openConnection();
                    connection.setDoOutput( &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt; );
                    connection.setRequestProperty( &lt;span class=&quot;code-quote&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;text/xml&quot;&lt;/span&gt; );
                    connection.setRequestProperty( &lt;span class=&quot;code-quote&quot;&gt;&quot;SOAPAction&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;\&quot;&lt;/span&gt;\&quot;&quot; );
                    connection.setRequestMethod( &lt;span class=&quot;code-quote&quot;&gt;&quot;POST&quot;&lt;/span&gt; );
                    connection.setRequestProperty( &lt;span class=&quot;code-quote&quot;&gt;&quot;Accept&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;*/*&quot;&lt;/span&gt; );
                    connection.connect();
                    StreamUtils.copy( soapMessage, connection.getOutputStream() );
                    connection.getResponseCode();
                    connection.disconnect();
                }
            } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; ( &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Exception ex ) {
                ex.printStackTrace();
            }
        };
    }

    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] args) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
        setupCamel();
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Executor executor = Executors.newFixedThreadPool( SENDER_THREADS );
        &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; SENDER_THREADS; i++ ) {
            executor.execute( soapSender() );
        }
    }
}&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12991654">CAMEL-10171</key>
            <summary>Camel CXF expired continuations cause memory leak</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="davsclaus">Claus Ibsen</assignee>
                                    <reporter username="ddms">Damian Malczyk</reporter>
                        <labels>
                    </labels>
                <created>Thu, 21 Jul 2016 23:32:13 +0000</created>
                <updated>Wed, 17 Aug 2016 07:53:37 +0000</updated>
                            <resolved>Wed, 17 Aug 2016 07:53:32 +0000</resolved>
                                    <version>2.17.1</version>
                                    <fixVersion>2.17.4</fixVersion>
                    <fixVersion>2.18.0</fixVersion>
                                    <component>camel-cxf</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="15391858" author="davsclaus" created="Mon, 25 Jul 2016 13:13:12 +0000"  >&lt;p&gt;Thanks for the test case.&lt;/p&gt;

&lt;p&gt;Sounds like some code in camel-cxf need to be triggered on a callback when a timeout happens on the continuation and mark the Camel exchange as server timeout error, and trigger the exchange done so its not counted as inflight.&lt;/p&gt;</comment>
                            <comment id="15411781" author="onders" created="Mon, 8 Aug 2016 13:12:19 +0000"  >&lt;p&gt;I went through the problem. As i can see, cxf-rt-transports-http-jetty-3.1.7 has no such method to propagate the continuation time out back to camel-cxf. First, Servlet3Continuation and and JettyContinuationWrapper should have the required method implementation to query if timeout is expired and camel-cxf should have such implementation as the following;&lt;/p&gt;

&lt;p&gt;          else if (continuation.isExpired()) &lt;/p&gt;
{
                    // mark the exchange with server timeout error
                    // trigger the exhange as done so that it is not counted as inflight.
                    .....
          }

&lt;p&gt;I will try and see if i can provide PR.&lt;/p&gt;</comment>
                            <comment id="15415144" author="onders" created="Wed, 10 Aug 2016 11:37:02 +0000"  >&lt;p&gt;I can get the expiry callback, however i can&apos;t get the exhange. Any suggestion?&lt;/p&gt;</comment>
                            <comment id="15416878" author="davsclaus" created="Thu, 11 Aug 2016 08:33:16 +0000"  >&lt;p&gt;What information do you have in that callback?&lt;/p&gt;</comment>
                            <comment id="15416897" author="onders" created="Thu, 11 Aug 2016 08:51:37 +0000"  >&lt;p&gt;let me explain what i did.&lt;br/&gt;
I found out that i need to detect continuation expiry in CxfConsumer.&lt;/p&gt;

&lt;p&gt;I logged a ticket and it is partially fixed. (&lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7002&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/CXF-7002&lt;/a&gt;)&lt;br/&gt;
Because it is not provided via Contunation interface.&lt;/p&gt;

&lt;p&gt;However, let&apos;s assume we have method access in Continuation interface (as i did in my local source)&lt;/p&gt;

&lt;p&gt;and in CxfConsumer.asyncInvoke method i can add &lt;/p&gt;

&lt;p&gt;if(continuation.isExpired()) &lt;/p&gt;
{
//...
// handle camel exchange
//
}

&lt;p&gt;I know contunation is expired but i dont have the exchange.&lt;/p&gt;</comment>
                            <comment id="15417712" author="ddms" created="Thu, 11 Aug 2016 18:27:29 +0000"  >&lt;p&gt;I think that is possible if &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;continuation.setObject(camelExchange)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; would be placed just before &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;continuation.suspend(cxfEndpoint.getContinuationTimeout())&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; instead of inside processing callback like it is now.&lt;/p&gt;

&lt;p&gt;However, if you want to populate CxfExchange from Camel Exchange after expiration event - it may be not the best idea, because you&apos;re touching something that is still being processed somwhere else and you will most likely leak to the end-user something that programmer doesn&apos;t want him to see.&lt;/p&gt;

&lt;p&gt;I think that the best would be to give programmer option to define callback on component (and/or endpoint) level that will let him populate CxfExchane himself in case of continuation timeout.&lt;/p&gt;</comment>
                            <comment id="15420067" author="githubbot" created="Sat, 13 Aug 2016 20:44:39 +0000"  >&lt;p&gt;GitHub user onders86 opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/camel/pull/1122&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/camel/pull/1122&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-10171&quot; title=&quot;Camel CXF expired continuations cause memory leak&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-10171&quot;&gt;&lt;del&gt;CAMEL-10171&lt;/del&gt;&lt;/a&gt; memory leak when continuation expires&lt;/p&gt;

&lt;p&gt;    setobject done earlier and exception set on camelExchange.&lt;br/&gt;
    Before being able to call isExpired method thru Continuation interface, please update your cxf to include this PRs as for below issues&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7011&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/CXF-7011&lt;/a&gt;&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7002&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/CXF-7002&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/onders86/camel&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/onders86/camel&lt;/a&gt; master&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/camel/pull/1122.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/camel/pull/1122.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #1122&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit 056c65d9995c4bd024d21f311218b9f93b5fdae5&lt;br/&gt;
Author: onders86 &amp;lt;ondersezgin@gmail.com&amp;gt;&lt;br/&gt;
Date:   2016-08-05T19:48:48Z&lt;/p&gt;

&lt;p&gt;    Merge pull request #1 from apache/master&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-6616&quot; title=&quot;On SMPP producer start if SMSC returns a negative bind response producer will get stuck in an infinite reconnect loop&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-6616&quot;&gt;&lt;del&gt;CAMEL-6616&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;commit e01c6f81cc84a59bbc682949cdc9a2b7ac92d1b1&lt;br/&gt;
Author: &#246;nder sezgin &amp;lt;ondersezgin@gmail.com&amp;gt;&lt;br/&gt;
Date:   2016-08-05T22:50:41Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-6616&quot; title=&quot;On SMPP producer start if SMSC returns a negative bind response producer will get stuck in an infinite reconnect loop&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-6616&quot;&gt;&lt;del&gt;CAMEL-6616&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    maxReconnect added&lt;/p&gt;

&lt;p&gt;commit 2774c0f1f5aa7664c75ab58b791e78089429f682&lt;br/&gt;
Author: &#246;nder sezgin &amp;lt;ondersezgin@gmail.com&amp;gt;&lt;br/&gt;
Date:   2016-08-13T20:23:01Z&lt;/p&gt;

&lt;p&gt;    Merge branch &apos;master&apos; of &lt;a href=&quot;https://github.com/apache/camel&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/camel&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Conflicts:&lt;/li&gt;
	&lt;li&gt;components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppConfiguration.java&lt;/li&gt;
	&lt;li&gt;components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppConsumer.java&lt;/li&gt;
	&lt;li&gt;components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppProducer.java&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;commit 96ca1764c925a60c15daf64983b6cee7e1549966&lt;br/&gt;
Author: &#246;nder sezgin &amp;lt;ondersezgin@gmail.com&amp;gt;&lt;br/&gt;
Date:   2016-08-13T20:38:41Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-10171&quot; title=&quot;Camel CXF expired continuations cause memory leak&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-10171&quot;&gt;&lt;del&gt;CAMEL-10171&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    memory leak fixed and exception set on exchange&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="15420925" author="githubbot" created="Mon, 15 Aug 2016 12:42:42 +0000"  >&lt;p&gt;Github user onders86 closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/camel/pull/1122&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/camel/pull/1122&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15423268" author="githubbot" created="Tue, 16 Aug 2016 19:29:15 +0000"  >&lt;p&gt;GitHub user onders86 opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/camel/pull/1125&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/camel/pull/1125&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-10171&quot; title=&quot;Camel CXF expired continuations cause memory leak&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-10171&quot;&gt;&lt;del&gt;CAMEL-10171&lt;/del&gt;&lt;/a&gt; memory leak when continuation expires&lt;/p&gt;

&lt;p&gt;    setobject done earlier and exception set on camelExchange.&lt;br/&gt;
    isExpired method call thru Continuation interface is cancelled and&lt;br/&gt;
    below issues became invalid as discussed in &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7011&quot; title=&quot;same method signature needs to be added in Continuation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CXF-7011&quot;&gt;CXF-7011&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7002&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/CXF-7002&lt;/a&gt;&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7011&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/CXF-7011&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    instead&lt;/p&gt;

&lt;p&gt;    such block means the same;&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7011?focusedCommentId=15422696&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15422696&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/CXF-7011?focusedCommentId=15422696&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15422696&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/onders86/camel&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/onders86/camel&lt;/a&gt; mymaster&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/camel/pull/1125.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/camel/pull/1125.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #1125&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit 2e9bce8a064b6694cb7985955582baca90698b0c&lt;br/&gt;
Author: &#246;nder sezgin &amp;lt;ondersezgin@gmail.com&amp;gt;&lt;br/&gt;
Date:   2016-08-16T19:22:46Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-10171&quot; title=&quot;Camel CXF expired continuations cause memory leak&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-10171&quot;&gt;&lt;del&gt;CAMEL-10171&lt;/del&gt;&lt;/a&gt; memory leak when continuation expires&lt;/p&gt;

&lt;p&gt;    setobject done earlier and exception set on camelExchange.&lt;br/&gt;
    isExpired method call thru Continuation interface is cancelled and&lt;br/&gt;
    below issues became invalid as discussed in &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7011&quot; title=&quot;same method signature needs to be added in Continuation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CXF-7011&quot;&gt;CXF-7011&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7002&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/CXF-7002&lt;/a&gt;&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7011&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/CXF-7011&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    instead&lt;/p&gt;

&lt;p&gt;    such block means the same;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7011?focusedCommentId=15422696&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15422696&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/CXF-7011?focusedCommentId=15422696&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15422696&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="15424049" author="githubbot" created="Wed, 17 Aug 2016 07:53:10 +0000"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/camel/pull/1125&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/camel/pull/1125&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15424052" author="davsclaus" created="Wed, 17 Aug 2016 07:53:34 +0000"  >&lt;p&gt;Thanks for the PR&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 25 Jul 2016 13:13:12 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310060" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Estimated Complexity</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10060"><![CDATA[Unknown]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            15 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31cpb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>