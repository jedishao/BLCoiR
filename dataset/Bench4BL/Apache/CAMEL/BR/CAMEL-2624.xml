<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun Dec 04 01:06:52 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CAMEL-2624/CAMEL-2624.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CAMEL-2624] support for async responses on single tcp connection</title>
                <link>https://issues.apache.org/jira/browse/CAMEL-2624</link>
                <project id="12311211" key="CAMEL">Camel</project>
                    <description>&lt;p&gt;Mina Component does not support async InOut connections.&lt;br/&gt;
Many applications require two way or out only async tcp connections this is not supported.&lt;br/&gt;
Single TCP connection to external server. Ability to send multiple requests one after the other without waiting for a response. responses need to be processed asynchronously.&lt;/p&gt;

&lt;h5&gt;&lt;a name=&quot;UseCasestoSupport&quot;&gt;&lt;/a&gt;Use Cases to Support&lt;/h5&gt;
&lt;ol&gt;
	&lt;li&gt;UC-1 - Consumer sends messages after connect
	&lt;ol&gt;
		&lt;li&gt;TCP producer (P1) connects to TCP consumer/server (C1), session is created&lt;/li&gt;
		&lt;li&gt;C1 sends many messages to P1&lt;/li&gt;
		&lt;li&gt;P1 receives messages and processes them&lt;/li&gt;
		&lt;li&gt;C1 or P1 close the connection&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/li&gt;
	&lt;li&gt;UC-2 - Full async session
	&lt;ol&gt;
		&lt;li&gt;P1 connects to C1&lt;/li&gt;
		&lt;li&gt;P1 and C1 send and receive messages ansynchronously. There is no blocking write-read loop.&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/li&gt;
&lt;/ol&gt;


</description>
                <environment>&lt;p&gt;any&lt;/p&gt;</environment>
        <key id="12486095">CAMEL-2624</key>
            <summary>support for async responses on single tcp connection</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="skusma@arccorp.com">Anand</reporter>
                        <labels>
                    </labels>
                <created>Wed, 7 Apr 2010 17:04:17 +0000</created>
                <updated>Thu, 2 May 2013 02:29:41 +0000</updated>
                                            <version>2.2.0</version>
                                    <fixVersion>Future</fixVersion>
                                    <component>camel-mina2</component>
                        <due></due>
                            <votes>3</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12953545" author="davsclaus" created="Tue, 6 Jul 2010 08:59:58 +0000"  >&lt;p&gt;The camel-netty component in Camel 2.4 onwards support async routing engine. That means it will let the responses be routed asynchronously, and thus the NettyProducer does not block.&lt;/p&gt;</comment>
                            <comment id="12955706" author="skusma@arccorp.com" created="Tue, 6 Jul 2010 14:41:59 +0000"  >&lt;p&gt;Great!!. I am looking forward for it.&lt;/p&gt;</comment>
                            <comment id="12988737" author="akarpe" created="Mon, 31 Jan 2011 12:01:14 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Is this issue still open given that we have camel-netty in place with the required capability...&lt;/p&gt;</comment>
                            <comment id="13057168" author="davsclaus" created="Wed, 29 Jun 2011 11:24:23 +0000"  >&lt;p&gt;We need to upgrade to Mina 2.0.x before taking a stab at this&lt;/p&gt;</comment>
                            <comment id="13114123" author="cabeaulac" created="Sun, 25 Sep 2011 03:31:17 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-3471&quot; title=&quot;A new Apache Mina 2.0.x component&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-3471&quot;&gt;&lt;del&gt;CAMEL-3471&lt;/del&gt;&lt;/a&gt; should resolve this ticket. It seems like the concept of ExchangePattern InOut and InOnly goes away. The disconnect and timeout component options should be sufficient for all use cases when all comms are asynchronous. &lt;/p&gt;</comment>
                            <comment id="13178721" author="cabeaulac" created="Tue, 3 Jan 2012 13:16:20 +0000"  >&lt;p&gt;Updated description with text from &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-1075&quot; title=&quot;mina tcp: support for asyncronous InOut endpoint.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-1075&quot;&gt;&lt;del&gt;CAMEL-1075&lt;/del&gt;&lt;/a&gt;. Assigned to me. Changed component to camel-mina2. Set fix version to 2.10&lt;/p&gt;</comment>
                            <comment id="13227068" author="cabeaulac" created="Sun, 11 Mar 2012 15:32:46 +0000"  >&lt;p&gt;Attached Mina2ClientServerTest and Mina2TcpSyncOutOnly.&lt;br/&gt;
The full-asych changes done so far affect how the template producer is used when the client wants a response. The client uses the template.sendBody method and processes the response asynchronously in the URI supplied ioHandler. The Mina2TcpSyncOutOnly tests that the processor on the mina2 consumer side can recognize session creation and can asynchronously send messages to a producer client. Please have a look at these tests and provide any comments you might have.&lt;/p&gt;</comment>
                            <comment id="13232315" author="cabeaulac" created="Sun, 18 Mar 2012 17:31:28 +0000"  >&lt;p&gt;There are some issues that I&apos;d like to discuss with this ticket. Making the mina2 component fully async has significant ramifications how it&apos;s used and how it&apos;s used in conjunction with the template producer. So far I&apos;ve enable the consumer to be async by setting the state of the connection as a property in the exchange. This allows developers to implement the consumer side of the connection in a Processor.&lt;/p&gt;
&lt;h5&gt;&lt;a name=&quot;ConsumerSideimplementedasProcessor&quot;&gt;&lt;/a&gt;Consumer Side implemented as Processor&lt;/h5&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
                   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void process(Exchange e) {
                        &lt;span class=&quot;code-object&quot;&gt;Boolean&lt;/span&gt; prop = (&lt;span class=&quot;code-object&quot;&gt;Boolean&lt;/span&gt;) e.getProperty(
                            Mina2Constants.MINA2_SESSION_CREATED);
                        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (prop != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
                            sessionCreated = prop;
                            receivedExchange = e;
                            latch.countDown();
                        }
                        prop = (&lt;span class=&quot;code-object&quot;&gt;Boolean&lt;/span&gt;) e.getProperty(
                            Mina2Constants.MINA2_SESSION_OPENED);
                        &lt;span class=&quot;code-comment&quot;&gt;// Received session open. Countdown the latch
&lt;/span&gt;                        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (prop != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
                            latch.countDown();
                        }
                        prop = (&lt;span class=&quot;code-object&quot;&gt;Boolean&lt;/span&gt;) e.getProperty(
                            Mina2Constants.MINA2_SESSION_CLOSED);
                        &lt;span class=&quot;code-comment&quot;&gt;// Received session closed. Countdown the latch
&lt;/span&gt;                        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (prop != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
                            latch.countDown();
                        }
                    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The producer side is a challenge. So far I&apos;ve implemented async behavior by attaching a Mina IoHandlerAdapter to the Producer. This can be done in the URI like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
template.sendBody(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;.format(&lt;span class=&quot;code-quote&quot;&gt;&quot;mina2:tcp:&lt;span class=&quot;code-comment&quot;&gt;//localhost:%1$s?textline=&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&amp;amp;ioHandler=#closeIoHandler&quot;&lt;/span&gt;, getPort()), &lt;span class=&quot;code-quote&quot;&gt;&quot;Chad&quot;&lt;/span&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;The concern with this is that it makes the Producer client code and little more complicated and makes the use of the template.requestBody() unsupported.&lt;/p&gt;
&lt;h5&gt;&lt;a name=&quot;ProducerUsingioHandlerURIparamtoregisterIoHandlerforasynccomms&quot;&gt;&lt;/a&gt;Producer Using ioHandler URI param to register IoHandler for async comms&lt;/h5&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   @Test
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testSendOneCloseToServer() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; InterruptedException {
        latch = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CountDownLatch(1);
        closeIoHandler.setLatch(latch);
        template.sendBody(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;.format(&lt;span class=&quot;code-quote&quot;&gt;&quot;mina2:tcp:&lt;span class=&quot;code-comment&quot;&gt;//localhost:%1$s?textline=&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&amp;amp;ioHandler=#closeIoHandler&quot;&lt;/span&gt;, getPort()), &lt;span class=&quot;code-quote&quot;&gt;&quot;Chad&quot;&lt;/span&gt;);
&lt;/span&gt;        latch.await(2, TimeUnit.SECONDS);
        assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;Hello Chad&quot;&lt;/span&gt;, closeIoHandler.getMessage());
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the snippet above the client sends a message to the Consumer and receives a response in the IoHandler that&apos;s been put into the JNDIRegistry.&lt;/p&gt;

&lt;p&gt;Currently, I&apos;m working to finish porting unit tests to use this behavior.&lt;br/&gt;
It could be possible to add a switch option that would allow for the use of template.requestBody as a synchronous call. If that becomes a necessary function, I thought I&apos;d add that after this initial port to full async functionality.&lt;br/&gt;
Dialogue, questions and comments are appreciated.&lt;/p&gt;

&lt;p&gt;Thanks, Chad&lt;/p&gt;
</comment>
                            <comment id="13570151" author="cabeaulac" created="Mon, 4 Feb 2013 13:11:46 +0000"  >&lt;p&gt;I anticipate submitting a patch to resolve this ticket sometime this week.&lt;/p&gt;

&lt;p&gt;-Chad&lt;/p&gt;</comment>
                            <comment id="13570850" author="cabeaulac" created="Tue, 5 Feb 2013 01:45:25 +0000"  >&lt;p&gt;All 88 unit tests pass with new async functionality. Now adding ~10 more unit tests to show users how to use the full-async functionality before submitting patch.&lt;/p&gt;</comment>
                            <comment id="13575515" author="cabeaulac" created="Sun, 10 Feb 2013 20:18:32 +0000"  >&lt;p&gt;I created a Github pull request with a patch for this ticket. Please review and apply it if it&apos;s acceptable. The send-receive patterns have the same behavior. Full async behavior requires that sync=false be set on the endpoints. Current users of camel-mina2 must handle null message bodies since that&apos;s how session creation and closed events are handled. &lt;/p&gt;</comment>
                            <comment id="13576644" author="davsclaus" created="Tue, 12 Feb 2013 14:37:19 +0000"  >&lt;p&gt;This is too fine grained. We should only invoke the processor when the message is received. And not also when session is created / closed etc. These are just mina events which a Camel route is not interested in routing.&lt;/p&gt;

&lt;p&gt;Doing true request/reply over mina2 with async is harder as you would need to do something like camel-jms doing. Where we use a correlation id to match up incoming messages with its corresponding request message. And when we have a match we continue routing.&lt;/p&gt;
</comment>
                            <comment id="13576646" author="davsclaus" created="Tue, 12 Feb 2013 14:38:37 +0000"  >&lt;p&gt;Also you would need to deal with timeouts, in case the other party does not respond in a timely manner, then you would need to be able to trigger a timeout. And if the reply comes back later you would need to deal with this and detect it has previously been timed out and discard it (eg its no longer in the pending correlation ids map)&lt;/p&gt;</comment>
                            <comment id="13577282" author="cabeaulac" created="Wed, 13 Feb 2013 02:07:08 +0000"  >&lt;blockquote&gt;&lt;p&gt;...too fine grained. We should only invoke the processor when the message is received...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This solution exposes the TCP/UDP Session create/destroy events to the Route. This is necessary to meet the requirement.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Doing true request/reply over mina2 with async is harder as you would need to do something like camel-jms doing. Where we use a correlation id to match up incoming messages with its corresponding request message. And when we have a match we continue routing.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We don&apos;t need to do what camel-jms is doing and correlate sessions. The Mina2 IoSession is exposed to the Route. Producers and Consumers on a given camel-mina2 Route can implement their own session management. Session management is intentionally left as an exercise to the developer using camel-mina2.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 from(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;.format(&lt;span class=&quot;code-quote&quot;&gt;&quot;mina2:tcp:&lt;span class=&quot;code-comment&quot;&gt;//localhost:8070?&amp;amp;sync=&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;&quot;&lt;/span&gt;).beanRef(&lt;span class=&quot;code-quote&quot;&gt;&quot;myTCPSessionManager&quot;&lt;/span&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;&lt;p&gt;...need to deal with timeouts...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The InOut and InOnly patterns are supported just how they are in camel-mina and currently in camel-mina2, except that this patch further exposes the IoSession in order to handle the other use cases. Handling timeouts in a fully asynchronous connection is left to the develop (of the myTCPSessionManager above).&lt;br/&gt;
Developers writing APIs for simple interfaces that send a few messages back and forth don&apos;t have to get too serious with throughput. Developers writing endpoints that handle streams dealing with rates greater than 900Mbits/sec might implement their session handling differently. I&apos;m dealing with the latter.&lt;/p&gt;

&lt;p&gt;We need to expose the session created/closed events in order to support full asynchronous comms. The Processors, Beans or IoHandlers in the Camel Route chain and/or attached to the camel-mina2 Producer/Consumer are definitely interested in session create/closed events flowing through the Route. &lt;br/&gt;
The Processor that comes after the Consumer in the Mina2TCPAsyncOutOnlyTest gets the IoSession from the exchange and sends messages back to the Producer asynchronously. Code below.   &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// The IoSession has been created. Send 300 messages back to the Producer.
&lt;/span&gt;IoSession session = (IoSession) e.getIn().getHeader(Mina2Constants.MINA2_IOSESSION);
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 300; i++) {
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; msg = &lt;span class=&quot;code-quote&quot;&gt;&quot;message &quot;&lt;/span&gt; + i;
    session.write(msg);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please take another look and/or provide alternatives. This patch handles the existing InOut and InOnly pattern requirements as well as allowing fully asynchronous Producers and Consumers.&lt;/p&gt;</comment>
                            <comment id="13579185" author="cabeaulac" created="Fri, 15 Feb 2013 13:46:59 +0000"  >&lt;h5&gt;&lt;a name=&quot;NewURIAttribute&quot;&gt;&lt;/a&gt;New URI Attribute&lt;/h5&gt;
&lt;p&gt;What if I add a new attribute called sendSessionMsgs and default it to false? If you set the attr to true you will receive all of the session created/closed messages also and allow endpoints to implement full-async producers and consumers.&lt;br/&gt;
Would the patch be acceptable after this change?&lt;/p&gt;

&lt;p&gt;Thanks, Chad&lt;/p&gt;</comment>
                            <comment id="13580197" author="cabeaulac" created="Sun, 17 Feb 2013 15:23:15 +0000"  >&lt;p&gt;Anybody like the idea of adding the sendSessionMsgs to avoid sending session created/destroyed events through the route for non-full-async endpoints? I&apos;ll add it if we agree that&apos;s a good approach.&lt;/p&gt;</comment>
                            <comment id="13581254" author="davsclaus" created="Tue, 19 Feb 2013 13:15:39 +0000"  >&lt;p&gt;camel-mina2 code should first be aligned to be similar to what we do in camel-netty to be asynchronous, and leverage the Camel async routing engine.&lt;/p&gt;</comment>
                            <comment id="13581255" author="davsclaus" created="Tue, 19 Feb 2013 13:18:38 +0000"  >&lt;p&gt;If you want fine grained events for session open / partly packages received / and whatnot then you should use a custom mina codec (or what they call it).&lt;/p&gt;

&lt;p&gt;Its not a good model to fire empty Camel Exchange in routes for these kind of events. The normal use-case is 1 Exchange per complete message received. If people want something different, then use a custom codec to hook into these events. And/or use the Mina API directly.&lt;/p&gt;</comment>
                            <comment id="13581287" author="cabeaulac" created="Tue, 19 Feb 2013 14:02:53 +0000"  >&lt;p&gt;I&apos;m not ready to implement the Camel AsycProcessor for camel-mina2 at this time. Not sure it&apos;s a good fit for these use cases. How does camel-netty handle the use cases in the description of this ticket? I read the API docs and looked at the code for a few minutes but didn&apos;t see how to do it. Docs talk about handling the request-reply pattern asynchronously. Use cases in this ticket handle a conversation pattern when any number of messages can be exchanged by endpoints in either direction. Using a mina codec (or probably filter) could be a good approach. I&apos;ll have to think about that. For now I&apos;m going to use the java.nio beans and mina2 code I&apos;ve been using. I guess the crux of the issue is, the uses cases in this ticket don&apos;t fit the &quot;normal use-case is 1 Exchange per complete message received&quot; Claus mentions above. I&apos;m still wondering if I&apos;m trying to fit a square peg into a round hole here or if I&apos;m not being creative enough.&lt;/p&gt;</comment>
                            <comment id="13581290" author="cabeaulac" created="Tue, 19 Feb 2013 14:07:42 +0000"  >&lt;p&gt;I&apos;m un-assigning myself. Using a filter like Claus suggests in a comment above might be a good approach. If I go that route and it meets the requirements, I&apos;ll share the progress.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12486875">CAMEL-2151</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12486064">CAMEL-1075</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12494205">CAMEL-3471</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12517892" name="Mina2ClientServerTest.java" size="6559" author="cabeaulac" created="Sun, 11 Mar 2012 15:32:46 +0000"/>
                            <attachment id="12517893" name="Mina2TcpAsyncOutOnly.java" size="9079" author="cabeaulac" created="Sun, 11 Mar 2012 15:32:46 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 6 Jul 2010 08:59:58 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310060" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Estimated Complexity</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10063"><![CDATA[Advanced]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3496</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 41 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01ppz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7936</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                            </customfields>
    </item>
</channel>
</rss>