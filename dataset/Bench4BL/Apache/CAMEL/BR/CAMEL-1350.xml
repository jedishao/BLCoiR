<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun Dec 04 01:10:38 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CAMEL-1350/CAMEL-1350.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CAMEL-1350] camel-quickfix component in apache camel distribution</title>
                <link>https://issues.apache.org/jira/browse/CAMEL-1350</link>
                <project id="12311211" key="CAMEL">Camel</project>
                    <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;ATTENTION: Ignoring converter type: org.apache.camel.fix.FixConverter as a dependent class could not be found: java.lang.NoClassDefFoundError: biz/c24/io/api/data/DataType&lt;br/&gt;
java.lang.NoClassDefFoundError: biz/c24/io/api/data/DataType&lt;br/&gt;
	at java.lang.Class.getDeclaredMethods0(Native Method)&lt;br/&gt;
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2427)&lt;br/&gt;
	at java.lang.Class.getDeclaredMethods(Class.java:1791)&lt;br/&gt;
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.loadConverterMethods(AnnotationTypeConverterLoader.java:147)&lt;br/&gt;
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:78)&lt;br/&gt;
	at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:260)&lt;br/&gt;
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:95)&lt;br/&gt;
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:71)&lt;br/&gt;
	at org.apache.camel.util.IntrospectionSupport.convert(IntrospectionSupport.java:263)&lt;br/&gt;
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:221)&lt;br/&gt;
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:188)&lt;br/&gt;
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:213)&lt;br/&gt;
	at org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:63)&lt;br/&gt;
	at org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:33)&lt;br/&gt;
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:81)&lt;br/&gt;
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:330)&lt;br/&gt;
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:54)&lt;br/&gt;
	at org.apache.camel.model.RouteType.resolveEndpoint(RouteType.java:96)&lt;br/&gt;
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:106)&lt;br/&gt;
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:112)&lt;br/&gt;
	at org.apache.camel.model.FromType.resolveEndpoint(FromType.java:72)&lt;br/&gt;
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:81)&lt;br/&gt;
	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:239)&lt;br/&gt;
	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:86)&lt;br/&gt;
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:661)&lt;br/&gt;
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:651)&lt;br/&gt;
	at org.apache.camel.spring.SpringCamelContext.maybeDoStart(SpringCamelContext.java:166)&lt;br/&gt;
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:161)&lt;br/&gt;
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:49)&lt;br/&gt;
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:96)&lt;br/&gt;
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:115)&lt;br/&gt;
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)&lt;br/&gt;
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)&lt;br/&gt;
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:383)&lt;br/&gt;
	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:139)&lt;br/&gt;
	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:93)&lt;br/&gt;
	at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:232)&lt;br/&gt;
	at org.apache.camel.spring.Main.doStart(Main.java:186)&lt;br/&gt;
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:49)&lt;br/&gt;
	at org.apache.camel.util.MainSupport.run(MainSupport.java:121)&lt;br/&gt;
	at org.apache.camel.util.MainSupport.run(MainSupport.java:299)&lt;br/&gt;
	at org.apache.camel.spring.Main.main(Main.java:98)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:396)&lt;br/&gt;
	at java.lang.Thread.run(Thread.java:619)&lt;/p&gt;

&lt;p&gt;The org.apache.camel.fix.FixConverter class uses proprietary classes : &lt;/p&gt;

&lt;p&gt;import biz.c24.io.api.data.BooleanDataType;&lt;br/&gt;
import biz.c24.io.api.data.CharDataType;&lt;br/&gt;
import biz.c24.io.api.data.ComplexDataObject;&lt;br/&gt;
import biz.c24.io.api.data.ComplexDataType;&lt;br/&gt;
import biz.c24.io.api.data.DataType;&lt;br/&gt;
import biz.c24.io.api.data.DateDataType;&lt;br/&gt;
import biz.c24.io.api.data.Element;&lt;br/&gt;
import biz.c24.io.api.data.IntDataType;&lt;br/&gt;
import biz.c24.io.api.data.NumberDataType;&lt;br/&gt;
import biz.c24.io.api.data.StringDataType;&lt;br/&gt;
import biz.c24.io.api.presentation.TextualSource;&lt;br/&gt;
import biz.c24.io.fix42.NewOrderSingleElement;&lt;/p&gt;

&lt;p&gt;Except if those classes are part of open source community but How can I use this component without Artix Data Service ?&lt;/p&gt;

&lt;p&gt;ex config :&lt;/p&gt;

&lt;p&gt;		&amp;lt;route&amp;gt;&lt;br/&gt;
			&amp;lt;from uri=&quot;fixserver:banzai-to-camel.cfg&quot; /&amp;gt;&lt;br/&gt;
			&amp;lt;to uri=&quot;log:quickfix&quot; /&amp;gt;&lt;br/&gt;
		&amp;lt;/route&amp;gt;&lt;/p&gt;


</description>
                <environment>&lt;p&gt;	&amp;lt;properties&amp;gt;&lt;br/&gt;
		&amp;lt;camel-version&amp;gt;2.0-SNAPSHOT&amp;lt;/camel-version&amp;gt;&lt;br/&gt;
		&amp;lt;fuse-version&amp;gt;2.x-fuse-SNAPSHOT&amp;lt;/fuse-version&amp;gt;&lt;br/&gt;
		&amp;lt;activemq-version&amp;gt;5.2.0&amp;lt;/activemq-version&amp;gt;&lt;br/&gt;
		&amp;lt;quickfix-version&amp;gt;1.3.3&amp;lt;/quickfix-version&amp;gt;&lt;br/&gt;
		&amp;lt;mina-version&amp;gt;1.1.0&amp;lt;/mina-version&amp;gt;&lt;br/&gt;
		&amp;lt;slf4j-version&amp;gt;1.5.6&amp;lt;/slf4j-version&amp;gt;&lt;br/&gt;
	&amp;lt;/properties&amp;gt;&lt;/p&gt;</environment>
        <key id="12487801">CAMEL-1350</key>
            <summary>camel-quickfix component in apache camel distribution</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="hadrian">Hadrian Zbarcea</assignee>
                                    <reporter username="cmoulliard">Charles Moulliard</reporter>
                        <labels>
                    </labels>
                <created>Tue, 17 Feb 2009 15:34:56 +0000</created>
                <updated>Sun, 24 Apr 2011 09:57:48 +0000</updated>
                            <resolved>Tue, 12 Oct 2010 17:55:10 +0000</resolved>
                                                    <fixVersion>2.5.0</fixVersion>
                                        <due></due>
                            <votes>2</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="12950889" author="davsclaus" created="Tue, 17 Feb 2009 17:12:08 +0000"  >&lt;p&gt;The idea is to move camel-fix to apache and let it only dep on quickfix&lt;/p&gt;

&lt;p&gt;And then create a new component: camel-fix-ads at fuse with the artixds stuff&lt;/p&gt;</comment>
                            <comment id="12950877" author="davsclaus" created="Tue, 17 Feb 2009 17:12:59 +0000"  >&lt;p&gt;See also:&lt;br/&gt;
&lt;a href=&quot;http://code.google.com/p/camel-quickfix/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://code.google.com/p/camel-quickfix/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And license for qucikfix&lt;br/&gt;
&lt;a href=&quot;http://www.quickfixj.org/documentation/license.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.quickfixj.org/documentation/license.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And its used by other Apache projects:&lt;br/&gt;
The Apache Synapse development team and the WSO2 ESB team has announced that they have successfully integrated Quickfix/J with Apache Synapse and WSO2 ESB. Currently this feature is available in Apache Synapse and WSO2 ESB trunks. But they are planning for a release early next May. This release will contain the new addition of FIX protocol support with Quickfix/J. &lt;/p&gt;</comment>
                            <comment id="12950899" author="davsclaus" created="Thu, 19 Feb 2009 12:36:14 +0000"  >&lt;p&gt;I added quickfixj-all v1.4.0 to the fuse maven repo&lt;/p&gt;</comment>
                            <comment id="12950909" author="cmoulliard" created="Thu, 19 Feb 2009 12:57:24 +0000"  >&lt;p&gt;@Claus,&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="12950908" author="davsclaus" created="Thu, 19 Feb 2009 16:43:29 +0000"  >&lt;p&gt;We work together with Anton to bring in his camel-quickfix into Camel:&lt;br/&gt;
&lt;a href=&quot;http://code.google.com/p/camel-quickfix/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://code.google.com/p/camel-quickfix/&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="12950907" author="davsclaus" created="Sun, 22 Feb 2009 09:25:23 +0000"  >&lt;p&gt;See also findings here:&lt;br/&gt;
&lt;a href=&quot;http://fusesource.com/forums/thread.jspa?threadID=589&amp;amp;tstart=0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://fusesource.com/forums/thread.jspa?threadID=589&amp;amp;tstart=0&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12951737" author="davsclaus" created="Tue, 14 Apr 2009 12:22:27 +0000"  >&lt;p&gt;See also some findings by Bengt here:&lt;br/&gt;
&lt;a href=&quot;http://fusesource.com/forums/thread.jspa?messageID=2458&amp;amp;#2458&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://fusesource.com/forums/thread.jspa?messageID=2458&amp;amp;#2458&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12951867" author="arhan" created="Tue, 21 Apr 2009 20:01:29 +0000"  >&lt;p&gt;Attached a version of the component that doesn&apos;t have the dependency on ArtixDS, including the fixes suggested by Bengt&lt;/p&gt;</comment>
                            <comment id="12951872" author="davsclaus" created="Wed, 22 Apr 2009 16:19:02 +0000"  >&lt;p&gt;Thanks for the component Anton.&lt;/p&gt;

&lt;p&gt;I am a bit bust a the moment of some internal API refactorings in Camel 2.0. Will get back to this later when the API is settled and done.&lt;/p&gt;</comment>
                            <comment id="12952007" author="cmoulliard" created="Wed, 6 May 2009 14:04:10 +0000"  >&lt;p&gt;@Willem,&lt;/p&gt;

&lt;p&gt;I have already done some modifications in the code provided by Anton.&lt;/p&gt;

&lt;p&gt;Do you want it ?&lt;/p&gt;</comment>
                            <comment id="12952015" author="njiang" created="Wed, 6 May 2009 14:17:48 +0000"  >&lt;p&gt;@Anton,&lt;/p&gt;

&lt;p&gt;I just went through the patch , I didn&apos;t find any unit tests.&lt;br/&gt;
Did you miss them when you zip the files ?&lt;/p&gt;</comment>
                            <comment id="12952006" author="cmoulliard" created="Wed, 6 May 2009 14:26:32 +0000"  >&lt;p&gt;@Willem,&lt;/p&gt;

&lt;p&gt;there is no unit test except an example class packaged under src/main/java/org.apache.camel.quickfix.example&lt;/p&gt;
</comment>
                            <comment id="12951994" author="njiang" created="Wed, 6 May 2009 15:22:17 +0000"  >&lt;p&gt;@ Charles, &lt;br/&gt;
Can you show me your change ? I&apos;m trying  to load the camel-quickfix bundle in my osgi-integration test.&lt;/p&gt;</comment>
                            <comment id="12951993" author="cmoulliard" created="Wed, 6 May 2009 15:36:20 +0000"  >&lt;p&gt;Here is a zip file containing :&lt;/p&gt;

&lt;p&gt;A) camel-quickfix modified : &lt;/p&gt;

&lt;p&gt;1) pom.xml, &lt;br/&gt;
2) packages renamed from org.apache.camel.quickfix to org.apache.camel.component.quickfix&lt;br/&gt;
3) Thread.currentThread().setContextClassLoader added in quickFixAcceptor and Initiator&lt;/p&gt;

&lt;p&gt;B) reportincident.quickfix&lt;/p&gt;

&lt;p&gt;Small camel bundle using quickfix&lt;/p&gt;

&lt;p&gt;Remark : You have to deploy the following bundle too : install -s wrap:mvn:org.quickfixj/quickfixj-all/1.4.0&lt;/p&gt;

&lt;p&gt;the jar is available from repo of iona : &lt;a href=&quot;http://repo.fusesource.com/maven2-all&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://repo.fusesource.com/maven2-all&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="12952020" author="njiang" created="Thu, 7 May 2009 05:13:06 +0000"  >&lt;p&gt;Applied the patch with thanks to Anton and Charles&lt;br/&gt;
 &lt;a href=&quot;http://svn.apache.org/viewvc?rev=772503&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?rev=772503&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The patch also includes these changes&lt;br/&gt;
1) pom.xml, created the osig friendly bundle&lt;br/&gt;
2) packages renamed from org.apache.camel.quickfix to org.apache.camel.component.quickfix&lt;br/&gt;
   also updated the META-INF/services/org/apache/camel/component files &lt;br/&gt;
   and example/fix-gateway.xml for the change&lt;br/&gt;
3) Thread.currentThread().setContextClassLoader added in quickFixAcceptor and Initiator&lt;br/&gt;
4) Fix the CS errors&lt;/p&gt;</comment>
                            <comment id="12952028" author="davsclaus" created="Thu, 7 May 2009 05:26:54 +0000"  >&lt;p&gt;Willem a few comments to the commit&lt;/p&gt;

&lt;p&gt;1) dependency on log4j should be optional, eg remove log4j in the code and &lt;b&gt;only&lt;/b&gt; uses commons-logging&lt;br/&gt;
2) please add code comments why you mess with the context classloader&lt;br/&gt;
3) QuickFixEndpoint please do proper error handling and not do e.printStackTrace. There should be some getExceptionHandler on the super you can delegate to.&lt;br/&gt;
4) Remove the shutdown hook, it should be stopped in doStop() in the endpoint. Eg use doStart and doStop for init/dispose tasks.&lt;br/&gt;
5) Dont catch, log and rethrow in QuickFixEndpoint, but set the exception on exchange, then Camel error handler can handle it afterwards, eg&lt;/p&gt;

&lt;p&gt;try &lt;/p&gt;
{
  process
}
&lt;p&gt; catch (Exception e)&lt;br/&gt;
  exchange.setException(e);&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;6) createException looks odd, as it sets the same object in IN/OUT, and why force an InOut pattern? Is it mandatory for FIX to always do InOut?&lt;br/&gt;
7) In createConsumer do not set the this.processor = processor. The processor is for the consumer only.&lt;br/&gt;
8) It depends on camel-spring for resource loading, so we can load resource files in the classpath. See camel-velocity that also does this, and do like it, eg extend some camel-spring XXX endpoint class for doing it properly.&lt;br/&gt;
9) Maybe add some DEBUG logging in doStart / doStop so you can see it starts / stops&lt;br/&gt;
10) throw IllegalArgumentException if not configured properly instead of RuntimeException&lt;br/&gt;
11) Why does Exchange2Message extends MessageCracker is that needed? And it should be renamed to QuickFixConverter.&lt;br/&gt;
12) Do not hardcode iso-8859-1 as encoding, but use the existing type converters in camel-core. And add Exchange as the 2nd parameter to get hold of the other type converters to convert the InputStream to String.&lt;br/&gt;
13) And move the sample code into src/test/java&lt;/p&gt;</comment>
                            <comment id="12951999" author="njiang" created="Thu, 7 May 2009 10:50:28 +0000"  >&lt;p&gt;1) , 2) , 3) , 4) , 5) , 9) , 10) , 11), 12) ,13)  &lt;b&gt;DONE&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;6) createException looks odd, as it sets the same object in IN/OUT, and why force an InOut pattern? Is it mandatory for FIX to always do InOut?&lt;br/&gt;
I think you means createExchange() and FIX always do InOut. &lt;br/&gt;
Point me if I&apos;m wrong.&lt;/p&gt;

&lt;p&gt;7) In createConsumer do not set the this.processor = processor. The processor is for the consumer only.&lt;br/&gt;
This is because that the processor need be use when the endpoint has the incoming message&lt;/p&gt;

&lt;p&gt;8) It depends on camel-spring for resource loading, so we can load resource files in the classpath. See camel-velocity that also does this, and do like it, eg extend some camel-spring XXX endpoint class for doing it properly.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;TO BE DONE *&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;11) Why does Exchange2Message extends MessageCracker is that needed? And it should be renamed to QuickFixConverter.&lt;br/&gt;
&lt;b&gt;DONE&lt;/b&gt;&lt;br/&gt;
Rename the class name and remove the extension of MessageCracker&lt;/p&gt;

&lt;p&gt;trunk&lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/viewvc?rev=772605&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?rev=772605&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;

</comment>
                            <comment id="12952064" author="cmoulliard" created="Mon, 11 May 2009 08:25:33 +0000"  >&lt;p&gt;Patch concerning class : QuickFixConverter&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Add 2 new type converters :&lt;br/&gt;
a) public static Message toMessage(String message)&lt;br/&gt;
b) public static Message toMessage(JmsMessage message)&lt;/li&gt;
	&lt;li&gt;Document code,&lt;/li&gt;
	&lt;li&gt;Remove @Author tag&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12952062" author="cmoulliard" created="Mon, 11 May 2009 11:12:36 +0000"  >&lt;p&gt;Patch &lt;/p&gt;

&lt;p&gt;1) QuickFixConverter&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Add 1 new type converters : public static Message toMessage(String message)&lt;/li&gt;
	&lt;li&gt;Document code,&lt;/li&gt;
	&lt;li&gt;Remove @Author tag&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2) QuickFixEndpoint&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Add SessionSettings setter method to :&lt;br/&gt;
     a) allow dependency injection&lt;br/&gt;
     b) describe the endpoint parameter as a collection of properties in the spring XML file (&lt;a href=&quot;http://www.quickfixj.org/confluence/display/qfj/Example+-+Brad+Harvey&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.quickfixj.org/confluence/display/qfj/Example+-+Brad+Harvey&lt;/a&gt;) instead of xxx.cfg files&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;New Class&lt;br/&gt;
   QuickFixDataFormat&lt;/p&gt;</comment>
                            <comment id="12952188" author="rodehav" created="Thu, 21 May 2009 19:55:45 +0000"  >&lt;p&gt;Hello!&lt;/p&gt;

&lt;p&gt;My name is Bengt Rodehav and I am very interested in the camel-quickfix component. I have been trying out the camel-fix component and &lt;br/&gt;
have found a number of errors and deficiencies in that component. I have posted my findings at &lt;br/&gt;
&lt;a href=&quot;http://fusesource.com/forums/thread.jspa?threadID=787&amp;amp;tstart=0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://fusesource.com/forums/thread.jspa?threadID=787&amp;amp;tstart=0&lt;/a&gt;. I think Anton Arhipov used some of the code I posted in his &lt;br/&gt;
camel-quickfix component at Google code. I am now pleased to see that the camel-quickfix component seems to be back at Apache Camel &lt;br/&gt;
(where I think it should be) and that it seems to be included in Camel 2.0. That is good news indeed.&lt;/p&gt;

&lt;p&gt;I haven&apos;t had time to test the new camel-quickfix component that much but I have still found a number of issues. I have written about &lt;br/&gt;
them at the URL I mentioned above. So far I&apos;ve found the following issues/questions:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The serious error I found in the camel-fix component seems to be back. If I throw an exception somewhere in my route, it is critical&lt;br/&gt;
that this exceptions makes it all the way back to the QuickfixApplication.fromApp() method. The way I solved this before is to, in the &lt;br/&gt;
QuickfixEndpoint.onMessage() method, inspect the exchange after it has been processed and throw any exception that might be attached to &lt;br/&gt;
the exchange. The reason why this is critical is that if no exception is thrown to the fromApp() method, then QuickFix/J thinks that the &lt;br/&gt;
message was handled properly. In case of a runtime exception, QuickFix/J will request a resend of the message. In case of any of the &lt;br/&gt;
checked exceptions, QuickFix/J other error handling routines will kick in. If exceptions don&apos;t make it all the way back to fromApp() then &lt;br/&gt;
QuickFix/J&apos;s error handling will be circumvented. This makes it impossible to use camel-quickfix for production purposes.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In real scenarious, user and password is required. This must be attached in the fromAdmin() method if the message type is LOGON. I&apos;ve&lt;br/&gt;
posted examples on how to do this. I cannot see how you intend to pass user/password on to QuickFix/J. Is this something you have &lt;br/&gt;
forgotten or is there a way to do this?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;You don&apos;t seem to enable Jmx. This must be enabled in production mode - or at least it must be possible to enable it.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Is there a way to configure what message store to use?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Is there a way to configure what log factory to use?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Anton mentioned: &quot;Configuring the quickfixj (logging factory/ message store/ etc) resources should be done via URIs. I will add that&lt;br/&gt;
very soon.&quot; Has this been implemented?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I have recently found another problem with QuickFix/J. When constructing a Message from a String, it is not enough to specify the&lt;br/&gt;
string containing the message, a  data dictionary must also be specified in order for QuickFix/J to work properly with FIX repeating &lt;br/&gt;
groups. I e the following is not enough:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    public static Message convert(String data) throws IOException,&lt;br/&gt;
            InvalidMessage, ConfigError &lt;/p&gt;
{
        return new Message(data);
    }

&lt;p&gt;Instead the following must be done:&lt;/p&gt;

&lt;p&gt;    public static Message convert(String data) throws IOException,&lt;br/&gt;
            InvalidMessage, ConfigError &lt;/p&gt;
{
        return new Message(data, new DataDictionary(&quot;FIX44.xml&quot;));
    }

&lt;p&gt;Here I hardoced &quot;FIX44.xml&quot;. Of course the data dictionary to use should be the dictionary attached to the Session. I&apos;m not sure how to &lt;br/&gt;
accomplish this. camel-quickfix contains a converter with the following signature:&lt;/p&gt;

&lt;p&gt;    public static Message convert(InputStream in, Exchange exchange) throws IOException, InvalidMessage&lt;/p&gt;

&lt;p&gt;This converter must be modified to specify the correct data dictionary. Perhaps it could be embedded in the exchange somehow?&lt;br/&gt;
I&apos;m really looking forward to see (a fully working...) camel-quickfix in the next Camel release.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;/Bengt&lt;/p&gt;</comment>
                            <comment id="12953240" author="davsclaus" created="Tue, 29 Sep 2009 06:56:56 +0000"  >&lt;p&gt;Charles can you improve the camel-quickfix component. &lt;/p&gt;

&lt;p&gt;Maybe some of Bengt&apos;s observations is already fixed, but I doubt we got it all covered?&lt;/p&gt;</comment>
                            <comment id="12955366" author="davsclaus" created="Mon, 29 Mar 2010 11:40:56 +0000"  >&lt;p&gt;We are looking for people who want to help with this camel-quickfix component. If you want to help then write here or on the mailinglist.&lt;/p&gt;</comment>
                            <comment id="12956842" author="hadrian" created="Sun, 26 Sep 2010 00:08:12 +0000"  >&lt;p&gt;Steve has been hard at work and came up with an improved version which I am reviewing now.&lt;/p&gt;

&lt;p&gt;The plan is for him to attach it to this jira in a couple of days tops for community review and then get it committed in time for the new 2.5.0 release planned for next week.&lt;/p&gt;
</comment>
                            <comment id="12956885" author="davsclaus" created="Sun, 26 Sep 2010 05:38:05 +0000"  >&lt;p&gt;Yay this sounds really great&lt;/p&gt;</comment>
                            <comment id="12956893" author="v_cheruvu@hotmail.com" created="Sun, 26 Sep 2010 12:31:23 +0000"  >&lt;p&gt;Great, I am eagerly waiting for this enhancement. I have some spare time to try this component to route FIX messages  from FIX gateway to various FIX sessions through Camel.&lt;/p&gt;</comment>
                            <comment id="12956921" author="stevebate" created="Mon, 27 Sep 2010 12:29:38 +0000"  >&lt;p&gt;I&apos;ve attached the proposed new version of the camel-quickfix component. It models the QuickFIX/J functionality a bit differently than the previous version (no separate initiator/acceptor URIs). It also exposes all FIX engine events: FIX session creation/logon/logoff and both incoming/outgoing administrative and application messages. The FIX engine event category, session ID and FIX message type (if any) are exposed as Exchange headers for easy routing and filtering. I&apos;ve also included unit tests and several examples (simple messaging, dynamic FIX standard content-based routing and a trade execution simulator Camel component). Feedback and discussion is welcome.&lt;/p&gt;</comment>
                            <comment id="12956937" author="stevebate" created="Mon, 27 Sep 2010 12:34:55 +0000"  >&lt;p&gt;Some other features of the new implementation...&lt;/p&gt;

&lt;p&gt;For parsing FIX message strings, an optional QFJ Data Dictionary can be specified as property on the exchange. The dictionary is used in the message converter. The dictionary can also be determined in some cases by looking use the FIX session using the session ID in the Exchange header.&lt;/p&gt;

&lt;p&gt;The QFJ configuration has been simplified for the component. The component supports all the Log and MessageStore implementations in the QFJ release, but it could be made even more flexible in the future.&lt;/p&gt;

&lt;p&gt;QFJ engine JMX support can be enabled through extended configuration file settings.&lt;/p&gt;</comment>
                            <comment id="12956936" author="hadrian" created="Mon, 27 Sep 2010 13:06:24 +0000"  >&lt;p&gt;Thanks a bunch Steve, awesome contribution.&lt;/p&gt;

&lt;p&gt;This is a complete rewrite of the camel-quickfix component. For once the scheme is not &lt;tt&gt;quickfix:&lt;/tt&gt;, but &lt;tt&gt;quickfixj:&lt;/tt&gt;. Steve mentioned that he&apos;s not very keen on having quickfixj, but it is an important distinction, as users usually think of the cpp version without the &apos;j&apos;. My preference would be to drop the &apos;j&apos;, and use quickfix and use this as an in place replacement of the old component, but that would also mean it won&apos;t be backwards compatible. The migration should be easy though, the uris would have to change. Otherwise we&apos;d have two quickfix components and camel has a huge number of components as it is.&lt;/p&gt;

&lt;p&gt;I would highly appreciate your thoughts and will hold of on committing this for some 8 hours. If no comments by the end of the day, I will commit this with the quickfixj to quickfix chanage. (I will leave the prefix for classnames &lt;tt&gt;Quickfixj&lt;/tt&gt; as is, although it differs from the old one).  There is also no difference in the version of the quickfixj-all dependency (1.5.0).&lt;/p&gt;

&lt;p&gt;Again Steve, many thanks for the contribution. I&apos;ll start documenting the changes too, but if you spot any issues, or want to contribute, please let us know.&lt;/p&gt;</comment>
                            <comment id="12956930" author="davsclaus" created="Mon, 27 Sep 2010 13:23:19 +0000"  >&lt;p&gt;+1 to Hadrian&apos;s suggestion of replacing the old component with the new one from Steve and use the &lt;tt&gt;quickfix&lt;/tt&gt; as the scheme.&lt;/p&gt;</comment>
                            <comment id="12956961" author="rodehav" created="Mon, 27 Sep 2010 16:51:34 +0000"  >&lt;p&gt;+1 for &quot;quickfix:&quot;. There will only be a lot of confusion should we have both quickfix and quickfixj. I think we all agree that the QuickFix support in Camel will be through Steve&apos;s code - the older component will not be maintained anyway. I don&apos;t know how many actually use the existing quickfix component. If there is a large user base, then it could be renamed (to quickfix-legacy or something similar), and deprecated. It could then be removed in the next Camel version. However, I would prefer that the new contribution would replace the old quickfix component if possible.&lt;/p&gt;

&lt;p&gt;I will have a look at Steve&apos;s contribution although I won&apos;t have time to test i thoroughly.&lt;/p&gt;
</comment>
                            <comment id="12956948" author="rodehav" created="Mon, 27 Sep 2010 17:43:05 +0000"  >&lt;p&gt;I&apos;ve had a brief look at the patch. It looks really good - it opens up far more possibilities than before. I haven&apos;t quite figured out how to accomplish the things I need (message store, log files, user/password) but I guess it&apos;ll be easier when some documentation is produced. It seems, at this point, like most configuration is done in the configuration files - not the URI which was proposed in another incarnation of this component. Maybe it&apos;s more flexible this way - I haven&apos;t thought it through yet.&lt;/p&gt;

&lt;p&gt;I&apos;m a bit curious as to how the error handling works. What happens if an exception is thrown in the route? Will that somehow be communicated back to QuickFixJ? I&apos;m sure Steve knows what the best practice is regarding this. In the past, I felt that it was important not to hide exceptions from QuickFixJ so that resends could take place automatically. How should this work Steve - and how does it work in this version?&lt;/p&gt;</comment>
                            <comment id="12956969" author="stevebate" created="Mon, 27 Sep 2010 20:55:25 +0000"  >&lt;p&gt;Bengt, that problem is not completely solved yet although I have experimented with some ideas. I&apos;d like to get some feedback about it from the experienced Camel developers. On the issue of propagating exceptions back to the FIX engine, what do we do in a case where there are multiple listeners (ultimately &quot;consumers&quot;) of a FIX message? If a single listener throws an exception (e.g., because they expected an optional field in a message), do we roll back the FIX sequence number? This would cause the message to be resent to all listeners, whether they had a problem with the original message or not. I&apos;m thinking we may want to only support specific exceptions that affect the behavior of the FIX engine (RejectLogon, DoNotSend, and UnsupportedMessageType). It&apos;s a bit risky to rollback on message-related exceptions since the same exception will likely be thrown when the message is re-received. It could be an endless retry scenario in the worst case. I&apos;m thinking those types of exceptions are probably best handled in the application.&lt;/p&gt;

&lt;p&gt;Intercepting administrative messages (like logon, for adding credentials) is a bit tricky. I was thinking that maybe we could support pluggable interceptors in the quickfix component. This would actually be more modular than the traditional Application callback-based approach.&lt;/p&gt;

&lt;p&gt;If we agree on an approach, I think we&apos;ll be able to quickly implement a solution.&lt;/p&gt;</comment>
                            <comment id="12956968" author="rodehav" created="Mon, 27 Sep 2010 21:55:25 +0000"  >&lt;p&gt;Yes, the concept of many consumers is a bit new to me since that&apos;s a possibility that now exists (a good one I think). However, isn&apos;t it up to the developer (the user of camel-quickfix) to make a choice whether or not the message should be resent. Perhaps it&apos;s possible to mark the exchange as being resent or &quot;retried&quot;. Perhaps some of the more experienced Camel guys could comment on that. I think that&apos;s being used in other parts of Camel. A property on the exchange could even have a counter indicating if it&apos;s the first, second etc retry.&lt;/p&gt;

&lt;p&gt;Nevertheless, it&apos;s probably true that one would not like to cause a resend too often. I think you know much better than me when this is desirable. One concern I have is guaranteed delivery. I don&apos;t want QuickFix/J to falsely believe that the message was taken care of before I have been able to store it persistently, e g in a database or or on a JMS queue. I think this is a very relevant scenario that must be addressed. E g imagine that I receive an ExecutionReport (I mainly work with back-office systems), it passes along my Camel route but before it reaches the point where it&apos;s stored in my ActiveMQ persistent queue, my computer stops (no power). Where does that leave me? Will I receive that ExecutionReport again (from QuickFix/J) or is it lost?&lt;/p&gt;

&lt;p&gt;Pluggable interceptors sounds like a very good idea. Are you planning on using Camel&apos;s interceptor concept?&lt;/p&gt;</comment>
                            <comment id="12956977" author="v_cheruvu@hotmail.com" created="Tue, 28 Sep 2010 07:12:07 +0000"  >&lt;p&gt;+1 for QuickFix. I have manged to run Steve&apos;s code and able to persist FIX messages to Mysql server database and also tested few cases i.e resend. It worked nicely without much effort. &lt;/p&gt;

&lt;p&gt;Below are the code snippet of route builder where orders from Banzai are routed to EXEC through the FIXGW (Camel-quickfix) . Then exec reports from EXEC are routed back to BANZAI and also I have added multicast to see FIX message can be broadcasted to other fix sessions.  My camel process can be both acceptor and initiator.&lt;/p&gt;

&lt;p&gt;Great work Steve, it looks great.&lt;/p&gt;

&lt;p&gt;//from Banzai (Intiator) to EXEC(Acceptor) through FIXGW (mediator)&lt;br/&gt;
		from(&quot;quickfixj:quickfix/mediator.cfg?sessionID=FIX.4.2:FIXGW-&amp;gt;BANZAI&quot;).&lt;br/&gt;
		filter(PredicateBuilder.and(&lt;br/&gt;
		  header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AppMessageReceived),&lt;br/&gt;
		  header(QuickfixjEndpoint.MESSAGE_TYPE_KEY).isEqualTo(MsgType.ORDER_SINGLE))).&lt;/p&gt;

&lt;p&gt;       to(&quot;quickfixj:quickfix/mediator.cfg?sessionID=FIX.4.2:FIXGW-&amp;gt;EXEC&quot;);&lt;/p&gt;


&lt;p&gt;		//from executor(acceptor) to BANZAI(initiator) through FIXGW (Mediator) &lt;br/&gt;
		from(&quot;quickfixj:quickfix/mediator.cfg?sessionID=FIX.4.2:FIXGW-&amp;gt;EXEC&quot;)&lt;br/&gt;
   	 	.filter(PredicateBuilder.and(&lt;br/&gt;
        header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AppMessageReceived),&lt;br/&gt;
        header(QuickfixjEndpoint.MESSAGE_TYPE_KEY).isEqualTo(MsgType.EXECUTION_REPORT)))&lt;br/&gt;
        .multicast()&lt;br/&gt;
        	.stopOnException()&lt;br/&gt;
        	.to(&quot;direct:banzai&quot;,&quot;direct:banzai2&quot;)&lt;br/&gt;
        .end();&lt;/p&gt;

&lt;p&gt;		from(&quot;direct:banzai&quot;).to(&quot;quickfixj:quickfix/mediator.cfg?sessionID=FIX.4.2:FIXGW-&amp;gt;BANZAI&quot;);&lt;br/&gt;
		from(&quot;direct:banzai2&quot;).to(&quot;quickfixj:quickfix/mediator.cfg?sessionID=FIX.4.2:FIXGW-&amp;gt;BANZAI2&quot;);&lt;/p&gt;


&lt;p&gt;---mediator.cfg settings &amp;#8212;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;default&amp;#93;&lt;/span&gt;&lt;br/&gt;
UseJmx=Y&lt;br/&gt;
SocketAcceptProtocol=SOCKET&lt;br/&gt;
SocketConnectProtocol=SOCKET&lt;br/&gt;
PersistMessages=Y&lt;br/&gt;
StartTime=00:00:00&lt;br/&gt;
EndTime=00:00:00&lt;br/&gt;
HeartBtInt=30&lt;br/&gt;
ScreenLogEvents=N&lt;br/&gt;
ScreenLogShowIncoming=N&lt;br/&gt;
ScreenLogShowOutgoing=N&lt;br/&gt;
ValidateUserDefinedField=N&lt;br/&gt;
JdbcURL=jdbc:mysql://localhost:3306/quickfix&lt;br/&gt;
JdbcDriver=com.mysql.jdbc.Driver&lt;br/&gt;
JdbcUser=root&lt;br/&gt;
JdbcPassword=&lt;/p&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;session&amp;#93;&lt;/span&gt;&lt;br/&gt;
ConnectionType=initiator&lt;br/&gt;
BeginString=FIX.4.2&lt;br/&gt;
SenderCompID=FIXGW&lt;br/&gt;
TargetCompID=EXEC&lt;br/&gt;
SocketConnectHost=127.0.0.1&lt;br/&gt;
SocketConnectPort=1100&lt;/p&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;session&amp;#93;&lt;/span&gt;&lt;br/&gt;
ConnectionType=acceptor&lt;br/&gt;
BeginString=FIX.4.2&lt;br/&gt;
SenderCompID=FIXGW&lt;br/&gt;
TargetCompID=BANZAI2&lt;br/&gt;
SocketAcceptPort=7002&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;session&amp;#93;&lt;/span&gt;&lt;br/&gt;
ConnectionType=acceptor&lt;br/&gt;
BeginString=FIX.4.2&lt;br/&gt;
SenderCompID=FIXGW&lt;br/&gt;
TargetCompID=BANZAI&lt;br/&gt;
SocketAcceptPort=10000&lt;/p&gt;</comment>
                            <comment id="12956971" author="stevebate" created="Tue, 28 Sep 2010 11:29:53 +0000"  >&lt;p&gt;Bengt, the scenario you described is supported already. If your computer loses power or the application crashes then the FIX sequence numbers will not have been updated. On application restart, QuickFIX/J will detect the sequence number gap and request a message resend.&lt;/p&gt;

&lt;p&gt;The messages wouldn&apos;t have a retry count, but they will have the FIX-standard PossDup field to indicate that the message is a retransmission.&lt;/p&gt;

&lt;p&gt;I&apos;ve looked at Camel interceptors and I&apos;m not sure they apply here since this is internal FIX engine behavior. However, Camel interceptors could be used by application developers to do common tasks like routing drop copies of trade executions to a clearing system or some other server.&lt;/p&gt;</comment>
                            <comment id="12956990" author="hadrian" created="Tue, 28 Sep 2010 14:31:23 +0000"  >&lt;p&gt;Excellent. Many thanks to the community for testing the patch and to Steve to make the effort to rewrite the quickfix component.&lt;/p&gt;

&lt;p&gt;I am integrating the patch now and replace the old component. Look for the commit in a few hours.&lt;/p&gt;</comment>
                            <comment id="12956997" author="rodehav" created="Tue, 28 Sep 2010 16:58:30 +0000"  >&lt;p&gt;Steve, yes you&apos;re right the session level support in QuickFixJ takes care of the power outage problem - bad example from me. However, if I&apos;ve understood correctly, when the fromApp() method (in an ordinary QuickFixJ application) returns without exceptions, then QuickFixJ will regard that message as processed and it&apos;s not possible to &quot;re-recieve&quot; that message. For that reason, it must be possible for the programmer to control whether an exception should be propagated back to QuickFixJ or not.&lt;/p&gt;

&lt;p&gt;Let&apos;s forget about the power outage problem but focus on the potential case where QuickFixJ thinks that a message is processed correctly (fromApp() returns without exceptions) but the message is not yet &quot;secured&quot; (in a database or JMS queue for example). If this situation could arise then the message would be lost.&lt;/p&gt;

&lt;p&gt;In an earlier version of this component, the received FIX message was passed on to a load balancer (if I remember correctly). If, later on, an exception was thrown, it was set on the exchange but not rethrown. The effect was that QuickFixJ always regarded all messages as processed even if exceptions were thrown. This is not OK in my opinion.&lt;/p&gt;

&lt;p&gt;I believe this can still happen - right? I do agree that maybe not all exceptions should be propagated back to QuickFixJ but it must be possible for the developer to control this. The developer must decide whether an error is of a sort that can be fixed by trying again or not. E g if I get an OOME I would probably like to reconfigure my application (increase the heap size), restart it and then try to process that message again. My point is that these things must be under the control of the developer.&lt;/p&gt;

&lt;p&gt;As a side note, I agree with Hadrian, This is an excellent contribution and I&apos;m really looking forward to start using it. I&apos;m also thankful that we can benefit from Steve&apos;s competence in QuickFixJ and FIX. It&apos;s a real enabler for a component like this.&lt;/p&gt;</comment>
                            <comment id="12957008" author="stevebate" created="Tue, 28 Sep 2010 20:57:27 +0000"  >&lt;p&gt;Thanks for all the comments and special thanks to Hadrian for his help.&lt;/p&gt;

&lt;p&gt;Bengt, I&apos;ve been doing some experimenting and I believe the following approach may solve the problems you describe. If these solutions are acceptable, I&apos;ll submit the related modifications for inclusion in the new quickfix component code. The following code are snippets from a new example class that demonstrates logon message customization and logon authentication.&lt;/p&gt;

&lt;p&gt;For logon message customization, I created an example bean that puts a password into the FIX RawData field (a common approach for older versions of the FIX protocol).&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; class CredentialInjector {
        &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; password;
        
        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CredentialInjector(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; password) {
            &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.password = password;
        }

        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void inject(Exchange exchange) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; InvalidPayloadException {
            LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Injecting password into outgoing logon message&quot;&lt;/span&gt;);
            Message message = ExchangeHelper.getMandatoryInBody(exchange, Message.class);
            message.setString(RawData.FIELD, password);
            message.setInt(RawDataLength.FIELD, password.length());
        }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I then create a route to process outgoing logon messages. (For those not familiar with FIX engines, the logon message is generated automatically by the engine but we want to modify it before it is sent.)&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    from(&lt;span class=&quot;code-quote&quot;&gt;&quot;quickfixj:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER-&amp;gt;MARKET&quot;&lt;/span&gt;).
        filter(PredicateBuilder.and(
            header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AdminMessageSent),
            header(QuickfixjEndpoint.MESSAGE_TYPE_KEY).isEqualTo(MsgType.LOGON))).
        bean(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CredentialInjector(&lt;span class=&quot;code-quote&quot;&gt;&quot;PASSWORD&quot;&lt;/span&gt;));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The CredentialInjector is executing in the same thread as the toAdmin() callback so any modifications to the outgoing message will be in the sent message.&lt;/p&gt;

&lt;p&gt;For authentication, I created a trivial and unfriendly authenticator that rejects all logons.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; class LogonAuthenticator {
        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void authenticate(Exchange exchange) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; RejectLogon, InvalidPayloadException, FieldNotFound {
            LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Acceptor is rejecting logon &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &quot;&lt;/span&gt; + exchange.getIn().getHeader(QuickfixjEndpoint.SESSION_ID_KEY));
            Message message = ExchangeHelper.getMandatoryInBody(exchange, Message.class);
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (message.isSetField(RawData.FIELD)) {
                LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Rejected password: &quot;&lt;/span&gt; + message.getString(RawData.FIELD));
            }
            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RejectLogon(&lt;span class=&quot;code-quote&quot;&gt;&quot;Rejecting logon &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; test purposes&quot;&lt;/span&gt;);
        }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that it throws the RejectLogon exception which will eventually be propagated out of the fromAdmin() callback in the QFJ engine. The associated route is...&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    from(&lt;span class=&quot;code-quote&quot;&gt;&quot;quickfixj:examples/inprocess.cfg?sessionID=FIX.4.2:MARKET-&amp;gt;TRADER&quot;&lt;/span&gt;).
        filter(PredicateBuilder.and(
            header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AdminMessageReceived),
            header(QuickfixjEndpoint.MESSAGE_TYPE_KEY).isEqualTo(MsgType.LOGON))).
        bean(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; LogonAuthenticator());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The example seems to be working well for both cases. Note that both scenarios require the Camel processor to be executing in the same thread as the QFJ engine. It&apos;s ok to pass messages to other threads but be sure the message is persisted locally first since you will not be able to rely on transport-level resends via FIX.&lt;/p&gt;</comment>
                            <comment id="12957000" author="stevebate" created="Tue, 28 Sep 2010 20:59:12 +0000"  >&lt;p&gt;Sorry about the formatting... are there any installed JIRA plugins for displaying code?&lt;/p&gt;</comment>
                            <comment id="12957006" author="hadrian" created="Tue, 28 Sep 2010 21:44:26 +0000"  >&lt;p&gt;Patch committed with many thanks to Steve. Awaiting documentation. &lt;/p&gt;

&lt;p&gt;If you fix experts could give it a whirl now and see if there&apos;s anything to be added before the 2.5.0 release, please shout.&lt;/p&gt;</comment>
                            <comment id="12957005" author="stevebate" created="Tue, 28 Sep 2010 21:48:13 +0000"  >&lt;p&gt;Thanks Hadrian, for the commit and fixing the formatting in my comment. What is the process for submitting documentation?&lt;/p&gt;</comment>
                            <comment id="12956980" author="hadrian" created="Tue, 28 Sep 2010 22:43:39 +0000"  >&lt;p&gt;@Steve,&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://camel.apache.org/how-do-i-edit-the-website.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://camel.apache.org/how-do-i-edit-the-website.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(anticipating questions)&lt;br/&gt;
The main reason for the (unreasonable) restriction to have an icla on file for people who just want to help out to contribute is that everything governed by the ASF is distributed under the Apache license. So the foundation has to be able to track every contribution to its original author and determine that the contribution was original and made in good faith (no patents or other strings attached). The wiki is a bit of a grey area, and there are projects (still, I think) where you can edit pages once you get an account. In the camel case though since we distribute the &lt;span class=&quot;error&quot;&gt;&amp;#91;content|Book In One Page&amp;#93;&lt;/span&gt; of the wiki it must be governed by the rule above. That&apos;s also the reason for the &quot;Grant license to ASF&quot; checkbox when attaching patches, without which we cannot commit a patch contributed by a community user.&lt;/p&gt;

&lt;p&gt;That said there are 3 options:&lt;br/&gt;
1. Submit an icla to Apache (if you can, and you&apos;ll get the necessary karma) - simplest solution&lt;br/&gt;
2. Submit documentation as attachment to a jira issue, granting license for inclusion, like any patch&lt;br/&gt;
3. Add documentation as comments to the jira explicitly granting licence for inclusion into the wiki (almost same as 2.)&lt;/p&gt;

&lt;p&gt;If you intend to continue to maintain this component and eventually become a camel committer (which I personally hope and strongly encourage), you&apos;ll have to submit an icla at some point.&lt;/p&gt;

&lt;p&gt;Please let me know if you have any questions.&lt;br/&gt;
Hadrian&lt;/p&gt;</comment>
                            <comment id="12957009" author="rodehav" created="Wed, 29 Sep 2010 07:33:36 +0000"  >&lt;p&gt;Steve,&lt;/p&gt;

&lt;p&gt;I think the approach you suggest works really fine. Since you allow an arbitrary number of &quot;listeners&quot; it is possible to intercept all messages this way - login messages included. The login example is well suited to be included in the documentation.&lt;/p&gt;

&lt;p&gt;One thing that warrants an explanation is &quot;both scenarios require the Camel processor to be executing in the same thread as the QFJ engine&quot;. I think I know what you mean but I think it is really important that this is clear to all developers using this component.&lt;/p&gt;

&lt;p&gt;I assume, as long as we don&apos;t start additional threads, that a specific message will be sent through all routes that are configured to &quot;listen&quot; to that message (by specifying the same configuration file and a combination of filters that cause them to match the message). Is that true? If yes, do we need to make the ordering explicit? Do we need to be able to determine what route the message shall first be sent through? I&apos;m not sure what I think about this but I think that this is an area that will have to be documented in good way.&lt;/p&gt;

&lt;p&gt;You also state that: &quot;It&apos;s ok to pass messages to other threads but be sure the message is persisted locally first since you will not be able to rely on transport-level resends via FIX.&quot; Do you by this mean that the message is regarded as &quot;processed&quot; by QuickFixJ when it has passed through all routes, that reside in the same thread as the QFJ engine, that &quot;match&quot; the message? This is really important to know for a developer in order to prevent &quot;lost messages&quot;.&lt;/p&gt;

&lt;p&gt;Although very flexible, I&apos;m a bit concerned that the concept of having multiple routes listening to the same message can be a bit confusing and lead to programming errors (that can cause lost messages). I&apos;m all for flexibility but I think you should add an example to the documentation that uses more than one thread and clearly show how you persist the message in a route residing in the same thread as the QFJ engine. Maybe a best-practice could be developed for this pattern?&lt;/p&gt;

&lt;p&gt;I&apos;m not a Camel expert like many who have commented on this JIRA ticket. But, isn&apos;t it very unusual for a component to be &quot;natively&quot; multicast - meaning that the same message can be sent to multiple routes? That feature probably needs to be pointed out and explained clearly. Personally, I&apos;m for that solution but I haven&apos;t adapted my brain to that way of thinking yet.&lt;/p&gt;
</comment>
                            <comment id="12957012" author="stevebate" created="Wed, 29 Sep 2010 12:34:37 +0000"  >&lt;p&gt;I&apos;ve attached a patch file for the changes related to exception propagation and the new AuthenticationExample.&lt;/p&gt;

&lt;p&gt;@Hadrian&lt;br/&gt;
I submitted the ICLA via email last night.&lt;/p&gt;

&lt;p&gt;@Bengt&lt;br/&gt;
I&apos;ll try to explain the issues you raise when I work on the documentation. These are the same issues that must be considered when working directly with QuickFIX/J without Camel.&lt;/p&gt;



</comment>
                            <comment id="12956996" author="davsclaus" created="Wed, 29 Sep 2010 13:20:29 +0000"  >&lt;p&gt;I did polished the code a bit to ensure it comply with CS and cleaned up the pom.xml to set scope to test for deps which are only used for testing.&lt;/p&gt;

&lt;p&gt;trunk: 1002609&lt;/p&gt;</comment>
                            <comment id="12956985" author="hadrian" created="Wed, 29 Sep 2010 20:38:00 +0000"  >&lt;p&gt;@Steve&lt;br/&gt;
Your icla was received and is on file, I can give you the necessary karma, but... you don&apos;t seem to have an account in the &lt;a href=&quot;https://cwiki.apache.org/confluence/display/CAMEL/Index&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;wiki&lt;/a&gt;. Is that correct or am I not looking you up right?&lt;/p&gt;</comment>
                            <comment id="12957011" author="v_cheruvu@hotmail.com" created="Wed, 29 Sep 2010 22:41:14 +0000"  >&lt;p&gt;@Steve, I have across an error that could be related to TargetSubID. Please see my scenario below. &lt;/p&gt;

&lt;p&gt;I have a session  in my quickfix that accepts connection which has targetsubid. &lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;default&amp;#93;&lt;/span&gt;&lt;br/&gt;
UseJmx=Y&lt;br/&gt;
SocketAcceptProtocol=SOCKET&lt;br/&gt;
SocketConnectProtocol=SOCKET&lt;br/&gt;
PersistMessages=Y&lt;br/&gt;
StartTime=00:00:00&lt;br/&gt;
EndTime=00:00:00&lt;br/&gt;
HeartBtInt=30&lt;br/&gt;
ScreenLogEvents=N&lt;br/&gt;
ScreenLogShowIncoming=N&lt;br/&gt;
ScreenLogShowOutgoing=N&lt;br/&gt;
ValidateUserDefinedField=N&lt;br/&gt;
JdbcURL=jdbc:mysql://localhost:3306/quickfix&lt;br/&gt;
JdbcDriver=com.mysql.jdbc.Driver&lt;br/&gt;
JdbcUser=root&lt;br/&gt;
JdbcPassword=&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;session&amp;#93;&lt;/span&gt;&lt;br/&gt;
ConnectionType=acceptor&lt;br/&gt;
BeginString=FIX.4.2&lt;br/&gt;
SenderCompID=CAMEL&lt;br/&gt;
TargetSubID=CLIENT100&lt;br/&gt;
TargetCompID=Trader&lt;br/&gt;
SocketAcceptPort=7004&lt;br/&gt;
DataDictionary=META-INF/quickfix/dictionary/FIX-42-Trader.xml&lt;/p&gt;


&lt;p&gt;I have sent a mock FIX message from fix simulator to  test fix session (acceptor) which  gets forwarded to above FIX  session by Camel endpoint.   While routing FIX message from test fix session to above session, I have come across an error as shown below.  It works fine if i didn&apos;t have targetsubid in the above fix session setting. Any idea how I can get around this error when I have targetsubid in the config setting? It appears to me that Quickfixj endpoint  doesn&apos;t set targetsubid when sending messages to CAMEL-TRADER session.&lt;/p&gt;


&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;endpoint****&lt;br/&gt;
...&lt;br/&gt;
..&lt;br/&gt;
.to(&quot;quickfixj:META-INF/quickfix/mediator2.cfg?sessionID=FIX.4.2:CAMEL-&amp;gt;TRADER&quot;);&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;FYI, No client has connected to  CAMEL-TRADER session in this scenario but quickfixj will persist outgoing message and resend messages when client logon to the above session. I hope i gave you sufficient information about this error.&lt;/p&gt;


&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;ERROR **************************&lt;br/&gt;
2010-09-30 08:23:59,313 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;QFJ Message Processor&amp;#93;&lt;/span&gt; - Logger.log:197 Failed delivery for exchangeId: cd388c8a-e69b-434e-887b-90d3268e6407. On delivery attempt: 0 caught: java.lang.IllegalStateException: Unknown session: FIX.4.2:CAMEL-&amp;gt;TRADER&lt;br/&gt;
2010-09-30 08:23:59,313 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;QFJ Message Processor&amp;#93;&lt;/span&gt; - Logger.log:248 Failed delivery for exchangeId: cd388c8a-e69b-434e-887b-90d3268e6407. Exhausted after delivery attempt: 1 caught: java.lang.IllegalStateException: Unknown session: FIX.4.2:CAMEL-&amp;gt;TRADER&lt;br/&gt;
java.lang.IllegalStateException: Unknown session: FIX.4.2:CAMEL-&amp;gt;TRADER&lt;br/&gt;
	at org.apache.camel.component.quickfixj.QuickfixjProducer.process(QuickfixjProducer.java:49)&lt;br/&gt;
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)&lt;br/&gt;
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&lt;br/&gt;
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)&lt;br/&gt;
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)&lt;br/&gt;
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)&lt;br/&gt;
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&lt;br/&gt;
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&lt;br/&gt;
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&lt;br/&gt;
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)&lt;br/&gt;
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&lt;br/&gt;
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&lt;br/&gt;
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&lt;br/&gt;
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:290)&lt;br/&gt;
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:202)&lt;br/&gt;
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)&lt;br/&gt;
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&lt;br/&gt;
	at org.apache.camel.processor.FilterProcessor.process(FilterProcessor.java:56)&lt;br/&gt;
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&lt;br/&gt;
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&lt;br/&gt;
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&lt;br/&gt;
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)&lt;br/&gt;
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&lt;br/&gt;
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&lt;br/&gt;
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&lt;br/&gt;
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:290)&lt;br/&gt;
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:202)&lt;br/&gt;
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)&lt;br/&gt;
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&lt;br/&gt;
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:143)&lt;br/&gt;
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:78)&lt;br/&gt;
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:99)&lt;br/&gt;
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&lt;br/&gt;
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&lt;br/&gt;
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)&lt;br/&gt;
	at org.apache.camel.component.quickfixj.QuickfixjConsumer.onEvent(QuickfixjConsumer.java:38)&lt;br/&gt;
	at org.apache.camel.component.quickfixj.QuickfixjEndpoint.onEvent(QuickfixjEndpoint.java:79)&lt;br/&gt;
	at org.apache.camel.component.quickfixj.QuickfixjEngine$Dispatcher.dispatch(QuickfixjEngine.java:373)&lt;br/&gt;
	at org.apache.camel.component.quickfixj.QuickfixjEngine$Dispatcher.fromApp(QuickfixjEngine.java:343)&lt;br/&gt;
	at quickfix.Session.fromCallback(Session.java:1647)&lt;br/&gt;
	at quickfix.Session.verify(Session.java:1566)&lt;br/&gt;
	at quickfix.Session.verify(Session.java:1677)&lt;br/&gt;
	at quickfix.Session.next(Session.java:946)&lt;br/&gt;
	at quickfix.mina.SingleThreadedEventHandlingStrategy$SessionMessageEvent.processMessage(SingleThreadedEventHandlingStrategy.java:112)&lt;br/&gt;
	at quickfix.mina.SingleThreadedEventHandlingStrategy.block(SingleThreadedEventHandlingStrategy.java:75)&lt;br/&gt;
	at quickfix.mina.SingleThreadedEventHandlingStrategy$1.run(SingleThreadedEventHandlingStrategy.java:92)&lt;br/&gt;
	at java.lang.Thread.run(Thread.java:619)&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12957025" author="steve@stevebate.net" created="Thu, 30 Sep 2010 01:20:35 +0000"  >&lt;p&gt;Hi Vid,&lt;/p&gt;

&lt;p&gt;A couple of things... the Session IDs are case-sensitive. I noticed you used&lt;br/&gt;
&apos;Trader&apos; in the configuration and &apos;TRADER&apos; in the session ID string for the&lt;br/&gt;
TargetCompID. For the SenderSubID, you need to specify it in the session ID&lt;br/&gt;
(&quot;FIX.4.2:CAMEL:CLIENT100-&amp;gt;TRADER&quot;).&lt;/p&gt;

&lt;p&gt;Steve&lt;/p&gt;

</comment>
                            <comment id="12957018" author="steve@stevebate.net" created="Thu, 30 Sep 2010 01:22:34 +0000"  >&lt;p&gt;Hadrian, I thought I had to wait to sign up until the ICLA was accepted.&lt;br/&gt;
I&apos;ve signed up now using &apos;stevebate&apos; as the user ID. Thanks.&lt;/p&gt;

</comment>
                            <comment id="12957024" author="v_cheruvu@hotmail.com" created="Thu, 30 Sep 2010 02:11:22 +0000"  >&lt;p&gt;HI Steve,&lt;/p&gt;

&lt;p&gt;Thanks for quick response. Apologies , I did have TRADER in my settings. I have mistakenly wrote it as Trader here.  I have changed my endpoint as per your suggestion for sessionid  and still have the same error.&lt;/p&gt;

&lt;p&gt;.to(&quot;quickfixj:META-INF/quickfix/mediator2.cfg?sessionID=FIX.4.2:CAMEL:CLIENT100-&amp;gt;TRADER&quot;);&lt;/p&gt;

&lt;p&gt;2010-09-30 11:39:16,413 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;QFJ Message Processor&amp;#93;&lt;/span&gt; - Logger.log:197 Failed delivery for exchangeId: 64a79237-1057-4558-93fb-b94bb7238373. On delivery attempt: 0 caught: java.lang.IllegalStateException: Unknown session: FIX.4.2:CAMEL:CLIENT100-&amp;gt;TRADER&lt;br/&gt;
2010-09-30 11:39:16,413 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;QFJ Message Processor&amp;#93;&lt;/span&gt; - Logger.log:248 Failed delivery for exchangeId: 64a79237-1057-4558-93fb-b94bb7238373. Exhausted after delivery attempt: 1 caught: java.lang.IllegalStateException: Unknown session: FIX.4.2:CAMEL:CLIENT100-&amp;gt;TRADER&lt;br/&gt;
java.lang.IllegalStateException: Unknown session: FIX.4.2:CAMEL:CLIENT100-&amp;gt;TRADER&lt;br/&gt;
	at org.apache.camel.component.quickfixj.QuickfixjProducer.process(QuickfixjProducer.java:49)&lt;br/&gt;
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)&lt;br/&gt;
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&lt;br/&gt;
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)&lt;br/&gt;
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)&lt;br/&gt;
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)&lt;br/&gt;
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&lt;br/&gt;
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&lt;br/&gt;
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&lt;/p&gt;


&lt;p&gt;Kind regards,&lt;br/&gt;
&lt;del&gt;Vid&lt;/del&gt;&lt;/p&gt;</comment>
                            <comment id="12956981" author="steve@stevebate.net" created="Thu, 30 Sep 2010 09:23:31 +0000"  >&lt;p&gt;Sorry. I gave you the wrong syntax for the session ID. It should be&lt;br/&gt;
FIX.4.2:CAMEL/CLIENT100-&amp;gt;TRADER.&lt;/p&gt;

</comment>
                            <comment id="12957017" author="davsclaus" created="Thu, 30 Sep 2010 09:49:23 +0000"  >&lt;p&gt;Thanks Steve for the 2.1 patch.&lt;/p&gt;

&lt;p&gt;I have applied it to trunk: 1002979.&lt;/p&gt;</comment>
                            <comment id="12956974" author="hadrian" created="Thu, 30 Sep 2010 13:08:53 +0000"  >&lt;p&gt;@Steve, you should be all set. If you have any trouble editing the &lt;a href=&quot;https://cwiki.apache.org/confluence/display/CAMEL/Quickfix&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;quickfix&lt;/a&gt; page (or any other) please let me know.&lt;/p&gt;</comment>
                            <comment id="12957052" author="beat@glattfelder.info" created="Thu, 30 Sep 2010 22:32:43 +0000"  >&lt;p&gt;Hadrian asked me to comment on this case, and I will be very glad to do so. I have noticed that there is some need some time ago, &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/activemq/browse/CAMEL-2536&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/activemq/browse/CAMEL-2536&lt;/a&gt;. I am now releasing that code into our productive envoronment, and there are some issues I am currently working on:&lt;/p&gt;

&lt;p&gt;-get environment specifics out of endpoint url&apos;s: it&apos;s pretty error prone to change code moving from test to production if the routes are defined in DSL&lt;/p&gt;

&lt;p&gt;-enable rejection / termination semantics: processors should signal whether they don&apos;t want to see a message again because it&apos;s invalid or terminate the exchange because they are not able to proceed at the time beeing&lt;/p&gt;
</comment>
                            <comment id="12957070" author="davsclaus" created="Sun, 10 Oct 2010 06:32:30 +0000"  >&lt;p&gt;Is everything in place for the 2.5 release?&lt;/p&gt;</comment>
                            <comment id="12956680" author="davsclaus" created="Tue, 12 Oct 2010 17:55:00 +0000"  >&lt;p&gt;Beat please open new ticket with any new quickfix enhacements you may have.&lt;/p&gt;

&lt;p&gt;We want to close this ticket so we have a record for the change in the camel 2.5 changelog&lt;/p&gt;</comment>
                            <comment id="13023945" author="davsclaus" created="Sun, 24 Apr 2011 09:57:48 +0000"  >&lt;p&gt;Closing all resolved tickets from 2010 or older&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12487795">CAMEL-2536</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12462954" name="QuickFixDataFormat.java" size="2077" author="cmoulliard" created="Mon, 11 May 2009 11:12:36 +0000"/>
                            <attachment id="12463405" name="camel-quickfix-2-1.patch" size="18641" author="stevebate" created="Wed, 29 Sep 2010 12:34:37 +0000"/>
                            <attachment id="12463401" name="camel-quickfix-2.zip" size="60885" author="stevebate" created="Mon, 27 Sep 2010 12:29:38 +0000"/>
                            <attachment id="12462955" name="camel-quickfix.patch" size="3950" author="cmoulliard" created="Mon, 11 May 2009 11:12:36 +0000"/>
                            <attachment id="12462947" name="camel-quickfix.zip" size="93456" author="cmoulliard" created="Wed, 6 May 2009 15:50:25 +0000"/>
                            <attachment id="12462934" name="camel-quickfix.zip" size="25969" author="arhan" created="Tue, 21 Apr 2009 20:01:29 +0000"/>
                            <attachment id="12462948" name="reportincident.quickfix.zip" size="13595" author="cmoulliard" created="Wed, 6 May 2009 15:50:25 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 17 Feb 2009 17:12:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>103693</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 32 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01hvj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6665</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>