<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 03:33:05 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CAMEL-1633/CAMEL-1633.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CAMEL-1633] XMPPConsumer.processPacket does not correctly handle received non-message packets.</title>
                <link>https://issues.apache.org/jira/browse/CAMEL-1633</link>
                <project id="12311211" key="CAMEL">Camel</project>
                    <description>&lt;p&gt;I am currently porting an application using an in house Smack integration to Apache Camel.&lt;/p&gt;

&lt;p&gt;Specifically, I am getting failures with multiuser chat where messages stop being received in the middle of the message stream I am sending.&lt;br/&gt;
I have yet to verify the issue exists with private chat as well, but the XMPPConsumer source looks like there will be a similar issue.&lt;/p&gt;

&lt;p&gt;The XMPPConsumer class registers itself for all packet types in the doStart method, but in the processPacket method immediately casts the received Packet to Message.&lt;/p&gt;

&lt;p&gt;I have found with the in house integration that Smack sends several types of Packets, and I could not find assurance that it would not call the packet listener with a null message.&lt;/p&gt;

&lt;p&gt;A simple if((null != packet) &amp;amp;&amp;amp; (packet instanceof Message))  should be used to prevent improper packets from being utilized.&lt;/p&gt;

&lt;p&gt;FYI: the above if statement should also prevent packets from building up in the Smack message queue, since all messages will be processed without throwing an exception.&lt;br/&gt;
So a call to muc.nextMessage() is unnecessary, and actually detrimental (since if the next packet is a message, it will be dropped without processing).&lt;br/&gt;
It may be wise to actually use a try/catch block to prevent exceptions from being thrown by the processPacket method, since messages that throw exceptions seem to stay in the Smack message queue.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12486514">CAMEL-1633</key>
            <summary>XMPPConsumer.processPacket does not correctly handle received non-message packets.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="davsclaus">Claus Ibsen</assignee>
                                    <reporter username="edward.campbell">Edward Campbell</reporter>
                        <labels>
                    </labels>
                <created>Wed, 20 May 2009 14:24:36 +0000</created>
                <updated>Sat, 21 Nov 2009 11:58:01 +0000</updated>
                            <resolved>Thu, 11 Jun 2009 05:53:54 +0000</resolved>
                                    <version>1.6.1</version>
                                    <fixVersion>1.6.2</fixVersion>
                    <fixVersion>2.0-M2</fixVersion>
                                    <component>camel-xmpp</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12952212" author="davsclaus" created="Sat, 23 May 2009 10:32:01 +0000"  >&lt;p&gt;Edward feel free to try working on a patch to fix this.&lt;/p&gt;</comment>
                            <comment id="12952302" author="edward.campbell" created="Tue, 26 May 2009 20:30:27 +0000"  >&lt;p&gt;That should fix it.&lt;/p&gt;</comment>
                            <comment id="12952335" author="davsclaus" created="Wed, 27 May 2009 11:56:06 +0000"  >&lt;p&gt;trunk: 779121.&lt;br/&gt;
1.x: 779124.&lt;/p&gt;

&lt;p&gt;Applied patch with thanks to Edward Campbell.&lt;/p&gt;</comment>
                            <comment id="12952551" author="edward.campbell" created="Tue, 9 Jun 2009 21:17:54 +0000"  >&lt;p&gt;Only half the patch was applied.&lt;br/&gt;
Please apply the changes to the processPacket and processMessage methods from the file I previously attached to fix the problem.&lt;/p&gt;</comment>
                            <comment id="12952341" author="davsclaus" created="Wed, 10 Jun 2009 04:58:40 +0000"  >&lt;p&gt;Hi Edward&lt;/p&gt;

&lt;p&gt;Thanks for spotting it.&lt;/p&gt;

&lt;p&gt;trunk: 783204.&lt;br/&gt;
1.x: 783205.&lt;/p&gt;</comment>
                            <comment id="12952561" author="edward.campbell" created="Wed, 10 Jun 2009 19:05:46 +0000"  >&lt;p&gt;My fault.&lt;br/&gt;
After going through a bunch of testing, I found some issues with the fix I originally posted.&lt;br/&gt;
Specifically the doStart() method of XmppConsumer.java should be as follows:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; void doStart() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
        connection = endpoint.createConnection();

        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (endpoint.getRoom() == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
            Chat privateChat = connection.getChatManager().createChat(endpoint.getParticipant(), &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;);
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LOG.isInfoEnabled()) {
                LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Open &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; chat to: &quot;&lt;/span&gt; + privateChat.getParticipant());
            }
        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;code-comment&quot;&gt;// add the presence packet listener to the connection so we only get packets that concerns us
&lt;/span&gt;            &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; ToContainsFilter toFilter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ToContainsFilter(endpoint.getParticipant());
            &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; AndFilter packetFilter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; AndFilter(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; PacketTypeFilter(Presence.class), toFilter);
            connection.addPacketListener(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;, packetFilter);

            muc = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MultiUserChat(connection, endpoint.resolveRoom(connection));
            muc.addMessageListener(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;);
            DiscussionHistory history = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DiscussionHistory();
            history.setMaxChars(0); &lt;span class=&quot;code-comment&quot;&gt;// we &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; not want any historical messages
&lt;/span&gt;
            muc.join(endpoint.getNickname(), &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, history, SmackConfiguration.getPacketReplyTimeout());
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LOG.isInfoEnabled()) {
                LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Joined room: &quot;&lt;/span&gt; + muc.getRoom() + &lt;span class=&quot;code-quote&quot;&gt;&quot; as: &quot;&lt;/span&gt; + endpoint.getNickname());
            }
        }

        &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;.doStart();
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For some reason the order of adding listeners is important with smack. I haven&apos;t yet downloaded the smack source to find out why.&lt;/p&gt;</comment>
                            <comment id="12952570" author="davsclaus" created="Thu, 11 Jun 2009 05:53:54 +0000"  >&lt;p&gt;Thanks Edward for reporting and providing the solution.&lt;br/&gt;
I have changed the order so the listener is created first.&lt;/p&gt;

&lt;p&gt;trunk: 783639.&lt;br/&gt;
1.x: 783640.&lt;/p&gt;</comment>
                            <comment id="12952601" author="edward.campbell" created="Thu, 11 Jun 2009 17:33:51 +0000"  >&lt;p&gt;Found out why the order mattered in this case...&lt;br/&gt;
According to the smack documentation if you register the same listener multiple times, only the most recent filter is used.&lt;br/&gt;
Since the XmppConsumer is being used for all listeners in this case only the last add&amp;lt;Message|Packet&amp;gt;Listener call is honored.&lt;br/&gt;
It would be wiser to have the listeners as separate classes, then the handling of each packet/message type can be addressed separately.&lt;br/&gt;
A ConnectionListener can be added as well to handle connections that go down and can be retried later.&lt;br/&gt;
I&apos;m going to put an improvement request in for this...&lt;/p&gt;</comment>
                            <comment id="12953711" author="davsclaus" created="Sat, 21 Nov 2009 11:58:01 +0000"  >&lt;p&gt;Closing all 2.0M2 tickets&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12462964" name="XmppConsumer.java" size="5600" author="edward.campbell" created="Tue, 26 May 2009 20:30:27 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 23 May 2009 10:32:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>76788</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 2 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01jm7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6947</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>