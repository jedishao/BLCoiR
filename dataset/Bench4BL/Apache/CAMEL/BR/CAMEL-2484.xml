<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 01:38:53 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CAMEL-2484/CAMEL-2484.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CAMEL-2484] camel-mina - Using close session could potentially cause memory to be not released</title>
                <link>https://issues.apache.org/jira/browse/CAMEL-2484</link>
                <project id="12311211" key="CAMEL">Camel</project>
                    <description>&lt;p&gt;See nabble&lt;br/&gt;
&lt;a href=&quot;http://old.nabble.com/SocketSessionImpl-in-Mina-component-retained-in-memory-indefinitely-ts27624487.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://old.nabble.com/SocketSessionImpl-in-Mina-component-retained-in-memory-indefinitely-ts27624487.html&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12486727">CAMEL-2484</key>
            <summary>camel-mina - Using close session could potentially cause memory to be not released</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="slewis">Stan Lewis</assignee>
                                    <reporter username="davsclaus">Claus Ibsen</reporter>
                        <labels>
                    </labels>
                <created>Thu, 18 Feb 2010 09:21:41 +0000</created>
                <updated>Sun, 24 Apr 2011 10:01:33 +0000</updated>
                            <resolved>Tue, 23 Feb 2010 10:17:22 +0000</resolved>
                                    <version>2.1.0</version>
                    <version>2.2.0</version>
                                    <fixVersion>2.3.0</fixVersion>
                                    <component>camel-mina</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12954978" author="johanhaleby" created="Thu, 18 Feb 2010 09:33:21 +0000"  >&lt;p&gt;Small example that demonstrates the out of memory issue. You should lower the heap to see the result faster.&lt;/p&gt;</comment>
                            <comment id="12954919" author="slewis" created="Thu, 18 Feb 2010 13:18:11 +0000"  >&lt;p&gt;Hey Johan, you mentioned in the thread you&apos;ve got a heapdump that you can attach, would you mind attaching it?  I wouldn&apos;t mind starting with that here to track this down.&lt;/p&gt;</comment>
                            <comment id="12954987" author="johanhaleby" created="Thu, 18 Feb 2010 13:32:23 +0000"  >&lt;p&gt;Done.&lt;/p&gt;</comment>
                            <comment id="12954965" author="slewis" created="Thu, 18 Feb 2010 20:15:43 +0000"  >&lt;p&gt;So the problem is thanks to the RecipientList.  It obtains a producer from the ProducerCache directly, in this case the ProducerCache doesn&apos;t actually cache the producer, it just creates a new producer and adds it to DefaultCamelContext.servicesToClose, which winds up holding thousands of MinaProducer objects.  It looks like really the RecipientList is better off just calling Endpoint.createProducer() and avoiding the producer cache altogether, &lt;b&gt;or&lt;/b&gt; the RecipientList could ensure that each producer is removed from the CamelContext (am testing this now just to be sure it fixes the OOM) &lt;b&gt;or&lt;/b&gt; the RecipientList could use a bit of a re-factoring so that it uses the ProducerCache properly.&lt;/p&gt;</comment>
                            <comment id="12954947" author="davsclaus" created="Fri, 19 Feb 2010 08:46:01 +0000"  >&lt;p&gt;Well spotted. Yeah we should ensure the cache is properly used. Some producers are expensive to create such as FTP, JMS etc. And very often the recipient list is sending to the same endpoints over and over again, and thus the cache idea is good.&lt;/p&gt;

&lt;p&gt;BTW the routing slip could very well have the same issue.&lt;/p&gt;</comment>
                            <comment id="12954943" author="slewis" created="Fri, 19 Feb 2010 13:34:31 +0000"  >&lt;p&gt;@Claus, thanks!  I&apos;ll look into getting the RecipientList working properly with the cache, did a long-running test last night with Johan&apos;s test case just to verify that&apos;s the issue, and I didn&apos;t get any OOMs, but creating/destroying the producers with each exchange is definitely expensive and can cause other problems.&lt;/p&gt;

&lt;p&gt;@Johan, in case you need something running right away you should be able to avoid this problem for now by replacing the RecipientList with a simple processor that looks at the header and uses a producer template to send on the message, the producer template uses the cache properly.  I&apos;ll of course update the ticket when I get this fixed...&lt;/p&gt;</comment>
                            <comment id="12954962" author="davsclaus" created="Fri, 19 Feb 2010 14:08:23 +0000"  >&lt;p&gt;I wonder if the servicesToClose should be a LRUCache which we then can stop the service then an item is evicted. That will prevent similar issues in the future.&lt;/p&gt;

&lt;p&gt;Maybe I should go check the source code of DefaultCamelContext &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12954981" author="slewis" created="Fri, 19 Feb 2010 14:13:27 +0000"  >&lt;p&gt;I was thinking that yesterday and had even added a &quot;removeService()&quot; method to CamelContext and implemented it so that when you remove a service it&apos;s then stopped etc.  Guess you could have a thread that keeps an eye on this list and let it periodically garbage collect LRU services.  It&apos;d be another thing to tune though, in a case like this you could hit an OOM before the list is checked for old services.&lt;/p&gt;</comment>
                            <comment id="12954990" author="davsclaus" created="Fri, 19 Feb 2010 14:30:14 +0000"  >&lt;p&gt;We got a LRUCache that is map based. I recon we can create some bounded List and have a callback when its full so it can auto remove the oldest which it then will close the service.&lt;/p&gt;

&lt;p&gt;Then there is no need for a background thread.&lt;/p&gt;
</comment>
                            <comment id="12954989" author="slewis" created="Fri, 19 Feb 2010 14:37:10 +0000"  >&lt;p&gt;That sounds like an excellent fit, I can look into that as part of tidying up the RecipientList...&lt;/p&gt;</comment>
                            <comment id="12954970" author="davsclaus" created="Fri, 19 Feb 2010 17:49:14 +0000"  >&lt;p&gt;Stan I just realized that &lt;tt&gt;servicesToClose&lt;/tt&gt; contains some mandatory services which &lt;b&gt;must&lt;/b&gt; be running and only stopped when CamelContext stops. Its things like the registry, type converter, inflight registry and whatnot.&lt;/p&gt;

&lt;p&gt;So we should look to put those into a &lt;b&gt;mandatory&lt;/b&gt; List and the others in a &lt;b&gt;limited&lt;/b&gt; list for reusing purpose.&lt;/p&gt;</comment>
                            <comment id="12955009" author="davsclaus" created="Sat, 20 Feb 2010 07:18:10 +0000"  >&lt;p&gt;Had a look this morning. I can now see how the recipient list &lt;b&gt;doesnt&lt;/b&gt; used pooled producers and thus it recreates a new producer every time.&lt;/p&gt;

&lt;p&gt;And at the same time the old producer is added as a service which allows Camel to manage it, but that should not happen as the producer if not pooled is a short lived service.&lt;/p&gt;</comment>
                            <comment id="12955010" author="davsclaus" created="Sat, 20 Feb 2010 07:45:09 +0000"  >&lt;p&gt;Ah the MinaProducer is non singleton and &lt;tt&gt;ServicePoolAware&lt;/tt&gt; which the &lt;tt&gt;receipientList&lt;/tt&gt; does not take into account. &lt;/p&gt;

&lt;p&gt;It should be able to acquire and release the producers it uses. I will add such a feature. Then that will speedup using mina as it can pool and reuse the MinaProducers.&lt;/p&gt;</comment>
                            <comment id="12955017" author="davsclaus" created="Sat, 20 Feb 2010 07:46:23 +0000"  >&lt;p&gt;And by &lt;b&gt;not&lt;/b&gt; adding it as a &lt;tt&gt;service&lt;/tt&gt; in the &lt;tt&gt;servicesToClose&lt;/tt&gt; we avoid Camel holding on the producers forever &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
That just means we loose a little JMX capabilities as you cant manage those created producers then&lt;/p&gt;</comment>
                            <comment id="12955016" author="davsclaus" created="Sat, 20 Feb 2010 07:48:30 +0000"  >&lt;p&gt;This bug is only a problem when using&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;recipinentList&lt;/li&gt;
	&lt;li&gt;non singleton producers which there are only a few ones such as: FTP and MINA&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The other components should be safe to use with recipientList&lt;/p&gt;</comment>
                            <comment id="12954994" author="slewis" created="Sat, 20 Feb 2010 11:37:39 +0000"  >&lt;p&gt;Hey Claus, makes sense to me.  I&apos;ve been toying with a tentative set of &quot;borrowProducer&quot;/&quot;returnProducer&quot; methods here on the producerCache so that the recipient list gets it from the pool but for some reason the test case appears to lock up.  Haven&apos;t had a chance to see why that is, I&apos;d be interested if you get the same results.&lt;/p&gt;

&lt;p&gt;Also I think the test case may expose a couple other leaks, though this was from earlier testing where I just ensured servicesToClose wasn&apos;t getting filled with MinaProducers.  If you come up with a fix though before I get a chance to work on this further I&apos;d be happy to give the test case a long run just to see if any other issues crop up.&lt;/p&gt;</comment>
                            <comment id="12955015" author="davsclaus" created="Sat, 20 Feb 2010 11:59:14 +0000"  >&lt;p&gt;Stan maybe I had better luck than you with the acquire / release thingy.&lt;/p&gt;

&lt;p&gt;I have just committed a patch.&lt;/p&gt;

&lt;p&gt;ProducerCache will no longer add created producers for management (with does not make too much sense as JMX can then grow too much).&lt;br/&gt;
Also I fixed an issue with stopping cached resources if they where cached using a LRUCache.&lt;br/&gt;
Now Camel should properly stop cached producers when being stopped.&lt;/p&gt;

&lt;p&gt;Please give it a test on your system as well. For example the long running example.&lt;/p&gt;

&lt;p&gt;trunk: 912103 + 912105&lt;/p&gt;</comment>
                            <comment id="12955014" author="slewis" created="Sun, 21 Feb 2010 01:50:03 +0000"  >&lt;p&gt;figured you&apos;d beat me to it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.  I&apos;ll give it a good long test on Monday and have a look at what you changed...&lt;/p&gt;</comment>
                            <comment id="12955018" author="slewis" created="Mon, 22 Feb 2010 13:43:30 +0000"  >&lt;p&gt;@Claus, ah, okay your fix also changes the behavior of the test also, but I like your fix better anyway.  I&apos;ve modified the test case so that new messages are pumped into the route every second so it keeps running, will let this run for awhile and see if anything happens.&lt;/p&gt;</comment>
                            <comment id="12955027" author="slewis" created="Mon, 22 Feb 2010 14:18:12 +0000"  >&lt;p&gt;Seems to be a leak in either maven or log4j that this test exposes, if I set the root logger to DEBUG it gets an OOM pretty quickly, have changed the log4j.properties to log to a file instead, that seems to have taken care of that problem, now just waiting to see if there&apos;s any other issues.&lt;/p&gt;</comment>
                            <comment id="12954998" author="slewis" created="Mon, 22 Feb 2010 18:02:22 +0000"  >&lt;p&gt;Let a test run all morning here with the above changes and Claus&apos;s fix, no OOMs and memory usage remained in a stable pattern, so this should be all set.&lt;/p&gt;</comment>
                            <comment id="12955036" author="davsclaus" created="Tue, 23 Feb 2010 10:17:22 +0000"  >&lt;p&gt;Stan that is great.&lt;/p&gt;

&lt;p&gt;Yeah it was a bad move by Claus to enlist Producer&apos;s for management &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. Wonder how we slipped this for 2 releases?&lt;/p&gt;

&lt;p&gt;I actually think we should just enlist producers only if CamelContext is in state of starting. Then we get the starting Producers enlisted which are the ones in your routes (eg in the to(xxx)).&lt;/p&gt;</comment>
                            <comment id="13024534" author="davsclaus" created="Sun, 24 Apr 2011 10:01:33 +0000"  >&lt;p&gt;Closing all resolved tickets from 2010 or older&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12463144" name="camel-mina-outofmemory-example.zip" size="9917" author="johanhaleby" created="Thu, 18 Feb 2010 09:33:19 +0000"/>
                            <attachment id="12463145" name="java_pid26327.hprof.tar.gz" size="10429609" author="johanhaleby" created="Thu, 18 Feb 2010 13:29:14 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 18 Feb 2010 09:33:21 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>76509</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 32 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01ov3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7797</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>