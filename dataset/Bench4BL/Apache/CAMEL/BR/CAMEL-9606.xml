<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 02:44:23 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CAMEL-9606/CAMEL-9606.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CAMEL-9606] SJMS Consumer-Producer in transaciton</title>
                <link>https://issues.apache.org/jira/browse/CAMEL-9606</link>
                <project id="12311211" key="CAMEL">Camel</project>
                    <description>&lt;p&gt;I&apos;m not 100% sure this is a bug but it feels that way from conversation I had via mailing lists.&lt;/p&gt;

&lt;p&gt;I&apos;m trying to ensure transactional processing between SJMS consumer and producer (e.g. using same JMS session). &lt;/p&gt;

&lt;p&gt;In other words this simple case:&lt;br/&gt;
1. prepare higher amount of JMS messages in broker (e.g. ActiveMQ with 1000 messages) &lt;br/&gt;
2. use Camel route from input queue to output queue using trasacted=true &lt;br/&gt;
3. start context (starts consuming messages) and in any time kill java process &lt;/p&gt;

&lt;p&gt;When I kill process, I would expect that sum of messages in input and output queue will be 1000 - so the transaction works. But what happens is that I always end up with 1001+ messages. Maybe it is misconfiguration of routes or misunderstanding how SJMS can work.&lt;/p&gt;

&lt;p&gt;I feel this is critical because JMS is generally used because it its transactional capabilities.&lt;/p&gt;

&lt;p&gt;Here is the sample code I used for reproduction (using ActiveMQ):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class SjmsTransaction {

    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] args) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
        RouteBuilder rb = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RouteBuilder() {
            @Override
            &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void configure() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
                onException(Exception.class)
                        .process(systemOut(&lt;span class=&quot;code-quote&quot;&gt;&quot;Exception!!&quot;&lt;/span&gt;));

                from(&lt;span class=&quot;code-quote&quot;&gt;&quot;sjms:queue:test-in?transacted=&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&amp;amp;consumerCount=5&quot;&lt;/span&gt;)
                        .process(systemOut(&lt;span class=&quot;code-quote&quot;&gt;&quot;Processing&quot;&lt;/span&gt;))
                        .to(&lt;span class=&quot;code-quote&quot;&gt;&quot;sjms:queue:test-out?transacted=&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;)
                        .process(systemOut(&lt;span class=&quot;code-quote&quot;&gt;&quot;Processed&quot;&lt;/span&gt;));
            }
        };

        CamelContext context = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DefaultCamelContext();
        addJmsComponent(context);
        context.addRoutes(rb);

        &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;=====&amp;gt; Starting context&quot;&lt;/span&gt;);
        context.start();
        &lt;span class=&quot;code-comment&quot;&gt;// Now the context will run and consume messages, when I kill application by force in any time
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// I expect &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; to be &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;: &amp;lt;#messagesInInputAtBeginning&amp;gt; == &amp;lt;#messagesInInputNow&amp;gt; + &amp;lt;#messagesInOutputNow&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// What happens is that there is always &amp;lt; (e.g. I submitted 1000 messages, out has 500, in has 501)
&lt;/span&gt;    }

    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void addJmsComponent(CamelContext context) {
        ConnectionFactory factory = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ActiveMQConnectionFactory(&lt;span class=&quot;code-quote&quot;&gt;&quot;tcp:&lt;span class=&quot;code-comment&quot;&gt;//localhost:61616&quot;&lt;/span&gt;);
&lt;/span&gt;        ConnectionFactoryResource connResource = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ConnectionFactoryResource(5, factory);
        SjmsComponent comp = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SjmsComponent();
        comp.setConnectionResource(connResource);
        context.addComponent(&lt;span class=&quot;code-quote&quot;&gt;&quot;sjms&quot;&lt;/span&gt;, comp);
    }

    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; Processor systemOut(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; message) {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Processor() {
            @Override
            &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void process(Exchange exchange) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
                &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(exchange.getExchangeId() + &lt;span class=&quot;code-quote&quot;&gt;&quot;: &quot;&lt;/span&gt; + message);
            }
        };
    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that I tried to use it with various combinations of acknowledgeMode and In/InOut exchange pattern - but without luck.&lt;br/&gt;
I&apos;m not that much oriented in Camel source code but I found that JMS session is held within the exchange so probably when producer finds in an exchange existing JMS session and is configured to be transacted, then maybe it can participate this session? Or maybe there are other hooks (like Synchronization objects) in some registry that take care of this issue?&lt;/p&gt;

&lt;p&gt;Here is the link to the previous mailing list conversation: &lt;a href=&quot;http://camel.465427.n5.nabble.com/SJMS-transaction-td5777522.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://camel.465427.n5.nabble.com/SJMS-transaction-td5777522.html&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12939480">CAMEL-9606</key>
            <summary>SJMS Consumer-Producer in transaciton</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ancosen">Andrea Cosentino</assignee>
                                    <reporter username="d1x">Zden&#283;k Obst</reporter>
                        <labels>
                    </labels>
                <created>Tue, 16 Feb 2016 12:04:36 +0000</created>
                <updated>Wed, 19 Oct 2016 07:56:27 +0000</updated>
                            <resolved>Wed, 19 Oct 2016 07:56:27 +0000</resolved>
                                    <version>2.15.4</version>
                    <version>2.16.2</version>
                                    <fixVersion>2.19.0</fixVersion>
                                    <component>camel-sjms</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="15190583" author="d1x" created="Fri, 11 Mar 2016 07:41:16 +0000"  >&lt;p&gt;Can anyone please come with any statement please?&lt;br/&gt;
Whether it is a bug and if any fix can be expected (sooner or later)?&lt;/p&gt;</comment>
                            <comment id="15574220" author="igarashitm" created="Fri, 14 Oct 2016 05:14:15 +0000"  >&lt;p&gt;I created an automated unit test and verified it actually is a problem.&lt;br/&gt;
&lt;a href=&quot;https://github.com/igarashitm/issues/blob/master/camel/misc/src/test/java/CamelSjmsTxTest.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/igarashitm/issues/blob/master/camel/misc/src/test/java/CamelSjmsTxTest.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The camel sjms does make Synchronization effort, but it&apos;s not really safe. Sometimes only the producer bit of the SessionTransactionSynchronization.onComplete() is invoked before terminating a process, then eventually the consumer side is rolled back (i.e. put back to queue-in) and the message duplicates. Note that message &apos;0017&apos; is in both of &apos;test-in&apos; and &apos;test-out&apos;.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[       ActiveMQ Session Task-1] sionTransactionSynchronization DEBUG Processing completion of Exchange id:ID-localhost-localdomain-44085-1476420609350-0-17
[       ActiveMQ Session Task-1] sionTransactionSynchronization DEBUG Processing completion of Exchange id:ID-localhost-localdomain-44085-1476420609350-0-17
[       ActiveMQ Session Task-1] route1                         INFO  =====&amp;gt; Forwarding a message:[0017] from &apos;test-in&apos; queue to &apos;test-out&apos; queue...
[       ActiveMQ Session Task-1] route1                         INFO  =====&amp;gt; Done.
[       ActiveMQ Session Task-1] sionTransactionSynchronization DEBUG Processing completion of Exchange id:ID-localhost-localdomain-44085-1476420609350-0-18
[                          main] CamelSjmsTxTest                INFO  =====&amp;gt; Detroying camel process
....
[                          main] CamelSjmsTxTest                INFO  ======================================================
[                          main] CamelSjmsTxTest                INFO  Initial, count=60
[                          main] CamelSjmsTxTest                INFO  &apos;test-in&apos;, count=43	:[0018, 0020, 0022, 0024, 0026, 0028, 0030, 0032, 0034, 0036, 0038, 0040, 0042, 0044, 0046, 0048, 0050, 0052, 0054, 0056, 0058, 0017, 0019, 0021, 0023, 0025, 0027, 0029, 0031, 0033, 0035, 0037, 0039, 0041, 0043, 0045, 0047, 0049, 0051, 0053, 0055, 0057, 0059]
[                          main] CamelSjmsTxTest                INFO  &apos;test-out&apos;, count=18	:[0000, 0001, 0002, 0003, 0004, 0005, 0006, 0007, 0008, 0009, 0010, 0011, 0012, 0013, 0014, 0015, 0016, 0017]
[                          main] CamelSjmsTxTest                INFO  ======================================================
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The solution would be to let SJMS consumers/producers share a single JMS session in a Exchange, so that we can just rely on broker implementation to guarantee transaction atomicity.&lt;/p&gt;</comment>
                            <comment id="15574264" author="igarashitm" created="Fri, 14 Oct 2016 05:32:22 +0000"  >&lt;p&gt;camel-jms (spring JMS template actually) is handling well for this scenario though.&lt;/p&gt;</comment>
                            <comment id="15585549" author="githubbot" created="Tue, 18 Oct 2016 14:13:19 +0000"  >&lt;p&gt;GitHub user igarashitm opened a pull request:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/camel/pull/1214&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/camel/pull/1214&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-9606&quot; title=&quot;SJMS Consumer-Producer in transaciton&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-9606&quot;&gt;&lt;del&gt;CAMEL-9606&lt;/del&gt;&lt;/a&gt; Share JMS session among SJMS endpoints to ensure transacti&#8230;&lt;/p&gt;

&lt;p&gt;    &#8230;on atomicity&lt;/p&gt;

&lt;p&gt;    A testcase, which terminate a camel process during processing transacted sjms consumer/producer. Sometimes test-in + test-out &amp;gt; initial without the fix.&lt;br/&gt;
    &lt;a href=&quot;https://github.com/igarashitm/issues/blob/master/camel/misc/src/test/java/CamelSjmsTxTest.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/igarashitm/issues/blob/master/camel/misc/src/test/java/CamelSjmsTxTest.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can merge this pull request into a Git repository by running:&lt;/p&gt;

&lt;p&gt;    $ git pull &lt;a href=&quot;https://github.com/igarashitm/camel&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/igarashitm/camel&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-9606&quot; title=&quot;SJMS Consumer-Producer in transaciton&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-9606&quot;&gt;&lt;del&gt;CAMEL-9606&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you can review and apply these changes as the patch at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/camel/pull/1214.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/camel/pull/1214.patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To close this pull request, make a commit to your master/trunk branch&lt;br/&gt;
with (at least) the following in the commit message:&lt;/p&gt;

&lt;p&gt;    This closes #1214&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;commit 825a35fbf67bc1b298bf8f9d58a5e2603d65063d&lt;br/&gt;
Author: Tomohisa Igarashi &amp;lt;tm.igarashi@gmail.com&amp;gt;&lt;br/&gt;
Date:   2016-10-18T13:05:54Z&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-9606&quot; title=&quot;SJMS Consumer-Producer in transaciton&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-9606&quot;&gt;&lt;del&gt;CAMEL-9606&lt;/del&gt;&lt;/a&gt; Share JMS session among SJMS endpoints to ensure transaction atomicity&lt;/p&gt;

&lt;hr /&gt;</comment>
                            <comment id="15587972" author="githubbot" created="Wed, 19 Oct 2016 07:54:40 +0000"  >&lt;p&gt;Github user asfgit closed the pull request at:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://github.com/apache/camel/pull/1214&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/camel/pull/1214&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 14 Oct 2016 05:14:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310060" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Estimated Complexity</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10060"><![CDATA[Unknown]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            6 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2svyv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>