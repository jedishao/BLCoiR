<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 03:42:11 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CAMEL-1366/CAMEL-1366.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CAMEL-1366] EndpointMessageListener should respect ExchangePattern</title>
                <link>https://issues.apache.org/jira/browse/CAMEL-1366</link>
                <project id="12311211" key="CAMEL">Camel</project>
                    <description>&lt;p&gt;In all current releases, org.apache.camel.component.jms.EndpointMessageListener.onMessage() has the following logic (line 90 in 1.6.0 code):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;// send the reply
&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rce == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; body != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !disableReplyTo) {
    sendReply(replyDestination, message, exchange, body);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This logic should also respect ExchangePattern of the exchange, so I propose a change to:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;// send the reply
&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rce == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; body != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; exchange.isOutCapable()) {
    sendReply(replyDestination, message, exchange, body);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This change allows a processing pattern where the route may change the ExchangePattern using methods like RouteBuilder.inOnly() to switch the MEP at will so that the reply is send at a later time (true asynchronous exchange).  This processing pattern is particularly useful for integrating long running services. For example,&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;// Java DSL
&lt;/span&gt;from(&lt;span class=&quot;code-quote&quot;&gt;&quot;activemq:my_queue?exchangePattern=InOnly&quot;&lt;/span&gt;).to(&lt;span class=&quot;code-quote&quot;&gt;&quot;predict_weather:&lt;span class=&quot;code-comment&quot;&gt;//?reply_later=&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;);
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// or
&lt;/span&gt;from(&lt;span class=&quot;code-quote&quot;&gt;&quot;activemq:my_queue2&quot;&lt;/span&gt;).inOnly().to(&lt;span class=&quot;code-quote&quot;&gt;&quot;predict_weather:&lt;span class=&quot;code-comment&quot;&gt;//?reply_later=&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The flaw of the current logic makes it impossible to do true asynchronous exchange, because 1) it does not respect the ExchangePattern; 2) if property &quot;disableReplyTo&quot; is used, the &quot;org.apache.camel.jms.replyDestination&quot; property will not be set (see method createExchange in the same file), thus downstream cannot find the reply destination.&lt;/p&gt;

&lt;p&gt;The proposed change can also deprecate the disableReplyTo property and put the MEP concept into good use.&lt;/p&gt;</description>
                <environment>&lt;p&gt;ActiveMQ/Camel&lt;/p&gt;</environment>
        <key id="12486565">CAMEL-1366</key>
            <summary>EndpointMessageListener should respect ExchangePattern</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="davsclaus">Claus Ibsen</assignee>
                                    <reporter username="mwc_tonesoft">Michael Chen</reporter>
                        <labels>
                    </labels>
                <created>Fri, 20 Feb 2009 22:28:22 +0000</created>
                <updated>Fri, 31 Jul 2009 06:34:08 +0000</updated>
                            <resolved>Fri, 27 Feb 2009 13:16:49 +0000</resolved>
                                    <version>1.6.0</version>
                                    <fixVersion>2.0-M1</fixVersion>
                                    <component>camel-jms</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12950939" author="davsclaus" created="Sat, 21 Feb 2009 09:30:05 +0000"  >&lt;p&gt;What if the JMSMessage have a replyTo desintation set?&lt;/p&gt;

&lt;p&gt;Then the original caller expects a response. Then we can not just disregard this.&lt;br/&gt;
Could you dig into the code and check how this is handled.&lt;/p&gt;

</comment>
                            <comment id="12950902" author="mwc_tonesoft" created="Tue, 24 Feb 2009 17:25:22 +0000"  >&lt;p&gt;As I stated above, I want to end the current process chain without sending back a reply.  When the long running services is completed, the reply will be sent then and only then.  This free up the original processing thread immediately.  The original caller still gets the response it expect.&lt;/p&gt;

&lt;p&gt;I now realize that the RouteBuilder methods like inOnly(), outOnly(), etc. are useless.  They only effects downstream processors in the route.  It does NOT change the MEP of the endpoint and its behavior.  I will submit a separate bug on this.&lt;/p&gt;</comment>
                            <comment id="12950962" author="davsclaus" created="Wed, 25 Feb 2009 07:16:41 +0000"  >&lt;p&gt;@Michael&lt;/p&gt;

&lt;p&gt;The last one is not a bug. inOnly, inOut is used to affect/change the MEP on route.&lt;/p&gt;

&lt;p&gt;What you are asking for is on the consumer side (jms consumer, the from node) to set it to request only, or request-reply.&lt;/p&gt;

&lt;p&gt;However the jms spec has this JMSReplyTo that we should honor. So if someone sends a JMS message to a queue with a JMSReplyTo header then that caller would expect a reply on that destination and thus Camel should honor this and return a reply.&lt;/p&gt;

&lt;p&gt;So today you can do what you want:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
from(&lt;span class=&quot;code-quote&quot;&gt;&quot;activemq:my_queue&quot;&lt;/span&gt;).to(&lt;span class=&quot;code-quote&quot;&gt;&quot;predict_weather:&lt;span class=&quot;code-comment&quot;&gt;//?reply_later=&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the message sent to my_queue does NOT contain a JMSReplyTo then its a request only.&lt;/p&gt;

&lt;p&gt;However what we could consider is to also test for exchange.isOutCapable() and send a &quot;null&quot; body if the test fails to signal no/empty reply.&lt;/p&gt;</comment>
                            <comment id="12950987" author="mwc_tonesoft" created="Wed, 25 Feb 2009 17:31:08 +0000"  >&lt;p&gt;exchange.isOutCapable() is always true downstream due to the logic in method EndpointMessageListener.createExchange().  That method forces the MEP to be InOut if JMSReplyTo is present in the original request.&lt;/p&gt;

&lt;p&gt;If your reason for forcing a reply is to honor the JMS spec, I can&apos;t argue otherwise. Please close this bug.&lt;/p&gt;

&lt;p&gt;However, I believe the camel.component.jms implementation should offer the option of not replying the original request and give that job to other components or processors downstream.  This does not break the JMS spec, but just a matter of which Camel component is replying.&lt;/p&gt;</comment>
                            <comment id="12950978" author="davsclaus" created="Thu, 26 Feb 2009 11:01:01 +0000"  >&lt;p&gt;@Michael&lt;/p&gt;

&lt;p&gt;That is actually a good idea. The reply can be done later as you say. &lt;br/&gt;
But isnt that supported already with the disableReplyTo option?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
from(&lt;span class=&quot;code-quote&quot;&gt;&quot;activemq:my_queue?disableReplyTo=&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;).to(&lt;span class=&quot;code-quote&quot;&gt;&quot;predict_weather:&lt;span class=&quot;code-comment&quot;&gt;//?reply_later=&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

</comment>
                            <comment id="12950983" author="mwc_tonesoft" created="Thu, 26 Feb 2009 17:11:04 +0000"  >&lt;p&gt;Actually, the logic in EndpointMessageListener.createExchange() made it impossible. If disableReplyTo is set to true, the &quot;org.apache.camel.jms.replyDestination&quot; will not be set.  Downstream processor will have no way to know how to reply.&lt;/p&gt;

&lt;p&gt;Since we have talked about it, I want to &lt;b&gt;reinstate&lt;/b&gt; the original change suggestion &lt;b&gt;plus&lt;/b&gt; the following. In the createExchange() method, these lines:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (replyDestination != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !disableReplyTo) {
            exchange.setProperty(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.camel.jms.replyDestination&quot;&lt;/span&gt;, replyDestination);
            exchange.setPattern(ExchangePattern.InOut);
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;should be changed to:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (replyDestination != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !disableReplyTo) {
            exchange.setProperty(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.camel.jms.replyDestination&quot;&lt;/span&gt;, replyDestination);
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!exchange.getPattern().isOutCapable())
                exchange.setPattern(ExchangePattern.InOut);
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This change will account for ExchangePattern.InOptionalOut. However, it will also require the fix for bug &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-1384&quot; title=&quot;ExchangeHelper should respect ExchangePattern.InOptionalOut &quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-1384&quot;&gt;&lt;del&gt;CAMEL-1384&lt;/del&gt;&lt;/a&gt; I submitted yesterday for everything to work.  In summary, a route could be defined as:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
from(&lt;span class=&quot;code-quote&quot;&gt;&quot;activemq:my_queue?exchangePattern=InOptionalOut&quot;&lt;/span&gt;).to(&lt;span class=&quot;code-quote&quot;&gt;&quot;predict_weather:&lt;span class=&quot;code-comment&quot;&gt;//?reply_later=&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then if and only if the last processor does NOT set a out message, camel.jms will not sent a reply.  It is the downstream processors&apos; responsibility to use property &quot;org.apache.camel.jms.replyDestination&quot; to construct and sent the JMS reply message.&lt;/p&gt;

&lt;p&gt;The two changes in this bug and &lt;a href=&quot;https://issues.apache.org/jira/browse/CAMEL-1384&quot; title=&quot;ExchangeHelper should respect ExchangePattern.InOptionalOut &quot; class=&quot;issue-link&quot; data-issue-key=&quot;CAMEL-1384&quot;&gt;&lt;del&gt;CAMEL-1384&lt;/del&gt;&lt;/a&gt; are 100% backward compatible, since InOptionalOut has not been considered for camel.jms before.&lt;/p&gt;</comment>
                            <comment id="12951003" author="davsclaus" created="Thu, 26 Feb 2009 17:44:31 +0000"  >&lt;p&gt;Good idea.&lt;/p&gt;

&lt;p&gt;I was planning to look into a few tickets for camel-jms related to Camel 2.0. Will look into this one as well, so we can support your use case.&lt;/p&gt;</comment>
                            <comment id="12950965" author="davsclaus" created="Fri, 27 Feb 2009 10:26:33 +0000"  >&lt;p&gt;trunk: Committed revision 748476.&lt;/p&gt;</comment>
                            <comment id="12951014" author="davsclaus" created="Fri, 27 Feb 2009 13:13:55 +0000"  >&lt;p&gt;James created the stuff in camel-jms to support this&lt;/p&gt;</comment>
                            <comment id="12950982" author="davsclaus" created="Fri, 27 Feb 2009 13:16:49 +0000"  >&lt;p&gt;The reply destination is set as a property on the exchange:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Destination replyDestination = in.getHeader(JmsConstants.JMS_REPLY_DESTINATION, Destination.class);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So you have a Destination object you can use to send the reply later.&lt;/p&gt;

&lt;p&gt;See unit test JmsSimpleRequestLateReplyTest in camel-jms.&lt;/p&gt;</comment>
                            <comment id="12949567" author="davsclaus" created="Fri, 31 Jul 2009 06:34:08 +0000"  >&lt;p&gt;Closing 2.0m1 tickets&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12485243">CAMEL-1384</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12486014">CAMEL-1405</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 21 Feb 2009 09:30:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>76875</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 19 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01hz3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6681</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>