<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 03:04:37 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CAMEL-2935/CAMEL-2935.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CAMEL-2935] Broken failure reporting via DefaultProucerTemplate.asyncCallback and Synchronization.onFailure</title>
                <link>https://issues.apache.org/jira/browse/CAMEL-2935</link>
                <project id="12311211" key="CAMEL">Camel</project>
                    <description>&lt;p&gt;The recent change in &lt;tt&gt;ProducerCache.send&lt;/tt&gt;&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;ProducerCache.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void send(Endpoint endpoint, Exchange exchange) {
        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
            sendExchange(endpoint, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, exchange);
            &lt;span class=&quot;code-comment&quot;&gt;// RECENT CHANGE HERE:
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;// ensure that CamelExecutionException is always thrown
&lt;/span&gt;            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (exchange.getException() != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
                exchange.setException(wrapCamelExecutionException(exchange, exchange.getException()));
            }
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {
            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; wrapCamelExecutionException(exchange, e);
        }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;that throws a &lt;tt&gt;CamelExecutionException&lt;/tt&gt; if &lt;tt&gt;exchange.getException&lt;/tt&gt; is not null, makes it impossible for &lt;tt&gt;DefaultProducerTemplate.asyncCallback&lt;/tt&gt; to report failures (other than fault messages) asynchronously via &lt;tt&gt;Synchronization.onFailure&lt;/tt&gt;&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;DefaultProducerTemplate.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Future&amp;lt;Exchange&amp;gt; asyncCallback(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Endpoint endpoint, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Exchange exchange, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Synchronization onCompletion) {
        Callable&amp;lt;Exchange&amp;gt; task = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Callable&amp;lt;Exchange&amp;gt;() {
            &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Exchange call() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {

                &lt;span class=&quot;code-comment&quot;&gt;// FIXME: exception is thrown in Camel 2.4 where a normal &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; with answer.getException != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; was done in Camel 2.3
&lt;/span&gt;                Exchange answer = send(endpoint, exchange);

                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (answer.isFailed()) {
                    onCompletion.onFailure(answer);
                } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
                    &lt;span class=&quot;code-comment&quot;&gt;// ...
&lt;/span&gt;                }
                &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; answer;
            }
        };
        &lt;span class=&quot;code-comment&quot;&gt;// ...
&lt;/span&gt;    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was working in Camel 2.3 (but unfortunately there wasn&apos;t any test case for it). I attached a patch for &lt;tt&gt;DefaultProducerTemplateAsyncTest&lt;/tt&gt; that demonstrates the problem. I didn&apos;t commit a fix yet because I&apos;m unsure at the moment about the best way to fix that. Of course I tried a naive fix in the DefaultProducerTemplate.asyncCallback methods which causes the test (in the patch) to pass but I&apos;d like to hear other opinions before I continue.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12486038">CAMEL-2935</key>
            <summary>Broken failure reporting via DefaultProucerTemplate.asyncCallback and Synchronization.onFailure</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="davsclaus">Claus Ibsen</assignee>
                                    <reporter username="mrt1nz">Martin Krasser</reporter>
                        <labels>
                    </labels>
                <created>Sat, 10 Jul 2010 10:01:35 +0000</created>
                <updated>Sun, 24 Apr 2011 09:57:26 +0000</updated>
                            <resolved>Sat, 10 Jul 2010 20:56:48 +0000</resolved>
                                    <version>2.3.0</version>
                                    <fixVersion>2.4.0</fixVersion>
                                    <component>camel-core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12952446" author="davsclaus" created="Sat, 10 Jul 2010 10:18:06 +0000"  >&lt;p&gt;Ah well spotted. We should definitely have an unit test for this so callbacks &lt;b&gt;always&lt;/b&gt; can handle the reply.&lt;/p&gt;

&lt;p&gt;I would suggest to change the internals of producer template to have a &lt;b&gt;send&lt;/b&gt; method to be used for the sync cases (the one we got now, so no changes needed for the sync cases).&lt;/p&gt;

&lt;p&gt;However for the async we should introduce a new &lt;tt&gt;sendAsync&lt;/tt&gt; variation that the various &lt;tt&gt;asyncCallback&lt;/tt&gt; methods leverage.&lt;br/&gt;
Then that method is used in the &lt;tt&gt;call&lt;/tt&gt; method as shown above.&lt;/p&gt;</comment>
                            <comment id="12949853" author="mrt1nz" created="Sat, 10 Jul 2010 10:24:46 +0000"  >&lt;p&gt;Thanks for your feedback Claus. Sounds good to me, I&apos;ll try that.&lt;/p&gt;</comment>
                            <comment id="12952294" author="davsclaus" created="Sat, 10 Jul 2010 10:37:41 +0000"  >&lt;p&gt;In fact you may want to ensure sendAsync never throws exception, but instead always set the thrown exception on the Exchange. This ensure that in the &lt;tt&gt;call&lt;/tt&gt; method we can invoke the &lt;tt&gt;onFailure&lt;/tt&gt; method on the &lt;tt&gt;onCompletion&lt;/tt&gt; callback.&lt;/p&gt;</comment>
                            <comment id="12955663" author="mrt1nz" created="Sat, 10 Jul 2010 11:35:24 +0000"  >&lt;p&gt;Claus, I&apos;d like to first suggest a solution as implemented by &lt;tt&gt;on-failure.patch&lt;/tt&gt;. This is a solution that fixes the problem with only minimal changes (i.e. without introducing new &lt;tt&gt;sendAsync&lt;/tt&gt; methods). In this patch I simply moved&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (exchange.getException() != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
                exchange.setException(wrapCamelExecutionException(exchange, exchange.getException()));
            }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;from &lt;tt&gt;ProducerCache.send(Endpoint, Exchange)&lt;/tt&gt; to &lt;tt&gt;ProducerTemplate.send(Endpoint, Exchange)&lt;/tt&gt; because it is the &lt;b&gt;only&lt;/b&gt; user of  &lt;tt&gt;ProducerCache.send(Endpoint, Exchange)&lt;/tt&gt;. In &lt;tt&gt;ProducerCache.asyncCallback(Endpoint, Exchange, Synchronization)&lt;/tt&gt; the &lt;tt&gt;ProducerCache.send(Endpoint, Exchange)&lt;/tt&gt; is now used directly (and this again re-introduces the same behaviour as in Camel 2.3). All the camel-core tests run through locally (except SplitterStreamCache test but it also fails without the changes ... so it must be something else).&lt;/p&gt;

&lt;p&gt;Although, I see this issue as resolved with this patch, I still don&apos;t understand why the if-statement above was introduced only for &lt;tt&gt;ProducerCache.send(Endpoint, Exchange)&lt;/tt&gt; and not for the other &lt;tt&gt;ProducerCache.send&lt;/tt&gt; methods as well. This looks somehow inconsistent to me. Maybe I just miss something obvious. &lt;/p&gt;

&lt;p&gt;If you are fine with the provided patch, please let me know and I&apos;ll commit the changes.&lt;/p&gt;</comment>
                            <comment id="12952663" author="davsclaus" created="Sat, 10 Jul 2010 12:51:31 +0000"  >&lt;p&gt;Okay I had a look at the patch and have been fixed the issue.&lt;/p&gt;

&lt;p&gt;The problem was that &lt;tt&gt;ProducerTemplate&lt;/tt&gt; interface has been tighten up a bit to ensure that all methods will thrown a &lt;tt&gt;CamelExecutionException&lt;/tt&gt; if any of the &lt;tt&gt;send&lt;/tt&gt; or &lt;tt&gt;request&lt;/tt&gt; methods is invoked. This ensures its consistent. Before there where a few methods which didn&apos;t do this. This causes the end user to be a bit confused and they would then have to double check with try .. catch and the Exchange as well.&lt;/p&gt;

&lt;p&gt;Unfortunately the fix was done at &lt;tt&gt;ProoducerCache&lt;/tt&gt; instead on &lt;tt&gt;DefaultProducerTemplate&lt;/tt&gt; itself. So I have fixed this. Running full test before committing.&lt;/p&gt;
</comment>
                            <comment id="12951217" author="mrt1nz" created="Sat, 10 Jul 2010 13:10:53 +0000"  >&lt;p&gt;Great, thanks!&lt;/p&gt;</comment>
                            <comment id="12951886" author="davsclaus" created="Sat, 10 Jul 2010 13:15:09 +0000"  >&lt;p&gt;In fact I am tighten up a bit on the &lt;tt&gt;ProducerCache&lt;/tt&gt; as well and ensuring the javadoc states the contract. &lt;/p&gt;

&lt;p&gt;Now exceptions is not thrown but stored on the returned Exchange which ensures a friendly API which caters for both the synchronous and asynchronous routing engine in Camel.&lt;/p&gt;</comment>
                            <comment id="12952004" author="davsclaus" created="Sat, 10 Jul 2010 14:26:06 +0000"  >&lt;p&gt;I have to fix some unit tests which was relying on the old behavior of &lt;tt&gt;template.send(Exchange)&lt;/tt&gt; and &lt;tt&gt;template.request(Exchange)&lt;/tt&gt; not throwing an exception, which wasn&apos;t entirely covered by the first fix. Now with all the template methods fixed they surface some tests which now fails due to the tighten contract.&lt;/p&gt;</comment>
                            <comment id="12952019" author="davsclaus" created="Sat, 10 Jul 2010 16:21:26 +0000"  >&lt;p&gt;I have cleared the confusing of the &lt;tt&gt;ProducerTemplate&lt;/tt&gt; and &lt;tt&gt;ProducerCache&lt;/tt&gt; API.&lt;/p&gt;

&lt;p&gt;I had made a minor mistake before which causes several tests to fail. I have corrected this and the problem is in fact just the async behavior Martin reported.&lt;/p&gt;

&lt;p&gt;Running full tests now, before committing.&lt;/p&gt;</comment>
                            <comment id="12951225" author="davsclaus" created="Sat, 10 Jul 2010 20:56:48 +0000"  >&lt;p&gt;trunk: 962915.&lt;/p&gt;</comment>
                            <comment id="12955654" author="mrt1nz" created="Sun, 11 Jul 2010 08:39:24 +0000"  >&lt;p&gt;Just upgraded Akka to the latest Camel 2.4-SNAPSHOT and all tests are now running through. Thanks again!&lt;/p&gt;</comment>
                            <comment id="13023796" author="davsclaus" created="Sun, 24 Apr 2011 09:57:26 +0000"  >&lt;p&gt;Closing all resolved tickets from 2010 or older&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12463308" name="on-failure.patch" size="5543" author="mrt1nz" created="Sat, 10 Jul 2010 11:35:24 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 10 Jul 2010 10:18:06 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>76396</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 32 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01rn3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8247</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>