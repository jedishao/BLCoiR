<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Nov 19 23:01:18 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MATH-1045/MATH-1045.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MATH-1045] EigenDecomposition.Solver should consider tiny values 0 for purposes of determining singularity</title>
                <link>https://issues.apache.org/jira/browse/MATH-1045</link>
                <project id="12310485" key="MATH">Commons Math</project>
                    <description>&lt;p&gt;EigenDecomposition.Solver tests for singularity by comparing eigenvalues to 0 for exact equality. Elsewhere in the class and in the code, of course, very small values are considered 0. This causes the solver to consider some singular matrices as non-singular.&lt;/p&gt;

&lt;p&gt;The patch here includes a test as well showing the behavior &amp;#8211; the matrix is clearly singular but isn&apos;t considered as such since one eigenvalue are ~1e-14 rather than exactly 0.&lt;/p&gt;

&lt;p&gt;(What I am not sure of is whether we should really be evaluating the &lt;b&gt;norm&lt;/b&gt; of the imaginary eigenvalues rather than real/imag components separately. But the javadoc says the solver only supports real eigenvalues anyhow, so it&apos;s kind of moot since imag=0 for all eigenvalues.)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12675022">MATH-1045</key>
            <summary>EigenDecomposition.Solver should consider tiny values 0 for purposes of determining singularity</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="srowen">Sean Owen</reporter>
                        <labels>
                            <label>eigenvalue</label>
                            <label>singular</label>
                    </labels>
                <created>Tue, 22 Oct 2013 13:10:57 +0000</created>
                <updated>Mon, 19 May 2014 15:13:29 +0000</updated>
                            <resolved>Tue, 29 Oct 2013 15:55:15 +0000</resolved>
                                    <version>3.2</version>
                                    <fixVersion>3.3</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13801866" author="erans" created="Tue, 22 Oct 2013 14:38:02 +0000"  >&lt;p&gt;Isn&apos;t the code in this class (and others similarly) supposed to work for a matrix with very small entries too? I mean that, if all eigenvalues are of the order of, say, EPSILON / 10, should the matrix be considered singular right away?&lt;/p&gt;</comment>
                            <comment id="13801910" author="srowen" created="Tue, 22 Oct 2013 15:23:58 +0000"  >&lt;p&gt;That&apos;s a good point. If you make the example matrix non-singular, but then divide elements by 1e12, it will report it as singular. This seems wrong. On the other hand it seems a bit undesirable to return an &apos;inverse&apos; in this case &amp;#8211; it&apos;s dominated by the inverse of that tiny eigenvalue, which is huge, and the result is pretty unreliable. &lt;/p&gt;

&lt;p&gt;I&apos;m a bit out of my depth here but I wonder if it&apos;s more reasonable to examine the eigenvalues in sorted order and examine ratio of one to the next. When that ratio is below epsilon it makes more sense to declare it &quot;0&quot;.&lt;/p&gt;

&lt;p&gt;I could also see this being a case of &quot;caller beware&quot;. That&apos;s the more conservative thing here.&lt;/p&gt;</comment>
                            <comment id="13802067" author="erans" created="Tue, 22 Oct 2013 17:59:02 +0000"  >&lt;blockquote&gt;&lt;p&gt;On the other hand it seems a bit undesirable to return an &apos;inverse&apos; in this case &#8211; it&apos;s dominated by the inverse of that tiny eigenvalue, which is huge, and the result is pretty unreliable. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This could be case-dependent and the code should perhaps be able to detect and accept input that can return a reliable result. In r1534709, I&apos;ve committed an example that seems to work, even as the eigenvalues are quite small indeed.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;it&apos;s more reasonable to examine the eigenvalues in sorted order and examine ratio&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s an interesting idea.&lt;br/&gt;
Could you try and see whether it would let the new test pass, while intercepting the singular matrix of your test?&lt;/p&gt;</comment>
                            <comment id="13802760" author="srowen" created="Wed, 23 Oct 2013 10:09:41 +0000"  >&lt;p&gt;On a little more research, it seems the thing to do is look at the ratio with the largest eigenvalue. Attached is a new patch where your new test and my (2) new tests all pass.&lt;/p&gt;

&lt;p&gt;Comments welcome from linear algebra experts but I think this is at least as principled as the existing code.&lt;/p&gt;

&lt;p&gt;We could also let the user specify the zero threshold as in the QRDecomposition class.&lt;/p&gt;</comment>
                            <comment id="13802790" author="erans" created="Wed, 23 Oct 2013 10:54:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;We could also let the user specify the zero threshold as in the QRDecomposition class.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That would be best, I also think.&lt;br/&gt;
However, there is a practical problem in that there is currently a (deprecated) constructor with the required signature. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Could you raise this issue on the &quot;dev&quot; ML, and ask confirmation on how to proceed?  I seem to recall that such a (functionally non-compatible) change would now be acceptable, even in a minor release.&lt;/p&gt;</comment>
                            <comment id="13803325" author="tn" created="Wed, 23 Oct 2013 21:02:48 +0000"  >&lt;p&gt;I just realized that in the case of a non-symmetric matrix, the eigenvalues are not sorted by value.&lt;br/&gt;
The reason is that for the two cases, symmetric and non-symmetric there are completely different ways to do the decomposition.&lt;/p&gt;

&lt;p&gt;So you should not rely on that a particular order of the eigenvalues before we change that first.&lt;/p&gt;</comment>
                            <comment id="13804016" author="srowen" created="Thu, 24 Oct 2013 09:32:11 +0000"  >&lt;p&gt;These are good points, as well as the comments from the thread on commons-dev &amp;#8211; Ted in particular notes that you can use the threshold in the decomposition itself to simply stop computing eigenvalues when they get small.&lt;/p&gt;

&lt;p&gt;Now, these more advanced changes are near the limit of my ability and I am not sure I feel confident making them. I propose these additional changes be considered in another issue: (maybe) moving a threshold parameter, maybe modifying the decomposition.&lt;/p&gt;

&lt;p&gt;The patch here does I think represent a small, distinct positive change, in that it employs a reasonable test for singularity after the fact.&lt;/p&gt;</comment>
                            <comment id="13804078" author="tn" created="Thu, 24 Oct 2013 11:25:12 +0000"  >&lt;p&gt;Sure np.&lt;/p&gt;

&lt;p&gt;I think we are just collecting all relevant information in order to decide how to proceed. The necessary changes can then be done, e.g. by myself or another maintainer.&lt;/p&gt;</comment>
                            <comment id="13805407" author="erans" created="Fri, 25 Oct 2013 16:04:36 +0000"  >&lt;blockquote&gt;&lt;p&gt;I propose these additional changes be considered in another issue&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree.&lt;/p&gt;</comment>
                            <comment id="13808116" author="erans" created="Tue, 29 Oct 2013 15:55:15 +0000"  >&lt;p&gt;Applied in revision 1536766.&lt;/p&gt;

&lt;p&gt;I created &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1049&quot; title=&quot;Matrix decomposition and solver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1049&quot;&gt;MATH-1049&lt;/a&gt; for discussing further improvements.&lt;/p&gt;</comment>
                            <comment id="13808455" author="tn" created="Tue, 29 Oct 2013 21:08:02 +0000"  >&lt;p&gt;We need to change the behavior for non-symmetric matrices as the eigenvalues are not sorted in this case.&lt;br/&gt;
This patch relies on a descending sort order to determine if the decomposed matrix is singular, so this may fail in such a case.&lt;/p&gt;

&lt;p&gt;I will create a separate issue for this as it makes sense to always sort the eigenvalues imho.&lt;/p&gt;</comment>
                            <comment id="13808938" author="erans" created="Wed, 30 Oct 2013 10:34:18 +0000"  >&lt;blockquote&gt;&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt; this may fail &lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;For this issue, I could add a loop in order to find the one with largest absolute value. WDYT?&lt;br/&gt;
But I have no idea how to construct a matrix for a unit test that would exhibit the problem.&lt;/p&gt;</comment>
                            <comment id="13809009" author="srowen" created="Wed, 30 Oct 2013 11:56:02 +0000"  >&lt;p&gt;Yes, this is a good point. It&apos;s safest to find the largest eigenvalue (by absolute value) with a loop I think.&lt;/p&gt;

&lt;p&gt;The final matrix in testUnsymmetric(), which is unsymmetric, shows this.&lt;/p&gt;

&lt;p&gt;The symmetric matrix in testSquareRootNonPositiveDefinite() also shows this &amp;#8211; the last eigenvalue is the most negative, but is the largest in absolute value.&lt;/p&gt;</comment>
                            <comment id="13809041" author="erans" created="Wed, 30 Oct 2013 12:50:36 +0000"  >&lt;p&gt;Would you mind creating a patch?&lt;/p&gt;</comment>
                            <comment id="13809093" author="srowen" created="Wed, 30 Oct 2013 13:54:38 +0000"  >&lt;p&gt;Ah right, I should have said that these show out-of-order eigenvalues but that&apos;s not what we need to check. We need one that puts a very small eigenvalue first. That&apos;s easy to generate as something like&lt;/p&gt;

&lt;p&gt;[ d 0 ]&lt;br/&gt;
[ 1 1 ]&lt;/p&gt;

&lt;p&gt;for tiny d. Patch attached.&lt;/p&gt;</comment>
                            <comment id="13809126" author="erans" created="Wed, 30 Oct 2013 14:17:23 +0000"  >&lt;p&gt;Thank you. Committed in revision 1537099.&lt;/p&gt;</comment>
                            <comment id="13810261" author="srowen" created="Thu, 31 Oct 2013 14:07:19 +0000"  >&lt;p&gt;This is a separate issue, but so minor not sure if it merits another JIRA. While looking at this code I noticed this loop at EigenDecomposition:945 that does nothing:&lt;/p&gt;

&lt;p&gt;        // Vectors of isolated roots&lt;br/&gt;
        for (int i = 0; i &amp;lt; n; i++) {&lt;br/&gt;
            if (i &amp;lt; 0 | i &amp;gt; n - 1) {&lt;br/&gt;
                for (int j = i; j &amp;lt; n; j++) &lt;/p&gt;
{
                    matrixP[i][j] = matrixT[i][j];
                }
&lt;p&gt;            }&lt;br/&gt;
        }&lt;/p&gt;

&lt;p&gt;The &apos;if&apos; can never be true. (Not to mention non-short-circuit boolean op there.)&lt;/p&gt;</comment>
                            <comment id="13810289" author="erans" created="Thu, 31 Oct 2013 14:27:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;issue &lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt; so minor not sure if it merits another JIRA&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s certainly worth a report!&lt;br/&gt;
Thanks.&lt;/p&gt;</comment>
                            <comment id="13810618" author="tn" created="Thu, 31 Oct 2013 19:48:24 +0000"  >&lt;p&gt;This is an artifact from the original Jama source code.&lt;/p&gt;

&lt;p&gt;There was a similar code construct, which has been removed when the code has been translated, but this one remained. Imho it is safe to remove this part also.&lt;/p&gt;

&lt;p&gt;While checking this I have seen there was a new release of Jama last November with a bugfix for possible infinite loops. Need to check if our code is also affected, but most likely.&lt;/p&gt;</comment>
                            <comment id="13810645" author="tn" created="Thu, 31 Oct 2013 20:08:13 +0000"  >&lt;p&gt;Removed the spurious code fragment in r1537616.&lt;/p&gt;

&lt;p&gt;Created and fixed also &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1051&quot; title=&quot;EigenDecomposition may not converge for certain matrices&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1051&quot;&gt;&lt;del&gt;MATH-1051&lt;/del&gt;&lt;/a&gt; to port a bugfix from Jama-1.0.3 to CM.&lt;/p&gt;</comment>
                            <comment id="14001832" author="luc" created="Mon, 19 May 2014 15:13:29 +0000"  >&lt;p&gt;Closing all resolved issue now available in released 3.3 version.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12676351">MATH-1049</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12609836" name="MATH-1045.patch" size="3120" author="srowen" created="Wed, 23 Oct 2013 10:09:41 +0000"/>
                            <attachment id="12609658" name="MATH-1045.patch" size="2156" author="srowen" created="Tue, 22 Oct 2013 14:23:10 +0000"/>
                            <attachment id="12611064" name="MATH-1045_2.patch" size="1934" author="srowen" created="Wed, 30 Oct 2013 13:54:38 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 22 Oct 2013 14:38:02 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>354644</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 26 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1p52n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>354933</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>