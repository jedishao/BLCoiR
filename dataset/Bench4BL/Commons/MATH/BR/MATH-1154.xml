<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Nov 18 21:05:47 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MATH-1154/MATH-1154.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MATH-1154] Statistical tests in stat.inference package are very slow due to implicit RandomGenerator initialization</title>
                <link>https://issues.apache.org/jira/browse/MATH-1154</link>
                <project id="12310485" key="MATH">Commons Math</project>
                    <description>&lt;p&gt;Some statistical tests defined in the stat.inference package (e.g. BinomialTest or ChiSquareTest) are unnecessarily very slow (up to a factor 20 slower than necessary). The reason is the implicit slow initialization of a default (Well19937c) random generator instance each time a test is performed. The affected tests create some distribution instance in order to use some methods defined therein. However, they do not use any method for random generation. Nevertheless a random number generator instance is automatically created when creating a distribution instance, which is the reason for the serious slowdown. The problem is related to &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1124&quot; title=&quot;Instances of AbstractRealDistribution require a random generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1124&quot;&gt;&lt;del&gt;MATH-1124&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are following solutions:&lt;br/&gt;
1) Fix the affected statistical tests by passing a light-weight RandomGenerator implementation (or even null) to the constructor of the distribution.&lt;br/&gt;
2) Or use for all distributions a RandomGenerator implementation that uses lazy initialization to generate the Well19937c instance as late as possible. This would also solve &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1124&quot; title=&quot;Instances of AbstractRealDistribution require a random generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1124&quot;&gt;&lt;del&gt;MATH-1124&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I will attach a patch proposal together with a performance test, that will demonstrate the speed up after a fix.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12746013">MATH-1154</key>
            <summary>Statistical tests in stat.inference package are very slow due to implicit RandomGenerator initialization</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="Otmar Ertl">Otmar Ertl</reporter>
                        <labels>
                    </labels>
                <created>Sun, 5 Oct 2014 19:34:56 +0000</created>
                <updated>Fri, 26 Dec 2014 19:50:49 +0000</updated>
                            <resolved>Mon, 15 Dec 2014 20:22:08 +0000</resolved>
                                    <version>3.3</version>
                                    <fixVersion>3.4</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="14159652" author="otmar ertl" created="Sun, 5 Oct 2014 19:40:56 +0000"  >&lt;p&gt;This patch demonstrates a fix using lazy initialization of default random number generator instances. Furthermore a test is included which gave following results before&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;statistical tests performance test (calls per timed block: 100000, timed blocks: 100, time unit: ms)
           name      time/call      std error total time      ratio      difference
binomial test 1 1.38289492e-02 1.71975630e-04 1.3829e+05 1.0000e+00  0.00000000e+00
binomial test 2 1.38270752e-02 1.61613547e-04 1.3827e+05 9.9986e-01 -1.87395300e+01
chi square test 2.67553017e-02 2.29903602e-04 2.6755e+05 1.9347e+00  1.29263525e+05
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and after&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;statistical tests performance test (calls per timed block: 100000, timed blocks: 100, time unit: ms)
           name      time/call      std error total time      ratio      difference
binomial test 1 7.26630369e-04 5.87472596e-05 7.2663e+03 1.0000e+00  0.00000000e+00
binomial test 2 7.27780967e-04 2.44728991e-05 7.2778e+03 1.0016e+00  1.15059780e+01
chi square test 5.21210430e-04 3.14044354e-05 5.2121e+03 7.1730e-01 -2.05419939e+03
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;the fix. A speedup up to a factor of 20 can be seen.&lt;/p&gt;</comment>
                            <comment id="14159667" author="tn" created="Sun, 5 Oct 2014 20:06:14 +0000"  >&lt;p&gt;The lazy initialization of the random generator makes sense imho.&lt;/p&gt;

&lt;p&gt;I wonder if it would not also be a good idea to refactor the WellXXX random generators. Right now, every time we instantiate one of these a lot of computations are performed although most of them are always the same regardless of the chosen seed. I think it would be better to have a static data object for each WellXXX generator type containined the fields of the abstract base class, and this has to be initialized only once. This would also safe quite some memory. The only fields that need to be stored for each instance are the index and v fields.&lt;/p&gt;</comment>
                            <comment id="14160993" author="tn" created="Mon, 6 Oct 2014 21:30:36 +0000"  >&lt;p&gt;I have attached a proposed patch to address the issue in the following way:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;the patch updates all inference tests to create distributions with a null rng, which avoid additional overhead as we will not sample from the created distributions&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;re-open &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1124&quot; title=&quot;Instances of AbstractRealDistribution require a random generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1124&quot;&gt;&lt;del&gt;MATH-1124&lt;/del&gt;&lt;/a&gt; and discuss on the mailinglist if we go for the proposed change of a lazy initialization for the distributions or change the default rng from WellXXX to something else&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;create an additional ticket to address potential performance improvements for the WellXXX rngs, can not be done before 4.0 though.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14161764" author="erans" created="Tue, 7 Oct 2014 11:07:06 +0000"  >&lt;blockquote&gt;&lt;p&gt;the patch updates all inference tests to create distributions with a null rng, which avoid additional overhead &lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Doesn&apos;t the OP&apos;s patch avoid the overhead?&lt;br/&gt;
It looks like the performance table above provides good ground to accept the change.&lt;/p&gt;

&lt;p&gt;I&apos;d just suggest to replace class &quot;DefaultRandomGenerator&quot; with a (static) method defined in &quot;RandomGeneratorFactory&quot;.&lt;/p&gt;
</comment>
                            <comment id="14161845" author="tn" created="Tue, 7 Oct 2014 12:43:00 +0000"  >&lt;p&gt;The reason why I did not want to apply the OP&apos;s patch straight away was because of the comment in &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1124&quot; title=&quot;Instances of AbstractRealDistribution require a random generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1124&quot;&gt;&lt;del&gt;MATH-1124&lt;/del&gt;&lt;/a&gt;: lazy initialization was discouraged.&lt;/p&gt;

&lt;p&gt;My patch should improve the situation for the inference tests while it does not require any changes to the distribution / random objects for now.&lt;/p&gt;</comment>
                            <comment id="14161867" author="erans" created="Tue, 7 Oct 2014 13:27:43 +0000"  >&lt;blockquote&gt;&lt;p&gt;lazy initialization was discouraged&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;AFAICT, lazy initialization of the distribution&apos;s RNG was considered an unnecessary complication (of the distributions classes).&lt;/p&gt;

&lt;p&gt;The patch seems to provide an elegant solution. It could be construed that the distribution&apos;s RNG is still &lt;em&gt;not&lt;/em&gt; lazily initialized, it&apos;s the underlying&lt;br/&gt;
implementation that is.&lt;br/&gt;
An &quot;average&quot; user who trusts the provided default will gain in all cases, and a &quot;power&quot; user (like you) can still force a &quot;null&quot; RNG for cases where he knows that no sampling will be requested.&lt;/p&gt;</comment>
                            <comment id="14161873" author="tn" created="Tue, 7 Oct 2014 13:35:18 +0000"  >&lt;p&gt;I like the solution myself, thats why I am doing what I have outlined before:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;use a null rng in places where I know that no sampling will be used (and which is hidden to users anyway), namley in the inference tests&lt;/li&gt;
	&lt;li&gt;re-open &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1124&quot; title=&quot;Instances of AbstractRealDistribution require a random generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1124&quot;&gt;&lt;del&gt;MATH-1124&lt;/del&gt;&lt;/a&gt; to discuss the addition of lazy rng initialization in the distribution classes so that other users can also benefit from it (and may not be as advanced to know details about the use of a rng and when one can provide a null instance)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14161883" author="erans" created="Tue, 7 Oct 2014 13:46:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;to discuss the addition of lazy rng initialization &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That was the most important point in my previous comment.&lt;br/&gt;
The solution provided here was not among the alternatives sketched in &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1224&quot; title=&quot;NullPointerExceptions not documented in some classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1224&quot;&gt;&lt;del&gt;MATH-1224&lt;/del&gt;&lt;/a&gt;, and should be discussed on its own merit.&lt;br/&gt;
Strictly speaking there won&apos;t be a lazy initialization in the distribution class.&lt;br/&gt;
In fact, the proposal is actually to change the default RNG (from a concrete RNG to a delegating one). In practice, the issue is only a performance improvement, not a change in the distribution&apos;s code.&lt;/p&gt;</comment>
                            <comment id="14161904" author="tn" created="Tue, 7 Oct 2014 14:07:29 +0000"  >&lt;p&gt;It is just hiding the aspect of the lazy initialization to another object, which is neat, but it is still lazy initialization, so not much difference to the original proposal imho.&lt;br/&gt;
But we do not need to discuss this here, please post a message to the ml to get opinions.&lt;/p&gt;</comment>
                            <comment id="14161920" author="erans" created="Tue, 7 Oct 2014 14:19:10 +0000"  >&lt;p&gt;Otmar,&lt;/p&gt;

&lt;p&gt;Could you open another issue where you could propose part of the patch here as a new feature (the forwarding and lazily initialized RNG)?&lt;br/&gt;
That feature might not be used to fix the issue reported here, but could be included in CM even before asking the question about whether to use it as a default argument to the distributions.&lt;/p&gt;</comment>
                            <comment id="14161934" author="tn" created="Tue, 7 Oct 2014 14:28:06 +0000"  >&lt;p&gt;why do you constantly ignore me, and oppose everything I do or say?&lt;/p&gt;

&lt;p&gt;There is already an existing issue (re-opened already) which was even linked by the OP and that outlines the problem at hand.&lt;/p&gt;</comment>
                            <comment id="14161963" author="erans" created="Tue, 7 Oct 2014 15:02:57 +0000"  >&lt;blockquote&gt;&lt;p&gt;why do you constantly ignore me, and oppose everything I do or say?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Aren&apos;t you reversing the situation?&lt;/p&gt;

&lt;p&gt;Apart from your patch with &quot;null&quot; RNGs, the other considerations (about &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1224&quot; title=&quot;NullPointerExceptions not documented in some classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1224&quot;&gt;&lt;del&gt;MATH-1224&lt;/del&gt;&lt;/a&gt;, about improving WellXXX RNGs) are related neither to the issue nor to the feature proposed to solve it.&lt;br/&gt;
It is (IMHO) clearer to separate concerns:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Is the lazily initialized RNG a useful feature? [Should be another issue (feature request).]&lt;/li&gt;
	&lt;li&gt;Is this issue (about tests) to be solved by initializing the RNG with &quot;null&quot;? [A possible fix for this issue.]&lt;/li&gt;
	&lt;li&gt;Is the default RNG (in a distribution instance) going to be a lazily-initialized RNG implementation? [Another possible fix for this issue (if and once the feature exists in CM).]&lt;/li&gt;
	&lt;li&gt;Is the default concrete RNG instance to be changed (from WellXxx to ...)? [Unrelated.]&lt;/li&gt;
	&lt;li&gt;Is the implementation of WellXxx to be improved? [Not directly related.]&lt;/li&gt;
	&lt;li&gt;Is the implementation of other RNG (which use insecure constructs) to be improved? [My addition of yet another similarly unrelated issue.]&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I&apos;m proposing to tidy up things and process them in order, and you keep ignoring the suggestion.&lt;br/&gt;
If you and the OP want to resolve &lt;em&gt;this&lt;/em&gt; issue, then there is only one alternative at present: Your fix. Please apply it and let&apos;s move on to the other suggestions.&lt;/p&gt;
</comment>
                            <comment id="14161993" author="tn" created="Tue, 7 Oct 2014 15:19:16 +0000"  >&lt;p&gt;Well, I know it is pointless to discuss anything with you as you will never acknowledge anything else than your POV.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&apos;m proposing to tidy up things and process them in order, and you keep ignoring the suggestion.&lt;br/&gt;
If you and the OP want to resolve this issue, then there is only one alternative at present: Your fix. Please apply it and let&apos;s move on to the other suggestions.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;but I can not leave this statement as is, how do I ignore anything or do not process things in a reasonable way?&lt;/p&gt;

&lt;p&gt;I did the following:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;attach a clean patch so solve the original issue at hand that does not require additional changes (open for discussion, I did not apply it)&lt;/li&gt;
	&lt;li&gt;create a separate issue to address the potential performance improvements for existing rngs&lt;/li&gt;
	&lt;li&gt;re-open the original issue that was referred to by the OP and suggested to discuss the potential solutions (as currently attached to this issue) on the ml&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I mean, seriously, I am fed up with discussions like this.&lt;/p&gt;</comment>
                            <comment id="14162024" author="psteitz" created="Tue, 7 Oct 2014 15:52:33 +0000"  >&lt;p&gt;I agree that the root issue really is &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1124&quot; title=&quot;Instances of AbstractRealDistribution require a random generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1124&quot;&gt;&lt;del&gt;MATH-1124&lt;/del&gt;&lt;/a&gt;.  When we decided to move sampling into the distributions we created the need for distribution instances to have access to a PRNG.  When we decided we wanted everything to be final we forced ourselves into the &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1124&quot; title=&quot;Instances of AbstractRealDistribution require a random generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1124&quot;&gt;&lt;del&gt;MATH-1124&lt;/del&gt;&lt;/a&gt; state, where the only way to avoid potentially expensive PRNG initialization when creating distribution instances that may never use sampling is the smelly workaround to null out the (final) PRNG at instance construction time.  Thomas&apos; patch looks fine to me and unless and until we change one of the decisions above (relax final obsession or pull sampling back out), we should use the workaround in the unit tests (as the patch does) and try to reduce the initialization cost of the default or find a better workaround (reopening &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1124&quot; title=&quot;Instances of AbstractRealDistribution require a random generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1124&quot;&gt;&lt;del&gt;MATH-1124&lt;/del&gt;&lt;/a&gt;).   The OPs patch adds complexity, IMO, without really addressing the core problem, which I think we should address in &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1124&quot; title=&quot;Instances of AbstractRealDistribution require a random generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1124&quot;&gt;&lt;del&gt;MATH-1124&lt;/del&gt;&lt;/a&gt;.  So I am +1 to applying Thomas&apos; patch, resolving this issue and moving back to &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1124&quot; title=&quot;Instances of AbstractRealDistribution require a random generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1124&quot;&gt;&lt;del&gt;MATH-1124&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="14163330" author="otmar ertl" created="Wed, 8 Oct 2014 11:03:18 +0000"  >&lt;p&gt;I agree with Phil that my proposed patch does not address the core problem, which is definitely &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1124&quot; title=&quot;Instances of AbstractRealDistribution require a random generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1124&quot;&gt;&lt;del&gt;MATH-1124&lt;/del&gt;&lt;/a&gt;. The patch was thought as a short-term fix, which improves the performance essentially with minimal invasive code changes. Once the root issue is solved, both patches proposed here (mine and Thomas&apos;) will become obsolete anyway. The question is when will &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1124&quot; title=&quot;Instances of AbstractRealDistribution require a random generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1124&quot;&gt;&lt;del&gt;MATH-1124&lt;/del&gt;&lt;/a&gt; be resolved? In the case it is fixed for the next release, none of both patches need to be applied. If not, it makes sense to apply one of both patches for the short-term. The question remains, do you only want a speed up of the statistical tests (Thomas&apos; patch) or also of the distribution classes (my patch) ? &lt;/p&gt;</comment>
                            <comment id="14163342" author="erans" created="Wed, 8 Oct 2014 11:16:03 +0000"  >&lt;p&gt;&amp;#64;Thomas:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I mean, seriously, I am fed up with discussions like this.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Same here (because it takes at least two to discuss).&lt;br/&gt;
You did what you did, then ignored my suggestions, then rephrased your comments to look like a confrontation rather than a different proposal to handle &lt;em&gt;this&lt;/em&gt; issue (which you did not even consider).  Please learn how to read:  In my &lt;b&gt;first&lt;/b&gt; comment, I gave my opinion on the part of Otmar&apos;s patch that provides a new feature (delegating RNG), and in my &lt;b&gt;second&lt;/b&gt; comment, I indirectly acknowledged that your patch was fine to fix &lt;em&gt;this&lt;/em&gt; issue. I only advocated to not mix different (IMHO) things here (thus, implicitly agreeing, again, that other issues should be better discussed on the ML).&lt;br/&gt;
Rather than repeating what you did, you could have made a mental &quot;diff&quot; with what I actually wrote, and you&apos;d have perhaps seen that there wasn&apos;t such a big difference.  At the very least, none that warranted this outburst of resentment.&lt;/p&gt;

&lt;p&gt;&amp;#64;Phil:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;the root issue really is &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1124&quot; title=&quot;Instances of AbstractRealDistribution require a random generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1124&quot;&gt;&lt;del&gt;MATH-1124&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think so, as I&apos;ve explained above. Unless I&apos;m mistaken, Otmar&apos;s proposal allows to keep all fileds &quot;final&quot; in the distribution classes:  From their perspective, the RNG is a black box, and whether an implementation uses lazy initialization (thus whether &lt;em&gt;its&lt;/em&gt; fields are &quot;final&quot; or not) is totally irrelevant.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;try to reduce the initialization cost of the default&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s what Otmar&apos;s proposal (i.e. the new &quot;LazyInitRNG&quot;) does.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The OPs patch adds complexity, IMO, without really addressing the core problem&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Then I don&apos;t know what the &quot;core problem&quot; is.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;moving back to &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1124&quot; title=&quot;Instances of AbstractRealDistribution require a random generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1124&quot;&gt;&lt;del&gt;MATH-1124&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That issue is named &quot;Instances of AbstractRealDistribution require a random generator&quot;, and you yourself put an end to it by making clear that the statement is false.&lt;br/&gt;
As said by you (on &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-1224&quot; title=&quot;NullPointerExceptions not documented in some classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-1224&quot;&gt;&lt;del&gt;MATH-1224&lt;/del&gt;&lt;/a&gt;), and by Thomas (and me) here, this issue is fixed by setting the RNG argument to &quot;null&quot;. Why do you call that a &quot;smelly workaround&quot; whereas it&apos;s a quite clear and legitimate assessement on the caller&apos;s part?&lt;br/&gt;
Do we talk about &quot;aesthetics&quot;? Then, I can certainly agree that (depending on the type of regular usage one is used to) it might look ugly to often call a constructor with a &quot;null&quot; argument.&lt;br/&gt;
I vaguely recall that we discarded a more flexible separation of concerns (through inheritance and/or additional interfaces) as unnecessarily complex. On the other hand, I recall clearly that everyone agreed that &quot;sampling&quot; was part of the concept of a distribution.&lt;/p&gt;

&lt;p&gt;I do not deny that there is a link with Otmar&apos;s proposal, but only in the sense that his new feature would satisfy users with &quot;mixed&quot; needs (and do not want to use separate instances for when they need sampling and when they don&apos;t).&lt;/p&gt;</comment>
                            <comment id="14163356" author="erans" created="Wed, 8 Oct 2014 11:25:47 +0000"  >&lt;p&gt;Otmar,&lt;/p&gt;

&lt;p&gt;As you&apos;ve seen, this forum is not for discussions or design decisions, and certainly not for propagating disparaging comments about contributors... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;If one thinks of removing the &quot;sample&quot; method from the distribution classes, this won&apos;t happen in a 3.x release.&lt;br/&gt;
I&apos;m still at a loss with what the &quot;core problem&quot; and &quot;root issue&quot; are; thus please start a thread on the &quot;dev&quot; ML describing them.&lt;/p&gt;</comment>
                            <comment id="14163430" author="tn" created="Wed, 8 Oct 2014 12:37:23 +0000"  >&lt;p&gt;@Gilles: well, I apologize for my public outburst, but it does not change my opinion on the discussion culture, and I will not further comment on it.&lt;/p&gt;</comment>
                            <comment id="14169436" author="psteitz" created="Mon, 13 Oct 2014 15:59:09 +0000"  >&lt;p&gt;Applied Thomas&apos; patch in commit a3fdeb4da91d8aef50f40a3f9906494593ce2eca.  Still todo to resolve (for 3.x): update javadoc on distribution class constructors to recommend passing null RandomGenerator when sampling is not going to be used.&lt;/p&gt;</comment>
                            <comment id="14246763" author="tn" created="Mon, 15 Dec 2014 15:52:28 +0000"  >&lt;p&gt;I will take care of the javadoc changes.&lt;/p&gt;</comment>
                            <comment id="14247171" author="tn" created="Mon, 15 Dec 2014 20:22:08 +0000"  >&lt;p&gt;Added javadoc in commit 809f0f89cb53548a7d0a9f9f52c4b36f60c7b6c0 to all distributions.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12715582">MATH-1124</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12673201" name="MATH-1154.patch" size="10704" author="tn" created="Mon, 6 Oct 2014 21:30:36 +0000"/>
                            <attachment id="12673016" name="math3.patch" size="35617" author="Otmar Ertl" created="Sun, 5 Oct 2014 19:40:56 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 5 Oct 2014 20:06:14 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 48 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i20tfb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>