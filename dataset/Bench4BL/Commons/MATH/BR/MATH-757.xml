<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Nov 18 23:15:43 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MATH-757/MATH-757.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MATH-757] ResizableDoubleArray is not thread-safe yet has some synch. methods</title>
                <link>https://issues.apache.org/jira/browse/MATH-757</link>
                <project id="12310485" key="MATH">Commons Math</project>
                    <description>&lt;p&gt;ResizableDoubleArray has several synchronised methods, but is not thread-safe, because class variables are not always accessed using the lock.&lt;/p&gt;

&lt;p&gt;Is the class supposed to be thread-safe?&lt;/p&gt;

&lt;p&gt;If so, all accesses (read and write) need to be synch.&lt;/p&gt;

&lt;p&gt;If not, the synch. qualifiers could be dropped.&lt;/p&gt;

&lt;p&gt;In any case, the protected fields need to be made private.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12544996">MATH-757</key>
            <summary>ResizableDoubleArray is not thread-safe yet has some synch. methods</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="sebb@apache.org">Sebb</reporter>
                        <labels>
                    </labels>
                <created>Fri, 2 Mar 2012 22:09:42 +0000</created>
                <updated>Tue, 10 Mar 2015 22:18:13 +0000</updated>
                            <resolved>Tue, 10 Mar 2015 22:18:13 +0000</resolved>
                                                    <fixVersion>4.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13221306" author="tn" created="Fri, 2 Mar 2012 22:20:52 +0000"  >&lt;p&gt;As far as I have seen, all methods that change an internal state use a lock in some way:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;using synchronized modifier&lt;/li&gt;
	&lt;li&gt;synchronized(this) block&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The only methods that are not synchronized just return some (immutable) parameters of the class wrt array expansion strategy. So imo the class should be thread-safe.&lt;/p&gt;</comment>
                            <comment id="13221350" author="sebb@apache.org" created="Fri, 2 Mar 2012 23:32:08 +0000"  >&lt;p&gt;I&apos;m referring to safe publication: because of the Java memory model, changes to variables are not necessarily made visible (published) to other threads unless both the writer and reader use the same lock. &lt;span class=&quot;error&quot;&gt;&amp;#91;Or the variable is volatile&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, because the variables are not private, subclasses can change any of the variables without using synch.&lt;/p&gt;

&lt;p&gt;There seems to be no particular reason for the variables to be anything but private; that would at least prevent external code from changing them arbitrarily.&lt;/p&gt;

&lt;p&gt;It also looks to me as though there is no need to make some of the variables mutable, as there is a ctor which provides them all. Why not just make them final?&lt;/p&gt;

&lt;p&gt;This does not seem to be the sort of class that needs runtime config, e.g. via JavaBeans.&lt;/p&gt;</comment>
                            <comment id="13221520" author="erans" created="Sat, 3 Mar 2012 05:17:57 +0000"  >&lt;p&gt;Instance variables are private as of r1296563.&lt;/p&gt;</comment>
                            <comment id="13221542" author="tn" created="Sat, 3 Mar 2012 08:49:37 +0000"  >&lt;p&gt;Thanks for the explanation sebb, that made it clear. I will look out for such occurrences myself!&lt;/p&gt;</comment>
                            <comment id="13481377" author="erans" created="Mon, 22 Oct 2012 14:08:06 +0000"  >&lt;p&gt;What&apos;s the status of this issue?&lt;/p&gt;

&lt;p&gt;Is the class in a consistent state?&lt;br/&gt;
Should this class really be advertized as thread-safe?&lt;/p&gt;

&lt;p&gt;Primarily, it&apos;s a utility for CM&apos;s internal use; currently, it&apos;s used in&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;ExponentialDistribution (as a local variable used only at class initialization)&lt;/li&gt;
	&lt;li&gt;DescriptiveStatistics (as a private field)&lt;br/&gt;
with no need of thread-safety.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If the answer to the above is &quot;no&quot;, could we just drop all &quot;synchronized&quot; keywords and be done with this issue?&lt;/p&gt;</comment>
                            <comment id="13481395" author="psteitz" created="Mon, 22 Oct 2012 14:27:06 +0000"  >&lt;p&gt;+1 to just drop the syncs.   &lt;/p&gt;</comment>
                            <comment id="13482280" author="erans" created="Tue, 23 Oct 2012 12:10:46 +0000"  >&lt;p&gt;The class is also more complicated than necessary by having public and protected setters for variables that are only set at construction. Removing those would allow making the corresponding fields private (and thus getting closer to the goal of thread-safety, by immutability).&lt;/p&gt;</comment>
                            <comment id="13482289" author="erans" created="Tue, 23 Oct 2012 12:35:15 +0000"  >&lt;p&gt;I find the &quot;addElement&quot; method a little strange:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; void addElement(&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; value) {
  numElements++;
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ((startIndex + numElements) &amp;gt; internalArray.length) {
    expand();
  }
  internalArray[startIndex + (numElements - 1)] = value;
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (shouldContract()) {
    contract();
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Why would we want to contract just after &lt;em&gt;adding&lt;/em&gt; an element?&lt;br/&gt;
This seems to be arguably useful only if the &quot;initial capacity&quot; was not set correctly. In fact, the current code always contracts the array (created with the default constructor) at the first call to &quot;addElement&quot; because the default initial capacity (16) is &quot;too large&quot; for an array that contains a single element...&lt;/p&gt;

&lt;p&gt;The method would also probably be slightly more efficient if written as:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; void addElement(&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; value) {
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (internalArray.length &amp;lt;= startIndex + numElements) {
    expand();
  }
  internalArray[startIndex + numElements++] = value;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13482623" author="psteitz" created="Tue, 23 Oct 2012 19:55:08 +0000"  >&lt;p&gt;Good catch on the extraneous should Contract above.  That only has relevance in the addElementRolling method, so I would see the above change as safe.&lt;/p&gt;

&lt;p&gt;On the other point, I disagree.  This class is by nature mutable - it maintains a dynamic data structure.  To make it threadsafe, we would have to protect all of the data members.  The protected methods are there to allow subclasses to override specific behaviors.  Eliminating mutability of exposed properties limits the functionality of the class.  We don&apos;t use that mutability now in &lt;span class=&quot;error&quot;&gt;&amp;#91;math&amp;#93;&lt;/span&gt;, but the class is public and others may use it.  The key point is that making things like expansion factor and expansion mode immutable does little / nothing to move toward threadsafety, while limiting functionality.&lt;/p&gt;</comment>
                            <comment id="13482806" author="erans" created="Tue, 23 Oct 2012 23:21:42 +0000"  >&lt;p&gt;Yes, the object is mutable; I actually meant to increase the degree of encapsulation by removing some bells and whistles that will hardly be used (what kind of situation would need a change of those &quot;contraction/expansion&quot; properties during the lifetime of the object?).&lt;br/&gt;
This class represents an array of primitive doubles that can adapt its size. Fine, but if CM does not use whatever refinement can be put into such a functionality, I don&apos;t see why we should maintain an overly complicated object. I&apos;d guess that users would not look at CM for this kind of utility (which belongs to e.g. &quot;Commons Primitives&quot;). I can understand the existence of this class in CM given the no-dependencies requirement, but that leads us back to my point (why maintain functionality beyond what is used internally?). Of course, I do not suggest to remove the methods right now; just starting a discussion for 4.0. At this time, I&apos;m not even sure that the &quot;synchronized&quot; keywords can be removed (wouldn&apos;t it break compatibility?).&lt;/p&gt;</comment>
                            <comment id="13482823" author="sebb@apache.org" created="Tue, 23 Oct 2012 23:27:32 +0000"  >&lt;p&gt;The synch. keyword does not affect binary or source compatibility.&lt;/p&gt;</comment>
                            <comment id="13482890" author="erans" created="Wed, 24 Oct 2012 01:20:42 +0000"  >&lt;p&gt;Wouldn&apos;t removing it break &lt;em&gt;usage&lt;/em&gt;: from supposedly thread-safe to definitely unsafe?&lt;/p&gt;</comment>
                            <comment id="13483164" author="erans" created="Wed, 24 Oct 2012 12:20:29 +0000"  >&lt;p&gt;I&apos;m also wary of&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;the package-scoped &quot;getInternalLength&quot; method,&lt;/li&gt;
	&lt;li&gt;the &quot;expansion mode&quot; being represented as an &quot;int&quot; (and being mutable).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;To KISS, I think that we should mimic the standard &quot;Collections&quot; API (as was done in &quot;Commons Primitives&quot;) and hide/encapsulate everything else (i.e. set the behaviour at construction time).&lt;/p&gt;

&lt;p&gt;For better separation of concerns, I&apos;d also suggest to move all &quot;rolling&quot; features to a new class that would inherit from a trimmed-down &quot;ResizableDoubleArray&quot; (i.e. only concerned with, hmm, resizable array features, &#224; la &quot;Commons Primitives&quot;).&lt;/p&gt;</comment>
                            <comment id="13483359" author="psteitz" created="Wed, 24 Oct 2012 16:24:51 +0000"  >&lt;p&gt;Good point on breaking existing usage if we drop the syncs.  I think it is best to push this to 4.0, when we can also refactor the API.  The only reason this class exists is for the &quot;rolling&quot; behavior, which is all that needs to be retained.&lt;/p&gt;</comment>
                            <comment id="13713152" author="sebb@apache.org" created="Fri, 19 Jul 2013 00:14:56 +0000"  >&lt;p&gt;No need to wait for the next release if we create a class with a new name and the desired new functionality.&lt;/p&gt;</comment>
                            <comment id="13713326" author="psteitz" created="Fri, 19 Jul 2013 04:20:29 +0000"  >&lt;p&gt;Lets not do that.  That will force all users of the class to change to the new one.  We have done too much of that already.&lt;/p&gt;</comment>
                            <comment id="13713523" author="sebb@apache.org" created="Fri, 19 Jul 2013 10:27:05 +0000"  >&lt;p&gt;Huh? I was not suggesting removing the old class; users can continue to use that.&lt;/p&gt;

&lt;p&gt;Besides, if we break the API in 4.0, we&apos;ll need to change class or package names anyway.&lt;/p&gt;

&lt;p&gt;It just seems to me we could get some experience with the new class before moving to 4.0.&lt;/p&gt;

&lt;p&gt;We could even mark it - for internal use only - to allow the API to change as necessary in the initial stages.&lt;/p&gt;</comment>
                            <comment id="13713564" author="erans" created="Fri, 19 Jul 2013 11:27:17 +0000"  >&lt;p&gt;We could implement a clean, basic functionality i.e.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;dropping all &quot;synchronized&quot; keywords,&lt;/li&gt;
	&lt;li&gt;removing everything marked as deprecated,&lt;/li&gt;
	&lt;li&gt;only implementing a minimal API (perhaps similar to &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Deque.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Deque&amp;lt;Double&amp;gt;&lt;/a&gt;), with transparent resizing.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;from which &quot;ResizableDoubleArray&quot; could inherit.&lt;/p&gt;</comment>
                            <comment id="13713716" author="psteitz" created="Fri, 19 Jul 2013 14:43:58 +0000"  >&lt;p&gt;Sebb - we already have too much duplicative / over-complicated clutter.  Yes, everyone has to change package names uniformly as we - once again - break compatibility throughout the library in 4.0.  At least keeping the same class makes it easier.  Just dropping the sync is sufficient in this case IMO.  This is a moderately useful class that others have used (myself included) outside of &lt;span class=&quot;error&quot;&gt;&amp;#91;math&amp;#93;&lt;/span&gt;.  Lets try to maintain it simply.  The simplest way to fix this issue is to just drop the sync and not advertise the class as threadsafe.&lt;/p&gt;</comment>
                            <comment id="13714409" author="erans" created="Sat, 20 Jul 2013 11:41:04 +0000"  >&lt;p&gt;Phil,&lt;/p&gt;

&lt;p&gt;Some time ago, you agreed to refactor this class as long as the &quot;rolling&quot; functionality remains (in this class, IIUC). A lot has already been done in that direction (final fields, deprecation of unsafe methods, ...).&lt;br/&gt;
I imagined that what I proposed in my previous comment can reconcile the initial goal (completing the refactoring prior to 4.0) and what Sebb would need prior to 3.3 (a new &quot;clean&quot; class, perhaps without &quot;rolling&quot;). It remains to be defined what precise functionality is necessary in this base class.&lt;/p&gt;

&lt;p&gt;Or do I miss something?&lt;/p&gt;</comment>
                            <comment id="13714435" author="psteitz" created="Sat, 20 Jul 2013 14:07:49 +0000"  >&lt;p&gt;I agree with the first two of your bullets above.  The class has been improved.  I do not agree with the third bullet. My opinion is that we should just drop the sync and remove the deprecated methods in 4.0.  &lt;/p&gt;</comment>
                            <comment id="14340291" author="tn" created="Fri, 27 Feb 2015 15:36:13 +0000"  >&lt;p&gt;I have attached a patch with the following changes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;remove all uses of synchronized&lt;/li&gt;
	&lt;li&gt;remove deprecated methods&lt;/li&gt;
	&lt;li&gt;make configuration fields final&lt;/li&gt;
	&lt;li&gt;removed static copy method (did not make sense due to the final fields)&lt;/li&gt;
	&lt;li&gt;updated javadoc&lt;/li&gt;
	&lt;li&gt;formatting&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If ok (see the remark about copy method), I will resolve this issue.&lt;/p&gt;</comment>
                            <comment id="14355831" author="tn" created="Tue, 10 Mar 2015 22:18:13 +0000"  >&lt;p&gt;Applied patch in commit 76b7413d2b1eb2dc22f05de5b76f9519be5142e0.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12615490">MATH-894</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12701373" name="MATH-757.patch" size="54626" author="tn" created="Fri, 27 Feb 2015 15:36:13 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 2 Mar 2012 22:20:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>230182</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 36 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i028y7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11051</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>