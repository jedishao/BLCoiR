<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Nov 18 23:08:39 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MATH-899/MATH-899.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MATH-899] A random crash of MersenneTwister random generator</title>
                <link>https://issues.apache.org/jira/browse/MATH-899</link>
                <project id="12310485" key="MATH">Commons Math</project>
                    <description>&lt;p&gt;There is a very small probability that MersenneTwister generator gives a following error: &lt;br/&gt;
java.lang.ArrayIndexOutOfBoundsException: 624&lt;br/&gt;
in MersenneTwister.java line 253&lt;br/&gt;
The error is completely random and its probability is about 1e-8.&lt;/p&gt;

&lt;p&gt;UPD: The problem most probably arises only in multy-thread mode.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Windows 7, JDK 1.7.05&lt;/p&gt;</environment>
        <key id="12616365">MATH-899</key>
            <summary>A random crash of MersenneTwister random generator</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="darksnake">Alexander Nozik</reporter>
                        <labels>
                    </labels>
                <created>Fri, 16 Nov 2012 08:08:22 +0000</created>
                <updated>Mon, 4 Mar 2013 18:53:36 +0000</updated>
                            <resolved>Sun, 18 Nov 2012 21:40:15 +0000</resolved>
                                    <version>3.0</version>
                                    <fixVersion>3.1</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13498677" author="tn" created="Fri, 16 Nov 2012 08:45:01 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Looking at the code, I do not understand how this can happen:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;        if (mti &amp;gt;= N) { // generate N words at one time
            ...

            mti = 0;
        }

        y = mt[mti++];
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So first we check if mti is gte to N, reset it in this case, and then use the mti value and increment afterwards.&lt;br/&gt;
Could it be that you use the MersenneTwister in a multi-threading environment, where the nextXXX() methods are called in a concurrent manner?&lt;/p&gt;</comment>
                            <comment id="13498680" author="luc" created="Fri, 16 Nov 2012 08:55:41 +0000"  >&lt;p&gt;Doing exactly the same analysis and doing somes tests (still running), I came to the same conclusion.&lt;/p&gt;

&lt;p&gt;The mti index is not random at all (it is an index running through the pool and wrapping at the end). Only the content of the pool is random.&lt;/p&gt;

&lt;p&gt;The MersenneTwister class is not thread safe, so I also guess there is a multi-threading issue there.&lt;/p&gt;</comment>
                            <comment id="13498695" author="darksnake" created="Fri, 16 Nov 2012 09:51:18 +0000"  >&lt;p&gt;Yes, i was running some tests in multi-thread mode. So I guess the problem is in concurrency. In this case it should be marked as non thread safe in the Docs.&lt;/p&gt;</comment>
                            <comment id="13498755" author="erans" created="Fri, 16 Nov 2012 12:07:55 +0000"  >&lt;p&gt;I propose to add the &quot;volatile&quot; keyword for variable &quot;mti&quot;.&lt;br/&gt;
I also think that the &quot;synchronized&quot; keyword must be added to the &quot;setSeed&quot; methods.&lt;/p&gt;

&lt;p&gt;Alexander,&lt;br/&gt;
Would you be willing to stress-test the codes before and after this modification to ensure to it makes the class thread-safe?&lt;/p&gt;</comment>
                            <comment id="13498761" author="luc" created="Fri, 16 Nov 2012 12:19:42 +0000"  >&lt;p&gt;Adding synchronized to setSeed is not sufficient.&lt;br/&gt;
The part of the next(int bytes) method that uses mti (i.e. the part shown in Thomas comment above) should also be synchronized.&lt;/p&gt;</comment>
                            <comment id="13498763" author="tn" created="Fri, 16 Nov 2012 12:23:48 +0000"  >&lt;p&gt;Indeed, I think it is a more general problem, as many of the RNGs are not thread-safe (if not all of them).&lt;br/&gt;
It would be nice to have annotations for thread-safe code, so a user would not have to dig into code to be sure.&lt;/p&gt;

&lt;p&gt;For now we could also document in the class javadoc whether an implementation is thread-safe or not (like we did in commons-codec).&lt;/p&gt;</comment>
                            <comment id="13498777" author="darksnake" created="Fri, 16 Nov 2012 12:47:51 +0000"  >&lt;p&gt;I always can insert new version of the generator in the test program where I have found the problem in the first place. Still I don&apos;t know what conditions are required to error for occur. For now I&apos;m using a JDKRandomGenerator and it works just fine so far.&lt;/p&gt;</comment>
                            <comment id="13498814" author="erans" created="Fri, 16 Nov 2012 13:24:39 +0000"  >&lt;p&gt;I&apos;m no expert in thread-safety but ...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The part of the next(int bytes) method that uses mti &lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;... I don&apos;t think so; or more exactly, it can be that synchronization of the whole method is more than strictly necessary, or that it should be refactored into blocks of statements that must be synchronized and blocks that don&apos;t need to.&lt;br/&gt;
I think that it is one of the important collateral issues about making a code thread-safe: not overdoing it to avoid too much efficiency loss.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;For now we could also document in the class javadoc whether an implementation is thread-safe or not&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;To do that is a huge effort. For now, users must assume that no class (except immutable ones) is thread-safe.&lt;/p&gt;</comment>
                            <comment id="13498817" author="tn" created="Fri, 16 Nov 2012 13:35:48 +0000"  >&lt;p&gt;Regarding sync (see embedded code from next(int) method).&lt;/p&gt;

&lt;p&gt;This part has to be sync&apos;ed, as it not only relies on the internal variable mti, it also modifies the internal array mt:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;        if (mti &amp;gt;= N) { // generate N words at one time
            int mtNext = mt[0];
            for (int k = 0; k &amp;lt; N - M; ++k) {
                int mtCurr = mtNext;
                mtNext = mt[k + 1];
                y = (mtCurr &amp;amp; 0x80000000) | (mtNext &amp;amp; 0x7fffffff);
                mt[k] = mt[k + M] ^ (y &amp;gt;&amp;gt;&amp;gt; 1) ^ MAG01[y &amp;amp; 0x1];
            }
            for (int k = N - M; k &amp;lt; N - 1; ++k) {
                int mtCurr = mtNext;
                mtNext = mt[k + 1];
                y = (mtCurr &amp;amp; 0x80000000) | (mtNext &amp;amp; 0x7fffffff);
                mt[k] = mt[k + (M - N)] ^ (y &amp;gt;&amp;gt;&amp;gt; 1) ^ MAG01[y &amp;amp; 0x1];
            }
            y = (mtNext &amp;amp; 0x80000000) | (mt[0] &amp;amp; 0x7fffffff);
            mt[N - 1] = mt[M - 1] ^ (y &amp;gt;&amp;gt;&amp;gt; 1) ^ MAG01[y &amp;amp; 0x1];

            mti = 0;
        }

        y = mt[mti++];
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This part does not need to be sync&apos;ed:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;        // tempering
        y ^=  y &amp;gt;&amp;gt;&amp;gt; 11;
        y ^= (y &amp;lt;&amp;lt;   7) &amp;amp; 0x9d2c5680;
        y ^= (y &amp;lt;&amp;lt;  15) &amp;amp; 0xefc60000;
        y ^=  y &amp;gt;&amp;gt;&amp;gt; 18;

        return y &amp;gt;&amp;gt;&amp;gt; (32 - bits);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, have a more fine-grained sync would not be of much benefit imho. Maybe adding a sync&apos;ed wrapper of RandomGenerator makes sense, which takes another RandomGenerator as input?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To do that is a huge effort. For now, users must assume that no class (except immutable ones) is thread-safe.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;for all of CM indeed, for just the RNGs this would be feasible. I think the problem here also comes from the fact that the JDK RNG is thread-safe, so people may tend to assume the same is true for CM RNGs.&lt;/p&gt;</comment>
                            <comment id="13498850" author="erans" created="Fri, 16 Nov 2012 15:11:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;a more fine-grained sync would not be of much benefit&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Maybe, maybe not.&lt;br/&gt;
Another approach (and preferrable in my non-expert opinion) is to use the JDK&apos;s &lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/atomic/package-summary.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;atomic utilities&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;for just the RNGs this would be feasible&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree, modulo the above remark.&lt;/p&gt;</comment>
                            <comment id="13498870" author="erans" created="Fri, 16 Nov 2012 15:40:28 +0000"  >&lt;p&gt;Referring to the quoted code block.&lt;/p&gt;

&lt;p&gt;Only the block that will be executed if the condition is true must synchronized (assuming that &quot;mti&quot; is to be &quot;volatile&quot;).&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (mti &amp;gt;= N) {
 updateMtArray();
 mti = 0;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where &quot;updateMtArray()&quot; would be &quot;synchronized&quot;.&lt;br/&gt;
We thus have a finer-grained thread-safety (locking occurs every N calls).&lt;/p&gt;</comment>
                            <comment id="13498871" author="tn" created="Fri, 16 Nov 2012 15:46:37 +0000"  >&lt;p&gt;The moment you did the check &quot;if (mti &amp;gt;= N)&quot; another thread could already have updated mti, invalidating your program flow.&lt;/p&gt;</comment>
                            <comment id="13498896" author="erans" created="Fri, 16 Nov 2012 16:33:48 +0000"  >&lt;p&gt;Oh, yes. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Another related issue is that this implementation is a translation from the original algorithm.&lt;br/&gt;
Can we make it thread-safe and still make that claim?&lt;/p&gt;

&lt;p&gt;To make it thread-safe but not too inefficient, can we depart from the standard implementation?&lt;/p&gt;

&lt;p&gt;How much inefficiency is acceptable from such a utility? If efficiency is not critical, your suggestion of a wrapper is possibly the right answer.&lt;/p&gt;</comment>
                            <comment id="13498975" author="luc" created="Fri, 16 Nov 2012 18:00:32 +0000"  >&lt;blockquote&gt;&lt;p&gt;Can we make it thread-safe and still make that claim?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, just do what was said a few comments above: synchronize the block identified above.&lt;/p&gt;</comment>
                            <comment id="13499026" author="psteitz" created="Fri, 16 Nov 2012 19:15:23 +0000"  >&lt;p&gt;I am -1 on attempting to make this class threadsafe.  Each generating thread should have its own generator.  If users really need a shared singleton generator, they should do as Gilles suggests, which is to wrap and then only they will pay the sync overhead cost.  &lt;/p&gt;</comment>
                            <comment id="13499284" author="erans" created="Sat, 17 Nov 2012 00:46:19 +0000"  >&lt;p&gt;Actually, it was Thomas&apos;s suggestion that we could provide an implementation of &quot;RandomGenerator&quot; that, IIUC, would wrap another instance and override all the methods with the &quot;synchronized&quot; keyword.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
/**
 * Any &lt;span class=&quot;code-quote&quot;&gt;&quot;RandomGenerator&quot;&lt;/span&gt; can be thread-safe &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; it is used through
 * an instance of &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; class.
 */
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class SynchronizedRandomGenerator {
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; RandomGenerator wrapped;

  /**
   * @param rng Generator whose methods will be called through
   * their corresponding overridden &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; version.
   * To ensure thread-safety, the wrapped generator &amp;lt;em&amp;gt;must&amp;lt;/em&amp;gt;
   * not be used directly.
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; SynchronizedRandomGenerator(RandomGenerator rng) {
    wrapped = rng;
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; void setSeed(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; seed) {
    wrapped.setSeed(seed);
  }

  &lt;span class=&quot;code-comment&quot;&gt;// [Similarly &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; all methods.]
&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Any caveat with that solution?&lt;/p&gt;</comment>
                            <comment id="13499297" author="psteitz" created="Sat, 17 Nov 2012 01:13:05 +0000"  >&lt;p&gt;Sounds reasonable to me.&lt;/p&gt;</comment>
                            <comment id="13499573" author="erans" created="Sun, 18 Nov 2012 01:04:35 +0000"  >&lt;p&gt;I&apos;ve implemented that class.&lt;br/&gt;
But I have a hard time implementing a unit test that would consistently reproduce the error reported here: It does not necessarily happen even with a fairly large number of threads.&lt;/p&gt;

&lt;p&gt;The unit test with the synchronized wrapper passes, but it would have been more convincing to have both, showing that the wrapper indeed solves the problem.&lt;/p&gt;</comment>
                            <comment id="13499575" author="erans" created="Sun, 18 Nov 2012 01:07:22 +0000"  >&lt;p&gt;Here are the Java files.&lt;br/&gt;
Ideas to improve the unit tests welcome.&lt;/p&gt;</comment>
                            <comment id="13499634" author="darksnake" created="Sun, 18 Nov 2012 07:12:49 +0000"  >&lt;p&gt;The synchronized wrapper works fine. I can not guarantee that it does not produce error at all because I made only finite number of runs, but no errors so far.&lt;/p&gt;</comment>
                            <comment id="13499680" author="tn" created="Sun, 18 Nov 2012 10:35:53 +0000"  >&lt;blockquote&gt;
&lt;p&gt;But I have a hard time implementing a unit test that would consistently reproduce the error reported here: It does not necessarily happen even with a fairly large number of threads.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;hmm, I am not sure if this is necessary or achievable. When looking at comparable things (e.g. commons-collections, or openjdk), there also do not exist specific tests to prove that the synchronization prevents a race condition in not thread-safe code.&lt;/p&gt;

&lt;p&gt;I think in this case it would be sufficient to do a proof by induction (sort of):&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;we know that e.g. MersenneTwister is not thread-safe&lt;/li&gt;
	&lt;li&gt;by providing a fully synchronized wrapper we make it thread-safe&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;btw. in the test you refer to &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-900&quot; title=&quot;Font problem in LocalizedFormatsTest.java header&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-900&quot;&gt;&lt;del&gt;MATH-900&lt;/del&gt;&lt;/a&gt; while its actually &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-899&quot; title=&quot;A random crash of MersenneTwister random generator&quot; class=&quot;issue-link&quot; data-issue-key=&quot;MATH-899&quot;&gt;&lt;del&gt;MATH-899&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13499852" author="erans" created="Sun, 18 Nov 2012 17:44:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;it would be sufficient to do a proof by induction (sort of): &lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, this could be said for any piece of code: we must have property &amp;lt;x&amp;gt;, so we write code that implements &amp;lt;x&amp;gt;. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
We write unit tests that actually show that the code behaves as expected.&lt;/p&gt;

&lt;p&gt;After spending quite some time on the attached code, I of course agree that it is complicated in some situations. In this case, the code is simple enough as to not necessitates a unit test.&lt;br/&gt;
But the issue will crop up again if we start introducing more &quot;complicated&quot; code (like the utilities in the &quot;java.util.concurrent&quot; package).&lt;/p&gt;

&lt;p&gt;So do I commit just the class and no unit test, or just the unit test of the synchronizing wrapper?&lt;/p&gt;</comment>
                            <comment id="13499869" author="tn" created="Sun, 18 Nov 2012 18:35:02 +0000"  >&lt;p&gt;You could and should provide a test that shows that the wrapper provides the same result as a wrapped RandomGenerator (using the same seed), imho.&lt;/p&gt;</comment>
                            <comment id="13499882" author="psteitz" created="Sun, 18 Nov 2012 19:38:14 +0000"  >&lt;p&gt;I think the reason that the unit test does not work is that Junit does not actually see the exception.  The Executor will not propagate it.  Changing the body of the core method (and other sigs, etc) to the following, I can get consistent failures when I execute with -Dtest=SynchronizedRandomGenratorTest&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; RandomGenerator rng = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MersenneTwister();
&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; RandomGenerator wrapper = sync ? &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SynchronizedRandomGenerator(rng) : rng;
&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; AtomicBoolean failed = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; AtomicBoolean(&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; ExecutorService exec = Executors.newFixedThreadPool(numThreads);
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; numGenerators; i++) {
    exec.execute(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Runnable&lt;/span&gt;() {
        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void run() {
            &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; j = 0; j &amp;lt; numSamples; j++) {
                &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
                    wrapper.nextGaussian();   
                } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (ArrayIndexOutOfBoundsException ex) {
                    failed.getAndSet(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
                    &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
                }
             }
         }
         });
        }
        exec.shutdown();
        exec.awaitTermination(100, TimeUnit.SECONDS);
        Assert.assertTrue(failed.get());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What I don&apos;t understand is why this consistently succeeds when executed as a single test, but usually fails when executed as part of the full test suite with&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 mvn clean test
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I would say in any case there is no need to add a unit test to show the non-thread-safety of MersenneTwister or to verify that adding synchronization does what it says it does, i.e., I would say go ahead and commit the wrapper with no test class.&lt;/p&gt;</comment>
                            <comment id="13499901" author="erans" created="Sun, 18 Nov 2012 20:54:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think the reason that the unit test does not work is that Junit does not actually see the exception.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s not the problem. The test code works correctly and failures &lt;em&gt;are&lt;/em&gt; reported (and seen by Junit). Just they do not occur consistently, as must be expected, I assume, because the execution itself becomes random (subject to the threads scheduling by the system).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;commit the wrapper with no test class.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ll do that then.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;You could and should provide a test that shows that the wrapper provides the same result as a wrapped RandomGenerator (using the same seed)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t understand.&lt;/p&gt;</comment>
                            <comment id="13499903" author="erans" created="Sun, 18 Nov 2012 21:01:04 +0000"  >&lt;p&gt;Wrapper committed in revision 1410990.&lt;/p&gt;</comment>
                            <comment id="13499918" author="erans" created="Sun, 18 Nov 2012 21:40:15 +0000"  >&lt;p&gt;&quot;MersenneTwister&quot; not being thread-safe, if an instance is to be accessed from multiple threads, it must be through the wrapper proposed in this discussion.&lt;/p&gt;</comment>
                            <comment id="13499923" author="tn" created="Sun, 18 Nov 2012 22:07:22 +0000"  >&lt;p&gt;thanks!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I don&apos;t understand.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Nevermind, I just had something like this in mind:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  RandomGenerator orig = new MersenneTwister(1234l);
  RandomGenerator wrapper = new SynchronizedRandomGenerator(new MersenneTwister(1234l));

  for (i = 0; i &amp;lt; 100; i++) {
     assertEquals(orig.nextGaussian(), wrapper.nextGaussian());
  }
  ... // similar for the other methods
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13499944" author="erans" created="Sun, 18 Nov 2012 22:50:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;I just had something like this in mind &lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m ashamed to admit that you are perfectly right... Cf. revision 1411009.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12553933" name="SynchronizedRandomGenerator.java" size="3137" author="erans" created="Sun, 18 Nov 2012 01:07:22 +0000"/>
                            <attachment id="12553934" name="SynchronizedRandomGeneratorTest.java" size="3684" author="erans" created="Sun, 18 Nov 2012 01:07:22 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 16 Nov 2012 08:45:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>258143</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0kn9r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>118587</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>