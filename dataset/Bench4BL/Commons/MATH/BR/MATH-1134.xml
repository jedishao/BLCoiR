<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Nov 18 23:39:48 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MATH-1134/MATH-1134.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MATH-1134] unsafe initialization in BicubicSplineInterpolatingFunction</title>
                <link>https://issues.apache.org/jira/browse/MATH-1134</link>
                <project id="12310485" key="MATH">Commons Math</project>
                    <description>&lt;p&gt;The lazy initialization of the internal array of partialDerivatives in BicubicSplineInterpolatingFunction is not thread safe. If multiple threads call any of the partialDerivative functions concurrently one thread may start the initialization and others will see the array is non-null and assume it is fully initialized. If the internal array of partial derivatives was initialized in the constructor this would not be a problem.&lt;/p&gt;

&lt;p&gt;i.e. the following check in partialDerivative(which, x, y)&lt;br/&gt;
        if (partialDerivatives == null) &lt;/p&gt;
{
            computePartialDerivatives();
        }
&lt;p&gt;will start the initialization. However in computePartialDerivatives()&lt;br/&gt;
        partialDerivatives = new BivariateFunction&lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;lastI&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;lastJ&amp;#93;&lt;/span&gt;;&lt;/p&gt;

&lt;p&gt;makes it appear to other threads as the the initialization has completed when it may not have.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12724526">MATH-1134</key>
            <summary>unsafe initialization in BicubicSplineInterpolatingFunction</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="dscherger">Derek Scherger</reporter>
                        <labels>
                    </labels>
                <created>Mon, 30 Jun 2014 19:35:24 +0000</created>
                <updated>Fri, 27 Feb 2015 14:13:19 +0000</updated>
                            <resolved>Fri, 27 Feb 2015 14:13:19 +0000</resolved>
                                    <version>3.3</version>
                                    <fixVersion>3.4</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="14048254" author="erans" created="Mon, 30 Jun 2014 22:28:24 +0000"  >&lt;p&gt;Fields made &quot;final&quot; in revision 1606940.&lt;br/&gt;
Could you please check the new code?&lt;br/&gt;
We&apos;d also be interested to get more unit tests for this interpolator. You are welcome to provide feedback.&lt;/p&gt;</comment>
                            <comment id="14048261" author="dscherger" created="Mon, 30 Jun 2014 22:37:12 +0000"  >&lt;p&gt;Wow, that was fast. At a glance the new code looks good, it will certainly fix the race I found earlier today.&lt;br/&gt;
The only downside to initializing everything in the constructor is that you pay that cost up front, and if you weren&apos;t going to use the partial derivatives that&apos;s wasted. Not sure if that&apos;s a big deal or not.&lt;/p&gt;</comment>
                            <comment id="14048313" author="psteitz" created="Mon, 30 Jun 2014 23:39:35 +0000"  >&lt;p&gt;An alternative would be to just put the null check / initialization code above in a sync block.  The performance hit caused by the change is probably not large, but users who just want to interpolate may be annoyed by it.  &lt;/p&gt;</comment>
                            <comment id="14048684" author="erans" created="Tue, 1 Jul 2014 09:31:36 +0000"  >&lt;p&gt;Another possibility is to add a constructor with a flag indicating that the derivatives must be computed.&lt;/p&gt;</comment>
                            <comment id="14048788" author="sebb@apache.org" created="Tue, 1 Jul 2014 11:59:16 +0000"  >&lt;p&gt;Yet another might be to use the IODH pattern (I&apos;ve not checked if that could work here)&lt;/p&gt;</comment>
                            <comment id="14049012" author="erans" created="Tue, 1 Jul 2014 16:16:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;IODH&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think so: the fields are not static.&lt;/p&gt;</comment>
                            <comment id="14049077" author="psteitz" created="Tue, 1 Jul 2014 17:03:34 +0000"  >&lt;p&gt;Yes, we are dealing with cached member data here.  There are four logical options, that I will list in my personal order of preference&lt;/p&gt;

&lt;p&gt;0) Revert the change and just document that the class is not threadsafe.  This sounds wimpy, but basically the choice is between burdening all users of the class with the overhead associated with one of the other options or just burdening those who actually want to use instances as singletons with protecting them themselves.  That is the strategy we have used elsewhere and it has always made sense to me - users who use math objects that have internal state know better than us what the concurrency context of their applications are and can eat all and only the overhead they need to ensure correctness of their code.  We should make it clear which objects maintain internal state and mark them as not threadsafe, but we should not force ourselves to precompute everything or forego caching / mutability to maintain threadsafety everywhere.&lt;br/&gt;
1) Protect the cached data by synchronizing access to it (adding sync blocks / explicit locks where needed)&lt;br/&gt;
2) Get rid of the caching - actually compute the partials each time they are requested&lt;br/&gt;
3) State of trunk as of r1606940 (force cache preload at construction)&lt;/p&gt;

&lt;p&gt;Gilles suggestion to make 3) itself configurable sort of combines 3) and 0) IIUC what he is suggesting.&lt;/p&gt;</comment>
                            <comment id="14049121" author="erans" created="Tue, 1 Jul 2014 17:54:56 +0000"  >&lt;p&gt;0) is a bit sad, because it can be thread-safe in an obvious way (all fields &quot;final&quot;).&lt;/p&gt;

&lt;p&gt;Affirming thread-safety with 1) might not be as obvious. If only the &quot;private&quot; method that computed the derivatives were &quot;synchronized&quot;, there might still be race conditions (leading to multiple computations of the same fields). While having all accessors synchronized will bring a penalty to applications that really make concurrent accesses.&lt;/p&gt;

&lt;p&gt;2) is not efficient, always (if derivatives are used).&lt;/p&gt;

&lt;p&gt;3) is not efficient, at instantiation.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Gilles suggestion to make 3) itself configurable sort of combines 3) and 0)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, IIUC what you means by &quot;combines&quot;.&lt;br/&gt;
Users who need the derivatives would have to specifically request that derivatives are computed (at instantiation), while the default would leave them at &quot;null&quot; (and if called later a NPE will be raised, by the JVM).&lt;br/&gt;
[This is my preferred option. And you didn&apos;t rank it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;]&lt;/p&gt;

&lt;p&gt;Another option might be to deprecate the derivatives code altogether. And perhaps move it to a subclass. And reimplement it, using the &quot;o.a.c.m.analysis.differentiation.DerivativeStructure&quot;.&lt;/p&gt;</comment>
                            <comment id="14049576" author="dscherger" created="Wed, 2 Jul 2014 03:20:48 +0000"  >&lt;p&gt;I&apos;m all for callers having the option to not initialize for partial derivatives on construction, as long as there is some explicit and obvious way to ensure that everything has been initialized before unleashing a bunch of threads on the interpolator.&lt;/p&gt;

&lt;p&gt;At the moment, it&apos;s not obvious that there is any internal state that requires initialization before using the class, the only way to find out is to experience the problem of incomplete initialization, and then to look at the source to see what is going on and discover that there is lazy initialization being done in both the partialDerivative&lt;span class=&quot;error&quot;&gt;&amp;#91;XY...&amp;#93;&lt;/span&gt; and value methods. The solution I&apos;ve landed on for now is to make an initial partialDerivativeX(x,y) call as the objects are constructed, but some sort of explicit init() or alternative constructor with eager/lazy init options would be better.&lt;/p&gt;

&lt;p&gt;I&apos;m not particularly fond of the idea of declaring methods synchronized unless that&apos;s really what is required to make them safe. The overhead there may be small, but that&apos;s relative and when running on many threads doing lots of computation it adds up, and sometimes becomes a significant problem, so if it can be avoided all the better. Similarly, recalculating the partials on every call is not very good if they can be computed once and re-used for every subsequent call, which seems like it could be a major performance win.&lt;/p&gt;
</comment>
                            <comment id="14050506" author="erans" created="Wed, 2 Jul 2014 18:14:34 +0000"  >&lt;p&gt;New constructor added in r1607434: a flag will indicate whether initialization of the internal data needed to call the partial derivatives methods is to be performed. If set to false (default), calling a method anyway will trigger a NPE.&lt;/p&gt;

&lt;p&gt;Not sure that &quot;false&quot; should be the default...&lt;/p&gt;</comment>
                            <comment id="14050510" author="psteitz" created="Wed, 2 Jul 2014 18:19:29 +0000"  >&lt;p&gt;I don&apos;t like the NPE part.  Can we at least make it so that the flag basically says precompute and cache derivatives and false means there is no caching (i.e. they are computed each time).&lt;/p&gt;</comment>
                            <comment id="14050703" author="erans" created="Wed, 2 Jul 2014 21:04:17 +0000"  >&lt;blockquote&gt;&lt;p&gt;I don&apos;t like the NPE part.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is similar to how other parts of the CM code would behave if preconditions are not satisfied. Here, the user requests an interpolating function whose base interface is a &quot;BivariateFunction&quot;; the derivative part is a &quot;bonus&quot; for those who comply with the precondition (which is that the flag must be set to true).&lt;/p&gt;

&lt;p&gt;In fact, I chose &quot;false&quot; as the default because you advocated that a user who just wants to interpolate should not pay the price needed to use the derivative functionality.&lt;br/&gt;
But the converse is safer: let then the default be &quot;true&quot;; a user that explicitly requests no initialization can only blame himself if he calls one of the derivative methods afterwards.&lt;/p&gt;

&lt;p&gt;Using on-demand caching complicates the code and prevents making the field final.&lt;br/&gt;
Also, the derivatives were initially intended for internal purposes (to be used in &quot;TricubicInterpolator&quot;).&lt;/p&gt;

&lt;p&gt;The initial code (initialization at access time) was really based on (untested) efficiency considerations, and I would consider it premature optimization. As it is now the code is both safe (if the user abides by the simple precondition) and efficient.&lt;/p&gt;</comment>
                            <comment id="14050822" author="psteitz" created="Wed, 2 Jul 2014 22:43:33 +0000"  >&lt;p&gt;Attached is a patch against the pre-1606940 code that should fix the race.  Since we require JDK 1.5+, the double-checked locking should be OK.  This fix avoids having to add constructor arguments, etc. and will only impose sync overhead (one time) for those wanting the partials.&lt;/p&gt;</comment>
                            <comment id="14051233" author="erans" created="Thu, 3 Jul 2014 09:22:08 +0000"  >&lt;p&gt;It&apos;s an elegant fix if the goal is to have as little change as possible.&lt;br/&gt;
I still think that the goal of having all fields final has higher priority (as per our numerous discussions on avoiding non-final fields).&lt;/p&gt;

&lt;p&gt;I won&apos;t oppose your applying this patch if other people think that it&apos;s better than the current version.&lt;/p&gt;</comment>
                            <comment id="14051943" author="erans" created="Thu, 3 Jul 2014 21:46:22 +0000"  >&lt;p&gt;Phil,&lt;/p&gt;

&lt;p&gt;You seem always reluctant to let the code throw a NPE. Although I think that it is perfectly fine behaviour to signal a programming error, would you like it better if we change the exception type to &quot;MathIllegalStateException&quot;?&lt;/p&gt;</comment>
                            <comment id="14052634" author="psteitz" created="Fri, 4 Jul 2014 19:44:16 +0000"  >&lt;p&gt;I agree that ISE would be better, but I think the API is a little awkward.  The r1607434 code does clearly document preconditions so the RTE would not be &quot;unexpected&quot; but I think the current code forces users to think about the constructor flag when we can just fix the code to be threadsafe.  I think we should strive to make our APIs as simple as possible, avoiding situations where you have to provide special constructor arguments for instance methods to work when we can.&lt;/p&gt;

&lt;p&gt;I think we should either get rid of the partials caching, have the flag control that (meaning false means do not cache partials), or just make the cache initialization threadsafe (the patch I provided is one way to do this).&lt;/p&gt;</comment>
                            <comment id="14337312" author="tn" created="Wed, 25 Feb 2015 22:07:35 +0000"  >&lt;p&gt;BicubicSplineInterpolatingFunction has been already been deprecated for 3.4 and now removed in 4.0 so I would suggest to close this issue or is there still anything planned for 3.5?&lt;/p&gt;</comment>
                            <comment id="14337339" author="erans" created="Wed, 25 Feb 2015 22:19:27 +0000"  >&lt;p&gt;Closing is fine with me.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12653709" name="MATH-1134.patch" size="1194" author="psteitz" created="Wed, 2 Jul 2014 22:43:33 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 30 Jun 2014 22:28:24 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>402709</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 38 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1xbcn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>402776</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>