<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 02 17:59:26 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/MATH-199/MATH-199.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[MATH-199] exception in LevenbergMarquardtEstimator</title>
                <link>https://issues.apache.org/jira/browse/MATH-199</link>
                <project id="12310485" key="MATH">Commons Math</project>
                    <description>&lt;p&gt;I get this exception:&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: -1&lt;br/&gt;
       at org.apache.commons.math.estimation.LevenbergMarquardtEstimator.qrDecomposition(LevenbergMarquardtEstimator.java:772)&lt;br/&gt;
       at org.apache.commons.math.estimation.LevenbergMarquardtEstimator.estimate(LevenbergMarquardtEstimator.java:232)&lt;br/&gt;
       at quadraticFitterProblem.QuadraticFitterProblem.&amp;lt;init&amp;gt;(QuadraticFitterProblem.java:27)&lt;br/&gt;
       at quadraticFitterProblem.QuadraticFitterProblem.main(QuadraticFitterProblem.java:40)&lt;br/&gt;
on the code below.&lt;/p&gt;

&lt;p&gt;The exception does not occur all the weights in the quadraticFitter are 0.0;&lt;/p&gt;


&lt;p&gt;---------------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;package quadraticFitterProblem;&lt;/p&gt;

&lt;p&gt;import org.apache.commons.math.estimation.EstimationException;&lt;br/&gt;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;&lt;br/&gt;
//import org.apache.commons.math.estimation.WeightedMeasurement;&lt;/p&gt;

&lt;p&gt;import com.strategicanalytics.dtd.data.smoothers.QuadraticFitter;&lt;/p&gt;

&lt;p&gt;public class QuadraticFitterProblem {&lt;/p&gt;

&lt;p&gt;       private QuadraticFitter quadraticFitter;&lt;/p&gt;

&lt;p&gt;       public QuadraticFitterProblem() {&lt;br/&gt;
         // create the uninitialized fitting problem&lt;br/&gt;
         quadraticFitter = new QuadraticFitter();&lt;/p&gt;

&lt;p&gt;         quadraticFitter.addPoint (0,  -3.182591015485607, 0.0);&lt;br/&gt;
         quadraticFitter.addPoint (1,  -2.5581184967730577, 4.4E-323);&lt;br/&gt;
         quadraticFitter.addPoint (2,  -2.1488478161387325, 1.0);&lt;br/&gt;
         quadraticFitter.addPoint (3,  -1.9122489313410047, 4.4E-323);&lt;br/&gt;
         quadraticFitter.addPoint (4,  1.7785661310051026, 0.0);&lt;/p&gt;

&lt;p&gt;         try &lt;/p&gt;
{
           // solve the problem, using a Levenberg-Marquardt algorithm with
default settings
           LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
           //WeightedMeasurement[] wm = quadraticFitter.getMeasurements();
           estimator.estimate(quadraticFitter);

         }
&lt;p&gt; catch (EstimationException ee) &lt;/p&gt;
{
               System.err.println(ee.getMessage());
         }
&lt;p&gt;       }&lt;/p&gt;

&lt;p&gt;       /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@param args&lt;br/&gt;
        *&lt;br/&gt;
        */&lt;br/&gt;
       public static void main(String[] args) 
{

                       new QuadraticFitterProblem();
                       System.out.println (&quot;Done.&quot;);
       }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------------------------------------&lt;br/&gt;
import org.apache.commons.math.estimation.EstimatedParameter;&lt;br/&gt;
//import org.apache.commons.math.estimation.EstimationException;&lt;br/&gt;
//import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;&lt;br/&gt;
import org.apache.commons.math.estimation.SimpleEstimationProblem;&lt;br/&gt;
import org.apache.commons.math.estimation.WeightedMeasurement;&lt;/p&gt;

&lt;p&gt;public class QuadraticFitter extends SimpleEstimationProblem {&lt;/p&gt;

&lt;p&gt;       // y = a x&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt; + b x + c&lt;br/&gt;
   private EstimatedParameter a;&lt;br/&gt;
   private EstimatedParameter b;&lt;br/&gt;
   private EstimatedParameter c;&lt;/p&gt;

&lt;p&gt;   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;constructor&lt;br/&gt;
    *&lt;br/&gt;
    *Fitter for a quadratic model to a sample of 2D points.&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;The model is y&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; = a x&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt; + b x + c&lt;/li&gt;
	&lt;li&gt;its three parameters of the model are a, b and c.&amp;lt;/p&amp;gt;&lt;br/&gt;
    */&lt;br/&gt;
   public QuadraticFitter() 
{

       // three parameters of the model
       a = new EstimatedParameter(&quot;a&quot;, 0.0);
       b = new EstimatedParameter(&quot;b&quot;, 0.0);
       c = new EstimatedParameter(&quot;c&quot;, 0.0);

       // provide the parameters to the base class which
       // implements the getAllParameters and getUnboundParameters methods
       addParameter(a);
       addParameter(b);
       addParameter(c);
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Add a sample point&lt;br/&gt;
    *&lt;/li&gt;
	&lt;li&gt;@param x abscissa&lt;/li&gt;
	&lt;li&gt;@param y ordinate&lt;/li&gt;
	&lt;li&gt;@param w weight&lt;br/&gt;
    */&lt;br/&gt;
   public void addPoint(double x, double y, double w) 
{
       addMeasurement(new LocalMeasurement(x, y, w));
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Get the value of the quadratic coefficient.&lt;br/&gt;
    *&lt;/li&gt;
	&lt;li&gt;@return the value of a for the quadratic model&lt;/li&gt;
	&lt;li&gt;y = a x&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt; + b x + c&lt;br/&gt;
    */&lt;br/&gt;
   public double getA() 
{
       return a.getEstimate();
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Get the value of the linear coefficient.&lt;br/&gt;
    *&lt;/li&gt;
	&lt;li&gt;@return the value of b for the quadratic model&lt;/li&gt;
	&lt;li&gt;y = a x&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt; + b x + c&lt;br/&gt;
    */&lt;br/&gt;
   public double getB() 
{
       return b.getEstimate();
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Get the value of the constant coefficient.&lt;br/&gt;
    *&lt;/li&gt;
	&lt;li&gt;@return the value of ac for the quadratic model&lt;/li&gt;
	&lt;li&gt;y = a x&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt; + b x + c&lt;br/&gt;
    */&lt;br/&gt;
   public double getC() 
{
       return c.getEstimate();
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Get the theoretical value of the model for some x.&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;The theoretical value is the value computed using&lt;/li&gt;
	&lt;li&gt;the current state of the problem parameters.&amp;lt;/p&amp;gt;&lt;br/&gt;
    *&lt;/li&gt;
	&lt;li&gt;Note the use of H&#246;rner&apos;s method (synthetic division) for&lt;br/&gt;
evaluating polynomials,&lt;/li&gt;
	&lt;li&gt;(more efficient)&lt;br/&gt;
    *&lt;/li&gt;
	&lt;li&gt;@param x explanatory variable&lt;/li&gt;
	&lt;li&gt;@return the theoretical value y = a x&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt; + b x + c&lt;br/&gt;
    */&lt;br/&gt;
   public double theoreticalValue(double x) 
{
       //System.out.println (&quot;x = &quot; + x + &quot;  a.getEstimate() = &quot; +
a.getEstimate() + &quot;  b.getEstimate() = &quot; + b.getEstimate() + &quot;
c.getEstimate() = &quot; + c.getEstimate());
       return ( (a.getEstimate() * x + b.getEstimate() ) * x +
c.getEstimate());
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Get the partial derivative of the theoretical value&lt;/li&gt;
	&lt;li&gt;of the model for some x.&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;The derivative is computed using&lt;/li&gt;
	&lt;li&gt;the current state of the problem parameters.&amp;lt;/p&amp;gt;&lt;br/&gt;
    *&lt;/li&gt;
	&lt;li&gt;@param x explanatory variable&lt;/li&gt;
	&lt;li&gt;@param parameter estimated parameter (either a, b, or c)&lt;/li&gt;
	&lt;li&gt;@return the partial derivative dy/dp&lt;br/&gt;
    */&lt;br/&gt;
   private double partial(double x, EstimatedParameter parameter) {&lt;br/&gt;
       // since we know the only parameters are a, b and c in this&lt;br/&gt;
       // class we simply use &quot;==&quot; for efficiency&lt;br/&gt;
       if (parameter == a) 
{
           return x * x;
       }
&lt;p&gt; else if (parameter == b) &lt;/p&gt;
{
           return x;
       }
&lt;p&gt; else &lt;/p&gt;
{
           return 1.0;
       }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   }&lt;/p&gt;


&lt;p&gt;   /** Internal measurements class.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;The measurement is the y value for a fixed specified x.&amp;lt;/p&amp;gt;&lt;br/&gt;
    */&lt;br/&gt;
   private class LocalMeasurement extends WeightedMeasurement {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;       static final long serialVersionUID = 1;&lt;/p&gt;

&lt;p&gt;       private final double x;&lt;/p&gt;

&lt;p&gt;       // constructor&lt;br/&gt;
       public LocalMeasurement(double x, double y, double w) &lt;/p&gt;
{
           super(w, y);
           this.x = x;
       }

&lt;p&gt;       public double getTheoreticalValue() &lt;/p&gt;
{
           // the value is provided by the model for the local x
           return theoreticalValue(x);
       }

&lt;p&gt;       public double getPartial(EstimatedParameter parameter) &lt;/p&gt;
{
           // the value is provided by the model for the local x
           return partial(x, parameter);
       }

&lt;p&gt;   }&lt;/p&gt;

&lt;p&gt; }&lt;/p&gt;</description>
                <environment>&lt;p&gt;Windows XP&lt;br/&gt;
Java 6&lt;/p&gt;</environment>
        <key id="12392015">MATH-199</key>
            <summary>exception in LevenbergMarquardtEstimator</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="mickeydog">Mick</reporter>
                        <labels>
                    </labels>
                <created>Thu, 20 Mar 2008 22:56:33 +0000</created>
                <updated>Thu, 23 Apr 2009 02:26:17 +0000</updated>
                            <resolved>Sun, 23 Mar 2008 13:40:12 +0000</resolved>
                                    <version>1.2</version>
                                                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12581383" author="luc" created="Sun, 23 Mar 2008 13:40:12 +0000"  >&lt;p&gt;Fixed in svn as of r640205&lt;/p&gt;

&lt;p&gt;The problem was due to an overflow in Q.R decomposition. One of  the transformed columns had both infinite and NaN elements, so the test of the norm was never met and a column index was never set.&lt;/p&gt;

&lt;p&gt;The fix consist in detecting non-numeric norms and throwing an EstimationException stating the Q.R decomposition could not be performed.&lt;/p&gt;</comment>
                            <comment id="12581536" author="mickeydog" created="Mon, 24 Mar 2008 13:56:34 +0000"  >&lt;p&gt;Is it accurate to say that the problem is caused by the 4.4E-323 in the error term?&lt;br/&gt;
(ie, the 4.4E-323 causes one of the transformed columns to have values of Infinity or NaN?&lt;/p&gt;

&lt;p&gt;If I eliminate those error terms, e.g.:&lt;br/&gt;
	  quadraticFitter.addPoint (0,  -3.182591015485607, 0.0);&lt;br/&gt;
	  quadraticFitter.addPoint (1,  -2.5581184967730577, 0.5);&lt;br/&gt;
	  quadraticFitter.addPoint (2,  -2.1488478161387325, 1.0);&lt;br/&gt;
	  quadraticFitter.addPoint (3,  -1.9122489313410047, 0.5);&lt;br/&gt;
	  quadraticFitter.addPoint (4,  1.7785661310051026, 0.0);&lt;br/&gt;
then, indeed, the error does not occur.&lt;/p&gt;

&lt;p&gt;I have a concern that, while it is true that  4.4E-323 is a number of extremely small magnitude, it is a vaild double, but using it causes an exception.&lt;br/&gt;
:Perhaps I am not seeing this correctly.&lt;/p&gt;
</comment>
                            <comment id="12581558" author="luc" created="Mon, 24 Mar 2008 15:09:08 +0000"  >&lt;p&gt;Yes, this is this small value that triggers the error. It is a valid number but during the Q.R decomposition, this number is used in several operations. One of these operations lead to an overflow.&lt;/p&gt;

&lt;p&gt;At line 785 of LevenbergMarquardt.java, we compute :  double betak = 1.0 / (ak2 - akk * alpha)&lt;/p&gt;

&lt;p&gt;With the very small values of the example, the value for betak overflows while processing the second column (first column is computed without problem). The denominator ak2 - akk * alpha has a value of 1.43e-322 which can be handled by double. It&apos;s inverse is 6.9e321, far larger than the Double.MAX_VALUE which is about 1.8e+308. The result of the computation is that betak is set to positive infinity. The rest of the computation behaves badly with such a value. Some of the elements of third column are set to infinity, others are set to NaN.&lt;/p&gt;

&lt;p&gt;The fact is that despite many representable double number have a representable inverse in IEE754, it is not true for all.&lt;/p&gt;</comment>
                            <comment id="12581577" author="mickeydog" created="Mon, 24 Mar 2008 15:57:00 +0000"  >&lt;p&gt;That being the case, could the commons math library define a constant such that its inverse it  equal to Double.MAX_VALUE?&lt;br/&gt;
I could then use this as a limit.&lt;/p&gt;</comment>
                            <comment id="12581590" author="luc" created="Mon, 24 Mar 2008 16:29:26 +0000"  >&lt;p&gt;Numbers that behave well are &quot;normal numbers&quot; as defined by IEEE754. Numbers to avoid in your case are &quot;subnormal numbers&quot;. You can use Double.MIN_NORMAL if you use Java 6, or simply 4 / Double.MAX_VALUE (which is almost but not exactly the same value) if you use an earlier version of Java.&lt;/p&gt;

&lt;p&gt;Beware that this may not be enough because you can test only the numbers you put in the method, not the intermediate values computed within it. For example the ak2, akk and alpha values are not available in the statement above, and betak is available only on output.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure such constants have a place in &lt;span class=&quot;error&quot;&gt;&amp;#91;math&amp;#93;&lt;/span&gt;, but this is only a personal opinion.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 23 Mar 2008 13:40:12 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>34160</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 37 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0rvx3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>160815</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>