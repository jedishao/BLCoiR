<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun Nov 20 16:12:34 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/IO-99/IO-99.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[IO-99] FileCleaner thread never ends and cause memory leak in AS</title>
                <link>https://issues.apache.org/jira/browse/IO-99</link>
                <project id="12310477" key="IO">Commons IO</project>
                    <description>&lt;p&gt;FileCleaner opens a thread and no solution is given to the user to end it. So when an application is undeployed&lt;br/&gt;
in an Application Server, a thread is still alive. The WebApp can&apos;t be undeployed and this results in a classloader&lt;br/&gt;
leak that will cause an OutOfMemoryError.&lt;/p&gt;

&lt;p&gt;I think the API should be extended so that a user can end the thread. A better way would be to provide a class that&lt;br/&gt;
cleans everything for commons IO.&lt;/p&gt;</description>
                <environment>&lt;p&gt;JBOssPortal with commons.fileupload&lt;/p&gt;</environment>
        <key id="12355892">IO-99</key>
            <summary>FileCleaner thread never ends and cause memory leak in AS</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="scolebourne">Stephen Colebourne</assignee>
                                    <reporter username="mvera">Vera Micka&#235;l</reporter>
                        <labels>
                    </labels>
                <created>Thu, 16 Nov 2006 18:11:09 +0000</created>
                <updated>Fri, 9 Mar 2007 20:38:23 +0000</updated>
                            <resolved>Fri, 29 Dec 2006 13:12:17 +0000</resolved>
                                    <version>1.2</version>
                                    <fixVersion>1.3</fixVersion>
                                        <due></due>
                            <votes>2</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12450487" author="bayard" created="Thu, 16 Nov 2006 18:52:52 +0000"  >
&lt;p&gt;The static initializer for FileCleaner:&lt;/p&gt;

&lt;p&gt;    static &lt;/p&gt;
{
        reaper.setPriority(Thread.MAX_PRIORITY);
        reaper.setDaemon(true);
        reaper.start();
    }

&lt;p&gt;Do daemon threads cause problems in undeploys?&lt;/p&gt;</comment>
                            <comment id="12450687" author="mvera" created="Fri, 17 Nov 2006 10:19:21 +0000"  >&lt;p&gt;I don&apos;t know if a daemon thread prevents a classloader from being garbaged ?&lt;/p&gt;

&lt;p&gt;I worked for several days on classloader leaks, classloaders that are never garbaged because a system class or a container class keeps a reference on the webapp classloader. In memory dumps I can see that FileCleaner thread keeps references on my webapp classloader, this thread is referenced by the JBoss thread pool wich is a container class.&lt;/p&gt;

&lt;p&gt;I can&apos;t say if this thread is responsible for my classloader leak, my opinion is that it does (look links provided, the fist one)&lt;/p&gt;

&lt;p&gt;But this thread adds many references to a dump that is already difficult read (I use a modified version of jhat). A service in the API stopping the thread would really simplify the task of developpers like me working on classlodaer leaks.&lt;/p&gt;

&lt;p&gt;I will open an issue in commons.fileupload referencing this one, maybe this package have more concerns about webapp environments.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://opensource.atlassian.com/confluence/spring/pages/viewpage.action?pageId=2669&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://opensource.atlassian.com/confluence/spring/pages/viewpage.action?pageId=2669&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://blogs.sun.com/fkieviet/entry/how_to_fix_the_dreaded&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://blogs.sun.com/fkieviet/entry/how_to_fix_the_dreaded&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to whole developpers team for their work&lt;/p&gt;</comment>
                            <comment id="12450870" author="bayard" created="Fri, 17 Nov 2006 19:45:11 +0000"  >&lt;p&gt;Thanks for the reply Vera; please don&apos;t take my comment as a negative view.  &lt;/p&gt;

&lt;p&gt;Definitely a good idea to bring it up to the FileUpload guys too - both IO and FileUpload are looking to do a new release soon and the question of whether this should hold up those releases should be asked. I&apos;ll bring that up on the commons-dev@ mailing list.&lt;/p&gt;</comment>
                            <comment id="12450929" author="martinc" created="Fri, 17 Nov 2006 23:39:07 +0000"  >&lt;p&gt;It would make sense to me for FileCleaner to provide a method to cleanly stop the reaper thread, and possiby another method to (re-)start it. This way, an application using Commons IO could gain control over this thread. Today, no control is provided - the thread is started automatically, and cannot be (cleanly) stopped.&lt;/p&gt;

&lt;p&gt;In the context of Commons FileUpload, this would allow a web application to start the reaper thread at startup time (e.g. servlet or filter init) and shut it down when the web app is being stopped (e.g. servlet or filter destroy).&lt;/p&gt;

&lt;p&gt;The question then arises of what to do by default. If we decide not to start the reaper automatically, we would be breaking backwards compatibility with the current version of IO, although I do think this would be the more sensible option.&lt;/p&gt;</comment>
                            <comment id="12451376" author="mvera" created="Mon, 20 Nov 2006 17:33:42 +0000"  >&lt;p&gt;Thanks everybody for your interest in this issue.&lt;/p&gt;

&lt;p&gt;I&apos;ve talked about this issue with a developper mastering classloaders problems. It seems that the remaining thread surely causes a classoder leak. I think classloaders leaks will soon be a point of interest for a larger community, this issue will be benefic for commons.io.&lt;/p&gt;

&lt;p&gt;I think is that backward compatibility is important and that you should keep the thread automatically started.&lt;/p&gt;

&lt;p&gt;Be carrefull of several points about web containers environements :&lt;/p&gt;

&lt;p&gt;If the lib is deployed for any reason (this is not encouraged) in the classloader of the web container, the thread is shared by all applications deployed in the container. So an application stopping the thread would have an effect on other applications. Keeping all applications deployed isolated is very important. &lt;/p&gt;

&lt;p&gt;But shall we let responsability to developpers to know if they have to stop the thread or not ? I don&apos;t think so. I can develop a lib that uses commons.io and I want my lib to be compatible with web containers environement, as commons.filepload for example. commons.filepload don&apos;t know if commons.io has to stop the thread or not because it doesn&apos;t know where the lib has been deployed. But commons.fileupload in my opinion should provide a way to release its resources, as a developper using copmmons.filepload don&apos;t have to know that commons.io is used for encapsulation reasons.&lt;/p&gt;

&lt;p&gt;So what is the solution ? &lt;/p&gt;

&lt;p&gt;A common solution to this problems is to use classloaders. commons.io should provide a method to stop the thread, or better to release resources,  as a user of commons.io I don&apos;t have to know about the thread. This method should take as parameter the classloader of the application requesting the resources release. If the given classloader is the same as the classloader of FileCleaner, this means that the lib has been deployed inside the war, so the thread should be stopped and all resources released. If the classloader is different, then the thread is owned by the container, so don&apos;t stop it. But release other resources associated to the given classloader (listeners, cache ...) that may cause a classloader leak.&lt;/p&gt;

&lt;p&gt;I hope I&apos;ve been clear and my clues will help you. If any question remains, don&apos;t hesitate to ask for details, I watch this thread.&lt;/p&gt;
</comment>
                            <comment id="12455206" author="scolebourne" created="Sun, 3 Dec 2006 20:34:49 +0000"  >&lt;p&gt;The simple solution is to add a method exitWhenFinished() that sets a boolean flag.&lt;/p&gt;

&lt;p&gt;The reaper thread then checks the boolean flag to see if it should stop the thread (once all tracked objects have been dealt with)&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;if (exitWhenFinished &amp;amp;&amp;amp; trackers.isEmpty()) &lt;/p&gt;
{
  return;  // terminate thread
}
{/code}

&lt;p&gt;Code can then call FileCleaner.exitWhenFinished() from their servlet destroy method.&lt;/p&gt;</comment>
                            <comment id="12455247" author="jochen@apache.org" created="Mon, 4 Dec 2006 08:02:36 +0000"  >&lt;p&gt;Proposed patch, in order to get this done (please note, that releases are waiting for this, as Henri wrote).&lt;/p&gt;

&lt;p&gt;After considering Martin&apos;s and Stephen&apos;s suggestions, I followed Stephen&apos;s: The possibility to restart the thread raises, IMO, synchronization questions, which I do not want to address right now. The evaluation, whether a restart is required and a possible implementation may well be left for 1.4, IMO.&lt;/p&gt;</comment>
                            <comment id="12455486" author="scolebourne" created="Tue, 5 Dec 2006 01:14:05 +0000"  >&lt;p&gt;Please review and try the latest code in SVN.&lt;/p&gt;</comment>
                            <comment id="12455821" author="bayard" created="Wed, 6 Dec 2006 00:13:58 +0000"  >&lt;p&gt;I&apos;ve attached the code needed to &lt;a href=&quot;https://issues.apache.org/jira/browse/FILEUPLOAD-120&quot; title=&quot;memory leak due to classloader leak (in commons.io)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;FILEUPLOAD-120&quot;&gt;&lt;del&gt;FILEUPLOAD-120&lt;/del&gt;&lt;/a&gt;; if you could give that a shot Vera and let us know if it solves your problem it would be great - then we can go ahead and release IO 1.3 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12455943" author="jochen@apache.org" created="Wed, 6 Dec 2006 09:39:27 +0000"  >&lt;p&gt;I have added the following section to the FileUpload docs. It seems worth mentioning here, because it confirms Martins concerns: It should be possible to take over control of the reaper thread completely. In particular, one should not be forced to use the FileCleaner classes thread.&lt;/p&gt;

&lt;p&gt;      Unfortunately, this is not the whole story. The above applies only, if&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;You are using commons-io 1.3, or later.&lt;/li&gt;
	&lt;li&gt;You are loading commons-io from your web applications&lt;br/&gt;
         WEB-INF/lib and not from another location, for example the&lt;br/&gt;
        common/lib directory of Tomcat. This is not unlikely, because&lt;br/&gt;
        there are quite a few applications, which do ship commons-io.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;      If commons-io 1.3 is loaded from your containers class path, then&lt;br/&gt;
      the following might occur: Suggest that you have two applications,&lt;br/&gt;
      called A and B running. (It might as well be the same application&lt;br/&gt;
      with two names aka servlet contexts.) Both applications are using&lt;br/&gt;
      the &amp;lt;code&amp;gt;FileCleanerCleanup&amp;lt;/code&amp;gt;. Now, if you terminate application&lt;br/&gt;
      A, but B is still running, then A terminates B&apos;s reaper thread as&lt;br/&gt;
      well.&lt;/p&gt;

&lt;p&gt;      In other words, you should consider carefully, whether to use&lt;br/&gt;
      the &amp;lt;code&amp;gt;FileCleanerCleanup&amp;lt;/code&amp;gt;, or not. When unsure, or if you&lt;br/&gt;
      are happy with commons-fileupload 1.1.1, or before, then you&lt;br/&gt;
      possibly would like to avoid it.&lt;/p&gt;
</comment>
                            <comment id="12461277" author="jochen@apache.org" created="Thu, 28 Dec 2006 23:57:31 +0000"  >&lt;p&gt;I have reviewed Stephen&apos;s patch and it looks good to me. Only minor note:  I&apos;d recommend to make getTrackCount() synchronized.&lt;/p&gt;

&lt;p&gt;Can we close this issue now and proceed with releasing 1.3?&lt;/p&gt;</comment>
                            <comment id="12461373" author="scolebourne" created="Fri, 29 Dec 2006 13:12:17 +0000"  >&lt;p&gt;I took a look at getTrackerCount(), but its already synchronized because the list is a Vector. I added a few comments about synchronization to the file to help clarify.&lt;/p&gt;

&lt;p&gt;Closing the call as fixed.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12355970">FILEUPLOAD-120</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12346317" name="IO-99.patch" size="4721" author="jochen@apache.org" created="Mon, 4 Dec 2006 08:02:36 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 16 Nov 2006 18:52:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>139550</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            9 years, 48 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0smhr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>165121</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>