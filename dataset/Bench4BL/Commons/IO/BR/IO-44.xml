<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun Nov 20 17:22:05 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/IO-44/IO-44.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[IO-44] [io] Enhance LockableFileWriter to handle different character endocings.</title>
                <link>https://issues.apache.org/jira/browse/IO-44</link>
                <project id="12310477" key="IO">Commons IO</project>
                    <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;LockableFileWriter needs to be enhanced so that it can support different&lt;br/&gt;
character encodings. Below is my attempt at introducing this functionality based&lt;br/&gt;
on the existing class:&lt;/p&gt;

&lt;p&gt;(Also, should LockableFileWriter be a decoration class?)&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Andy&lt;/p&gt;

&lt;p&gt;&amp;#8211; START CLASS &amp;#8211;&lt;/p&gt;

&lt;p&gt;package com.sita.ats.io;&lt;/p&gt;

&lt;p&gt;import java.io.*;&lt;/p&gt;

&lt;p&gt;import org.apache.commons.lang.StringUtils;&lt;/p&gt;

&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;FileWriter that will create and honor lock files to allow simple&lt;/li&gt;
	&lt;li&gt;cross thread file lock handling and allow writing to a given encoding.&lt;/li&gt;
	&lt;li&gt;If &amp;lt;code&amp;gt;Writer&amp;lt;/code&amp;gt; attributes&lt;/li&gt;
	&lt;li&gt;are unspecified, the default behavior is to overwrite (rather than&lt;/li&gt;
	&lt;li&gt;to iAppend), and to use the value of the system property&lt;/li&gt;
	&lt;li&gt;&amp;lt;code&amp;gt;java.io.tmpdir&amp;lt;/code&amp;gt; for the lock file directory.&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;@version $Id: ULockableFileWriter.java,v 1.1 2005/09/27 07:23:33 andyl Exp $&lt;/li&gt;
	&lt;li&gt;@author Andy Lehane&lt;br/&gt;
 */&lt;br/&gt;
public class ULockableFileWriter extends Writer {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /** The extension for the lock file. */&lt;br/&gt;
    private static final String LCK = &quot;.lck&quot;;&lt;br/&gt;
    /** The lock file. */&lt;br/&gt;
    private File iLockFile;   // Initialises to null&lt;br/&gt;
    /** The write used to write to the file. */&lt;br/&gt;
    private Writer iWriter;    // Initialises to null&lt;br/&gt;
    /** Should we append to the file or not. */&lt;br/&gt;
    private boolean iAppend; // Initialises to false&lt;br/&gt;
    /** The encoding to use. */&lt;br/&gt;
    private String iEncoding; // Initialises to null &lt;/p&gt;

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructs a LockableFileWriter. If the file exists, it is overwritten.&lt;/li&gt;
	&lt;li&gt;@param fileName file to write to&lt;/li&gt;
	&lt;li&gt;@throws IOException in case of an I/O error&lt;br/&gt;
     */&lt;br/&gt;
    public ULockableFileWriter(final String fileName) throws IOException 
{
        this(fileName, null, false, null);
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructs a LockableFileWriter.&lt;/li&gt;
	&lt;li&gt;@param fileName file to write to&lt;/li&gt;
	&lt;li&gt;@param append true if content should be appended (default is to overwrite).&lt;/li&gt;
	&lt;li&gt;@throws IOException in case of an I/O error&lt;br/&gt;
     */&lt;br/&gt;
    public ULockableFileWriter(final String fileName, final boolean append)&lt;br/&gt;
throws IOException 
{
        this(fileName, null, append, null);
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructs a LockableFileWriter.&lt;/li&gt;
	&lt;li&gt;@param fileName file to write to&lt;/li&gt;
	&lt;li&gt;@param append true if content should be appended (default is to overwrite).&lt;/li&gt;
	&lt;li&gt;@param lockDir Specifies the directory in which the lock file should be held.&lt;/li&gt;
	&lt;li&gt;@throws IOException in case of an I/O error&lt;br/&gt;
     */&lt;br/&gt;
    public ULockableFileWriter(final String fileName, final boolean append,&lt;br/&gt;
final String lockDir) throws IOException 
{
        this(new File(fileName), null, append, lockDir);
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructs a LockableFileWriter. If the file exists, it is overwritten.&lt;/li&gt;
	&lt;li&gt;@param file file to write to&lt;/li&gt;
	&lt;li&gt;@throws IOException in case of an I/O error&lt;br/&gt;
     */&lt;br/&gt;
    public ULockableFileWriter(final File file) throws IOException 
{
        this(file, null, false, null);
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructs a LockableFileWriter.&lt;/li&gt;
	&lt;li&gt;@param file file to write to&lt;/li&gt;
	&lt;li&gt;@param append true if content should be appended (default is to overwrite).&lt;/li&gt;
	&lt;li&gt;@throws IOException in case of an I/O error&lt;br/&gt;
     */&lt;br/&gt;
    public ULockableFileWriter(final File file, final boolean append) throws&lt;br/&gt;
IOException 
{
        this(file, null, append, null);
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructs a LockableFileWriter.&lt;/li&gt;
	&lt;li&gt;@param file file to write to&lt;/li&gt;
	&lt;li&gt;@param append true if content should be appended (default is to overwrite).&lt;/li&gt;
	&lt;li&gt;@param lockDir Specifies the directory in which the lock file should be held.&lt;/li&gt;
	&lt;li&gt;@throws IOException in case of an I/O error&lt;br/&gt;
     */&lt;br/&gt;
    public ULockableFileWriter(final File file, final boolean append, final&lt;br/&gt;
String lockDir) throws IOException 
{

        this(file, null, append, lockDir);
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructs a LockableFileWriter. If the file exists, it is overwritten.&lt;/li&gt;
	&lt;li&gt;@param fileName file to write to&lt;/li&gt;
	&lt;li&gt;@param encoding The encoding to use when writing.&lt;/li&gt;
	&lt;li&gt;@throws IOException in case of an I/O error&lt;br/&gt;
     */&lt;br/&gt;
    public ULockableFileWriter(&lt;br/&gt;
            final String fileName,&lt;br/&gt;
            final String encoding) throws IOException 
{
        this(fileName, encoding, false, null);
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructs a LockableFileWriter.&lt;/li&gt;
	&lt;li&gt;@param fileName file to write to&lt;/li&gt;
	&lt;li&gt;@param encoding The encoding to use when writing.&lt;/li&gt;
	&lt;li&gt;@param append true if content should be appended (default is to overwrite).&lt;/li&gt;
	&lt;li&gt;@throws IOException in case of an I/O error&lt;br/&gt;
     */&lt;br/&gt;
    public ULockableFileWriter(&lt;br/&gt;
            final String fileName, &lt;br/&gt;
            final String encoding,&lt;br/&gt;
            final boolean append) throws IOException 
{
        this(fileName, encoding, append, null);
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructs a LockableFileWriter.&lt;/li&gt;
	&lt;li&gt;@param fileName file to write to&lt;/li&gt;
	&lt;li&gt;@param encoding The encoding to use when writing.&lt;/li&gt;
	&lt;li&gt;@param append true if content should be appended (default is to overwrite).&lt;/li&gt;
	&lt;li&gt;@param lockDir Specifies the directory in which the lock file should be held.&lt;/li&gt;
	&lt;li&gt;@throws IOException in case of an I/O error&lt;br/&gt;
     */&lt;br/&gt;
    public ULockableFileWriter(&lt;br/&gt;
            final String fileName,&lt;br/&gt;
            final String encoding,&lt;br/&gt;
            final boolean append,&lt;br/&gt;
            final String lockDir) throws IOException 
{
        this(new File(fileName), encoding, append, lockDir);
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructs a LockableFileWriter. If the file exists, it is overwritten.&lt;/li&gt;
	&lt;li&gt;@param file file to write to&lt;/li&gt;
	&lt;li&gt;@param encoding The encoding to use when writing.&lt;/li&gt;
	&lt;li&gt;@throws IOException in case of an I/O error&lt;br/&gt;
     */&lt;br/&gt;
    public ULockableFileWriter(final File file, final String encoding) throws&lt;br/&gt;
IOException 
{
        this(file, encoding, false, null);
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructs a LockableFileWriter.&lt;/li&gt;
	&lt;li&gt;@param file file to write to&lt;/li&gt;
	&lt;li&gt;@param encoding The encoding to use when writing.&lt;/li&gt;
	&lt;li&gt;@param append true if content should be appended (default is to overwrite).&lt;/li&gt;
	&lt;li&gt;@throws IOException in case of an I/O error&lt;br/&gt;
     */&lt;br/&gt;
    public ULockableFileWriter(&lt;br/&gt;
            final File file,&lt;br/&gt;
            final String encoding,&lt;br/&gt;
            final boolean append) throws IOException 
{
        this(file, encoding, append, null);
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructs a LockableFileWriter.&lt;/li&gt;
	&lt;li&gt;@param file file to write to&lt;/li&gt;
	&lt;li&gt;@param encoding The encoding to use when writing.&lt;/li&gt;
	&lt;li&gt;@param append true if content should be appended (default is to overwrite).&lt;/li&gt;
	&lt;li&gt;@param lockDir Specifies the directory in which the lock file should be held.&lt;/li&gt;
	&lt;li&gt;@throws IOException in case of an I/O error&lt;br/&gt;
     */&lt;br/&gt;
    public ULockableFileWriter(&lt;br/&gt;
            final File file,&lt;br/&gt;
            final String encoding,&lt;br/&gt;
            final boolean append,&lt;br/&gt;
            final String lockDir) throws IOException {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;        super(file);&lt;br/&gt;
        iAppend = append;&lt;br/&gt;
        iEncoding = encoding;&lt;/p&gt;

&lt;p&gt;        String lDir = lockDir;&lt;br/&gt;
        if (lDir == null) &lt;/p&gt;
{
            lDir = System.getProperty(&quot;java.io.tmpdir&quot;);
        }
&lt;p&gt;        testLockDir(new File(lDir));&lt;br/&gt;
        iLockFile = new File(lDir, file.getName() + LCK);&lt;br/&gt;
        createLock();&lt;/p&gt;

&lt;p&gt;        try {&lt;br/&gt;
            if (StringUtils.isEmpty(encoding)) &lt;/p&gt;
{
                iWriter = new FileWriter(file.getAbsolutePath(), iAppend);
            }
&lt;p&gt; else {&lt;/p&gt;

&lt;p&gt;                if (file.getParentFile().exists() == false) &lt;/p&gt;
{
                    file.getParentFile().mkdirs();
                }

&lt;p&gt;                if (file.getAbsoluteFile().exists() == false) &lt;/p&gt;
{
                    file.getAbsoluteFile().createNewFile();
                }

&lt;p&gt;                iWriter = new OutputStreamWriter(new&lt;br/&gt;
FileOutputStream(file.getAbsolutePath(), iAppend), iEncoding);&lt;br/&gt;
            }&lt;br/&gt;
        } catch (IOException ioe) &lt;/p&gt;
{
            iLockFile.delete();
            throw ioe;
        }
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;    //-----------------------------------------------------------------------&lt;br/&gt;
    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Tests that we can write to the lock directory.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@param lockDir File representing the lock directory.&lt;/li&gt;
	&lt;li&gt;@throws IOException if we cannot write to the lock directory or cannot&lt;br/&gt;
file the lock file.&lt;br/&gt;
     */&lt;br/&gt;
    private void testLockDir(final File lockDir) throws IOException 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {        if (!lockDir.exists()) {
            throw new IOException(
                    &quot;Could not find lockDir: &quot; + lockDir.getAbsolutePath());
        }        if (!lockDir.canWrite()) {
            throw new IOException(
                    &quot;Could not write to lockDir: &quot; + lockDir.getAbsolutePath());
        }    }&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Creates the lock file.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@throws IOException if we cannot create the file.&lt;br/&gt;
     */&lt;br/&gt;
    private void createLock() throws IOException {&lt;br/&gt;
        synchronized (ULockableFileWriter.class) 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {            if (!iLockFile.createNewFile()) {
                throw new IOException(&quot;Can&apos;t write file, lock &quot; +
                    iLockFile.getAbsolutePath() + &quot; exists&quot;);
            }            iLockFile.deleteOnExit();        }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;    }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    //-----------------------------------------------------------------------&lt;br/&gt;
    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Close the stream, flushing it first.  Once a stream has been closed,&lt;/li&gt;
	&lt;li&gt;further write() or flush() invocations will cause an IOException to be&lt;/li&gt;
	&lt;li&gt;thrown.  Closing a previously-closed stream, however, has no effect.&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@exception  IOException  If an I/O error occurs&lt;br/&gt;
     */&lt;br/&gt;
    public void close() throws IOException 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {        try {
            iWriter.close();
        } finally {
            iLockFile.delete();
        }    }&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Write a portion of a string.&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@param  cbuf  The characters to write&lt;/li&gt;
	&lt;li&gt;@param  off  Offset from which to start writing characters&lt;/li&gt;
	&lt;li&gt;@param  len  Number of characters to write&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@exception  IOException  If an I/O error occurs&lt;br/&gt;
     */&lt;br/&gt;
    public void write(final char[] cbuf, final int off, final int len) throws&lt;br/&gt;
IOException 
{
        iWriter.write(cbuf, off, len);
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Flush the stream.  If the stream has saved any characters from the&lt;/li&gt;
	&lt;li&gt;various write() methods in a buffer, write them immediately to their&lt;/li&gt;
	&lt;li&gt;intended destination.  Then, if that destination is another character or&lt;/li&gt;
	&lt;li&gt;byte stream, flush it.  Thus one flush() invocation will flush all the&lt;/li&gt;
	&lt;li&gt;buffers in a chain of Writers and OutputStreams.&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;&lt;/li&gt;
	&lt;li&gt;If the intended destination of this stream is an abstraction provided by&lt;/li&gt;
	&lt;li&gt;the underlying operating system, for example a file, then flushing the&lt;/li&gt;
	&lt;li&gt;stream guarantees only that bytes previously written to the stream are&lt;/li&gt;
	&lt;li&gt;passed to the operating system for writing; it does not guarantee that&lt;/li&gt;
	&lt;li&gt;they are actually written to a physical device such as a disk drive.&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@exception  IOException  If an I/O error occurs&lt;br/&gt;
     */&lt;br/&gt;
    public void flush() throws IOException 
{
        iWriter.flush();
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    //-----------------------------------------------------------------------&lt;br/&gt;
    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Gets the character encoding used when writing to the file.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@return The encoding method.&lt;br/&gt;
     */&lt;br/&gt;
    public String getEncoding() 
{
        return iEncoding;
    }
&lt;p&gt;}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&amp;#8211; END CLASS &amp;#8211;&lt;/p&gt;</description>
                <environment>&lt;p&gt;Operating System: Windows XP&lt;br/&gt;
Platform: PC&lt;/p&gt;</environment>
        <key id="12342580">IO-44</key>
            <summary>[io] Enhance LockableFileWriter to handle different character endocings.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="andylehane@hotmail.com">Andy Lehane</reporter>
                        <labels>
                    </labels>
                <created>Tue, 27 Sep 2005 16:49:25 +0000</created>
                <updated>Fri, 9 Mar 2007 20:38:20 +0000</updated>
                            <resolved>Fri, 9 Mar 2007 20:38:20 +0000</resolved>
                                    <version>1.1</version>
                                    <fixVersion>1.1</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12410475" author="scolebourne@joda.org" created="Thu, 29 Sep 2005 08:03:36 +0000"  >&lt;p&gt;Code from this call, plus other code applied&lt;br/&gt;
Thanks&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                        <customfieldname>Bugzilla Id</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36825</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 29 Sep 2005 08:03:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>139504</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            11 years, 9 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0smsv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>165171</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>