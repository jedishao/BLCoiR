<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Thu Dec 01 19:01:32 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/IO-32/IO-32.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[IO-32] [io][PATCH] Iterate over the lines in a file and the files in a directory</title>
                <link>https://issues.apache.org/jira/browse/IO-32</link>
                <project id="12310477" key="IO">Commons IO</project>
                    <description>&lt;p&gt;Hi,&lt;/p&gt;



&lt;p&gt;Two of the tasks listed in the IO to-do list are adding the ability to&lt;br/&gt;
iterate over the lines in a file and the files in a directory.  This&lt;br/&gt;
patch implements those things as methods on FileUtils and provides test&lt;br/&gt;
cases for the new methods.&lt;/p&gt;



&lt;p&gt;  Jim Harrington&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;patch follows ***&lt;br/&gt;
Index: src/java/org/apache/commons/io/FileUtils.java&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;===================================================================&lt;/p&gt;

&lt;p&gt;&amp;#8212; src/java/org/apache/commons/io/FileUtils.java	(revision 359064)&lt;/p&gt;

&lt;p&gt;+++ src/java/org/apache/commons/io/FileUtils.java	(working copy)&lt;/p&gt;

&lt;p&gt;@@ -28,6 +28,7 @@&lt;/p&gt;

&lt;p&gt; import java.util.Collection;&lt;br/&gt;
 import java.util.Date;&lt;br/&gt;
 import java.util.List;&lt;br/&gt;
+import java.util.Iterator;&lt;/p&gt;

&lt;p&gt; import org.apache.commons.io.filefilter.DirectoryFileFilter;&lt;br/&gt;
 import org.apache.commons.io.filefilter.FalseFileFilter;&lt;br/&gt;
@@ -226,7 +227,29 @@&lt;/p&gt;

&lt;p&gt;         return files;&lt;br/&gt;
     }&lt;/p&gt;

&lt;p&gt;+    /**&lt;br/&gt;
+     * &amp;lt;p&amp;gt;Allows iteration over the files in given directory (and optionally&lt;br/&gt;
+     * its subdirectories). All files found are filtered by an IOFileFilter.&lt;br/&gt;
+     *&lt;br/&gt;
+     * See:&lt;br/&gt;
+     * @see #listFiles(File, IOFileFilter, IOFileFilter)&lt;br/&gt;
+     * for more information.&lt;br/&gt;
+     * &amp;lt;/p&amp;gt;&lt;br/&gt;
+     * @param directory the directory to search in&lt;br/&gt;
+     * @param fileFilter filter to apply when finding files.&lt;br/&gt;
+     * @param dirFilter optional filter to apply when finding subdirectories.&lt;br/&gt;
+     * If this parameter is null, subdirectories will not be included in the&lt;br/&gt;
+     * search. Use TrueFileFilter.INSTANCE to match all directories.&lt;br/&gt;
+     * @return an iterator of java.io.File for the matching files&lt;br/&gt;
+     * @see org.apache.commons.io.filefilter.FileFilterUtils&lt;br/&gt;
+     * @see org.apache.commons.io.filefilter.NameFileFilter&lt;br/&gt;
+     */&lt;br/&gt;
+    public static Iterator iterateFiles(File directory, IOFileFilter &lt;br/&gt;
fileFilter,&lt;br/&gt;
+                                        IOFileFilter dirFilter) &lt;/p&gt;
{
+        return (listFiles( directory, fileFilter, dirFilter)).iterator();
+    }

&lt;p&gt;+&lt;br/&gt;
     /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Converts an array of file extensions to suffixes for use&lt;/li&gt;
	&lt;li&gt;with IOFileFilters.&lt;br/&gt;
@@ -264,7 +287,21 @@&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;             (recursive ? TrueFileFilter.INSTANCE : FalseFileFilter.INSTANCE));&lt;br/&gt;
     }&lt;/p&gt;

&lt;p&gt;+    /**&lt;br/&gt;
+     * Allows iteration over the files in a given directory (and optionally&lt;br/&gt;
+     * its subdirectories) which match an array of extensions.&lt;br/&gt;
+     * @param directory the directory to search in&lt;br/&gt;
+     * @param extensions an array of extensions, ex. &lt;/p&gt;
{&quot;java&quot;,&quot;xml&quot;}
&lt;p&gt;. If this&lt;br/&gt;
+     * parameter is null, all files are returned.&lt;br/&gt;
+     * @param recursive If true all subdirectories are searched, too.&lt;br/&gt;
+     * @return an iterator of java.io.File with the matching files&lt;br/&gt;
+     */&lt;br/&gt;
+    public static Iterator iterateFiles(&lt;br/&gt;
+                                        File directory, String[] extensions, &lt;br/&gt;
boolean recursive) &lt;/p&gt;
{
+        return (listFiles(directory, extensions, recursive)).iterator();
+    }

&lt;p&gt;+&lt;br/&gt;
     /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;Compare the contents of two files to determine if they are equal or&lt;/li&gt;
	&lt;li&gt;not.&amp;lt;/p&amp;gt;&lt;br/&gt;
@@ -841,6 +878,29 @@&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     //-----------------------------------------------------------------------&lt;br/&gt;
     /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;&lt;br/&gt;
+     * Reads the contents of a file line by line and returns an iterator over&lt;br/&gt;
+     * those lines.&lt;br/&gt;
+     *&lt;br/&gt;
+     * &amp;lt;p&amp;gt;&lt;br/&gt;
+     * There is no iterateLines method without encoding parameter because&lt;br/&gt;
+     * the default encoding can differ between platforms and therefore results&lt;br/&gt;
+     * in inconsistent results.&lt;br/&gt;
+     * &amp;lt;/p&amp;gt;&lt;br/&gt;
+     *&lt;br/&gt;
+     * @param file  the file to read&lt;br/&gt;
+     * @param encoding  the encoding to use, null means platform default&lt;br/&gt;
+     * @return an iterator over the lines in the file&lt;br/&gt;
+     * @throws IOException in case of an I/O error&lt;br/&gt;
+     * @throws UnsupportedEncodingException if the encoding is not supported &lt;br/&gt;
by the VM&lt;br/&gt;
+     * @since Commons IO 1.2&lt;br/&gt;
+     */&lt;br/&gt;
+    public static final Iterator iterateLines(File file, String encoding) &lt;br/&gt;
throws IOException 
{
+        return (readLines(file, encoding)).iterator();
+    }
&lt;p&gt;+&lt;br/&gt;
+    //-----------------------------------------------------------------------&lt;br/&gt;
+    /**&lt;br/&gt;
+     * &amp;lt;p&amp;gt;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;Writes a String to a file creating the file if it does not exist.&lt;/li&gt;
	&lt;li&gt;&amp;lt;/p&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;&lt;br/&gt;
Index: src/test/org/apache/commons/io/FileUtilsTestCase.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;===================================================================&lt;/p&gt;

&lt;p&gt;&amp;#8212; src/test/org/apache/commons/io/FileUtilsTestCase.java	(revision &lt;br/&gt;
359064)&lt;/p&gt;

&lt;p&gt;+++ src/test/org/apache/commons/io/FileUtilsTestCase.java	(working copy)&lt;/p&gt;

&lt;p&gt;@@ -24,12 +24,17 @@&lt;/p&gt;

&lt;p&gt; import java.util.Arrays;&lt;br/&gt;
 import java.util.GregorianCalendar;&lt;br/&gt;
 import java.util.List;&lt;br/&gt;
+import java.util.Collection;&lt;br/&gt;
+import java.util.Iterator;&lt;br/&gt;
+import java.util.Map;&lt;br/&gt;
+import java.util.HashMap;&lt;/p&gt;

&lt;p&gt; import junit.framework.Test;&lt;br/&gt;
 import junit.framework.TestSuite;&lt;br/&gt;
 import junit.textui.TestRunner;&lt;/p&gt;

&lt;p&gt; import org.apache.commons.io.testtools.FileBasedTestCase;&lt;br/&gt;
+import org.apache.commons.io.filefilter.WildcardFilter;&lt;/p&gt;

&lt;p&gt; /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;This is used to test FileUtils for correctness.&lt;br/&gt;
@@ -659,6 +664,81 @@&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;         assertEquals(&quot;FileUtils.touch() changed lastModified to less than &lt;br/&gt;
now+3s&quot;, true, file.lastModified() &amp;lt;= (now + 3000));&lt;br/&gt;
     }&lt;/p&gt;

&lt;p&gt;+    public void testListFiles() throws Exception &lt;/p&gt;
{
+        File srcDir = getTestDirectory();
+        File subDir = new File(srcDir, &quot;list_test&quot; );
+        subDir.mkdir();
+
+        String[] fileNames = 
{ &quot;a.txt&quot;, &quot;b.txt&quot;, &quot;c.txt&quot;, &quot;d.txt&quot;, &quot;e.txt&quot;, &quot;f.txt&quot; };&lt;br/&gt;
+        int[] fileSizes = { 123, 234, 345, 456, 678, 789 };&lt;br/&gt;
+&lt;br/&gt;
+        for(int i = 0; i &amp;lt; fileNames.length; ++i) {
+            File theFile = new File(subDir, fileNames[i]);
+            createFile(theFile, fileSizes[i]);
+        }&lt;br/&gt;
+&lt;br/&gt;
+        Collection files = FileUtils.listFiles(subDir,&lt;br/&gt;
+                                               new WildcardFilter(&quot;&lt;b&gt;.&lt;/b&gt;&quot;),&lt;br/&gt;
+                                               new WildcardFilter(&quot;*&quot;));&lt;br/&gt;
+&lt;br/&gt;
+        int count = files.size();&lt;br/&gt;
+        Object[] fileObjs = files.toArray();&lt;br/&gt;
+&lt;br/&gt;
+        assertEquals(files.size(), fileNames.length);&lt;br/&gt;
+&lt;br/&gt;
+        Map foundFileNames = new HashMap();&lt;br/&gt;
+&lt;br/&gt;
+        for(int i = 0; i &amp;lt; count; ++i) {&lt;br/&gt;
+            boolean found = false;&lt;br/&gt;
+            for(int j = 0; (( !found ) &amp;amp;&amp;amp; (j &amp;lt; fileNames.length)); ++j) {&lt;br/&gt;
+                if ( fileNames&lt;span class=&quot;error&quot;&gt;&amp;#91;j&amp;#93;&lt;/span&gt;.equals(((File) fileObjs&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;).getName())) {
+                    foundFileNames.put(fileNames[j], fileNames[j]);
+                    found = true;
+                }&lt;br/&gt;
+            }&lt;br/&gt;
+        }&lt;br/&gt;
+&lt;br/&gt;
+        assertEquals(foundFileNames.size(), fileNames.length);&lt;br/&gt;
+&lt;br/&gt;
+        subDir.delete();&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    public void testIterateFiles() throws Exception {+        File srcDir = getTestDirectory();+        File subDir = new File(srcDir, &quot;list_test&quot; );+        subDir.mkdir();++        String[] fileNames = { &quot;a.txt&quot;, &quot;b.txt&quot;, &quot;c.txt&quot;, &quot;d.txt&quot;, &quot;e.txt&quot;, &quot;f.txt&quot; }
&lt;p&gt;;&lt;br/&gt;
+        int[] fileSizes = &lt;/p&gt;
{ 123, 234, 345, 456, 678, 789 }
&lt;p&gt;;&lt;br/&gt;
+&lt;br/&gt;
+        for(int i = 0; i &amp;lt; fileNames.length; ++i) &lt;/p&gt;
{
+            File theFile = new File(subDir, fileNames[i]);
+            createFile(theFile, fileSizes[i]);
+        }
&lt;p&gt;+&lt;br/&gt;
+        Iterator files = FileUtils.iterateFiles(subDir,&lt;br/&gt;
+                                                new WildcardFilter(&quot;&lt;b&gt;.&lt;/b&gt;&quot;),&lt;br/&gt;
+                                                new WildcardFilter(&quot;*&quot;));&lt;br/&gt;
+&lt;br/&gt;
+        Map foundFileNames = new HashMap();&lt;br/&gt;
+&lt;br/&gt;
+        while(files.hasNext()) {&lt;br/&gt;
+            boolean found = false;&lt;br/&gt;
+            String fileName = ((File) files.next()).getName();&lt;br/&gt;
+&lt;br/&gt;
+            for(int j = 0; (( !found ) &amp;amp;&amp;amp; (j &amp;lt; fileNames.length)); ++j) {&lt;br/&gt;
+                if ( fileNames&lt;span class=&quot;error&quot;&gt;&amp;#91;j&amp;#93;&lt;/span&gt;.equals(fileName)) &lt;/p&gt;
{
+                    foundFileNames.put(fileNames[j], fileNames[j]);
+                    found = true;
+                }
&lt;p&gt;+            }&lt;br/&gt;
+        }&lt;br/&gt;
+&lt;br/&gt;
+        assertEquals(foundFileNames.size(), fileNames.length);&lt;br/&gt;
+&lt;br/&gt;
+        subDir.delete();&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
     public void testReadFileToString() throws Exception &lt;/p&gt;
{
         File file = new File(getTestDirectory(), &quot;read.obj&quot;);
         FileOutputStream out = new FileOutputStream(file);
@@ -698,6 +778,25 @@

         }
&lt;p&gt;     }&lt;/p&gt;

&lt;p&gt;+    public void testIterateLines() throws Exception {&lt;br/&gt;
+        File file = newFile(&quot;lines.txt&quot;);&lt;br/&gt;
+        try {&lt;br/&gt;
+            String[] data = new String[] &lt;/p&gt;
{&quot;hello&quot;, &quot;/u1234&quot;, &quot;&quot;, &quot;this 
is&quot;, &quot;some text&quot;}
&lt;p&gt;;&lt;br/&gt;
+            createLineBasedFile(file, data);&lt;br/&gt;
+&lt;br/&gt;
+            Iterator lines = FileUtils.iterateLines(file, &quot;UTF-8&quot;);&lt;br/&gt;
+            int counter = 0;&lt;br/&gt;
+&lt;br/&gt;
+            while( lines.hasNext() ) &lt;/p&gt;
{
+                String line = (String) lines.next();
+                assertEquals(data[counter], line);
+                ++counter;
+            }
&lt;p&gt;+        } finally &lt;/p&gt;
{
+            deleteFile(file);
+        }
&lt;p&gt;+    }&lt;br/&gt;
+&lt;br/&gt;
     public void testWriteStringToFile1() throws Exception {&lt;br/&gt;
         File file = new File(getTestDirectory(), &quot;write.txt&quot;);&lt;br/&gt;
         FileUtils.writeStringToFile(file, &quot;Hello /u1234&quot;, &quot;UTF8&quot;);&lt;/p&gt;</description>
                <environment>&lt;p&gt;Operating System: other&lt;br/&gt;
Platform: All&lt;/p&gt;</environment>
        <key id="12342826">IO-32</key>
            <summary>[io][PATCH] Iterate over the lines in a file and the files in a directory</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jim.harrington@us.army.mil">Jim Harrington</reporter>
                        <labels>
                    </labels>
                <created>Sat, 31 Dec 2005 16:28:09 +0000</created>
                <updated>Fri, 9 Mar 2007 20:38:18 +0000</updated>
                            <resolved>Fri, 9 Mar 2007 20:38:18 +0000</resolved>
                                    <version>1.1</version>
                                    <fixVersion>1.2</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12411172" author="jim.harrington@us.army.mil" created="Sat, 31 Dec 2005 16:31:38 +0000"  >&lt;p&gt;Created an attachment (id=17300)&lt;br/&gt;
Patch to iterate the lines in a file and the files in a directory&lt;/p&gt;

&lt;p&gt;please ignore the patch text in the bug description.  I didn&apos;t see a way to get&lt;br/&gt;
it into the bug submission, so I put it in there.&lt;/p&gt;</comment>
                            <comment id="12411173" author="scolebourne@joda.org" created="Mon, 2 Jan 2006 01:30:44 +0000"  >&lt;p&gt;I have committed the File iterators. Thanks.&lt;/p&gt;

&lt;p&gt;The line iterator is more complicated than your implementation however. The&lt;br/&gt;
reason why we need a line iterator is so that a user can iterate through a very&lt;br/&gt;
large file line by line without having to load it all into memory. (There should&lt;br/&gt;
probably also be a char by char and byte by byte iterator for the same reason)&lt;/p&gt;

&lt;p&gt;I will open a thread on the mailing list to discuss this.&lt;/p&gt;</comment>
                            <comment id="12411174" author="niallp" created="Thu, 5 Jan 2006 22:54:50 +0000"  >&lt;p&gt;Created an attachment (id=17338)&lt;br/&gt;
Line Iterator implementation&lt;/p&gt;</comment>
                            <comment id="12411175" author="niallp" created="Thu, 5 Jan 2006 22:55:45 +0000"  >&lt;p&gt;Created an attachment (id=17339)&lt;br/&gt;
IOIterator Interface - includes a close() method.&lt;/p&gt;</comment>
                            <comment id="12411176" author="niallp" created="Thu, 5 Jan 2006 22:58:02 +0000"  >&lt;p&gt;Created an attachment (id=17340)&lt;br/&gt;
Patch FileUtils and IOUtils to provide static methods for LineIterator&lt;/p&gt;</comment>
                            <comment id="12411177" author="niallp" created="Thu, 5 Jan 2006 22:58:56 +0000"  >&lt;p&gt;Created an attachment (id=17341)&lt;br/&gt;
LineIteratorTestCase - JUnit Test for LineIterator&lt;/p&gt;</comment>
                            <comment id="12411178" author="sjr" created="Fri, 6 Jan 2006 07:07:51 +0000"  >&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;(In reply to comment #5)&lt;br/&gt;
&amp;gt; Created an attachment (id=17340) &lt;span class=&quot;error&quot;&gt;&amp;#91;edit&amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;gt; Patch FileUtils and IOUtils to provide static methods for LineIterator&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;+    public static Iterator lineIterator(InputStream input, String encoding) &lt;br/&gt;
+                     throws UnsupportedEncodingException {&lt;/p&gt;

&lt;p&gt;I think it&apos;s better if you declare a return type of LineIterator. This way, no&lt;br/&gt;
casts are necessary. People who don&apos;t care about the fact that it&apos;s a&lt;br/&gt;
LineReader will just say&lt;/p&gt;

&lt;p&gt;Iterator i = FileUtils.lineIterator( blah );&lt;/p&gt;

&lt;p&gt;Those who do will say&lt;/p&gt;

&lt;p&gt;LineIterator i = FileUtils.lineIterator( blah );&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
James&lt;/p&gt;</comment>
                            <comment id="12411179" author="niallp" created="Fri, 6 Jan 2006 07:31:02 +0000"  >&lt;p&gt;(In reply to comment #7)&lt;br/&gt;
&amp;gt; I think it&apos;s better if you declare a return type of LineIterator. This way, no&lt;br/&gt;
&amp;gt; casts are necessary. &lt;/p&gt;

&lt;p&gt;I&apos;m neutral on that, but if thats whats required I&apos;m happy to attach a new &lt;br/&gt;
version on that basis. Probably would be better if its an IOIterator, rather &lt;br/&gt;
than LineIterator though? I wasn&apos;t sure whether the having IOIterator that &lt;br/&gt;
extends Iterator to add a close() method or a separate interface with just the &lt;br/&gt;
close() was desired. Guess if the consensus is with you then better to extend &lt;br/&gt;
Iterator, otherwise it would have to return the implementation rather than the &lt;br/&gt;
type.&lt;/p&gt;

&lt;p&gt;&amp;gt; Iterator i = FileUtils.lineIterator( blah );&lt;br/&gt;
&amp;gt; Those who do will say&lt;br/&gt;
&amp;gt; LineIterator i = FileUtils.lineIterator( blah );&lt;/p&gt;

&lt;p&gt; IOIterator i = FileUtils.lineIterator( blah );&lt;/p&gt;

&lt;p&gt;&amp;gt; Regards,&lt;br/&gt;
&amp;gt; James&lt;/p&gt;

&lt;p&gt;The other thing I wondered was maybe its better to have a new RuntimeException &lt;br/&gt;
that includes the &quot;cause&quot; (I assume io is JDK 1.3 dependant, and not 1.4) &lt;br/&gt;
rather than trapping IOException and re-throwing IllegalStateException with &lt;br/&gt;
just the message.&lt;/p&gt;

&lt;p&gt;Niall&lt;/p&gt;</comment>
                            <comment id="12411180" author="sjr" created="Fri, 6 Jan 2006 08:12:28 +0000"  >&lt;p&gt;(In reply to comment #8)&lt;br/&gt;
&amp;gt; (In reply to comment #7)&lt;br/&gt;
&amp;gt; &amp;gt; I think it&apos;s better if you declare a return type of LineIterator. This way, no&lt;br/&gt;
&amp;gt; &amp;gt; casts are necessary. &lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; I&apos;m neutral on that, but if thats whats required I&apos;m happy to attach a new &lt;br/&gt;
&amp;gt; version on that basis. Probably would be better if its an IOIterator, rather &lt;br/&gt;
&amp;gt; than LineIterator though? I wasn&apos;t sure whether the having IOIterator that &lt;br/&gt;
&amp;gt; extends Iterator to add a close() method or a separate interface with just the &lt;br/&gt;
&amp;gt; close() was desired. Guess if the consensus is with you then better to extend &lt;br/&gt;
&amp;gt; Iterator, otherwise it would have to return the implementation rather than the &lt;br/&gt;
&amp;gt; type.&lt;/p&gt;

&lt;p&gt;I think the IOIterator is a good idea. There is an interface &quot;Closeable&quot; Java&lt;br/&gt;
1.5 which is used for the same purpose.&lt;/p&gt;

&lt;p&gt;&amp;gt;  IOIterator i = FileUtils.lineIterator( blah );&lt;/p&gt;

&lt;p&gt;Sorry to be pedantic, but ...&lt;/p&gt;

&lt;p&gt;Why declare i as an IOIterator when you can declare it as a LineIterator? I want&lt;br/&gt;
to iterate over Lines, not over IOs... But, anyway, the point is that if you&lt;br/&gt;
return LineIterator, you give the user the choice. We don&apos;t gain anything by&lt;br/&gt;
returning a superinterface in this case.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; The other thing I wondered was maybe its better to have a new RuntimeException &lt;br/&gt;
&amp;gt; that includes the &quot;cause&quot; (I assume io is JDK 1.3 dependant, and not 1.4) &lt;br/&gt;
&amp;gt; rather than trapping IOException and re-throwing IllegalStateException with &lt;br/&gt;
&amp;gt; just the message.&lt;/p&gt;

&lt;p&gt;I don&apos;t think hasNext() should throw any exceptions. If you cannot read the file&lt;br/&gt;
anymore, then there are no more elements. People using the Iterator interface&lt;br/&gt;
will not expect hasNext() to throw an exception. Just close the reader as you&lt;br/&gt;
have done.&lt;/p&gt;

&lt;p&gt;Also, next() should throw a NoSuchElementException, rather than &lt;br/&gt;
IllegalStateException, according to the Iterator javadoc.&lt;/p&gt;

&lt;p&gt;&amp;gt; Niall&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
James&lt;/p&gt;</comment>
                            <comment id="12411181" author="niallp" created="Fri, 6 Jan 2006 09:03:40 +0000"  >&lt;p&gt;(In reply to comment #9)&lt;br/&gt;
&amp;gt; I think the IOIterator is a good idea. There is an interface &quot;Closeable&quot; Java&lt;br/&gt;
&amp;gt; 1.5 which is used for the same purpose.&lt;br/&gt;
&amp;gt; &amp;gt;  IOIterator i = FileUtils.lineIterator( blah );&lt;br/&gt;
&amp;gt; Sorry to be pedantic, but ...&lt;br/&gt;
&amp;gt; Why declare i as an IOIterator when you can declare it as a LineIterator? &lt;/p&gt;

&lt;p&gt;IMO its better to keep the API to types rather than fixing on implementations - &lt;br/&gt;
that way, if a better implementation comes along at a later date then the &lt;br/&gt;
public API doesn&apos;t have to change at a to take advantage of it.&lt;/p&gt;

&lt;p&gt;&amp;gt; I want to &lt;br/&gt;
&amp;gt; iterate over Lines, not over IOs... But, anyway, the point is that if you&lt;br/&gt;
&amp;gt; return LineIterator, you give the user the choice. We don&apos;t gain anything by&lt;br/&gt;
&amp;gt; returning a superinterface in this case.&lt;/p&gt;

&lt;p&gt;You don&apos;t gain anything by returning a LineIterator - it has the same methods &lt;br/&gt;
(i.e. Iterator methods plus a close() method) as IOIterator - I created it with &lt;br/&gt;
that name as I was thinking there would be more flavours - Stephen talked about &lt;br/&gt;
a couple and I like the idea of a BufferedInputIterator that returns byte[].&lt;/p&gt;

&lt;p&gt;&amp;gt; &amp;gt; The other thing I wondered was maybe its better to have a new &lt;br/&gt;
RuntimeException &lt;br/&gt;
&amp;gt; &amp;gt; that includes the &quot;cause&quot; (I assume io is JDK 1.3 dependant, and not 1.4) &lt;br/&gt;
&amp;gt; &amp;gt; rather than trapping IOException and re-throwing IllegalStateException with &lt;br/&gt;
&amp;gt; &amp;gt; just the message.&lt;br/&gt;
&amp;gt; I don&apos;t think hasNext() should throw any exceptions. If you cannot read the &lt;br/&gt;
file&lt;br/&gt;
&amp;gt; anymore, then there are no more elements. People using the Iterator interface&lt;br/&gt;
&amp;gt; will not expect hasNext() to throw an exception. Just close the reader as you&lt;br/&gt;
&amp;gt; have done.&lt;/p&gt;

&lt;p&gt;I don&apos;t really like the idea of swallowing exceptions and carrying on as though &lt;br/&gt;
everything is fine - sounds like a PITA to debug.&lt;/p&gt;

&lt;p&gt;&amp;gt; Also, next() should throw a NoSuchElementException, rather than &lt;br/&gt;
&amp;gt; IllegalStateException, according to the Iterator javadoc.&lt;/p&gt;

&lt;p&gt;OK I&apos;ll change this, thx.&lt;/p&gt;

&lt;p&gt;&amp;gt; &amp;gt; Niall&lt;br/&gt;
&amp;gt; Regards,&lt;br/&gt;
&amp;gt; James&lt;/p&gt;
</comment>
                            <comment id="12411182" author="scolebourne@joda.org" created="Fri, 6 Jan 2006 09:51:22 +0000"  >&lt;p&gt;I hope I haven&apos;t annoyed anyone by committing the first cut of this. This is&lt;br/&gt;
based on your last patches attached here.&lt;/p&gt;

&lt;p&gt;The LineIterator also has a nextLine() method which I have added and tested. As&lt;br/&gt;
such, the most specific class possible should definitely be returned from the&lt;br/&gt;
Utils classes, which is what I have done.&lt;/p&gt;

&lt;p&gt;I have also clarified the close, and added a closeQuietly().&lt;/p&gt;

&lt;p&gt;Future iterators could be CharacterIterator, ByteIterator etc. The question is&lt;br/&gt;
whether these should each be separate iterators or just one big iterator.&lt;/p&gt;</comment>
                            <comment id="12411183" author="niallp" created="Fri, 6 Jan 2006 10:54:48 +0000"  >&lt;p&gt;(In reply to comment #11)&lt;br/&gt;
&amp;gt; I hope I haven&apos;t annoyed anyone by committing the first cut of this. This is&lt;br/&gt;
&amp;gt; based on your last patches attached here.&lt;/p&gt;

&lt;p&gt;Excellent, thx &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; The LineIterator also has a nextLine() method which I have added and tested. &lt;br/&gt;
As&lt;br/&gt;
&amp;gt; such, the most specific class possible should definitely be returned from the&lt;br/&gt;
&amp;gt; Utils classes, which is what I have done.&lt;/p&gt;

&lt;p&gt;Personally I don&apos;t agree with this, as I said in my reply to James - but I can &lt;br/&gt;
cope with agreeing to differ &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; and the main thing is that you&apos;ve committed it &lt;br/&gt;
already, which is great.&lt;/p&gt;

&lt;p&gt;Niall&lt;/p&gt;

&lt;p&gt;P.S. Sorry I closed this by accident when I replied earlier - must have been a &lt;br/&gt;
mouse thing.&lt;/p&gt;</comment>
                            <comment id="12411184" author="scolebourne@joda.org" created="Sun, 15 Jan 2006 02:08:45 +0000"  >&lt;p&gt;This seems to be done now&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12333965" name="ASF.LICENSE.NOT.GRANTED--IOIterator.java" size="1181" author="niallp" created="Thu, 5 Jan 2006 22:55:45 +0000"/>
                            <attachment id="12333964" name="ASF.LICENSE.NOT.GRANTED--LineIterator.java" size="3256" author="niallp" created="Thu, 5 Jan 2006 22:54:50 +0000"/>
                            <attachment id="12333967" name="ASF.LICENSE.NOT.GRANTED--LineIteratorTestCase.java" size="8270" author="niallp" created="Thu, 5 Jan 2006 22:58:56 +0000"/>
                            <attachment id="12333966" name="ASF.LICENSE.NOT.GRANTED--io_LineIterator.patch" size="4013" author="niallp" created="Thu, 5 Jan 2006 22:58:02 +0000"/>
                            <attachment id="12333963" name="ASF.LICENSE.NOT.GRANTED--iterate_lines_files.patch" size="8424" author="jim.harrington@us.army.mil" created="Sat, 31 Dec 2005 16:31:38 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                        <customfieldname>Bugzilla Id</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38083</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 2 Jan 2006 01:30:44 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>139493</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            10 years, 47 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0smvj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>165183</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>