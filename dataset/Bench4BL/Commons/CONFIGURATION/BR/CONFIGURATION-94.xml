<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Thu Dec 01 19:39:31 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CONFIGURATION-94/CONFIGURATION-94.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CONFIGURATION-94] [configuration] AbstractFileConfiguration.save() creates a new file instead of overwritting the existing one</title>
                <link>https://issues.apache.org/jira/browse/CONFIGURATION-94</link>
                <project id="12310467" key="CONFIGURATION">Commons Configuration</project>
                    <description>&lt;p&gt;The manner in wich a file is found and read... versus how it is check for &lt;br/&gt;
existance and overriden are different. Thus a file that is found and &lt;br/&gt;
successfully read, will not always be updated correctly when using setProperty&lt;br/&gt;
(key,value); Instead a new file will be generated containing the new &lt;br/&gt;
configuration information.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Operating System: All&lt;br/&gt;
Platform: All&lt;/p&gt;</environment>
        <key id="12342168">CONFIGURATION-94</key>
            <summary>[configuration] AbstractFileConfiguration.save() creates a new file instead of overwritting the existing one</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jmguillemette@gmail.com">Jamie M. Guillemette</reporter>
                        <labels>
                    </labels>
                <created>Fri, 8 Apr 2005 06:19:49 +0000</created>
                <updated>Sat, 22 Aug 2009 19:36:41 +0000</updated>
                            <resolved>Tue, 10 Apr 2007 14:48:57 +0000</resolved>
                                                    <fixVersion>1.2</fixVersion>
                                        <due></due>
                            <votes>1</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12409060" author="jmguillemette@gmail.com" created="Fri, 8 Apr 2005 06:23:22 +0000"  >&lt;p&gt;Created an attachment (id=14655)&lt;br/&gt;
Fixed Save() logic&lt;/p&gt;

&lt;p&gt;The load method uses ConfigurationUtils.locate(basePath, fileName);&lt;br/&gt;
to locate a file. Ive updated the save() method to implement the same method.&lt;br/&gt;
Previously this method used ConfigurationUtils.getFile(fileName);&lt;/p&gt;

&lt;p&gt;The method of searching for the resource differs in these two methods.&lt;/p&gt;</comment>
                            <comment id="12409061" author="jmguillemette@gmail.com" created="Fri, 8 Apr 2005 06:48:52 +0000"  >&lt;p&gt;Created an attachment (id=14658)&lt;br/&gt;
Just the changed logic&lt;/p&gt;

&lt;p&gt;public void save(String fileName) throws ConfigurationException{&lt;br/&gt;
  try{&lt;br/&gt;
     URL url = ConfigurationUtils.locate(basePath, fileName);&lt;br/&gt;
     File file = new File(url.getPath());&lt;br/&gt;
     if (file == null)&lt;/p&gt;
{
	throw new ConfigurationException(&quot;Invalid file name for save:
&quot;+fileName);
     }
&lt;p&gt;     save(file);&lt;br/&gt;
  } catch (Exception e)&lt;/p&gt;
{
     throw new ConfigurationException(e.getMessage(), e);
  }
&lt;p&gt;}&lt;/p&gt;</comment>
                            <comment id="12409062" author="oliver.heger@t-online.de" created="Fri, 8 Apr 2005 15:09:50 +0000"  >&lt;p&gt;Jamie,&lt;/p&gt;

&lt;p&gt;thanks for your patch. Some comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;A very important point are unit tests. If you can provide a test case that&lt;br/&gt;
fails before the patch is applied and runs afterwards, this will demonstrate the&lt;br/&gt;
problem and show that it is indeed solved.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Shouldn&apos;t the line File file = new File(url.getPath()); be replaced by File&lt;br/&gt;
file = ConfigurationUtils.fileFromURL(url); ? Otherwise the test for null won&apos;t&lt;br/&gt;
make sense.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;There are some coding conventions, e.g. that curly brackets are placed on a&lt;br/&gt;
new line. Please ensure that your code looks like the other code around it.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;And a more general point: I think the root cause for the problems is that the&lt;br/&gt;
location of the config file as it was resolved in the load() method is not&lt;br/&gt;
stored. Using the same resolving logic again in the save() method will likely&lt;br/&gt;
result in the same location, but this is not guaranteed. So I am not sure&lt;br/&gt;
whether this patch will solve all problems. A while ago we had a discussion&lt;br/&gt;
about redesigning the whole file resolving logic by introducing Locator objects,&lt;br/&gt;
which implement specific algorithms for finding files (e.g. from a URL, from the&lt;br/&gt;
classpath, etc.). But IIRC we didn&apos;t find a consensus then. Maybe it&apos;s time to&lt;br/&gt;
start this discussion again?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12409063" author="jmguillemette@gmail.com" created="Fri, 8 Apr 2005 23:07:14 +0000"  >&lt;p&gt;I think youve touched upon the main issue. We create configurations but do not &lt;br/&gt;
retain the location.. thus forcing us to re-discover the location when saving.&lt;/p&gt;

&lt;p&gt;A simple strategy that might work is no matter how the filename / path is fead &lt;br/&gt;
to the code, we resolve its URL and store the URL as part of the configuration.&lt;br/&gt;
Save() methods will no longer resolve the path, instead they will just read the &lt;br/&gt;
currently stored URL. &lt;/p&gt;

&lt;p&gt;Using a URL is best as it will enable in jar references.&lt;/p&gt;

&lt;p&gt;As for there being no consense... I think thats when a project leader(s) just &lt;br/&gt;
have to make a choice and go with it. This is a reasonably serious bug. I was &lt;br/&gt;
looking to use this library in a project... but without this feature working &lt;br/&gt;
properly its a total show stopper for me. I&apos;d be happy to implement the changes &lt;br/&gt;
to use URL. (Id even rewrite the unit tests and use a new line for { format... )&lt;/p&gt;
</comment>
                            <comment id="12409064" author="ebourg" created="Fri, 8 Apr 2005 23:23:29 +0000"  >&lt;p&gt;This issue was one of the points I raised when we refactored the resource&lt;br/&gt;
resolution in AbtractFileConfiguration. I agree that the file should be saved at&lt;br/&gt;
the exact location it was loaded, that means going back to the pain of storing&lt;br/&gt;
the URL and ensuring its consistency with the filename and the basepath :/&lt;/p&gt;</comment>
                            <comment id="12409065" author="jmguillemette@gmail.com" created="Fri, 8 Apr 2005 23:36:01 +0000"  >&lt;p&gt;how concerned are we with FULL backwards compatibility....&lt;br/&gt;
ie.. currently some logic may be pointed directly to save(string filename)&lt;br/&gt;
where if we store the URL .. save() might be a more appropriate method and save&lt;br/&gt;
(string filename) becomes a saveAs style feature....&lt;/p&gt;</comment>
                            <comment id="12409066" author="oliver.heger@t-online.de" created="Sat, 9 Apr 2005 18:51:28 +0000"  >&lt;p&gt;(In reply to comment #5)&lt;br/&gt;
&amp;gt; I agree that the file should be saved at&lt;br/&gt;
&amp;gt; the exact location it was loaded, that means going back to the pain of storing&lt;br/&gt;
&amp;gt; the URL and ensuring its consistency with the filename and the basepath :/&lt;/p&gt;

&lt;p&gt;Maybe it need not be as bad as before. I think it should be enough to only store&lt;br/&gt;
the URL in one of the load() methods. We could make this information accessable&lt;br/&gt;
by a getCurrentURL() or getSourceURL() method, which returns null until load()&lt;br/&gt;
was called. I see no need that this URL is updated whenever the filename or&lt;br/&gt;
basepath change.&lt;/p&gt;</comment>
                            <comment id="12409067" author="oliver.heger@t-online.de" created="Sat, 9 Apr 2005 19:05:05 +0000"  >&lt;p&gt;(In reply to comment #6)&lt;br/&gt;
&amp;gt; how concerned are we with FULL backwards compatibility....&lt;br/&gt;
&amp;gt; ie.. currently some logic may be pointed directly to save(string filename)&lt;br/&gt;
&amp;gt; where if we store the URL .. save() might be a more appropriate method and save&lt;br/&gt;
&amp;gt; (string filename) becomes a saveAs style feature....&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;In the JavaDoc of AbstractFileConfiguration there is noted for some of the&lt;br/&gt;
save() methods that they do not change the internal file name, among them the&lt;br/&gt;
save(String filename) method. Is it possible to keep the semantic of these&lt;br/&gt;
methods or do you see problems for some of them?&lt;/p&gt;

&lt;p&gt;Oh, and if you are interested in the discussion about locators, the thread can&lt;br/&gt;
be found here:&lt;br/&gt;
&lt;a href=&quot;http://mail-archives.eu.apache.org/mod_mbox/jakarta-commons-dev/200412.mbox/%3c41B5E5E4.5080602@lfjr.net%3e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.eu.apache.org/mod_mbox/jakarta-commons-dev/200412.mbox/%3c41B5E5E4.5080602@lfjr.net%3e&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12409068" author="jmguillemette@gmail.com" created="Wed, 13 Apr 2005 05:12:45 +0000"  >&lt;p&gt;Ok .. took me a bit to figure out a test case that would work for 99% of the &lt;br/&gt;
people out there...&lt;/p&gt;

&lt;p&gt;   /***&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Test loading using URL and saving ...&lt;/li&gt;
	&lt;li&gt;This is a test to prove an obscure but none abnormal bug&lt;/li&gt;
	&lt;li&gt;that occurs when i file is loaded from a classpath...&lt;/li&gt;
	&lt;li&gt;due to how we &quot;search&quot; for files&lt;/li&gt;
	&lt;li&gt;(see &lt;a href=&quot;https://issues.apache.org/jira/browse/CONFIGURATION-94&quot; title=&quot;[configuration] AbstractFileConfiguration.save() creates a new file instead of overwritting the existing one&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CONFIGURATION-94&quot;&gt;&lt;del&gt;COM-2016&lt;/del&gt;&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;@author JMGuillemette&lt;br/&gt;
     */&lt;br/&gt;
    public void testLoadAndSaveURL()throws Exception
	{
    	Properties sysProps = System.getProperties();
    	String path = sysProps.getProperty(&quot;user.home&quot;);
		File file1 = new File(path+&quot;/file1.properties&quot;);
    	Properties p = new Properties();
    	p.put(&quot;Prop1&quot;,&quot;value&quot;);
    	FileOutputStream fos = new FileOutputStream(file1);
    	p.store(fos,&quot;test file&quot;);
    	fos.close();
    	FileConfiguration config = new PropertiesConfiguration
(&quot;file1.properties&quot;);
    	config.setProperty(&quot;Prop1&quot;,&quot;newValue&quot;);
    	config.save();
    	Properties props = new Properties();// independant checking of save 
feature
    	props.load(new FileInputStream(file1));
    	assertTrue(&quot;Should contain new value&quot;,props.containsKey(&quot;Prop1&quot;));
    	assertTrue(&quot;Value should be updated&quot;,&quot;newValue&quot;.equals(props.get
(&quot;Prop1&quot;)));
   }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This code will fail due to the existing bug.&lt;br/&gt;
Basically .. we create a file within the realm of our load()&apos;s search area&lt;br/&gt;
in this cause user.home .. but when we save the file.. it will end up save it &lt;br/&gt;
to &amp;lt;executionpath&amp;gt;/ thus .. manual reading the props will find that the new &lt;br/&gt;
values dont exists and the test fails.&lt;/p&gt;

&lt;p&gt;J.&lt;/p&gt;
</comment>
                            <comment id="12409069" author="petec33@gmail.com" created="Wed, 13 Apr 2005 14:17:19 +0000"  >&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/CONFIGURATION-77&quot; title=&quot;[configuration]  PropertiesConfiguration constructor doesn&amp;#39;t load resource from classpath.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CONFIGURATION-77&quot;&gt;&lt;del&gt;COM-2028&lt;/del&gt;&lt;/a&gt; has been marked as a duplicate of this bug. ***&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12409070" author="jmguillemette@gmail.com" created="Wed, 13 Apr 2005 23:36:57 +0000"  >&lt;p&gt;Hi Everyone,&lt;/p&gt;

&lt;p&gt;I have been working on a set of fixes for the bugs  that are documented for the &lt;br/&gt;
AbstractFileConfiguration and I wanted to run a few things by everyone for your &lt;br/&gt;
input.&lt;/p&gt;

&lt;p&gt;Changes to File Loading:&lt;/p&gt;

&lt;p&gt;Ive updated the load methods to cascade into one another thus place 99% of the &lt;br/&gt;
real business logic into a single load method. ( In this case load(URL url) )&lt;/p&gt;

&lt;p&gt;thus:&lt;br/&gt;
load(String fileName)&lt;br/&gt;
woud create a file and from the filename and then pass to &lt;br/&gt;
load(File file)&lt;br/&gt;
which would get the URL and pass to&lt;br/&gt;
load(URL url)&lt;br/&gt;
which would be the primary loading mechanism.&lt;/p&gt;

&lt;p&gt;load()&lt;br/&gt;
would use the stored url (instance variable) to forward to load(URL url)&lt;/p&gt;

&lt;p&gt;This then leads to the saving strategy.&lt;/p&gt;

&lt;p&gt;Calling save() will save your current configuration using the existing &lt;br/&gt;
filename, path ect...&lt;br/&gt;
calling save(String fileName) or any other save method that includes a &lt;br/&gt;
parameter is actually a saveAs type feature.&lt;/p&gt;

&lt;p&gt;Updating values&lt;/p&gt;

&lt;p&gt;Updating the path and filename values will actually update the internally &lt;br/&gt;
stored URL.&lt;br/&gt;
thus calling setFileName(String name) should cause us to get the basePath.. &lt;br/&gt;
tack on the fileName and generate the new URL to be used for loading and &lt;br/&gt;
calling save().&lt;br/&gt;
The same logic is applied to setBasePath, setURL ect...&lt;br/&gt;
Doing this has ment that the setFileName setBasePath setURL methods now must &lt;br/&gt;
all throw ConfigurationException(s)&lt;br/&gt;
where previously they did not.This is because if we update the instance URL we &lt;br/&gt;
may encounter a malformedUrlException... &lt;/p&gt;

&lt;p&gt;These changes may also require updating some of our test cases.. ive been &lt;br/&gt;
reviewing them as I write this email.&lt;/p&gt;

&lt;p&gt;Please let me know your thoughts.&lt;/p&gt;
</comment>
                            <comment id="12409071" author="jmguillemette@gmail.com" created="Thu, 14 Apr 2005 00:04:17 +0000"  >&lt;p&gt;One last note.. &lt;br/&gt;
getBasePath();&lt;/p&gt;

&lt;p&gt;this method currently returns different values based on if you started off with &lt;br/&gt;
a URL or a String / filename. &lt;br/&gt;
ie..&lt;br/&gt;
new PropertiesConfigurationFile(&quot;/mydir/myConfiguFile.properites&quot;);&lt;br/&gt;
would have a base path of /mydir/&lt;br/&gt;
but new PropertiesConfigurationFile&lt;br/&gt;
(&quot;file://mydir/myConfigurationFile.properties&quot;);&lt;br/&gt;
woul have a base path of &lt;a href=&quot;file://mydir/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file://mydir/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;both instance however would still have a getURL method.. that would return a &lt;br/&gt;
url full path.&lt;/p&gt;

&lt;p&gt;Since im proposing using the a URL as the internal base for file location&lt;br/&gt;
basePath now has a new challenge.  Do we still return different values based on &lt;br/&gt;
how the configuration was initialized... ? or do we decide on a common form for &lt;br/&gt;
base path..&lt;br/&gt;
lets say.. base path is now the path without protocol&lt;br/&gt;
ie.. &lt;a href=&quot;file:/mydir/myCOnfiguration.properties&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:/mydir/myCOnfiguration.properties&lt;/a&gt; basepath is now /mydir/&lt;br/&gt;
same as if it was create using File(/mydir/myConfiguration.properties) &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;and for those that need the URL base path..version we add a new method to the &lt;br/&gt;
interface&lt;/p&gt;

&lt;p&gt;getURLBasePath();&lt;/p&gt;

&lt;p&gt;which would return &lt;a href=&quot;file:/mydir/myConfiguration&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:/mydir/myConfiguration&lt;/a&gt; even if you created the &lt;br/&gt;
configuration using a string or file parameter..&lt;/p&gt;

&lt;p&gt;(i know that was all a bit wordy.. sorry about that.. let me know your thoughts)&lt;/p&gt;</comment>
                            <comment id="12409072" author="oliver.heger@t-online.de" created="Thu, 14 Apr 2005 02:39:18 +0000"  >&lt;p&gt;Hey, thanks for your work! Here are some of my thoughts:&lt;/p&gt;

&lt;p&gt;WRT load() methods: I may be wrong, but I thought that the load() methods were&lt;br/&gt;
already implemented in a way that they call each other and that most part of the&lt;br/&gt;
logic was placed in one of them. If your load(URL) method does the job, how do&lt;br/&gt;
you handle readers and streams then?&lt;/p&gt;

&lt;p&gt;WRT save(): The save as semantic is okay with me, I think this is compatible&lt;br/&gt;
with the actual implementation, isn&apos;t it?&lt;/p&gt;

&lt;p&gt;WRT setting the file name stuff: I am -1 that these methods should throw&lt;br/&gt;
exceptions. Wouldn&apos;t it be possible to evaluate the values lazy, i.e. when the&lt;br/&gt;
load() method is called? As I already pointed out, for me there is no need that&lt;br/&gt;
all of the getters and setters are always in sync. If the URL that is used by&lt;br/&gt;
the load() method is stored and used again by save(), this is fine.&lt;/p&gt;

&lt;p&gt;From your description I get the impression that the whole process is quite&lt;br/&gt;
delicate, and I bet there will be a bunch of other opinions about how&lt;br/&gt;
ambiguities (e.g. with the base path) should be resolved. So I would recommend&lt;br/&gt;
to provide only simple getters and setters and in addition allow to retrieve the&lt;br/&gt;
resolved URL used by load().&lt;/p&gt;

&lt;p&gt;I see this fix as a temporary solution only. For the long run I am for the locators.&lt;/p&gt;</comment>
                            <comment id="12409073" author="jmguillemette@gmail.com" created="Thu, 14 Apr 2005 02:59:11 +0000"  >&lt;p&gt;WRT: Methods&lt;br/&gt;
Yes they did cascade into one another.. but some contained code to set the base &lt;br/&gt;
path. ect.. along the way. This created a disconnect in when and what some of &lt;br/&gt;
the get/setters would return based on how you initialized/created the &lt;br/&gt;
configuration. This is futher compounded by the fact that you can change the &lt;br/&gt;
filename, basepath ect and it may not effect how the file is loaded / saved!&lt;/p&gt;

&lt;p&gt;The goal of my changes is two fold. I would like to fix the existing bug. But &lt;br/&gt;
in doing so we are also forced to re-examine fields such as basePath.&lt;br/&gt;
and how they are related to the actual configuration file.&lt;/p&gt;

&lt;p&gt;What I have come up with is something like this:&lt;/p&gt;

&lt;p&gt;Lets say you create a PropertiesConfiguration(&quot;/myDir/MyConfig.properties&quot;);&lt;br/&gt;
the base path would be /myDir/&lt;br/&gt;
the filename is MyConfig.properties&lt;br/&gt;
if you save() the file will replace the existing file.(or create the file anew)&lt;br/&gt;
if you save(String newName) a copy of the existing settings will be saved to &lt;br/&gt;
newName but the existing configuration is unchanged&lt;br/&gt;
if you setFileName( newName.props);&lt;br/&gt;
the configuration will now use the new fileName from this point forward&lt;br/&gt;
thus save() would now store to /myDir/newName.props&lt;br/&gt;
The same applies to basePath.&lt;br/&gt;
if you setBasePath(&quot;/newDir&quot;);&lt;br/&gt;
the new stored location is now /newDir/newName.props&lt;/p&gt;

&lt;p&gt;This logic must work weither the user is using URL / String or File to create / &lt;br/&gt;
manipulate the configuration.&lt;/p&gt;

&lt;p&gt;So far.. ive got the changes almost complete.&lt;/p&gt;

&lt;p&gt;Im aware that what im doing here is more than just fixing the existing bug. &lt;br/&gt;
And that prior to now these settings had no guarrenty of being in synch with &lt;br/&gt;
where save() actually store data... but then if its not in synch.. what go are &lt;br/&gt;
they?&lt;/p&gt;

&lt;p&gt;The only place i ran into a potential issue is for web based URLs..&lt;br/&gt;
ie &lt;a href=&quot;http://www.myweb.com/myprops.props&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.myweb.com/myprops.props&lt;/a&gt;&lt;br/&gt;
for this configuration basePath should not return &lt;a href=&quot;http://www.myweb.com/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.myweb.com/&lt;/a&gt;&lt;br/&gt;
this is unconsitent as it means the base app now has to be smart enough to &lt;br/&gt;
change the basePath to a URL.&lt;br/&gt;
Instead I would add getURLBase and return null from getBasePath&lt;br/&gt;
where getURLBase returns a URL for all implementation (including local files);&lt;br/&gt;
but getBase.. im not sure.. so right now null if the URL is a remote url.&lt;/p&gt;



</comment>
                            <comment id="12409074" author="jmguillemette@gmail.com" created="Fri, 15 Apr 2005 01:36:44 +0000"  >&lt;p&gt;Hey Guys,&lt;br/&gt;
Sorry about my last rant there.. I think was getting to close the problem.&lt;br/&gt;
I backed away today and started fresh.. He is the fix i would like to propose.&lt;/p&gt;

&lt;p&gt;1) add a URL instance variable&lt;br/&gt;
2) setURL will now update this instance var.&lt;br/&gt;
3) getURL will return the instance var if not null else will return using &lt;br/&gt;
existing logic ConfigurationUtils.local(basePath,fileName);&lt;br/&gt;
4) Load will check if URL is not null if it is will default to existing load&lt;br/&gt;
(filename) method. if it isnt null it will use load(URL)&lt;br/&gt;
5) Load(String fileName) will remain the same.. but when it resolve the URL it &lt;br/&gt;
will populate its internal instace URL var. This way all future url calls / &lt;br/&gt;
save / load will be url based&lt;/p&gt;

&lt;p&gt;Thats it.. its just a few lines of extra code placed in several methods.&lt;br/&gt;
Let me know your thoughts.. im running the unit tests on it now &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12409075" author="jmguillemette@gmail.com" created="Fri, 15 Apr 2005 01:55:56 +0000"  >&lt;p&gt;Unit test all passed &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Ill write up a cleaner unit test that what i submitted earlier to better &lt;br/&gt;
demonstrate the bug.&lt;br/&gt;
The new fix is less than 10 lines of code strategically placed &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; far less &lt;br/&gt;
drastic that what i was originally working on.&lt;/p&gt;

&lt;p&gt;Ill submit it later tonight when i can properly make a patch file.&lt;/p&gt;

&lt;p&gt;J.&lt;/p&gt;</comment>
                            <comment id="12409076" author="jmguillemette@gmail.com" created="Tue, 19 Apr 2005 04:57:21 +0000"  >&lt;p&gt;arg,&lt;/p&gt;

&lt;p&gt;Hi everyone, i finished my fix.. rexamined it.. and decided it wasnt clean at &lt;br/&gt;
all.&lt;/p&gt;

&lt;p&gt;one of the issues i ran into was if we store the file URL .. if we do a &lt;br/&gt;
setFileName or setBasePath should we also automatically update the URL... &lt;br/&gt;
my quess is yes.. this is not.. but that leads to what to return when the user &lt;br/&gt;
calls getBasePath&lt;/p&gt;

&lt;p&gt;currently if the user set the URL via setURL basePath returns a &lt;a href=&quot;file://my&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file://my&lt;/a&gt; file&lt;br/&gt;
but if they use lets say a file object .. via setFile() then basepath returns &lt;br/&gt;
c:/yourFile&lt;/p&gt;

&lt;p&gt;basepath is changing based on how the file path / name was set. &lt;/p&gt;

&lt;p&gt;So this creates a problem. Using the URL is a master reference we can still &lt;br/&gt;
resolved the base path via configurationUtils.getBasePath(url) but it will no &lt;br/&gt;
longer change based on how the values where initailly set.&lt;/p&gt;

&lt;p&gt;A) is this bad?&lt;br/&gt;
b) should basepath be changing based on how the file / path was set anyways.? &lt;br/&gt;
shouldnt it be more consistent?&lt;/p&gt;

&lt;p&gt;Really need some guidance here form the active members. Cause it looks like any &lt;br/&gt;
solution to this bug is going to have minor functionality changes that im &lt;br/&gt;
trying to avoid.&lt;/p&gt;

&lt;p&gt;J.&lt;/p&gt;</comment>
                            <comment id="12409077" author="oliver.heger@t-online.de" created="Tue, 19 Apr 2005 17:41:48 +0000"  >&lt;p&gt;Obviously there is no perfect solution that fits all needs and makes everybody&lt;br/&gt;
happy. This may in part be due to the fact that the basepath/filename form we&lt;br/&gt;
currently use is no good representation for all suported possibilities (e.g.&lt;br/&gt;
resources from classpath).&lt;/p&gt;

&lt;p&gt;Okay, the main problem is that the save() method sometimes uses a different file&lt;br/&gt;
than the one that was originally loaded, right?. I think it should be possible&lt;br/&gt;
to solve this without modifying existing getter and setter methods: By&lt;br/&gt;
introducing a new sourceURL property. This property is null until a load()&lt;br/&gt;
method is called or a new configuration is saved for the first time. Then the&lt;br/&gt;
final URL is resolved based on the setters that have been called before. From&lt;br/&gt;
now on save() uses this URL to store the properties. If file name or path setter&lt;br/&gt;
methods are called again later, the sourceURL property is reset to null.&lt;/p&gt;</comment>
                            <comment id="12409078" author="jmguillemette@gmail.com" created="Wed, 20 Apr 2005 03:09:16 +0000"  >&lt;p&gt;Oliver,&lt;/p&gt;

&lt;p&gt;Simple enough fix. Im happy you agree that there was no all encompassing &lt;br/&gt;
strategy. I was storing the url.. then trying to keep it updated when basepath &lt;br/&gt;
ect are being set.. which worked.. but then some functionality changed.. which &lt;br/&gt;
sucked... ect..&lt;/p&gt;

&lt;p&gt;Ill implement the simple fix and post it...&lt;/p&gt;</comment>
                            <comment id="12409079" author="jmguillemette@gmail.com" created="Wed, 20 Apr 2005 04:42:22 +0000"  >&lt;p&gt;Created an attachment (id=14765)&lt;br/&gt;
Unit test update patch to illustrate bug&lt;/p&gt;

&lt;p&gt;This patch updates the FileConfigurationTest unit tests with a test that&lt;br/&gt;
illustrates the original bug.&lt;/p&gt;</comment>
                            <comment id="12409080" author="jmguillemette@gmail.com" created="Wed, 20 Apr 2005 04:43:27 +0000"  >&lt;p&gt;Created an attachment (id=14766)&lt;br/&gt;
patch fix for AbstractFileConfiguration&lt;/p&gt;

&lt;p&gt;This patch add sourceURL to the fileConfiguration which solves the bug&lt;br/&gt;
illustrated in previous patch.&lt;/p&gt;</comment>
                            <comment id="12409081" author="jmguillemette@gmail.com" created="Thu, 21 Apr 2005 20:37:32 +0000"  >&lt;p&gt;Awaiting active members to confirm the patches posted. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12409082" author="oliver.heger@t-online.de" created="Thu, 21 Apr 2005 23:04:35 +0000"  >&lt;p&gt;Hi Jamie, many thanks for your work.&lt;/p&gt;

&lt;p&gt;I tried to have a look at your patch for AbstractFileConfiguration, but I think&lt;br/&gt;
something is wrong with this diff. It seems to contain only deleted lines for&lt;br/&gt;
the whole file.&lt;/p&gt;

&lt;p&gt;Could you please double check?&lt;br/&gt;
Thanks!&lt;/p&gt;</comment>
                            <comment id="12409083" author="jmguillemette@gmail.com" created="Mon, 25 Apr 2005 23:07:32 +0000"  >&lt;p&gt;Not sure my patch generation system is working properly.. &lt;br/&gt;
hence ill just post the full code &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12409084" author="jmguillemette@gmail.com" created="Mon, 25 Apr 2005 23:08:27 +0000"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;AbstractFileConfiguration.java&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;/*&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Copyright 2004-2005 The Apache Software Foundation.&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;)&lt;/li&gt;
	&lt;li&gt;you may not use this file except in compliance with the License.&lt;/li&gt;
	&lt;li&gt;You may obtain a copy of the License at&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;Unless required by applicable law or agreed to in writing, software&lt;/li&gt;
	&lt;li&gt;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&lt;/li&gt;
	&lt;li&gt;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/li&gt;
	&lt;li&gt;See the License for the specific language governing permissions and&lt;/li&gt;
	&lt;li&gt;limitations under the License.&lt;br/&gt;
 */&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;package org.apache.commons.configuration;&lt;/p&gt;

&lt;p&gt;import java.io.File;&lt;br/&gt;
import java.io.FileOutputStream;&lt;br/&gt;
import java.io.IOException;&lt;br/&gt;
import java.io.InputStream;&lt;br/&gt;
import java.io.InputStreamReader;&lt;br/&gt;
import java.io.OutputStream;&lt;br/&gt;
import java.io.OutputStreamWriter;&lt;br/&gt;
import java.io.Reader;&lt;br/&gt;
import java.io.UnsupportedEncodingException;&lt;br/&gt;
import java.io.Writer;&lt;br/&gt;
import java.net.URL;&lt;br/&gt;
import java.util.Iterator;&lt;/p&gt;

&lt;p&gt;import org.apache.commons.configuration.reloading.InvariantReloadingStrategy;&lt;br/&gt;
import org.apache.commons.configuration.reloading.ReloadingStrategy;&lt;/p&gt;

&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;Partial implementation of the &amp;lt;code&amp;gt;FileConfiguration&amp;lt;/code&amp;gt; interface.&lt;/li&gt;
	&lt;li&gt;Developpers of file based configuration may want to extend this class,&lt;/li&gt;
	&lt;li&gt;the two methods left to implement are 
{@see AbstractFileConfiguration#load
(Reader)}&lt;/li&gt;
	&lt;li&gt;and 
{@see AbstractFileConfiguration#save(Reader)}
&lt;p&gt;.&amp;lt;/p&amp;gt;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;This base class already implements a couple of ways to specify the&lt;br/&gt;
location&lt;/li&gt;
	&lt;li&gt;of the file this configuration is based on. The following possibilities&lt;/li&gt;
	&lt;li&gt;exist:&lt;/li&gt;
	&lt;li&gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;URLs: With the method &amp;lt;code&amp;gt;setURL()&amp;lt;/code&amp;gt; a full URL to the&lt;/li&gt;
	&lt;li&gt;configuration source can be specified. This is the most flexible way. Note&lt;/li&gt;
	&lt;li&gt;that the &amp;lt;code&amp;gt;save()&amp;lt;/code&amp;gt; methods support only &amp;lt;em&amp;gt;file:&amp;lt;/em&amp;gt; URLs.&amp;lt;/li&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;li&amp;gt;Files: The &amp;lt;code&amp;gt;setFile()&amp;lt;/code&amp;gt; method allows to specify the&lt;/li&gt;
	&lt;li&gt;configuration source as a file. This can be either a relative or an&lt;/li&gt;
	&lt;li&gt;absolute file. In the former case the file is resolved based on the current&lt;/li&gt;
	&lt;li&gt;directory.&amp;lt;/li&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;li&amp;gt;As file paths in string form: With the &amp;lt;code&amp;gt;setPath()&amp;lt;/code&amp;gt; method a&lt;/li&gt;
	&lt;li&gt;full path to a configuration file can be provided as a string.&amp;lt;/li&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;li&amp;gt;Separated as base path and file name: This is the native form in which&lt;/li&gt;
	&lt;li&gt;the location is stored. The base path is a string defining either a local&lt;/li&gt;
	&lt;li&gt;directory or a URL. It can be set using the &amp;lt;code&amp;gt;setBasePath()&amp;lt;/code&amp;gt;&lt;/li&gt;
	&lt;li&gt;method. The file name, non surprisingly, defines the name of the&lt;br/&gt;
configuration&lt;/li&gt;
	&lt;li&gt;file.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/p&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;Note that the &amp;lt;code&amp;gt;load()&amp;lt;/code&amp;gt; methods do not wipe out the&lt;br/&gt;
configuration&apos;s&lt;/li&gt;
	&lt;li&gt;content before the new configuration file is loaded. Thus it is very easy to&lt;/li&gt;
	&lt;li&gt;construct a union configuration by simply loading multiple configuration&lt;/li&gt;
	&lt;li&gt;files, e.g.&amp;lt;/p&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;&amp;lt;pre&amp;gt;&lt;/li&gt;
	&lt;li&gt;config.load(configFile1);&lt;/li&gt;
	&lt;li&gt;config.load(configFile2);&lt;/li&gt;
	&lt;li&gt;&amp;lt;/pre&amp;gt;&amp;lt;/p&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;After executing this code fragment, the resulting configuration will&lt;/li&gt;
	&lt;li&gt;contain both the properties of configFile1 and configFile2. On the other&lt;/li&gt;
	&lt;li&gt;hand, if the current configuration file is to be reloaded, &amp;lt;code&amp;gt;clear()&lt;br/&gt;
&amp;lt;/code&amp;gt;&lt;/li&gt;
	&lt;li&gt;should be called first. Otherwise the properties are doubled. This behavior&lt;/li&gt;
	&lt;li&gt;is analogous to the behavior of the &amp;lt;code&amp;gt;load(InputStream)&amp;lt;/code&amp;gt; method&lt;/li&gt;
	&lt;li&gt;in &amp;lt;code&amp;gt;java.util.Properties&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;@author Emmanuel Bourg&lt;/li&gt;
	&lt;li&gt;@version $Revision: 156237 $, $Date: 2005-03-05 05:26:22 -0500 (Sat, 05 Mar&lt;br/&gt;
2005) $&lt;/li&gt;
	&lt;li&gt;@since 1.0-rc2&lt;br/&gt;
 */&lt;br/&gt;
public abstract class AbstractFileConfiguration extends BaseConfiguration &lt;br/&gt;
implements FileConfiguration&lt;br/&gt;
{&lt;br/&gt;
    protected String fileName;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    protected String basePath;&lt;/p&gt;

&lt;p&gt;    protected boolean autoSave;&lt;/p&gt;

&lt;p&gt;    protected ReloadingStrategy strategy;&lt;/p&gt;

&lt;p&gt;    private Object reloadLock = new Object();&lt;/p&gt;

&lt;p&gt;    private String encoding;&lt;/p&gt;

&lt;p&gt;    private URL sourceURL = null;&lt;/p&gt;

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Default constructor&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@since 1.1&lt;br/&gt;
     */&lt;br/&gt;
    public AbstractFileConfiguration()
    {
        setReloadingStrategy(new InvariantReloadingStrategy());
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Creates and loads the configuration from the specified file. The passed&lt;/li&gt;
	&lt;li&gt;in string must be a valid file name, either absolute or relativ.&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@param fileName The name of the file to load.&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@throws ConfigurationException Error while loading the file&lt;/li&gt;
	&lt;li&gt;@since 1.1&lt;br/&gt;
     */&lt;br/&gt;
    public AbstractFileConfiguration(String fileName) throws &lt;br/&gt;
ConfigurationException
    {
        this();

        // store the file name
        setPath(fileName);

        // load the file
        load();
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Creates and loads the configuration from the specified file.&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@param file The file to load.&lt;/li&gt;
	&lt;li&gt;@throws ConfigurationException Error while loading the file&lt;/li&gt;
	&lt;li&gt;@since 1.1&lt;br/&gt;
     */&lt;br/&gt;
    public AbstractFileConfiguration(File file) throws ConfigurationException&lt;br/&gt;
    {&lt;br/&gt;
        this();&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;        // set the file and update the url, the base path and the file name&lt;br/&gt;
        setFile(file);&lt;/p&gt;

&lt;p&gt;        // load the file&lt;br/&gt;
        if (file.exists())&lt;/p&gt;
        {
            load();
        }
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Creates and loads the configuration from the specified URL.&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@param url The location of the file to load.&lt;/li&gt;
	&lt;li&gt;@throws ConfigurationException Error while loading the file&lt;/li&gt;
	&lt;li&gt;@since 1.1&lt;br/&gt;
     */&lt;br/&gt;
    public AbstractFileConfiguration(URL url) throws ConfigurationException
    {
        this();

        // set the URL and update the base path and the file name
        setURL(url);

        // load the file
        load();
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Load the configuration from the underlying location.&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@throws ConfigurationException if loading of the configuration fails&lt;br/&gt;
     */&lt;br/&gt;
    public void load() throws ConfigurationException
    &lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {    	if(sourceURL != null)    	{
    		load(sourceURL);
    	}    	else    	{
    		load(getFileName());
    	}    }&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Locate the specified file and load the configuration.&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@param fileName the name of the file loaded&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@throws ConfigurationException&lt;br/&gt;
     */&lt;br/&gt;
    public void load(String fileName) throws ConfigurationException&lt;br/&gt;
    {&lt;br/&gt;
        try&lt;br/&gt;
        {&lt;br/&gt;
            URL url = ConfigurationUtils.locate(basePath, fileName);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;            if (url == null)&lt;/p&gt;
            {
                throw new ConfigurationException(&quot;Cannot locate configuration 
source &quot; + fileName);
            }
&lt;p&gt;            load(url);&lt;br/&gt;
        }&lt;br/&gt;
        catch (ConfigurationException e)&lt;/p&gt;
        {
            throw e;
        }&lt;br/&gt;
        catch (Exception e)&lt;br/&gt;
        {
            throw new ConfigurationException(e.getMessage(), e);
        }&lt;br/&gt;
    }&lt;br/&gt;
&lt;br/&gt;
    /**&lt;br/&gt;
     * Load the configuration from the specified file.&lt;br/&gt;
     *&lt;br/&gt;
     * @param file the loaded file&lt;br/&gt;
     *&lt;br/&gt;
     * @throws ConfigurationException&lt;br/&gt;
     */&lt;br/&gt;
    public void load(File file) throws ConfigurationException&lt;br/&gt;
    {&lt;br/&gt;
        try&lt;br/&gt;
        {
            load(file.toURL());
        }&lt;br/&gt;
        catch (ConfigurationException e)&lt;br/&gt;
        {
            throw e;
        }
&lt;p&gt;        catch (Exception e)&lt;/p&gt;
        {
            throw new ConfigurationException(e.getMessage(), e);
        }&lt;br/&gt;
    }&lt;br/&gt;
&lt;br/&gt;
    /**&lt;br/&gt;
     * Load the configuration from the specified URL.&lt;br/&gt;
     *&lt;br/&gt;
     * @param url the URL of the file loaded&lt;br/&gt;
     *&lt;br/&gt;
     * @throws ConfigurationException&lt;br/&gt;
     */&lt;br/&gt;
    public void load(URL url) throws ConfigurationException&lt;br/&gt;
	{&lt;br/&gt;
        if(sourceURL == null)&lt;br/&gt;
        {
        	sourceURL = url;
        }&lt;br/&gt;
    	InputStream in = null;&lt;br/&gt;
&lt;br/&gt;
        try&lt;br/&gt;
        {
            in = url.openStream();
            load(in);
        }&lt;br/&gt;
        catch (ConfigurationException e)&lt;br/&gt;
        {
            throw e;
        }&lt;br/&gt;
        catch (Exception e)&lt;br/&gt;
        {
            throw new ConfigurationException(e.getMessage(), e);
        }
&lt;p&gt;        finally&lt;br/&gt;
        {&lt;br/&gt;
            // close the input stream&lt;br/&gt;
            try&lt;br/&gt;
            {&lt;br/&gt;
                if (in != null)&lt;/p&gt;
                {
                    in.close();
                }
&lt;p&gt;            }&lt;br/&gt;
            catch (IOException e)&lt;/p&gt;
            {
                e.printStackTrace();
            }&lt;br/&gt;
        }&lt;br/&gt;
    }&lt;br/&gt;
&lt;br/&gt;
    /**&lt;br/&gt;
     * Load the configuration from the specified stream, using the encoding&lt;br/&gt;
     * returned by {@link #getEncoding()}.&lt;br/&gt;
     *&lt;br/&gt;
     * @param in the input stream&lt;br/&gt;
     *&lt;br/&gt;
     * @throws ConfigurationException&lt;br/&gt;
     */&lt;br/&gt;
    public void load(InputStream in) throws ConfigurationException&lt;br/&gt;
    {
        load(in, getEncoding());
    }&lt;br/&gt;
&lt;br/&gt;
    /**&lt;br/&gt;
     * Load the configuration from the specified stream, using the specified&lt;br/&gt;
     * encoding. If the encoding is null the default encoding is used.&lt;br/&gt;
     *&lt;br/&gt;
     * @param in the input stream&lt;br/&gt;
     * @param encoding the encoding used. &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt; to use the default &lt;br/&gt;
encoding&lt;br/&gt;
     *&lt;br/&gt;
     * @throws ConfigurationException&lt;br/&gt;
     */&lt;br/&gt;
    public void load(InputStream in, String encoding) throws &lt;br/&gt;
ConfigurationException&lt;br/&gt;
    {&lt;br/&gt;
        Reader reader = null;&lt;br/&gt;
&lt;br/&gt;
        if (encoding != null)&lt;br/&gt;
        {&lt;br/&gt;
            try&lt;br/&gt;
            {
                reader = new InputStreamReader(in, encoding);
            }&lt;br/&gt;
            catch (UnsupportedEncodingException e)&lt;br/&gt;
            {
                throw new ConfigurationException(
                        &quot;The requested encoding is not supported, try the 
default encoding.&quot;, e);
            }&lt;br/&gt;
        }&lt;br/&gt;
&lt;br/&gt;
        if (reader == null)&lt;br/&gt;
        {
            reader = new InputStreamReader(in);
        }&lt;br/&gt;
&lt;br/&gt;
        load(reader);&lt;br/&gt;
    }&lt;br/&gt;
&lt;br/&gt;
    /**&lt;br/&gt;
     * Save the configuration.&lt;br/&gt;
     *&lt;br/&gt;
     * @throws ConfigurationException&lt;br/&gt;
     */&lt;br/&gt;
    public void save() throws ConfigurationException&lt;br/&gt;
    {&lt;br/&gt;
    	if(sourceURL!=null)&lt;br/&gt;
    	{
    		save(sourceURL);
    	}&lt;br/&gt;
    	else&lt;br/&gt;
    	{
    		save(fileName);	
    	}&lt;br/&gt;
    	strategy.init();&lt;br/&gt;
    }&lt;br/&gt;
&lt;br/&gt;
    /**&lt;br/&gt;
     * Save the configuration to the specified file. This doesn&apos;t change the&lt;br/&gt;
     * source of the configuration, use setFileName() if you need it.&lt;br/&gt;
     *&lt;br/&gt;
     * @param fileName&lt;br/&gt;
     *&lt;br/&gt;
     * @throws ConfigurationException&lt;br/&gt;
     */&lt;br/&gt;
    public void save(String fileName) throws ConfigurationException&lt;br/&gt;
    {&lt;br/&gt;
        try&lt;br/&gt;
        {&lt;br/&gt;
            File file = ConfigurationUtils.getFile(basePath, fileName);&lt;br/&gt;
            if (file == null)&lt;br/&gt;
            {
                throw new ConfigurationException(&quot;Invalid file name for save: &quot; 
+ fileName);
            }&lt;br/&gt;
            save(file);&lt;br/&gt;
        }&lt;br/&gt;
        catch (ConfigurationException e)&lt;br/&gt;
        {
            throw e;
        }&lt;br/&gt;
        catch (Exception e)&lt;br/&gt;
        {
            throw new ConfigurationException(e.getMessage(), e);
        }&lt;br/&gt;
    }&lt;br/&gt;
&lt;br/&gt;
    /**&lt;br/&gt;
     * Save the configuration to the specified URL if it&apos;s a file URL.&lt;br/&gt;
     * This doesn&apos;t change the source of the configuration, use setURL()&lt;br/&gt;
     * if you need it.&lt;br/&gt;
     *&lt;br/&gt;
     * @param url&lt;br/&gt;
     *&lt;br/&gt;
     * @throws ConfigurationException&lt;br/&gt;
     */&lt;br/&gt;
    public void save(URL url) throws ConfigurationException&lt;br/&gt;
    {&lt;br/&gt;
        File file = ConfigurationUtils.fileFromURL(url);&lt;br/&gt;
        if (file != null)&lt;br/&gt;
        {
            save(file);
        }&lt;br/&gt;
        else&lt;br/&gt;
        {
            throw new ConfigurationException(&quot;Could not save to URL &quot; + url);
        }&lt;br/&gt;
    }&lt;br/&gt;
&lt;br/&gt;
    /**&lt;br/&gt;
     * Save the configuration to the specified file. The file is created&lt;br/&gt;
     * automatically if it doesn&apos;t exist. This doesn&apos;t change the source&lt;br/&gt;
     * of the configuration, use {@link #setFile} if you need it.&lt;br/&gt;
     *&lt;br/&gt;
     * @param file&lt;br/&gt;
     *&lt;br/&gt;
     * @throws ConfigurationException&lt;br/&gt;
     */&lt;br/&gt;
    public void save(File file) throws ConfigurationException&lt;br/&gt;
    {&lt;br/&gt;
        OutputStream out = null;&lt;br/&gt;
&lt;br/&gt;
        try&lt;br/&gt;
        {
            // create the file if necessary
            createPath(file);
            out = new FileOutputStream(file);
            save(out);
        }&lt;br/&gt;
        catch (IOException e)&lt;br/&gt;
        {
            throw new ConfigurationException(e.getMessage(), e);
        }&lt;br/&gt;
        finally&lt;br/&gt;
        {&lt;br/&gt;
            // close the output stream&lt;br/&gt;
            try&lt;br/&gt;
            {&lt;br/&gt;
                if (out != null)&lt;br/&gt;
                {
                    out.close();
                }&lt;br/&gt;
            }&lt;br/&gt;
            catch (IOException e)&lt;br/&gt;
            {
                e.printStackTrace();
            }
&lt;p&gt;        }&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Save the configuration to the specified stream, using the encoding&lt;/li&gt;
	&lt;li&gt;returned by 
{@link #getEncoding()}
&lt;p&gt;.&lt;br/&gt;
     *&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;@param out&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@throws ConfigurationException&lt;br/&gt;
     */&lt;br/&gt;
    public void save(OutputStream out) throws ConfigurationException
    {
        save(out, getEncoding());
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Save the configuration to the specified stream, using the specified&lt;/li&gt;
	&lt;li&gt;encoding. If the encoding is null the default encoding is used.&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@param out&lt;/li&gt;
	&lt;li&gt;@param encoding&lt;/li&gt;
	&lt;li&gt;@throws ConfigurationException&lt;br/&gt;
     */&lt;br/&gt;
    public void save(OutputStream out, String encoding) throws &lt;br/&gt;
ConfigurationException&lt;br/&gt;
    {&lt;br/&gt;
        Writer writer = null;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;        if (encoding != null)&lt;br/&gt;
        {&lt;br/&gt;
            try&lt;/p&gt;
            {
                writer = new OutputStreamWriter(out, encoding);
            }
&lt;p&gt;            catch (UnsupportedEncodingException e)&lt;/p&gt;
            {
                throw new ConfigurationException(
                        &quot;The requested encoding is not supported, try the 
default encoding.&quot;, e);
            }
&lt;p&gt;        }&lt;/p&gt;

&lt;p&gt;        if (writer == null)&lt;/p&gt;
        {
            writer = new OutputStreamWriter(out);
        }

&lt;p&gt;        save(writer);&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Return the name of the file.&lt;br/&gt;
     */&lt;br/&gt;
    public String getFileName()
    {
        return fileName;
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Set the name of the file. The passed in file name should not contain a&lt;/li&gt;
	&lt;li&gt;path. Use &amp;lt;code&amp;gt;
{@link AbstractFileConfiguration#setPath(String)
     * setPath()}
&lt;p&gt;&amp;lt;/code&amp;gt; to set a full qualified file name.&lt;br/&gt;
     *&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;@param fileName the name of the file&lt;br/&gt;
     */&lt;br/&gt;
    public void setFileName(String fileName)
    {
    	sourceURL = null;
        this.fileName = fileName;
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Return the base path.&lt;br/&gt;
     */&lt;br/&gt;
    public String getBasePath()
    {
        return basePath;
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Set the base path. Relative configurations are loaded from this path.&lt;/li&gt;
	&lt;li&gt;The base path can be either a path to a directory or a URL.&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@param basePath the base path.&lt;br/&gt;
     */&lt;br/&gt;
    public void setBasePath(String basePath)
    {
    	sourceURL = null;
        this.basePath = basePath;
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Return the file where the configuration is stored. If the base path is&lt;/li&gt;
	&lt;li&gt;a URL with a protocol different than &amp;quot;file&amp;quot;, the return value&lt;/li&gt;
	&lt;li&gt;will not point to a valid file object.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@return the file where the configuration is stored&lt;br/&gt;
     */&lt;br/&gt;
    public File getFile()
    {
        return ConfigurationUtils.getFile(getBasePath(), getFileName());
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Set the file where the configuration is stored. The passed in file is&lt;/li&gt;
	&lt;li&gt;made absolute if it is not yet. Then the file&apos;s path component becomes&lt;/li&gt;
	&lt;li&gt;the base path and its name component becomes the file name.&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@param file the file where the configuration is stored&lt;br/&gt;
     */&lt;br/&gt;
    public void setFile(File file)
    {
    	sourceURL = null;
        setFileName(file.getName());
        setBasePath((file.getParentFile() != null) ? file.getParentFile
().getAbsolutePath() : null);
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Returns the full path to the file this configuration is based on. The&lt;/li&gt;
	&lt;li&gt;return value is valid only if this configuration is based on a file on&lt;/li&gt;
	&lt;li&gt;the local disk.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@return the full path to the configuration file&lt;br/&gt;
     */&lt;br/&gt;
    public String getPath()
    {
        return getFile().getAbsolutePath();
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Sets the location of this configuration as a full path name. The passed&lt;/li&gt;
	&lt;li&gt;in path should represent a valid file name.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@param path the full path name of the configuration file&lt;br/&gt;
     */&lt;br/&gt;
    public void setPath(String path)
    {
        setFile(new File(path));
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Return the URL where the configuration is stored.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@return the configuration&apos;s location as URL&lt;br/&gt;
     */&lt;br/&gt;
    public URL getURL()
    {
        return ConfigurationUtils.locate(getBasePath(), getFileName());
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Set the location of this configuration as a URL. For loading this can be&lt;/li&gt;
	&lt;li&gt;an arbitrary URL with a supported protocol. If the configuration is to&lt;/li&gt;
	&lt;li&gt;be saved, too, a URL with the &amp;quot;file&amp;quot; protocol should be&lt;/li&gt;
	&lt;li&gt;provided.&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@param url the location of this configuration as URL&lt;br/&gt;
     */&lt;br/&gt;
    public void setURL(URL url)
    {
        setBasePath(ConfigurationUtils.getBasePath(url));
        setFileName(ConfigurationUtils.getFileName(url));
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    public void setAutoSave(boolean autoSave)&lt;/p&gt;
    {
        this.autoSave = autoSave;
    }

&lt;p&gt;    public boolean isAutoSave()&lt;/p&gt;
    {
        return autoSave;
    }

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Save the configuration if the automatic persistence is enabled&lt;/li&gt;
	&lt;li&gt;and if a file is specified.&lt;br/&gt;
     */&lt;br/&gt;
    protected void possiblySave()&lt;br/&gt;
    {&lt;br/&gt;
        if (autoSave &amp;amp;&amp;amp; fileName != null)
        &lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {            try            {
                save();
            }            catch (ConfigurationException e)            {
                throw new ConfigurationRuntimeException(&quot;Failed to auto-save&quot;, 
e);
            }        }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;    }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    protected void addPropertyDirect(String key, Object obj)&lt;/p&gt;
    {
        super.addPropertyDirect(key, obj);
        possiblySave();
    }

&lt;p&gt;    public void clearProperty(String key)&lt;/p&gt;
    {
        super.clearProperty(key);
        possiblySave();
    }

&lt;p&gt;    public ReloadingStrategy getReloadingStrategy()&lt;/p&gt;
    {
        return strategy;
    }

&lt;p&gt;    public void setReloadingStrategy(ReloadingStrategy strategy)&lt;/p&gt;
    {
        this.strategy = strategy;
        strategy.setConfiguration(this);
        strategy.init();
    }

&lt;p&gt;    public void reload()&lt;br/&gt;
    {&lt;br/&gt;
        synchronized (reloadLock)&lt;br/&gt;
        {&lt;br/&gt;
            if (strategy.reloadingRequired())&lt;br/&gt;
            {&lt;br/&gt;
                try&lt;/p&gt;
                {
                    clear();
                    load();

                    // notify the strategy
                    strategy.reloadingPerformed();
                }
&lt;p&gt;                catch (Exception e)&lt;/p&gt;
                {
                    e.printStackTrace();
                    // todo rollback the changes if the file can&apos;t be reloaded
                }
&lt;p&gt;            }&lt;br/&gt;
        }&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;    public Object getProperty(String key)&lt;/p&gt;
    {
        reload();
        return super.getProperty(key);
    }

&lt;p&gt;    public boolean isEmpty()&lt;/p&gt;
    {
        reload();
        return super.isEmpty();
    }

&lt;p&gt;    public boolean containsKey(String key)&lt;/p&gt;
    {
        reload();
        return super.containsKey(key);
    }

&lt;p&gt;    public Iterator getKeys()&lt;/p&gt;
    {
        reload();
        return super.getKeys();
    }

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Create the path to the specified file.&lt;br/&gt;
     */&lt;br/&gt;
    private void createPath(File file)&lt;br/&gt;
    {&lt;br/&gt;
        if (file != null)&lt;br/&gt;
        {&lt;br/&gt;
            // create the path to the file if the file doesn&apos;t exist&lt;br/&gt;
            if (!file.exists())
            &lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {                File parent = file.getParentFile();                if (parent != null &amp;amp;&amp;amp; !parent.exists())                {
                    parent.mkdirs();
                }            }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;        }&lt;br/&gt;
    }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    public String getEncoding()&lt;/p&gt;
    {
        return encoding;
    }

&lt;p&gt;    public void setEncoding(String encoding)&lt;/p&gt;
    {
        this.encoding = encoding;
    }
&lt;p&gt;}&lt;/p&gt;</comment>
                            <comment id="12409085" author="jmguillemette@gmail.com" created="Mon, 25 Apr 2005 23:09:17 +0000"  >&lt;p&gt;add this test case to TestFileConfiguration unit test class&lt;/p&gt;

&lt;p&gt; public void testFileOverwrite()throws Exception &lt;/p&gt;
{
    	String path = System.getProperties().getProperty(&quot;user.home&quot;);
    	String fileName = &quot;test.properties&quot;;
    	Properties props = new Properties();
    	props.setProperty(&quot;1&quot;,&quot;one&quot;);
    	File file = new File(path+File.separator+fileName);
    	file.delete();
    	props.store(new FileOutputStream(file),&quot;TestFileOverwrite&quot;);
    	FileConfiguration config = new PropertiesConfiguration(fileName);
    	config.load();
    	String value = config.getString(&quot;1&quot;);
    	assertTrue(&quot;one&quot;.equals(value));
    	config.setProperty(&quot;1&quot;,&quot;two&quot;);
    	config.save();
    	props = new Properties();
    	props.load(new FileInputStream(new File(path+File.separator+fileName)));
    	String value2 = props.getProperty(&quot;1&quot;);
    	assertTrue(&quot;two&quot;.equals(value2));
    	
    }</comment>
                            <comment id="12409086" author="oliver.heger@t-online.de" created="Tue, 26 Apr 2005 00:02:48 +0000"  >&lt;p&gt;Created an attachment (id=14832)&lt;br/&gt;
Diff of AbstractFileConfiguration based on Jamie&apos;s contribution&lt;/p&gt;</comment>
                            <comment id="12409087" author="oliver.heger@t-online.de" created="Tue, 26 Apr 2005 00:07:06 +0000"  >&lt;p&gt;Created an attachment (id=14833)&lt;br/&gt;
Unit test to illustrate the bug&lt;/p&gt;

&lt;p&gt;I slightly modified the unit test because I felt a little uneasy by simply&lt;br/&gt;
overriding a file in the user&apos;s home directory. So I created a temporary file&lt;br/&gt;
in this directory and removed it afterwards. The basic concepts stay the same.&lt;/p&gt;</comment>
                            <comment id="12409088" author="oliver.heger@t-online.de" created="Tue, 26 Apr 2005 00:14:46 +0000"  >&lt;p&gt;I had a look at the proposed patch and it looks good to me. Thank you very much!&lt;/p&gt;

&lt;p&gt;Only one thing where I am not sure: The getURL() method of&lt;br/&gt;
AbstractFileConfiguration at the moment always tries to locate the url using&lt;br/&gt;
ConfigurationUtils and returns the results. Shouldn&apos;t this method take sourceURL&lt;br/&gt;
into account if it is defined? Or would it be better to add another method&lt;br/&gt;
getSourceURL()?&lt;/p&gt;

&lt;p&gt;Let&apos;s wait for Emmanuel&apos;s opinion and if he agrees, I can commit it.&lt;/p&gt;</comment>
                            <comment id="12409089" author="jmguillemette@gmail.com" created="Tue, 26 Apr 2005 00:19:13 +0000"  >&lt;p&gt;Re: getURL()&lt;/p&gt;

&lt;p&gt;I may have missed that.. i had to write test.. undo and rewrite this logic a &lt;br/&gt;
few times.. trying to test the patch file .&lt;/p&gt;

&lt;p&gt;The getURL() method should do a null check on sourceURL if its not null then it &lt;br/&gt;
should return sourceURL else.. resolve the url and return.&lt;/p&gt;
</comment>
                            <comment id="12409090" author="oliver.heger@t-online.de" created="Thu, 5 May 2005 02:47:49 +0000"  >&lt;p&gt;Patch applied.&lt;/p&gt;

&lt;p&gt;I updated the getURL() method to perform the check with sourceURL first.&lt;/p&gt;

&lt;p&gt;Jamie, do you want me to add you to the list of contributors? If so, then please&lt;br/&gt;
send me the data I need for the team list (see&lt;br/&gt;
&lt;a href=&quot;http://jakarta.apache.org/commons/configuration/team-list.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jakarta.apache.org/commons/configuration/team-list.html&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12333452" name="ASF.LICENSE.NOT.GRANTED--AbstractFileConfiguration.diff" size="3420" author="oliver.heger@t-online.de" created="Tue, 26 Apr 2005 00:02:48 +0000"/>
                            <attachment id="12333448" name="ASF.LICENSE.NOT.GRANTED--AbstractFileConfiguration.java" size="19474" author="jmguillemette@gmail.com" created="Fri, 8 Apr 2005 06:23:22 +0000"/>
                            <attachment id="12333453" name="ASF.LICENSE.NOT.GRANTED--TestFileConfiguration.diff" size="2956" author="oliver.heger@t-online.de" created="Tue, 26 Apr 2005 00:07:06 +0000"/>
                            <attachment id="12333451" name="ASF.LICENSE.NOT.GRANTED--abstractFileConfiguration.patch" size="20139" author="jmguillemette@gmail.com" created="Wed, 20 Apr 2005 04:43:27 +0000"/>
                            <attachment id="12333449" name="ASF.LICENSE.NOT.GRANTED--fix.txt" size="479" author="jmguillemette@gmail.com" created="Fri, 8 Apr 2005 06:48:52 +0000"/>
                            <attachment id="12333450" name="ASF.LICENSE.NOT.GRANTED--unitTest.patch" size="1747" author="jmguillemette@gmail.com" created="Wed, 20 Apr 2005 04:42:22 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                        <customfieldname>Bugzilla Id</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>34362</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 8 Apr 2005 15:09:50 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33967</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            11 years, 32 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0up9b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>177233</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>