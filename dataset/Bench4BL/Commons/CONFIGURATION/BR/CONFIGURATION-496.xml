<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Thu Dec 01 20:04:52 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CONFIGURATION-496/CONFIGURATION-496.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CONFIGURATION-496] Excessive Synchronization AbstractFileConfiguration</title>
                <link>https://issues.apache.org/jira/browse/CONFIGURATION-496</link>
                <project id="12310467" key="CONFIGURATION">Commons Configuration</project>
                    <description>&lt;p&gt;We are having a problem with commons configuration 1.6 AbstractFileConfiguration &lt;/p&gt;

&lt;p&gt;During a stress test we are seeing that we have wait locks against this method causing this method not to complete for up to one second.&lt;/p&gt;

&lt;p&gt;We are using the FileReloadStrategy delegate which makes a check on the file system when now + interval is greater than the compare time.&lt;/p&gt;

&lt;p&gt;Why can&apos;t we make this check before the synchronized block thus increasing throughput. I have noticed in 1.8 that the caller to this method is synchronized. This seems like excessive synchronization. Any ideas how to solve this. &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void reload()
    {
        &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; (reloadLock)
        {
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (noReload == 0)
            {
                &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt;
                {
                    enterNoReload(); &lt;span class=&quot;code-comment&quot;&gt;// avoid reentrant calls
&lt;/span&gt;
                    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (strategy.reloadingRequired())
                    {
                        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (getLogger().isInfoEnabled())
                        {
                            getLogger().info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Reloading configuration. URL is &quot;&lt;/span&gt; + getURL());
                        }
                        fireEvent(EVENT_RELOAD, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, getURL(), &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
                        setDetailEvents(&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
                        &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; autoSaveBak = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.isAutoSave(); &lt;span class=&quot;code-comment&quot;&gt;// save the current state
&lt;/span&gt;                        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.setAutoSave(&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;); &lt;span class=&quot;code-comment&quot;&gt;// deactivate autoSave to prevent information loss
&lt;/span&gt;                        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt;
                        {
                            clear();
                            load();
                        }
                        &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt;
                        {
                            &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.setAutoSave(autoSaveBak); &lt;span class=&quot;code-comment&quot;&gt;// set autoSave to previous value
&lt;/span&gt;                            setDetailEvents(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
                        }
                        fireEvent(EVENT_RELOAD, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, getURL(), &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);

                        &lt;span class=&quot;code-comment&quot;&gt;// notify the strategy
&lt;/span&gt;                        strategy.reloadingPerformed();
                    }
                }
                &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Exception e)
                {
                    fireError(EVENT_RELOAD, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, e);
                    &lt;span class=&quot;code-comment&quot;&gt;// todo rollback the changes &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the file can&apos;t be reloaded
&lt;/span&gt;                }
                &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt;
                {
                    exitNoReload();
                }
            }
        }
    }

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12554374">CONFIGURATION-496</key>
            <summary>Excessive Synchronization AbstractFileConfiguration</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="indianbishop">Tim Canavan</reporter>
                        <labels>
                    </labels>
                <created>Tue, 8 May 2012 19:51:13 +0000</created>
                <updated>Thu, 24 Mar 2016 20:20:52 +0000</updated>
                            <resolved>Mon, 3 Jun 2013 20:34:46 +0000</resolved>
                                    <version>1.6</version>
                    <version>1.7</version>
                    <version>1.8</version>
                                    <fixVersion>2.0</fixVersion>
                                    <component>File reloading</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13270831" author="ralph.goers@dslextreme.com" created="Tue, 8 May 2012 21:06:59 +0000"  >&lt;p&gt;There is no simple answer to your question. Commons Configuration used to not be thread-safe. Unfortunately, I discovered that after our application was already in production. My use case deals with DefaultConfigurationBuilder constructing DynamicCombinedConfigurations and XMLConfigurations all with file reloading.  Due to the way CombinedConfigurations work every time a configuration file was reloaded other configurations that shared the common file were corrupted.&lt;/p&gt;

&lt;p&gt;Unfortunately, you can&apos;t check to see if a reload is required without holding the lock or multiple threads will end up performing the reload. &lt;/p&gt;

&lt;p&gt;All of this was put into place while the minimum version was Java 1.4. Now that it is Java 5 much of this code can be redone to take advantage of java.util.concurrent. I just haven&apos;t gotten to it. However, I&apos;ve had reports of similar issues from my users so I plan to  address these issues in the very near future.&lt;/p&gt;</comment>
                            <comment id="13673521" author="oliver.heger@t-online.de" created="Mon, 3 Jun 2013 20:33:31 +0000"  >&lt;p&gt;In version 2.0 reloading and synchronized access to configurations have been completely redesigned. A so-called &lt;tt&gt;Synchronizer&lt;/tt&gt; is now used to control concurrent access to a configuration. While the default synchronizer is just a dummy, applications can change it according to their use cases. There is also an implementation of &lt;tt&gt;Synchronizer&lt;/tt&gt; based on the JDK&apos;s &lt;tt&gt;ReentrantReadWriteLock&lt;/tt&gt; class.&lt;/p&gt;

&lt;p&gt;BTW, the &lt;tt&gt;AbstractFileConfiguration&lt;/tt&gt; class no longer exists. &lt;em&gt;Configuration builders&lt;/em&gt; are now responsible for creating and loading configurations. Reloading is also handled by these builders.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12645513">CONFIGURATION-542</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 8 May 2012 21:06:59 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>238612</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 26 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i19xh3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>266057</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>