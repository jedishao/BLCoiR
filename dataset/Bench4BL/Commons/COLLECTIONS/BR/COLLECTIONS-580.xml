<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Nov 19 21:37:15 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/COLLECTIONS-580/COLLECTIONS-580.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[COLLECTIONS-580] Arbitrary remote code execution with InvokerTransformer</title>
                <link>https://issues.apache.org/jira/browse/COLLECTIONS-580</link>
                <project id="12310465" key="COLLECTIONS">Commons Collections</project>
                    <description>&lt;p&gt;With &lt;tt&gt;InvokerTransformer&lt;/tt&gt; serializable collections can be build that execute arbitrary Java code. &lt;tt&gt;sun.reflect.annotation.AnnotationInvocationHandler#readObject&lt;/tt&gt; invokes &lt;tt&gt;#entrySet&lt;/tt&gt; and &lt;tt&gt;#get&lt;/tt&gt; on a deserialized collection. If you have an endpoint that accepts serialized Java objects (JMX, RMI, remote EJB, ...) you can combine the two to create arbitrary remote code execution vulnerability.&lt;/p&gt;

&lt;p&gt;I don&apos;t know of a good fix short of removing &lt;tt&gt;InvokerTransformer&lt;/tt&gt; or making it not Serializable. Both probably break existing applications.&lt;/p&gt;

&lt;p&gt;This is not my research, but has been discovered by other people.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/frohoff/ysoserial&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/frohoff/ysoserial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12911300">COLLECTIONS-580</key>
            <summary>Arbitrary remote code execution with InvokerTransformer</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="marschall">Philippe Marschall</reporter>
                        <labels>
                    </labels>
                <created>Sat, 7 Nov 2015 13:28:01 +0000</created>
                <updated>Tue, 12 Jan 2016 08:07:15 +0000</updated>
                            <resolved>Sat, 21 Nov 2015 10:02:58 +0000</resolved>
                                    <version>3.0</version>
                    <version>4.0</version>
                                    <fixVersion>3.2.2</fixVersion>
                    <fixVersion>4.1</fixVersion>
                                        <due></due>
                            <votes>66</votes>
                                    <watches>104</watches>
                                                                <comments>
                            <comment id="14995710" author="ddossot" created="Sun, 8 Nov 2015 16:55:57 +0000"  >&lt;p&gt;This vulnerability puts the whole library at risk of being vetoed in places where security is tight. If InvokerTransformer has to be kept, can it be moved to a different artifacts? Or could we have a build that doesn&apos;t contain it (like with a &quot;secure&quot; qualifier).&lt;/p&gt;</comment>
                            <comment id="14995713" author="tn" created="Sun, 8 Nov 2015 17:08:37 +0000"  >&lt;p&gt;We are currently working on a new release to address the issue.&lt;/p&gt;

&lt;p&gt;As a solution, we prefer to introduce a new system property that controls whether the InvokerTransformer can be serialized or not. The default would be false, thus using the new version of the library will mean that any attempt to de-serialize an InvokerTransformer will result in an exception.&lt;/p&gt;</comment>
                            <comment id="14995804" author="ddossot" created="Sun, 8 Nov 2015 21:00:49 +0000"  >&lt;p&gt;This sounds great &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tn&quot; class=&quot;user-hover&quot; rel=&quot;tn&quot;&gt;Thomas Neidhart&lt;/a&gt;, thank you!&lt;/p&gt;</comment>
                            <comment id="14995839" author="tn" created="Sun, 8 Nov 2015 22:20:48 +0000"  >&lt;p&gt;Proposed fix committed in r1713307 for the 3.2.X branch, see here: &lt;a href=&quot;http://svn.apache.org/viewvc?view=revision&amp;amp;revision=1713307&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=revision&amp;amp;revision=1713307&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14995901" author="paul" created="Mon, 9 Nov 2015 00:55:43 +0000"  >&lt;p&gt;Re &quot;r1713307 for the 3.2.X branch&quot; ... can the same change be cherry-picked back other major/minor branches and those re-released to &apos;central&apos; too please?&lt;/p&gt;</comment>
                            <comment id="14996208" author="joehni" created="Mon, 9 Nov 2015 08:44:00 +0000"  >&lt;p&gt;Hi Paul,&lt;/p&gt;

&lt;p&gt;we do not re-release, Thomas intends to release new version 3.2.2 only (with some additional cheep bug fixes). I don&apos;t know if we gain a lot if we also make releases for older code lines (e.g. release new 3.1.1, 3.0.1, 2.1.2 , 2.0.1 and/or 1.0.1) with this cherry-pick only. The line is supposed to be binary compatible anyway. If someone does not want to upgrade to 3.2.2, why should he consider to upgrade to one of the other &quot;new&quot; releases?&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
J&#246;rg&lt;/p&gt;</comment>
                            <comment id="14996216" author="tn" created="Mon, 9 Nov 2015 08:52:19 +0000"  >&lt;p&gt;We will at least make also a release for the 4.x branch.&lt;/p&gt;

&lt;p&gt;The problematic class was introduced in 3.0, so in theory we could also make a 3.0.1 and 3.1.1 bugfix release, but as Joerg pointed out users should be able to upgrade to 3.2.2.&lt;br/&gt;
Could you point out cases where this might not be possible?&lt;/p&gt;</comment>
                            <comment id="14996219" author="ebourg" created="Mon, 9 Nov 2015 09:01:57 +0000"  >&lt;p&gt;I think we should release the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/COLLECTIONS-580&quot; title=&quot;Arbitrary remote code execution with InvokerTransformer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;COLLECTIONS-580&quot;&gt;&lt;del&gt;COLLECTIONS-580&lt;/del&gt;&lt;/a&gt; alone with no other modification. Otherwise people may hesitate to upgrade in fear of a regression. The other changes can be released later.&lt;/p&gt;</comment>
                            <comment id="14996228" author="tn" created="Mon, 9 Nov 2015 09:08:28 +0000"  >&lt;p&gt;This should please be discussed on the mailinglist.&lt;br/&gt;
I hand-picked the bugfixes that have been backported from the 4.0 release and they only include things that are clearly wrong, and anybody using this functionality must have a broken application.&lt;/p&gt;</comment>
                            <comment id="14996248" author="ebourg" created="Mon, 9 Nov 2015 09:25:21 +0000"  >&lt;p&gt;I don&apos;t doubt you&apos;ve done the things properly Thomas and I&apos;m glad you&apos;re there to do that. My point is that from a user perspective, an update that just contains a security fix is likely to be a no-brainer, but a security update combined with other changes may trigger a full QA cycle in some development teams.&lt;/p&gt;</comment>
                            <comment id="14998295" author="jochen@apache.org" created="Tue, 10 Nov 2015 09:25:33 +0000"  >&lt;p&gt;Alothough deserialization is the actual problem, I do thing that we should handle serialization, and deserialization in the same manner. I am attaching a suggested patch.&lt;/p&gt;</comment>
                            <comment id="14998319" author="ebourg" created="Tue, 10 Nov 2015 09:48:31 +0000"  >&lt;p&gt;Serialization isn&apos;t an issue, I don&apos;t see the point of changing that.&lt;/p&gt;</comment>
                            <comment id="14998325" author="jochen@apache.org" created="Tue, 10 Nov 2015 09:52:36 +0000"  >&lt;p&gt;We are introducing an incompatible change. The more people know about it, the better.&lt;/p&gt;</comment>
                            <comment id="14998335" author="tn" created="Tue, 10 Nov 2015 10:00:18 +0000"  >&lt;p&gt;Indeed, I was thinking about that as well. The point is that within the same application it does not make sense to allow serialization when de-serialization will certainly fail.&lt;br/&gt;
This will allow people to spot regressions earlier when using the updated jar with serialization disabled.&lt;/p&gt;

&lt;p&gt;Furthermore, as mentioned by Chris Frohoff on the mailinglist, the following classes might be unsecure as well:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;InstantiateFactory&lt;/li&gt;
	&lt;li&gt;InstantiateTransformer&lt;/li&gt;
	&lt;li&gt;PrototypeFactory&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think PrototypeFactory is safe: it calls clone on an object that has been de-serialized already, but for the other 2 I am not sure. Basically they allow an attacker to call an arbitrary public constructor of any class in the application&apos;s classpath. There might be a possible attack vector for it, although none is known atm.&lt;/p&gt;

&lt;p&gt;If we add the same fix there as well, I would also suggest to change the property to enable the serialization to that: &quot;org.apache.commons.collections.enableUnsafeSerialization&quot;&lt;/p&gt;</comment>
                            <comment id="14998820" author="jglick@netbeans.org" created="Tue, 10 Nov 2015 16:08:13 +0000"  >&lt;p&gt;FWIW the Jenkins project has been assuming that the whole &lt;tt&gt;org.apache.commons.collections.functors&lt;/tt&gt; package is vulnerable and should be blocked from deserialization.&lt;/p&gt;</comment>
                            <comment id="14999172" author="drosenbauer" created="Tue, 10 Nov 2015 19:27:47 +0000"  >&lt;p&gt;I think that whatever is done with InvokerTransformer should also be done with InstantiationTransformer (and the various related Factories and Closures and such). There are classes that do unsafe things in their constructors. For that matter, there may be classes that do unsafe things in their toStrings.&lt;/p&gt;</comment>
                            <comment id="15000335" author="tn" created="Wed, 11 Nov 2015 13:07:07 +0000"  >&lt;p&gt;There are also other vulnerable classes that allow an attacker to create a quite simple DOS attack.&lt;br/&gt;
A gadget like that will result in an infinite loop:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Transformer[] transformers = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Transformer[] {
	&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ConstantTransformer(&lt;span class=&quot;code-object&quot;&gt;Runtime&lt;/span&gt;.class),
	&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ClosureTransformer(
	        &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; WhileClosure(TruePredicate.INSTANCE,
                &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TransformerClosure(CloneTransformer.INSTANCE), &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;)),
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="15003912" author="karsten.klein@gmail.com" created="Fri, 13 Nov 2015 12:13:36 +0000"  >&lt;p&gt;We (not having seen the attached patch before) have come up with the following solution:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    /**
     * Transforms the input to result by invoking a method on the input.
     * 
     * @param input  the input object to transform
     * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; the transformed result, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; input
     */
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; transform(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; input) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (input == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
        }
        
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (deserialized) {
            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Transformation on deserialized object not supported. &quot;&lt;/span&gt;
                    + &lt;span class=&quot;code-quote&quot;&gt;&quot;Using &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; function may indicate an attempted SECURITY BREACH.&quot;&lt;/span&gt;);
        }
        
        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt; cls = input.getClass();
            Method method = cls.getMethod(iMethodName, iParamTypes);
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; method.invoke(input, iArgs);
                
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (NoSuchMethodException ex) {
            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; FunctorException(&lt;span class=&quot;code-quote&quot;&gt;&quot;InvokerTransformer: The method &apos;&quot;&lt;/span&gt; + iMethodName + &lt;span class=&quot;code-quote&quot;&gt;&quot;&apos; on &apos;&quot;&lt;/span&gt; + input.getClass() + &lt;span class=&quot;code-quote&quot;&gt;&quot;&apos; does not exist&quot;&lt;/span&gt;);
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IllegalAccessException ex) {
            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; FunctorException(&lt;span class=&quot;code-quote&quot;&gt;&quot;InvokerTransformer: The method &apos;&quot;&lt;/span&gt; + iMethodName + &lt;span class=&quot;code-quote&quot;&gt;&quot;&apos; on &apos;&quot;&lt;/span&gt; + input.getClass() + &lt;span class=&quot;code-quote&quot;&gt;&quot;&apos; cannot be accessed&quot;&lt;/span&gt;);
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (InvocationTargetException ex) {
            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; FunctorException(&lt;span class=&quot;code-quote&quot;&gt;&quot;InvokerTransformer: The method &apos;&quot;&lt;/span&gt; + iMethodName + &lt;span class=&quot;code-quote&quot;&gt;&quot;&apos; on &apos;&quot;&lt;/span&gt; + input.getClass() + &lt;span class=&quot;code-quote&quot;&gt;&quot;&apos; threw an exception&quot;&lt;/span&gt;, ex);
        }
    }
    
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;transient&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; deserialized = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;

    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; void readObject(ObjectInputStream in) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException, ClassNotFoundException {
        in.defaultReadObject();
        deserialized = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This approach is a little more &apos;compatible&apos; and less invasive. It will only fail if transform is invoked on a deserialized object. In particular it does not fail at deserialization time. Only when the transform method is invoked. This may reduce the effects of the change.&lt;/p&gt;</comment>
                            <comment id="15003922" author="tn" created="Fri, 13 Nov 2015 12:24:20 +0000"  >&lt;p&gt;I prefer a fail-fast approach.&lt;/p&gt;

&lt;p&gt;btw. a successful attack will call the transform as part of the call to readObject, thus it will fail during de-serialization.&lt;/p&gt;</comment>
                            <comment id="15003932" author="karsten.klein@gmail.com" created="Fri, 13 Nov 2015 12:35:50 +0000"  >&lt;p&gt;Not sure I fully understand. The critical piece of code is always executed on a fully deserialized object. So the approach should work (or I apologize for not having understood the subject matter).&lt;/p&gt;

&lt;p&gt;However, awareness is required on how people have to deal with this finding. The lib is very wide-spread. Thus a minimum behavior change in the software stack is preferred.&lt;/p&gt;

&lt;p&gt;For newer versions (major/minor) I would agree to your fail-fast approach. Here I would also suggest to remove the complete Serialization feature.&lt;/p&gt;</comment>
                            <comment id="15003970" author="tn" created="Fri, 13 Nov 2015 13:25:29 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Not sure I fully understand. The critical piece of code is always executed on a fully deserialized object. So the approach should work (or I apologize for not having understood the subject matter).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I did not question your approach, I wanted to point out that in the attack vector, i.e. InvokerTransformer#transform will already be called during de-serialization (of another object).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;However, awareness is required on how people have to deal with this finding. The lib is very wide-spread. Thus a minimum behavior change in the software stack is preferred.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We are trying to do this, but the rationale is as follows: if an application uses the unsafe classes in a legit way, i.e. will de-serialize them from a trusted source, the application will most likely also &lt;b&gt;use&lt;/b&gt; these objects in a way or another. It means that the application will fail in any way, but it will be easier to spot/fix if it happens already during the de-serialization, but please correct me if you have a use-case where your approach would be more suitable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For newer versions (major/minor) I would agree to your fail-fast approach. Here I would also suggest to remove the complete Serialization feature.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is indeed the plan, for the 4.1 release we will hopefully remove the Serializable interface from the unsafe classes.&lt;/p&gt;</comment>
                            <comment id="15004640" author="tn" created="Fri, 13 Nov 2015 20:10:02 +0000"  >&lt;p&gt;Committed in r1714262 for collections4: unsafe classes do not implement the Serializable interface anymore.&lt;/p&gt;</comment>
                            <comment id="15004712" author="tn" created="Fri, 13 Nov 2015 21:03:31 +0000"  >&lt;p&gt;The new MultiValuedMap in collections4 uses internally an InstantiateFactory which is serialized. Need to find a better solution for this before we can resolve the issue.&lt;/p&gt;</comment>
                            <comment id="15005279" author="tn" created="Sat, 14 Nov 2015 09:56:05 +0000"  >&lt;p&gt;In collections4 there is also an inner factory class in MultiValueMap that is serializable. This can be solved with a readObject method that checks whether the de-serialized class extends Collection.&lt;/p&gt;</comment>
                            <comment id="15005597" author="tn" created="Sat, 14 Nov 2015 20:25:28 +0000"  >&lt;p&gt;Fixed MultiValueMap issue in r1714360.&lt;/p&gt;</comment>
                            <comment id="15006460" author="rchamarthy" created="Mon, 16 Nov 2015 10:22:34 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Would be interested to know an estimated data on the availability the commons collections with the fix.&lt;/p&gt;

&lt;p&gt;Advance Thanks,&lt;br/&gt;
Ravi Chamarthy&lt;/p&gt;</comment>
                            <comment id="15006492" author="tn" created="Mon, 16 Nov 2015 10:42:55 +0000"  >&lt;p&gt;collections 3.2.2 has been released yesterday.&lt;/p&gt;

&lt;p&gt;A new release for collections4 will be done this week hopefully.&lt;/p&gt;</comment>
                            <comment id="15006555" author="rchamarthy" created="Mon, 16 Nov 2015 11:38:35 +0000"  >&lt;p&gt;Thanks Thomas for the confirmation.&lt;/p&gt;</comment>
                            <comment id="15006612" author="schudel" created="Mon, 16 Nov 2015 12:39:35 +0000"  >&lt;p&gt;Thanks Thomas for the quick fix&lt;/p&gt;</comment>
                            <comment id="15007419" author="yoderme" created="Mon, 16 Nov 2015 21:56:45 +0000"  >&lt;p&gt;Let me also extend my thanks for the fix. Question: is there an assigned CVE number for this? I couldn&apos;t find one after a quick search.&lt;/p&gt;</comment>
                            <comment id="15008749" author="stevie beck" created="Tue, 17 Nov 2015 14:48:57 +0000"  >&lt;p&gt;+1 (thanks for the fix!)&lt;br/&gt;
Regarding CVE number: Mitre did not (yet?) assign one, and there has been a controversial discussion in the OSS Security list around it, see: &lt;a href=&quot;http://seclists.org/oss-sec/2015/q4/280&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://seclists.org/oss-sec/2015/q4/280&lt;/a&gt;&lt;br/&gt;
CVE-2015-4852 was assigned by Oracle and is started to be used by other vendors, whose products are impacted by the issue.&lt;/p&gt;</comment>
                            <comment id="15011116" author="tdaitx" created="Wed, 18 Nov 2015 14:50:43 +0000"  >&lt;p&gt;According to CVE assignment team &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; no CVE ID will be allocated for this issue and:&lt;/p&gt;

&lt;p&gt;&quot;The CVE-2015-4852 ID came from Oracle and must remain associated only with Oracle&apos;s own software (WebLogic Server is the product they&apos;ve named).&quot;&lt;/p&gt;

&lt;p&gt;but then Oracle&apos;s Thomas Keefe reply &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; to that thread stated:&lt;/p&gt;

&lt;p&gt;&quot;We do not have a problem with this use of the CVE# we registered (CVE-2015-4852).&quot;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://www.openwall.com/lists/oss-security/2015/11/17/19&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.openwall.com/lists/oss-security/2015/11/17/19&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://www.openwall.com/lists/oss-security/2015/11/18/1&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.openwall.com/lists/oss-security/2015/11/18/1&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15012958" author="taromaru" created="Thu, 19 Nov 2015 06:22:49 +0000"  >&lt;p&gt;I used commons-collections-3.2.2.&lt;/p&gt;

&lt;p&gt;ForClosure and WhileClosure can not deserialize.&lt;br/&gt;
But, ChainedTransformer can deserialize.&lt;br/&gt;
A DoS attack similar to an infinite loop becomes possible by the following way.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
	HashMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; map = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt;();
	&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;.MIN_VALUE + 1; i &amp;lt;= &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;.MIN_VALUE + 10; i++) {
		map.put(i, i);
	}
	Transformer constantTransformer = ConstantTransformer.getInstance(map);
	Transformer stringValueTransformer = StringValueTransformer.getInstance();
	Transformer transformerChain = ChainedTransformer.getInstance(constantTransformer, stringValueTransformer);
	&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10; i++) {
		Transformer[] transformers = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Transformer[10];
		Arrays.fill(transformers, transformerChain);
		transformerChain = ChainedTransformer.getInstance(transformers);
	}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This serialized file size is less than 2KB.&lt;br/&gt;
But it takes 6~7 hours for deserialize. (Core i5 CPU)&lt;/p&gt;

&lt;p&gt;I think the similar way is also possible in ChainedClosure, AllPredicate, AnyPredicate.&lt;/p&gt;

&lt;p&gt;When other class of org.apache.commons.collections.functors package was used,&lt;br/&gt;
it was possible to make OutOfMemoryError occur.&lt;/p&gt;

&lt;p&gt;I think all classes of org.apache.commons.collections.functors package should call FunctorUtils#checkUnsafeSerialization.&lt;/p&gt;</comment>
                            <comment id="15013112" author="tn" created="Thu, 19 Nov 2015 08:03:31 +0000"  >&lt;p&gt;Hmm I feared that it would be too easy to create other, similar exploits with still serializable classes.&lt;/p&gt;

&lt;p&gt;btw. for the same DOS attack, the guava lib might be exploitable as well. The lib also provides predicates and functions that can be chained in a way or another and are serializable.&lt;/p&gt;</comment>
                            <comment id="15013329" author="stevie beck" created="Thu, 19 Nov 2015 10:58:39 +0000"  >&lt;p&gt;This reminds me of the the general &quot;SerialDoS&quot; code, published here: &lt;a href=&quot;https://gist.github.com/coekie/a27cc406fc9f3dc7a70d&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gist.github.com/coekie/a27cc406fc9f3dc7a70d&lt;/a&gt;&lt;br/&gt;
I am not THAT Java expert, so I just assume, that any application that allows deserialization from untrusted input, can be DoS&apos;ed - regardless what libraries are included in the classpath.&lt;br/&gt;
Just creation of code execution needs more investigation and creativity and the need to find suitable gadgets...&lt;/p&gt;</comment>
                            <comment id="15014694" author="tn" created="Thu, 19 Nov 2015 23:09:43 +0000"  >&lt;p&gt;In the collections4 branch, the MultiValuedMap implementations do not use the InstantiateFactory anymore.&lt;br/&gt;
Committed in r1715302. This required a huge refactoring effort, but should definitely be safer as no reflection is used anymore.&lt;/p&gt;</comment>
                            <comment id="15019162" author="yoderme" created="Sat, 21 Nov 2015 00:19:44 +0000"  >&lt;p&gt;&quot;No reflection is used anymore&quot; sounds like a really good thing. Might I ask when you expect a release of collecions4 to be out?  Thanks!&lt;/p&gt;</comment>
                            <comment id="15020267" author="tn" created="Sat, 21 Nov 2015 06:16:27 +0000"  >&lt;p&gt;in the next days hopefully.&lt;/p&gt;</comment>
                            <comment id="15020368" author="tn" created="Sat, 21 Nov 2015 10:02:58 +0000"  >&lt;p&gt;Closing this issue as it is fixed in both branches.&lt;/p&gt;</comment>
                            <comment id="15024543" author="schudel" created="Tue, 24 Nov 2015 13:49:16 +0000"  >&lt;p&gt;Any info on when commons-collections 4.1 will be released?&lt;/p&gt;</comment>
                            <comment id="15024734" author="tn" created="Tue, 24 Nov 2015 16:07:09 +0000"  >&lt;p&gt;the release has been prepared, currently the vote is ongoing.&lt;/p&gt;</comment>
                            <comment id="15035897" author="mceli" created="Wed, 2 Dec 2015 14:45:26 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tn&quot; class=&quot;user-hover&quot; rel=&quot;tn&quot;&gt;Thomas Neidhart&lt;/a&gt; Is this issue also present in Apache Commons Collection v3.1? I see that the affected versions listed on the details as 3.0, 4.0.&lt;/p&gt;</comment>
                            <comment id="15035999" author="tn" created="Wed, 2 Dec 2015 15:51:34 +0000"  >&lt;p&gt;All 3.X releases and the 4.0 release are affected.&lt;/p&gt;

&lt;p&gt;For the 3.X branch we have released 3.2.2 to which all users of the 3.X branch are encouraged to upgrade.&lt;br/&gt;
For the 4.X branch we have released 4.1 (same as above applies).&lt;/p&gt;</comment>
                            <comment id="15036016" author="mceli" created="Wed, 2 Dec 2015 15:58:49 +0000"  >&lt;p&gt;Thank you for your prompt response!&lt;/p&gt;</comment>
                            <comment id="15046431" author="sunnykumar" created="Tue, 8 Dec 2015 06:07:23 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tn&quot; class=&quot;user-hover&quot; rel=&quot;tn&quot;&gt;Thomas Neidhart&lt;/a&gt; Is commons-collections 2.x library affected by this vulnerability ?. I can see there is no functions package inside the 2.x jar.&lt;/p&gt;</comment>
                            <comment id="15046545" author="tn" created="Tue, 8 Dec 2015 07:58:35 +0000"  >&lt;p&gt;The collections 2.x branch is not affected.&lt;/p&gt;

&lt;p&gt;@all the issue tracker is no discussion forum, please use the user/dev mailinglist for questions. Furthermore this issue is closed, I will not answer anything here anymore.&lt;/p&gt;</comment>
                            <comment id="15046623" author="joehni" created="Tue, 8 Dec 2015 09:14:01 +0000"  >&lt;p&gt;THIS IS NOT A HELP FORUM! If you have questions, go ask on the user&apos;s list!&lt;/p&gt;

&lt;p&gt;(Note, this was a reply to a comment that has been deleted afterwards by its original author).&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12921576">COLLECTIONS-583</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12912914">IO-487</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12914897">KARAF-4135</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12913898">HADOOP-12579</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12916111">MYFACES-4020</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12917000">VELTOOLS-169</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12771520" name="COLLECTIONS-580.patch" size="3177" author="jochen@apache.org" created="Tue, 10 Nov 2015 09:33:00 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 8 Nov 2015 16:55:57 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            49 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2o3kf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>