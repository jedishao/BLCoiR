<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Nov 19 23:00:53 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/COLLECTIONS-427/COLLECTIONS-427.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[COLLECTIONS-427] performance problem in SetUniqueList.retainAll()</title>
                <link>https://issues.apache.org/jira/browse/COLLECTIONS-427</link>
                <project id="12310465" key="COLLECTIONS">Commons Collections</project>
                    <description>&lt;p&gt;I am encountering a performance problem in SetUniqueList.retainAll().&lt;br/&gt;
It appears in version 3.2.1 and also in revision 1365132.  I attached&lt;br/&gt;
a test that exposes this problem and a patch that fixes it.  On my&lt;br/&gt;
machine, for this test, the patch provides a 621X speedup.&lt;/p&gt;

&lt;p&gt;To run the test, just do:&lt;/p&gt;

&lt;p&gt;$ java Test&lt;/p&gt;

&lt;p&gt;The output for the un-patched version is:&lt;br/&gt;
Time is 6215&lt;/p&gt;

&lt;p&gt;The output for the patched version is:&lt;br/&gt;
Time is 10&lt;/p&gt;

&lt;p&gt;There are two problems here.  First, &quot;SetUniqueList.retainAll()&quot;&lt;br/&gt;
should have similar implementation with the current implementation of&lt;br/&gt;
&quot;ListOrderedSet.retainAll()&quot;, which is more optimized.  Second, even&lt;br/&gt;
&quot;ListOrderedSet.retainAll()&quot; has a performance problem, which was&lt;br/&gt;
reported and explained in detail in &lt;a href=&quot;https://issues.apache.org/jira/browse/COLLECTIONS-426&quot; title=&quot;performance problem in ListOrderedSet.retainAll()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;COLLECTIONS-426&quot;&gt;&lt;del&gt;COLLECTIONS-426&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The attached patch has two parts.  The first part (the first loop) is&lt;br/&gt;
inspired from &lt;a href=&quot;https://issues.apache.org/jira/browse/COLLECTIONS-426&quot; title=&quot;performance problem in ListOrderedSet.retainAll()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;COLLECTIONS-426&quot;&gt;&lt;del&gt;COLLECTIONS-426&lt;/del&gt;&lt;/a&gt;.  The second part (everything after the&lt;br/&gt;
first loop) is in fact the current implementation of&lt;br/&gt;
&quot;ListOrderedSet.retainAll()&quot;, with some minor changes to adapt it for&lt;br/&gt;
the current code.  Overall, the attached patch is very similar to the&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/COLLECTIONS-426&quot; title=&quot;performance problem in ListOrderedSet.retainAll()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;COLLECTIONS-426&quot;&gt;&lt;del&gt;COLLECTIONS-426&lt;/del&gt;&lt;/a&gt; patch.&lt;/p&gt;

&lt;p&gt;I will rehash some of the information from &lt;a href=&quot;https://issues.apache.org/jira/browse/COLLECTIONS-426&quot; title=&quot;performance problem in ListOrderedSet.retainAll()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;COLLECTIONS-426&quot;&gt;&lt;del&gt;COLLECTIONS-426&lt;/del&gt;&lt;/a&gt; (which&lt;br/&gt;
describes &quot;ListOrderedSet.retainAll()&quot;) for the current&lt;br/&gt;
&quot;SetUniqueList.retainAll()&quot;.&lt;/p&gt;

&lt;p&gt;The current code for &quot;SetUniqueList.retainAll()&quot; is:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; retainAll(Collection&amp;lt;?&amp;gt; coll) {
    &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; result = &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;.retainAll(coll);
    set.retainAll(coll);
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;where both &quot;super.retainAll(coll)&quot; and &quot;set.retainAll(coll)&quot; can have&lt;br/&gt;
quadratic complexity, e.g., if &quot;coll&quot; is a List.  Both these calls to&lt;br/&gt;
&quot;retainAll&quot; are in fact calls to&lt;br/&gt;
&quot;java.util.AbstractCollection.retainAll()&quot;, which has the code:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; retainAll(Collection&amp;lt;?&amp;gt; c) {
    &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; modified = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
    Iterator&amp;lt;E&amp;gt; e = iterator();
    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (e.hasNext()) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!c.contains(e.next())) {
            e.remove();
            modified = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
        }
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; modified;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;which iterates over &quot;this&quot; and calls &quot;contains()&quot; on &quot;c&quot;.  Mapping&lt;br/&gt;
this code back to &quot;SetUniqueList.retainAll()&quot; means that the code&lt;br/&gt;
iterates over &quot;this&quot; and &quot;set&quot; and calls &quot;contains()&quot; on &quot;coll&quot;.  If&lt;br/&gt;
&quot;coll&quot; has slow &quot;contains()&quot; (e.g., if &quot;coll&quot; is a list), then&lt;br/&gt;
&quot;SetUniqueList.retainAll()&quot; has quadratic complexity.&lt;/p&gt;

&lt;p&gt;The patch iterates over &quot;coll&quot; and calls &quot;contains()&quot; on &quot;set&quot;, which&lt;br/&gt;
we know is fast, because &quot;set&quot; is a Set.  For a more detailed&lt;br/&gt;
discussion of the patch and the problem, see the current&lt;br/&gt;
implementation of &quot;ListOrderedSet.retainAll()&quot;, the discussion for&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/COLLECTIONS-426&quot; title=&quot;performance problem in ListOrderedSet.retainAll()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;COLLECTIONS-426&quot;&gt;&lt;del&gt;COLLECTIONS-426&lt;/del&gt;&lt;/a&gt;, and the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/COLLECTIONS-426&quot; title=&quot;performance problem in ListOrderedSet.retainAll()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;COLLECTIONS-426&quot;&gt;&lt;del&gt;COLLECTIONS-426&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Is this a bug, or am I misunderstanding the intended behavior?  If so,&lt;br/&gt;
can you please confirm if the patch is correct?&lt;/p&gt;</description>
                <environment>&lt;p&gt;java 1.6.0_24&lt;br/&gt;
Ubuntu 11.10&lt;/p&gt;</environment>
        <key id="12600099">COLLECTIONS-427</key>
            <summary>performance problem in SetUniqueList.retainAll()</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="mertguldur">Mert Guldur</reporter>
                        <labels>
                    </labels>
                <created>Tue, 24 Jul 2012 23:50:21 +0000</created>
                <updated>Fri, 27 Nov 2015 21:11:16 +0000</updated>
                            <resolved>Tue, 27 Jan 2015 15:09:58 +0000</resolved>
                                    <version>3.2.1</version>
                                    <fixVersion>4.0-alpha1</fixVersion>
                    <fixVersion>4.0</fixVersion>
                    <fixVersion>4.1</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="14290741" author="tn" created="Sat, 24 Jan 2015 18:07:13 +0000"  >&lt;p&gt;This fix is wrong imho and should be reverted in 4.1&lt;/p&gt;</comment>
                            <comment id="14290913" author="adriannistor" created="Sun, 25 Jan 2015 00:40:48 +0000"  >&lt;p&gt;Hi Thomas,&lt;/p&gt;

&lt;p&gt;Oh, ok.  Why is the fix wrong?  What is the bug in this fix?&lt;/p&gt;

&lt;p&gt;Best,&lt;/p&gt;

&lt;p&gt;Adrian&lt;/p&gt;</comment>
                            <comment id="14291035" author="tn" created="Sun, 25 Jan 2015 10:40:13 +0000"  >&lt;p&gt;The fix is technically correct but conceptually wrong.&lt;/p&gt;

&lt;p&gt;It tries to improve the worst-case scenario for a well-known method at the expense of additional space complexity.&lt;br/&gt;
It many cases the additional temporary set is unneeded, especially when the provided collection has a fast contains method or the collection is small.&lt;/p&gt;

&lt;p&gt;A user can always solve the performance problem him/herself by putting the elements in a set and provide this as parameter to retainAll.&lt;/p&gt;

&lt;p&gt;The described problem also applies to almost &lt;b&gt;all&lt;/b&gt; collection types as the default implementation of retainAll is provided in AbstractCollection and is unchanged for all the collections I know of. If you want to press forward your fix, I suggest to move it to the openjdk project and discuss it there, actually I would be interested on their opinions on this issue.&lt;/p&gt;</comment>
                            <comment id="14291071" author="adriannistor" created="Sun, 25 Jan 2015 12:15:58 +0000"  >&lt;p&gt;Hi Thomas,&lt;/p&gt;

&lt;p&gt;&amp;gt; A user can always solve the performance problem him/herself by&lt;br/&gt;
&amp;gt; putting the elements in a set and provide this as parameter to&lt;br/&gt;
&amp;gt; retainAll.&lt;/p&gt;

&lt;p&gt;Yes, but:&lt;/p&gt;

&lt;p&gt;(1) typically users spend (a lot) of time making the code work&lt;br/&gt;
correctly.  Users don&apos;t want to spend time with optimizations if they&lt;br/&gt;
can avoid it.&lt;/p&gt;

&lt;p&gt;(2) users needs to identify this call as a potential optimization&lt;br/&gt;
point, which is not easy if the buggy case is not triggered during&lt;br/&gt;
testing.  Furthermore, if the program-wide slowdown is small but&lt;br/&gt;
non-negligible (e.g., 10%), users may view it as unfortunate but&lt;br/&gt;
legitimate, i.e., users may not realize it can be improved.&lt;/p&gt;

&lt;p&gt;(3) the user needs figure out there is a easy and fast way to optimize&lt;br/&gt;
this code.  This requires the user to look inside the method&lt;br/&gt;
implementation.&lt;/p&gt;

&lt;p&gt;No user will do the above, so it is better to do it automatically if&lt;br/&gt;
we can.  And in this case we can do it easily and transparently in the&lt;br/&gt;
library.  If we can optimize something, we should do it.&lt;/p&gt;

&lt;p&gt;&amp;gt; at the expense of additional space complexity.&lt;/p&gt;

&lt;p&gt;Yes.  But typically we have memory available, speed is more difficult&lt;br/&gt;
to get.  And the additional space is linear in the size of c, whereas&lt;br/&gt;
the time improvement is huge.  And the added memory is less than half&lt;br/&gt;
the memory used by the SetUniqueList and is very short lived.  So the&lt;br/&gt;
added memory is not a problem.&lt;/p&gt;

&lt;p&gt;&amp;gt; The described problem also applies to almost all collection types &lt;/p&gt;

&lt;p&gt;Yes, but &quot;others do it too&quot; is not a reason for us to not improve if&lt;br/&gt;
we can.&lt;/p&gt;

&lt;p&gt;Overall, it is your decision.  I just feel that if we can help the&lt;br/&gt;
developers, we should do it.  And if others don&apos;t do it, that&apos;s their&lt;br/&gt;
problem, not ours.&lt;/p&gt;

&lt;p&gt;Best,&lt;/p&gt;

&lt;p&gt;Adrian&lt;/p&gt;</comment>
                            <comment id="14291083" author="sebb@apache.org" created="Sun, 25 Jan 2015 12:43:59 +0000"  >&lt;p&gt;The problem with unconditionally using extra memory in the hope that it will improve performance is that users who don&apos;t want or need it have no choice.&lt;br/&gt;
Commons code may be used in devices with limited memory; we should not assume that memory is not an issue.&lt;/p&gt;

&lt;p&gt;Whereas if such copying is not done automatically, at least users who want to trade memory for speed can do so.&lt;/p&gt;</comment>
                            <comment id="14291085" author="adriannistor" created="Sun, 25 Jan 2015 12:52:03 +0000"  >&lt;p&gt;Hi Sebb,&lt;/p&gt;

&lt;p&gt;&amp;gt; at least users who want to trade memory for speed can do so.&lt;/p&gt;

&lt;p&gt;Ok.  Let&apos;s at least write this down in the method Javadoc, like in&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/COLLECTIONS-415&quot; title=&quot;AbstractLinkedList.removeAll() is very slow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;COLLECTIONS-415&quot;&gt;&lt;del&gt;COLLECTIONS-415&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/COLLECTIONS-417&quot; title=&quot;AbstractLinkedList.retainAll() is very slow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;COLLECTIONS-417&quot;&gt;&lt;del&gt;COLLECTIONS-417&lt;/del&gt;&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Best,&lt;/p&gt;

&lt;p&gt;Adrian&lt;/p&gt;</comment>
                            <comment id="14291086" author="tn" created="Sun, 25 Jan 2015 12:58:47 +0000"  >&lt;p&gt;Again, users need to know what they are doing and be aware of the performance constraints of the collection types they are using.&lt;br/&gt;
I agree that the implemented algorithm of retainAll is not explained in detail (the original Collection#retainAll method has just a reference to contains(), but does not describe the performance implications), and we will add a note as in other cases, but this is not a problem limited to commons-collections but to the collection framework of java in general.&lt;/p&gt;

&lt;p&gt;That&apos;s why I suggested to move the discussion to openjdk. In fact, if your proposed fix would be implemented in AbstractCollection the problem would go away for almost all collection types and users would be safe (or is that so?).&lt;/p&gt;

&lt;p&gt;On a personal note: I strongly doubt that the described problem is a &quot;real&quot; one. A quick search on stackoverflow with &quot;retainAll slow&quot; lists two posts with both suggesting to call it with a set.&lt;/p&gt;</comment>
                            <comment id="14291153" author="adriannistor" created="Sun, 25 Jan 2015 15:54:17 +0000"  >&lt;p&gt;Hi Thomas,&lt;/p&gt;

&lt;p&gt;&amp;gt; users need to know what they are doing and be aware of the&lt;br/&gt;
&amp;gt; performance constraints&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; true, and how often does that happen?&lt;/p&gt;

&lt;p&gt;&amp;gt; this is not a problem limited to commons-collections&lt;/p&gt;

&lt;p&gt;Ok, I will try this &quot;others do it too&quot; argument next time when I get a&lt;br/&gt;
speeding ticket.  I will let you know how that works out &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; devices with limited memory&lt;/p&gt;

&lt;p&gt;Is Apache Collections optimized for such devices?  How many&lt;br/&gt;
optimizations for such devices do we have?  1, 2, 5?  It seems quite a&lt;br/&gt;
unique instance here that we are all of the sudden worrying about some&lt;br/&gt;
memory (less than half of this collection, and short lived).&lt;/p&gt;

&lt;p&gt;Overall, I still think that if we can optimize something without&lt;br/&gt;
disadvantages (I would not count this memory thing, except the case we&lt;br/&gt;
are optimizing memory--&lt;del&gt;small quantities of memory&lt;/del&gt;--in more than 5&lt;br/&gt;
places in the entire Apache Collections), there is no reason to not do&lt;br/&gt;
it.  But all the pros and cons are in this thread, so in the end do&lt;br/&gt;
what you think best for this library.&lt;/p&gt;

&lt;p&gt;Best,&lt;/p&gt;

&lt;p&gt;Adrian&lt;/p&gt;</comment>
                            <comment id="14291187" author="tn" created="Sun, 25 Jan 2015 17:29:11 +0000"  >&lt;blockquote&gt;
&lt;p&gt;&amp;gt; users need to know what they are doing and be aware of the&lt;br/&gt;
&amp;gt; performance constraints&lt;/p&gt;

&lt;p&gt;true, and how often does that happen?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I do not think it should be the goal of a general-purpose library to pre-optimize every possible use-case.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;gt; this is not a problem limited to commons-collections&lt;/p&gt;

&lt;p&gt;Ok, I will try this &quot;others do it too&quot; argument next time when I get a&lt;br/&gt;
speeding ticket. I will let you know how that works out &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I did not say that. I said that the retainAll() method suffers from the &quot;problem&quot; in general.&lt;br/&gt;
Changing it in collections, especially for some rarely used classes does not safe users from the performance problems you are talking about. I am pretty sure that ArrayList.retainAll is much, much more often used than SetUniqueList.retainAll. So why changing it here and not for ArrayList?&lt;/p&gt;

&lt;p&gt;You are looking at the problem from a purely theoretical POV. From an engineering POV it is much more important that users get what they expect. And the retainAll method as implemented is well-known in the java community.&lt;/p&gt;

&lt;p&gt;And again, a user can get the expected performance by putting the argument in a set himself. So where is the problem (apart from documenting it properly)?&lt;/p&gt;</comment>
                            <comment id="14291608" author="tn" created="Mon, 26 Jan 2015 09:21:43 +0000"  >&lt;p&gt;There is a similar ticket for openjdk from 2004, with a comment from Josh Bloch: &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-5028425?page=com.atlassian.streams.streams-jira-plugin:activity-stream-issue-tab&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://bugs.openjdk.java.net/browse/JDK-5028425?page=com.atlassian.streams.streams-jira-plugin:activity-stream-issue-tab&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14293660" author="tn" created="Tue, 27 Jan 2015 15:09:58 +0000"  >&lt;p&gt;Reverted performance improvement, added clarifying javadoc wrt runtime complexity and did a slight improvement over the original code in r1655062.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12537770" name="Test.java" size="746" author="mertguldur" created="Tue, 24 Jul 2012 23:50:37 +0000"/>
                            <attachment id="12537769" name="patch.diff" size="1189" author="mertguldur" created="Tue, 24 Jul 2012 23:50:37 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 24 Jan 2015 18:07:13 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>255281</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 42 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0eqnz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>84082</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>