<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Wed Nov 30 23:43:37 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LANG-481/LANG-481.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[LANG-481] Possible race-conditions in hashCode of the range classes</title>
                <link>https://issues.apache.org/jira/browse/LANG-481</link>
                <project id="12310481" key="LANG">Commons Lang</project>
                    <description>&lt;p&gt;The hashCode() methods of the range classes look very suspicious to me. The value is lazily initialized, but the calculation is done _on the cached value. With some unlucky timing a caller may get an incomplete hash.&lt;/p&gt;

&lt;p&gt;An unlucky sequence of Code could be something like&lt;br/&gt;
T1:        if (hashCode == 0) // true&lt;br/&gt;
T1:            hashCode = 17;&lt;br/&gt;
T2:         if (hashCode == 0) // now false because hashCode was already set to 17&lt;br/&gt;
T2:         return hashCode; // return 17&lt;br/&gt;
T1:            hashCode = 37 * hashCode...........&lt;/p&gt;

&lt;p&gt;where T1 and T2 are different threads accessing the method in parallel and T2 gets the wrong hash &quot;17&quot;.&lt;/p&gt;

&lt;p&gt;Affected classes are&lt;/p&gt;

&lt;p&gt;org.apache.commons.lang.math.DoubleRange&lt;br/&gt;
org.apache.commons.lang.math.FloatRange&lt;br/&gt;
org.apache.commons.lang.math.IntRange&lt;br/&gt;
org.apache.commons.lang.math.LongRange&lt;br/&gt;
org.apache.commons.lang.math.NumberRange&lt;br/&gt;
org.apache.commons.lang.math.Range&lt;/p&gt;

&lt;p&gt;Possible fix: calculate the hash on a temporary variable and finally assign it to the member&lt;/p&gt;</description>
                <environment></environment>
        <key id="12413122">LANG-481</key>
            <summary>Possible race-conditions in hashCode of the range classes</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="2091c76f726f21a61b6d2f8b885cc39d">Boris</reporter>
                        <labels>
                    </labels>
                <created>Fri, 23 Jan 2009 19:48:12 +0000</created>
                <updated>Sat, 16 Jan 2010 08:04:53 +0000</updated>
                            <resolved>Sat, 16 Jan 2010 08:04:53 +0000</resolved>
                                    <version>2.4</version>
                                    <fixVersion>3.0</fixVersion>
                                    <component>lang.*</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12666915" author="jwcarman" created="Sat, 24 Jan 2009 12:57:41 +0000"  >&lt;p&gt;If this is indeed an issue, there are other cached values also that have the same problem (toString, maxObject, minObject) in LongRange  This JIRA issue should encompass those, also.&lt;/p&gt;</comment>
                            <comment id="12666941" author="2091c76f726f21a61b6d2f8b885cc39d" created="Sat, 24 Jan 2009 15:24:51 +0000"  >&lt;p&gt;toString, maxObject and minObject do not have &lt;b&gt;this&lt;/b&gt; kind of race where you could end up with &lt;b&gt;wrong&lt;/b&gt; data.&lt;br/&gt;
Of course there is race too, but in the worst case, you may only end up calculating the value every time the method is called and the cached value is not visible to your Thread. Of course you get no caching, but you&apos;ll never get wrong data.&lt;br/&gt;
So this worst case is pretty much like not caching it at all, but with some luck you get the value cached - at least once for each thread.&lt;/p&gt;

&lt;p&gt;Looking at other classes this seems to be a common technique in commons-lang.&lt;/p&gt;</comment>
                            <comment id="12666948" author="sebb@apache.org" created="Sat, 24 Jan 2009 16:03:43 +0000"  >&lt;p&gt;I&apos;m not sure that would be true for an arbitrary object: if an object is written in one thread, another thread may see a partially updated object unless the two threads synchronise on the same lock.&lt;/p&gt;

&lt;p&gt;However, the objects in this case (Long) are final which I think means that their contents will be published correctly - i.e. other threads will see the updated object in full or not at all.&lt;/p&gt;</comment>
                            <comment id="12666954" author="2091c76f726f21a61b6d2f8b885cc39d" created="Sat, 24 Jan 2009 16:46:26 +0000"  >&lt;p&gt;Sebb, you&apos;re right. What I said is not true for arbitrary Objects. Sorry.&lt;br/&gt;
I think it&apos;s only true for immutable Objects (that use final fields). And only for atomic assignment operations (assignments of primitive longs and doubles on a non-volatile field is AFAIK not atomic, but object-reference assignment is indeed). But I guess there are better explanations out there then mine :-/&lt;/p&gt;</comment>
                            <comment id="12742243" author="bayard" created="Wed, 12 Aug 2009 07:05:09 +0000"  >&lt;p&gt;What&apos;s the open topic on this issue? Which classes have the problem?&lt;/p&gt;</comment>
                            <comment id="12742521" author="2091c76f726f21a61b6d2f8b885cc39d" created="Wed, 12 Aug 2009 18:56:51 +0000"  >&lt;p&gt;Henri, as far as I can see all the classes I mentioned in my report have the problem. All other classes I looked at not because they don&apos;t use the member-variable as a temp to calculate the value.&lt;br/&gt;
There is one exception from my first list (at least in current trunk): org.apache.commons.lang.math.Range looks safe&lt;/p&gt;

&lt;p&gt;So it comes down to this classes:&lt;br/&gt;
org.apache.commons.lang.math.DoubleRange&lt;br/&gt;
org.apache.commons.lang.math.FloatRange&lt;br/&gt;
org.apache.commons.lang.math.IntRange&lt;br/&gt;
org.apache.commons.lang.math.LongRange&lt;br/&gt;
org.apache.commons.lang.math.NumberRange&lt;/p&gt;</comment>
                            <comment id="12742522" author="2091c76f726f21a61b6d2f8b885cc39d" created="Wed, 12 Aug 2009 19:03:38 +0000"  >&lt;p&gt;Possible patch to this issue.&lt;br/&gt;
This uses the same technique used elsewhere in commons-lang. Using a non-volatile field to cache the value (in the worst case it may be calculated every time, in the best case only once) and calculating the value on a temp variable so that there is never an inconsistent value stored in the field.&lt;/p&gt;</comment>
                            <comment id="12752227" author="bayard" created="Mon, 7 Sep 2009 17:56:41 +0000"  >&lt;p&gt;Patch applied - thanks Boris &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12764366" author="2091c76f726f21a61b6d2f8b885cc39d" created="Sat, 10 Oct 2009 19:26:04 +0000"  >&lt;p&gt;I&apos;m sorry, I just dicovered that there is another data-race in that methods that I overlooked before.&lt;/p&gt;

&lt;p&gt;In short: Due to the Java Memory Model and allowed reorderings it is possible that the hashCode() can return 0 instead of the correct value and thus breaking HashMaps etc. in this case.&lt;br/&gt;
Please see &lt;a href=&quot;http://jeremymanson.blogspot.com/2008/12/benign-data-races-in-java.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;this post&lt;/a&gt; for details on this issue and String.hashCode() in the java-sources as a reference how to do it right. He explained it better than I can.&lt;/p&gt;

&lt;p&gt;I&apos;ll attach a patch against trunk to fix this.&lt;/p&gt;</comment>
                            <comment id="12774801" author="bayard" created="Sun, 8 Nov 2009 18:11:24 +0000"  >&lt;p&gt;Currently considering deleting the *Range classes and replacing with a single Range class. Presumably it doesn&apos;t resolve this issue - need to check post &lt;a href=&quot;https://issues.apache.org/jira/browse/LANG-551&quot; title=&quot;Replace Range classes with generic version&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LANG-551&quot;&gt;&lt;del&gt;LANG-551&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12777861" author="bayard" created="Sat, 14 Nov 2009 10:02:02 +0000"  >&lt;p&gt;*Range classes deleted. Need to figure out a fix for the hashCode data-race reordering. Seems that we need to cache the value or work it out in the constructor.&lt;/p&gt;</comment>
                            <comment id="12777947" author="2091c76f726f21a61b6d2f8b885cc39d" created="Sat, 14 Nov 2009 15:33:24 +0000"  >&lt;p&gt;Henri,&lt;br/&gt;
The current hashCode() is fine of course &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; And as optimum long as speed is no concern it&apos;s also the best. Just my 2ct on this topic:&lt;/p&gt;

&lt;p&gt;Caching or pre-calculating the value will be a trade-off on how you want to use the class. If you pre-calculate the value and never use hashCode() the &quot;effort&quot; was pointless. If you cache it, it will MAY be re-calculated on every call (but this is rather unlikely).&lt;/p&gt;

&lt;p&gt;I think the cached-approach is the best (if it&apos;s done right of course &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;), but the constructor-approach is easier to get right.&lt;br/&gt;
But as one can use String.hashCode() as a boilerplate it should be easy to implement optimistic caching right.&lt;/p&gt;</comment>
                            <comment id="12777994" author="bayard" created="Sat, 14 Nov 2009 19:43:54 +0000"  >&lt;p&gt;Link to license useable String.java:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk/modules/luni/src/main/java/java/lang/String.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk/modules/luni/src/main/java/java/lang/String.java&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12788868" author="2091c76f726f21a61b6d2f8b885cc39d" created="Thu, 10 Dec 2009 19:45:06 +0000"  >&lt;p&gt;Sorry for the delay of my answer.&lt;/p&gt;

&lt;p&gt;The hashCode() of Harmony has the same reorder-bug as described above. It loads from a non-volatile field without synchronisation, so the code can be reordered and 0 could be wrongly returned as a hashCode.&lt;/p&gt;</comment>
                            <comment id="12789211" author="tellison" created="Fri, 11 Dec 2009 10:14:03 +0000"  >&lt;p&gt;Boris,&lt;br/&gt;
Harmony&apos;s String#hashCode() is fine, see the discussions on the dev list&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://markmail.org/thread/3ckdhgonbh7xtulg&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://markmail.org/thread/3ckdhgonbh7xtulg&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://markmail.org/thread/3ckdhgonbh7xtulg&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://markmail.org/thread/3ckdhgonbh7xtulg&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12801121" author="bayard" created="Sat, 16 Jan 2010 08:04:53 +0000"  >&lt;p&gt;Closing out with Boris&apos; 2nd patch effectively applied to the new Range class while adding hashCode caching (r899897).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12421806" name="LANG-481-reordering_datarace.patch" size="2864" author="2091c76f726f21a61b6d2f8b885cc39d" created="Sat, 10 Oct 2009 19:27:51 +0000"/>
                            <attachment id="12416350" name="LANG-481.patch" size="4659" author="2091c76f726f21a61b6d2f8b885cc39d" created="Wed, 12 Aug 2009 19:03:38 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 24 Jan 2009 12:57:41 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>147347</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            6 years, 46 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0d5w7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>74731</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>