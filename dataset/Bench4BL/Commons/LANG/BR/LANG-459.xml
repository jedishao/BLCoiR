<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Wed Nov 30 23:23:02 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LANG-459/LANG-459.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[LANG-459] Issue in HashCodeBuilder which only shows up under high load multi-threaded usage.</title>
                <link>https://issues.apache.org/jira/browse/LANG-459</link>
                <project id="12310481" key="LANG">Commons Lang</project>
                    <description>&lt;p&gt;We found we were having problems with HashCodeBuilder under multi-threaded high load.&lt;/p&gt;

&lt;p&gt;I narrowed this down to the following attached test case.&lt;/p&gt;

&lt;p&gt;When I dug into the code, I found the problem was solved by commenting out the isRegistered method (though this would break the infinite loop problem).&lt;br/&gt;
( I did a lot of other digging that I wont bore you with).&lt;/p&gt;

&lt;p&gt;So instead I replaced the HashSet with an ArrayList and just added the object, rather than the toIdentityHashCodeInteger(object)&lt;/p&gt;

&lt;p&gt;This results in about 5 lines of change.  &lt;/p&gt;

&lt;p&gt;My suspicion is that System.identityHashCode does not return unique values (it is after all a hashcode method).  The code assumes it will return a unique value and this causes the problem at high loads.&lt;/p&gt;

&lt;p&gt;The downside is a List vs. a Set, but I believe this is necessary.&lt;/p&gt;

&lt;p&gt;I&apos;d like to submit this fix and have it verified (and perhaps improved).  I am convinced it is a necessary fix which we have seen show up under high loads.&lt;/p&gt;

&lt;p&gt;Kindest regards, &lt;br/&gt;
Andrew.&lt;/p&gt;</description>
                <environment>&lt;p&gt;All&lt;/p&gt;</environment>
        <key id="12404365">LANG-459</key>
            <summary>Issue in HashCodeBuilder which only shows up under high load multi-threaded usage.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="anewilson7272">Andrew Wilson</reporter>
                        <labels>
                    </labels>
                <created>Mon, 15 Sep 2008 16:09:36 +0000</created>
                <updated>Thu, 25 Feb 2010 19:53:59 +0000</updated>
                            <resolved>Tue, 16 Sep 2008 16:36:51 +0000</resolved>
                                    <version>2.4</version>
                                    <fixVersion>2.5</fixVersion>
                                    <component>lang.builder.*</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                    <timeoriginalestimate seconds="300">5m</timeoriginalestimate>
                            <timeestimate seconds="300">5m</timeestimate>
                                        <comments>
                            <comment id="12631059" author="anewilson7272" created="Mon, 15 Sep 2008 16:12:42 +0000"  >&lt;p&gt;Here is the simple testcase for this problem.  If you run it with one thread everything is fine.  If you run it with 1000 it starts blowing up!&lt;/p&gt;</comment>
                            <comment id="12631060" author="anewilson7272" created="Mon, 15 Sep 2008 16:14:28 +0000"  >&lt;p&gt;Here is my suggested solution.  Its about 5 lines of change.  Switch the HashSet to an ArrayList and stop using the HashCode method for equality.&lt;/p&gt;</comment>
                            <comment id="12631266" author="joehni" created="Tue, 16 Sep 2008 06:44:59 +0000"  >&lt;p&gt;Hi Andrew, it is a lot easier for us to look over a patch, if you use a diff as attachment. Especially if development continues, nobody knows in the end, what you really changed when your version of the code was current.&lt;br/&gt;
&amp;#8211; J&#246;rg&lt;/p&gt;</comment>
                            <comment id="12631304" author="anewilson7272" created="Tue, 16 Sep 2008 09:12:33 +0000"  >&lt;p&gt;Joerg,  no problem, what do you want me to use to create the diff file?  Andrew.&lt;/p&gt;</comment>
                            <comment id="12631324" author="sebb@apache.org" created="Tue, 16 Sep 2008 10:24:34 +0000"  >&lt;p&gt;Unified diff format is the usual method.&lt;/p&gt;

&lt;p&gt;For example, as created by Eclipse or &quot;svn diff&quot;.&lt;/p&gt;

&lt;p&gt;By the way, I can confim that I have seen the bug, and it is a problem with indentityHashCode - identical system hashcodes can be generated for both the class MyClass1 and the field containing the class MyClass2. Object.equals() on the two objects gives false (I commented out the overrides of equals) so the objects are different.&lt;/p&gt;

&lt;p&gt;A quick google shows that this has been noticed elsewhere. &lt;/p&gt;

&lt;p&gt;It is not a bug in indentityHashCode bcause that is not guaranteed to generate unique hashes for distinct objects.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;it just has to try to do so. The hashcode is only an int (rather than long), which reduces the number of possible values somewhat.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It&apos;s not possible to use HashMap on the original object, as HashMap uses the hash to decide where to store the key.&lt;br/&gt;
If there is no other way of generating a unique value for an object, then something other than a HashMap will have to be used - e.g. ArrayList.&lt;/p&gt;

&lt;p&gt;Debuggers seem to be able to generate unique names for objects, but the code may be rather expensive.&lt;/p&gt;</comment>
                            <comment id="12631327" author="sebb@apache.org" created="Tue, 16 Sep 2008 10:28:12 +0000"  >&lt;p&gt;Or it may be possible to use the IdentityHashMap - I&apos;ll try that now.&lt;br/&gt;
...&lt;br/&gt;
Unfortunately that is Java 1.4+ and Lang currently targets 1.3+&lt;/p&gt;</comment>
                            <comment id="12631332" author="joehni" created="Tue, 16 Sep 2008 10:48:05 +0000"  >&lt;p&gt;Javadoc for Object.hashCode():&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The general contract of hashCode is:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application.&lt;/li&gt;
	&lt;li&gt;If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.&lt;/li&gt;
	&lt;li&gt;It is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hashtables.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem is that a common implementation like&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; class MyClass {
        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; arg;

        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; MyClass(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; arg) {
            &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.arg = arg;
        }

        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; equals(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; o) {
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; EqualsBuilder.reflectionEquals(o, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;);
        }

        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; hashCode() {
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; HashCodeBuilder.reflectionHashCode(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;);
        }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;... will simply violate point two of the upper specification if HashCodeBuilder.reflectionHashCode(Object) will use the identityHashCode.&lt;/p&gt;</comment>
                            <comment id="12631344" author="sebb@apache.org" created="Tue, 16 Sep 2008 11:30:57 +0000"  >&lt;p&gt;More googling shows that Mina and Axis have hit the same problem.&lt;/p&gt;

&lt;p&gt;Axis has a neat solution - they wrap the identityHashCode in an object which also contains a copy of the value to disambiguate the hash collisions.&lt;/p&gt;

&lt;p&gt;I can apply that as a fix - it should be cheaper than switching to a List.&lt;/p&gt;</comment>
                            <comment id="12631369" author="anewilson7272" created="Tue, 16 Sep 2008 12:38:26 +0000"  >&lt;p&gt;Sounds good to me.  I can run my TestCase against this afterwards (I have a few) and help to verify the fix.  Many thanks for your prompt response.  Andrew.&lt;/p&gt;

&lt;p&gt;PS. I&apos;m presuming the fix is this &lt;a href=&quot;http://marc.info/?l=axis-dev&amp;amp;m=103079325806666&amp;amp;w=2&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://marc.info/?l=axis-dev&amp;amp;m=103079325806666&amp;amp;w=2&lt;/a&gt; &lt;/p&gt;</comment>
                            <comment id="12631374" author="sebb@apache.org" created="Tue, 16 Sep 2008 12:47:04 +0000"  >&lt;p&gt;@Andrew&lt;/p&gt;

&lt;p&gt;Yes, my suggested fix is as you mention.&lt;/p&gt;

&lt;p&gt;I copied IDKey from Axis, and then replaced &lt;/p&gt;

&lt;p&gt;    toIdentityHashCodeInteger(value)&lt;/p&gt;

&lt;p&gt;with&lt;/p&gt;

&lt;p&gt;   new IDKey(value)&lt;/p&gt;

&lt;p&gt;throughout. The private toIdentityHashCodeInteger(value) method can then be deleted.&lt;/p&gt;

&lt;p&gt;It seems to work for me, but it would be worth trying some more tests.&lt;/p&gt;</comment>
                            <comment id="12631423" author="anewilson7272" created="Tue, 16 Sep 2008 14:54:12 +0000"  >&lt;p&gt;Yup, that fix seemed to work well for me.  Andrew.&lt;/p&gt;</comment>
                            <comment id="12631445" author="sebb@apache.org" created="Tue, 16 Sep 2008 16:07:51 +0000"  >&lt;p&gt;Fixes applied to SVN:&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&quot;http://svn.apache.org/viewvc?rev=695951&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?rev=695951&amp;amp;view=rev&lt;/a&gt;&lt;br/&gt;
Log:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/LANG-459&quot; title=&quot;Issue in HashCodeBuilder which only shows up under high load multi-threaded usage.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LANG-459&quot;&gt;&lt;del&gt;LANG-459&lt;/del&gt;&lt;/a&gt; HashCodeBuilder.reflectionHashCode() can generate incorrect hashcodes&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12390119" name="HashCodeBuilder.java" size="31932" author="anewilson7272" created="Mon, 15 Sep 2008 16:14:28 +0000"/>
                            <attachment id="12390118" name="MyTest.java" size="1773" author="anewilson7272" created="Mon, 15 Sep 2008 16:12:42 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 16 Sep 2008 06:44:59 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>147333</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 12 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0d5yv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>74743</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>