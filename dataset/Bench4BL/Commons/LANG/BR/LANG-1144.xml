<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Wed Nov 30 23:31:35 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LANG-1144/LANG-1144.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[LANG-1144] Multiple calls of org.apache.commons.lang3.concurrent.LazyInitializer.initialize() are possible</title>
                <link>https://issues.apache.org/jira/browse/LANG-1144</link>
                <project id="12310481" key="LANG">Commons Lang</project>
                    <description>&lt;p&gt;It is possible to create a construct, that allows multiple calls of LazyInitializer.initialize, when calculations (which can be very expensive) return null as result. &lt;br/&gt;
In the Javadoc is described that the initialize method will be called only on the first access&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    /**
     * Creates and initializes the object managed by &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; {@code
     * LazyInitializer}. This method is called by {@link #get()} when the object
     * is accessed &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the first time. An implementation can focus on the
     * creation of the object. No synchronization is needed, as &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; is already
     * handled by {@code get()}.
     *
     * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; the managed data object
     * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; ConcurrentException &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; an error occurs during object creation
     */
    &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; T initialize() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; ConcurrentException;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Junit Test can be something like this:&lt;br/&gt;
&lt;b&gt;(fix can be appplied from attached patch-file)&lt;/b&gt;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; edu.test;

&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; org.junit.Assert.assertEquals;

&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.lang3.concurrent.ConcurrentException;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.lang3.concurrent.LazyInitializer;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;

&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class LazyInitializerTest {

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; lazyinitCounter = 0;

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; LazyInitializer&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;&amp;gt; lazyIinit = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; LazyInitializer&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;&amp;gt;() {

    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; initialize() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; ConcurrentException {
      lazyinitCounter++;
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; doSomeVeryExpensiveOperations();
    }
  };
  
  
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; doSomeVeryExpensiveOperations() {
    &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; db calls
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; some complex math calculations
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// the result of them all is &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
  }
  
  
  @Test
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testInitialization() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    lazyIinit.get();
    lazyIinit.get();
    assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;Multiple call of LazyInitializer#initialize&quot;&lt;/span&gt;, 1, lazyinitCounter);
  }

}


&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment>&lt;p&gt;Java 1.8 on Windows 7 x64&lt;/p&gt;</environment>
        <key id="12836937">LANG-1144</key>
            <summary>Multiple calls of org.apache.commons.lang3.concurrent.LazyInitializer.initialize() are possible</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="garydgregory">Gary Gregory</assignee>
                                    <reporter username="waldemar">Waldemar Maier</reporter>
                        <labels>
                    </labels>
                <created>Wed, 10 Jun 2015 20:07:28 +0000</created>
                <updated>Sun, 23 Oct 2016 17:37:52 +0000</updated>
                            <resolved>Sun, 23 Oct 2016 17:37:32 +0000</resolved>
                                    <version>3.4</version>
                    <version>3.5</version>
                                    <fixVersion>3.6</fixVersion>
                                    <component>lang.concurrent.*</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="14582444" author="oliver.heger@t-online.de" created="Thu, 11 Jun 2015 20:03:44 +0000"  >&lt;p&gt;I do not think that this is really a critical problem. The use case that a longer and complex calculation yields a null result at the end seems a bit odd to me.&lt;/p&gt;

&lt;p&gt;And - as you have a demonstrated in your patch - there is an easy work-around for the problem: Just use a special null object or a wrapper type like MutableObject or the new Java 8 type Optional. I would be reluctant to add such means to the current implementation because this increases complexity and is (slightly) less efficient. This is IMHO a too high price for such a corner use case.&lt;/p&gt;

&lt;p&gt;What should be done in any case is to add a note to the Javadocs describing this problem.&lt;/p&gt;</comment>
                            <comment id="15598131" author="garydgregory" created="Sat, 22 Oct 2016 16:47:40 +0000"  >&lt;p&gt;This seems like a valid bug report to me.&lt;/p&gt;

&lt;p&gt;I do not think it reasonable to ask user to create a &quot;special&quot; null value for a JDBC Connection or Statement, for example:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
LazyInitializer&amp;lt;java.sql.Connection&amp;gt;
LazyInitializer&amp;lt;java.sql.Statement&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, I have to go and implement a &quot;null&quot; implementation of all the interfaces I want to use? That&apos;s not acceptable.&lt;/p&gt;

&lt;p&gt;Furthermore, what if I have a &lt;tt&gt;ComplexSomething&lt;/tt&gt; class with many private final fields that get initialized on construction to create a valid object? I now have to change the class to allow for all null values? Not acceptable either.&lt;/p&gt;</comment>
                            <comment id="15598136" author="garydgregory" created="Sat, 22 Oct 2016 16:51:39 +0000"  >&lt;p&gt;I wish I had paid more attention when this class was added because &lt;tt&gt;org.apache.commons.lang3.concurrent.LazyInitializer.get()&lt;/tt&gt; throwing a custom &lt;tt&gt;ConcurrentException&lt;/tt&gt; does not make sense to me either. That&apos;s because if I catch an error while I am building my object, it might have nothing to do with concurrency. The fact that the LI class helps me deal with concurrency matters, yes. This should be an &lt;tt&gt;IllegalStateException&lt;/tt&gt;. We could change this for 4.0 I suppose.&lt;/p&gt;</comment>
                            <comment id="15598178" author="garydgregory" created="Sat, 22 Oct 2016 17:19:04 +0000"  >&lt;p&gt;Proposed patch. You could do away with the Null class and just use a &quot;new Object()&quot; as the null value.&lt;/p&gt;</comment>
                            <comment id="15598405" author="garydgregory" created="Sat, 22 Oct 2016 20:04:07 +0000"  >&lt;p&gt;Patch that follows the same double lock idiom.&lt;/p&gt;</comment>
                            <comment id="15599914" author="oliver.heger@t-online.de" created="Sun, 23 Oct 2016 16:13:54 +0000"  >&lt;p&gt;The patch looks good to me, but I would propose to make the special noInit object even &lt;b&gt;static&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Regarding exception handling: I think, the currently implemented solution is in-line with the approach taken by the JDK. See for instance &lt;tt&gt;Future.get()&lt;/tt&gt;, which throws an &lt;tt&gt;ExecutionException&lt;/tt&gt;. There is also some support for the exception type in the &lt;tt&gt;ConcurrentUtils&lt;/tt&gt; class.&lt;/p&gt;</comment>
                            <comment id="15600026" author="garydgregory" created="Sun, 23 Oct 2016 17:37:32 +0000"  >&lt;p&gt;In Git master. &lt;/p&gt;

&lt;p&gt;Please verify and close.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12738916" name="0001-LANG-1144-allow-nulls-as-return-value.patch" size="1985" author="waldemar" created="Wed, 10 Jun 2015 21:00:38 +0000"/>
                            <attachment id="12834824" name="commons-lang.patch" size="1090" author="garydgregory" created="Sat, 22 Oct 2016 20:04:07 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 11 Jun 2015 20:03:44 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2fwbj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>