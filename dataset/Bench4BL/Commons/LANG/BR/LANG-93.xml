<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Wed Nov 30 23:09:47 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LANG-93/LANG-93.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[LANG-93] StackOverflow due to ToStringBuilder</title>
                <link>https://issues.apache.org/jira/browse/LANG-93</link>
                <project id="12310481" key="LANG">Commons Lang</project>
                    <description>&lt;p&gt;The ToStringBuilder doesn&apos;t handle relations to other objects&lt;br/&gt;
very well. It&apos;s very easy to get into an never-ending-loop.&lt;br/&gt;
The following code will crash the JVM with a StackOverflowError :&lt;/p&gt;

&lt;p&gt;import org.apache.commons.lang.builder.ToStringBuilder;&lt;/p&gt;

&lt;p&gt;public class Test1&lt;br/&gt;
{&lt;br/&gt;
  Test1 test;&lt;/p&gt;

&lt;p&gt;  public Test1() {}&lt;/p&gt;

&lt;p&gt;  public void setTest(Test1 test)&lt;/p&gt;
  {
    this.test = test;
  }

&lt;p&gt;  public String toString()&lt;/p&gt;
  {
    return ToStringBuilder.reflectionToString(this);
  }

&lt;p&gt;  public static void main(String[] args)&lt;/p&gt;
  {
    Test1 test1;
    Test1 test2;

    test1 = new Test1();
    test2 = new Test1();
    test1.setTest(test2);
    test2.setTest(test1);

    System.out.println(test1.toString());
  }
&lt;p&gt;}&lt;/p&gt;</description>
                <environment>&lt;p&gt;Operating System: other&lt;br/&gt;
Platform: Other&lt;/p&gt;</environment>
        <key id="12340527">LANG-93</key>
            <summary>StackOverflow due to ToStringBuilder</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="keeskuip@technologist.com">Kees Kuip</reporter>
                        <labels>
                    </labels>
                <created>Sun, 2 Feb 2003 22:20:30 +0000</created>
                <updated>Sat, 20 May 2006 00:58:26 +0000</updated>
                            <resolved>Sat, 20 May 2006 00:58:26 +0000</resolved>
                                    <version>2.0</version>
                                    <fixVersion>2.0</fixVersion>
                                        <due></due>
                            <votes>1</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12403566" author="ggregory@seagullsw.com" created="Tue, 4 Feb 2003 07:36:18 +0000"  >&lt;p&gt;This example demonstrates that circular references in values, in this case, an &lt;br/&gt;
object pointing to itself, causes an infinite loop. Detecting a cycle in an &lt;br/&gt;
object graph is certainly possible but is it in the scope of the functionality &lt;br/&gt;
of this method? And if so, how should it be represented? &lt;/p&gt;</comment>
                            <comment id="12403567" author="subterfusion@hotmail.com" created="Wed, 19 Feb 2003 20:54:09 +0000"  >&lt;p&gt;Maybe a safeReflectionToString(Object) method would be a good idea, which caches&lt;br/&gt;
the toString-ed objects and refuses to process any Object more than once.&lt;/p&gt;</comment>
                            <comment id="12403568" author="mparaz@mparaz.com" created="Fri, 28 Feb 2003 22:47:21 +0000"  >&lt;p&gt;ToStringBuilder.reflectionToString() is static and creates a new&lt;br/&gt;
ToStringBuilder() on each call, with no knowledge of the previous calls. Thus&lt;br/&gt;
there&apos;s no way to maintain an object graph, keep state and &quot;remember&quot; what&lt;br/&gt;
objects have been appended to the StringBuffer. There&apos;s no way for us to know&lt;br/&gt;
that the toString() method will call reflectionToString() again. Am I right?&lt;/p&gt;</comment>
                            <comment id="12403569" author="ggregory@seagullsw.com" created="Fri, 14 Mar 2003 10:19:52 +0000"  >&lt;p&gt;I think you are correct since there is no object connection between &lt;br/&gt;
ToStringBuilder and an arbitrary object&apos;s toString method which may or may not &lt;br/&gt;
use ToStringBuilder. Would something like the nasty experiment below work in &lt;br/&gt;
all cases?&lt;/p&gt;

&lt;p&gt;package test;&lt;/p&gt;

&lt;p&gt;import java.util.HashMap;&lt;br/&gt;
import java.util.Map;&lt;/p&gt;

&lt;p&gt;import junit.framework.TestCase;&lt;br/&gt;
import org.apache.commons.lang.builder.ToStringBuilder;&lt;/p&gt;

&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@author ggregory&lt;br/&gt;
 */&lt;br/&gt;
public class ToStringBuilderRTest extends TestCase {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    public void testMe() &lt;/p&gt;
{
        System.out.println(new NodeFixture());
        System.out.println(new NodeFixture(new NodeFixture(new NodeFixture
())));
        NodeFixture n = new NodeFixture();
        n.node = n;
        System.out.println(n);
        System.out.println(new NodeFixture(new NodeFixture(n)));
        assertEquals(&quot;RefectionToStringBuilder.registry.size() &amp;gt; 0&quot;, 
RefectionToStringBuilder.registry.size(), 0);
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;class NodeFixture {&lt;br/&gt;
    public NodeFixture node;&lt;br/&gt;
    public NodeFixture() {&lt;br/&gt;
    }&lt;br/&gt;
    public NodeFixture(NodeFixture node) &lt;/p&gt;
{
        this.node = node;
    }
&lt;p&gt;    public String toString() &lt;/p&gt;
{
        return new RefectionToStringBuilder(this).toString();
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;class RefectionToStringBuilder {&lt;/p&gt;

&lt;p&gt;    static Map registry = new HashMap();&lt;br/&gt;
    Object o;&lt;/p&gt;

&lt;p&gt;    public RefectionToStringBuilder(Object o) &lt;/p&gt;
{
        this.o = o;
    }

&lt;p&gt;    public String toString() {&lt;br/&gt;
        String s;&lt;br/&gt;
        try {&lt;br/&gt;
            if (registry.containsKey(o)) &lt;/p&gt;
{
                return &quot;&amp;lt;cycle detected: &quot; + o.getClass().getName() + &quot;@&quot; + 
System.identityHashCode(o) + &quot;&amp;gt;&quot;;
            }
&lt;p&gt;            registry.put(o, null);&lt;br/&gt;
            s = ToStringBuilder.reflectionToString(o);&lt;br/&gt;
        } finally &lt;/p&gt;
{
            registry.remove(o);
        }
&lt;p&gt;        return s;&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;</comment>
                            <comment id="12403570" author="alex@apache.org" created="Fri, 14 Mar 2003 11:17:42 +0000"  >&lt;p&gt;It might be better to use a ThreadLocal rather than a static to hold the         registry... In fact, it wouldn&apos;t need to be a Map, but a Set (maybe a HashSet) containing all objects currently being toStringed on this thread.   Also, why bother saying &quot;cycle detected&quot; &amp;#8211; why not just return the identity       code?  Like, for a foo that points to a bar and back again:             Foo@123[bar=Bar@456&lt;span class=&quot;error&quot;&gt;&amp;#91;foo=Foo@123&amp;#93;&lt;/span&gt;]            That&apos;s reasonably legible.              &lt;/p&gt;</comment>
                            <comment id="12403571" author="ggregory@seagullsw.com" created="Fri, 14 Mar 2003 11:57:25 +0000"  >&lt;p&gt;Thank you for your comments.&lt;/p&gt;

&lt;p&gt;&amp;gt;It might be better to use a ThreadLocal rather than a static to hold the &lt;br/&gt;
registry... &lt;/p&gt;

&lt;p&gt;Sure, we could do that. This was just a quick experiment, I did not give much &lt;br/&gt;
thought as to where the registry should live.&lt;/p&gt;

&lt;p&gt;&amp;gt;In fact, it wouldn&apos;t need to be a Map, but a Set (maybe a HashSet) containing &lt;br/&gt;
all objects currently being toStringed on this thread.&lt;/p&gt;

&lt;p&gt;Absolutely, a Set makes sense.&lt;/p&gt;

&lt;p&gt;&amp;gt;Also, why bother saying &quot;cycle detected&quot; &amp;#8211; why not just return the &lt;br/&gt;
identitycode?  &lt;/p&gt;

&lt;p&gt;It is indeed to verbose, the point of toString is not to detect cycles anyway.&lt;/p&gt;

&lt;p&gt;I just updated the experiment with your sugestions. Since I have patched the &lt;br/&gt;
reflection code in the past, I&apos;ll take a stab at integrating this idea in &lt;br/&gt;
ToStringBuilder.&lt;/p&gt;

&lt;p&gt;Since the ThreadLocal will only be used by the reflection methods, it is a bit &lt;br/&gt;
wasteful to have it in ToStringBuilder instead of a subclass but creating a &lt;br/&gt;
ReflectionToStringBuilder subclass might be over the top. I would like to &lt;br/&gt;
avoid further bloating the static side of ToStringBuilder...&lt;/p&gt;</comment>
                            <comment id="12403572" author="ggregory@seagullsw.com" created="Fri, 14 Mar 2003 11:58:58 +0000"  >&lt;p&gt;Created an attachment (id=5333)&lt;br/&gt;
The above experiment, cleaned up.&lt;/p&gt;</comment>
                            <comment id="12403573" author="ggregory@seagullsw.com" created="Fri, 14 Mar 2003 12:00:00 +0000"  >&lt;p&gt;Well, not &quot;clean&quot; cleaned-up, just including Alex&apos;s suggestions.&lt;/p&gt;</comment>
                            <comment id="12403574" author="alex@apache.org" created="Fri, 14 Mar 2003 12:04:22 +0000"  >&lt;p&gt;Here&apos;s a failing unit test that I Wrote inside the existing &lt;br/&gt;
ToStringBuilderTest.  I wrote it as a-&amp;gt;b-&amp;gt;a instead of a-&amp;gt;a.&lt;br/&gt;
Maybe there&apos;s a need for both types of tests in the suite.&lt;/p&gt;

&lt;p&gt;    static class ReflectionTestCycleA {&lt;br/&gt;
        ReflectionTestCycleB b;&lt;/p&gt;

&lt;p&gt;        public String toString() &lt;/p&gt;
{
           return ToStringBuilder.reflectionToString(this);
        }&lt;br/&gt;
    }&lt;br/&gt;
&lt;br/&gt;
    static class ReflectionTestCycleB {&lt;br/&gt;
        ReflectionTestCycleA a;&lt;br/&gt;
&lt;br/&gt;
        public String toString() {
           return ToStringBuilder.reflectionToString(this);
        }
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;    public void testReflectionCycle() throws Exception&lt;/p&gt;
    {
        ReflectionTestCycleA a = new ReflectionTestCycleA();
        ReflectionTestCycleB b = new ReflectionTestCycleB();
        a.b = b;
        b.a = a;
        assertEquals( toBaseString(a) + &quot;[b=&quot; + toBaseString(b) + &quot;[a=&quot; + 
toBaseString(a) + &quot;]]&quot;,
                a.toString());
    }
</comment>
                            <comment id="12403575" author="ggregory@seagullsw.com" created="Thu, 27 Mar 2003 17:09:59 +0000"  >&lt;p&gt;This has been fixed with:&lt;/p&gt;

&lt;p&gt;ToStringBuilder.java 1.17&lt;br/&gt;
ToStringStyle.java 1.11&lt;br/&gt;
ToStringBuilderTest.java 1.7&lt;/p&gt;

&lt;p&gt;A code review would be appreciated. Alex perhaps?&lt;/p&gt;</comment>
                            <comment id="12412550" author="bayard" created="Sat, 20 May 2006 00:58:05 +0000"  >&lt;p&gt;Reopening then closing to deal with migration bug.&lt;/p&gt;</comment>
                            <comment id="12412551" author="bayard" created="Sat, 20 May 2006 00:58:26 +0000"  >&lt;p&gt;Reopening then closing to deal with migration bug.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12332129" name="ASF.LICENSE.NOT.GRANTED--ToStringBuilderRTest.java" size="2408" author="ggregory@seagullsw.com" created="Fri, 14 Mar 2003 11:58:58 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                        <customfieldname>Bugzilla Id</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>16676</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 4 Feb 2003 07:36:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>34105</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            10 years, 29 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0d6tr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>74882</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>