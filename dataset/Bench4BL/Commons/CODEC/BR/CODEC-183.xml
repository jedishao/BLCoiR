<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Thu Dec 01 19:07:05 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CODEC-183/CODEC-183.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CODEC-183] BaseNCodecOutputStream only supports writing EOF on close()</title>
                <link>https://issues.apache.org/jira/browse/CODEC-183</link>
                <project id="12310464" key="CODEC">Commons Codec</project>
                    <description>&lt;p&gt;The only way to add the EOF marker when encoding or decoding with the BaseNCodecOutputStream is via the close() function.  The flush() function does not perform this logic, and it is questionable whether or not it should.&lt;/p&gt;

&lt;p&gt;The problem is that I want to write to a Base64OutputStream in the middle of writing to another stream.  That is, I will write some content to a stream, then wrap that stream with a Base64OutputStream to write some more (encoded) content, and then finish writing directly to the original stream (and so not encoded).  Calling flush() on the Base64OutputStream will not write the EOF marker, which means bytes can be lost.  I do not want to call close() on the Base64OutputStream as that will propagate to my original stream, which I need to leave open.&lt;/p&gt;

&lt;p&gt;Ideas for resolving this include the following:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Adding a separate function for writing the final (EOF) bytes without an explicit close (hacky solution).&lt;/li&gt;
	&lt;li&gt;Changing the visibility of various functions and members so that I can write my own descendant that provides the functionality I want.  Note that the encode() and decode() functions on BaseNCodec used in the close() routine are package-private, and so I cannot call them within a descendant.&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment>&lt;p&gt;I&apos;m running with version 1.6, but quick look shows it&apos;s present in 1.8.&lt;/p&gt;</environment>
        <key id="12702373">CODEC-183</key>
            <summary>BaseNCodecOutputStream only supports writing EOF on close()</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="smwurster">Steven Wurster</reporter>
                        <labels>
                    </labels>
                <created>Wed, 19 Mar 2014 12:57:21 +0000</created>
                <updated>Sun, 16 Nov 2014 16:42:06 +0000</updated>
                            <resolved>Sun, 16 Nov 2014 16:42:06 +0000</resolved>
                                    <version>1.6</version>
                                    <fixVersion>1.11</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13944273" author="garydgregory" created="Sat, 22 Mar 2014 23:42:24 +0000"  >&lt;p&gt;Feel free to provide a patch with unit tests.&lt;/p&gt;</comment>
                            <comment id="13945097" author="smwurster" created="Mon, 24 Mar 2014 13:42:54 +0000"  >&lt;p&gt;I wouldn&apos;t know where to provide a patch with tests.  I do not have a copy of the latest code; we&apos;re running against 1.6 and I doubt we&apos;ll migrate to a newer version anytime soon.  I worked around the problem with reflection so obviously that is only valid for the version I am working with.&lt;/p&gt;

&lt;p&gt;The easiest solution is to change the &lt;tt&gt;encode()&lt;/tt&gt; and &lt;tt&gt;decode()&lt;/tt&gt; functions in &lt;tt&gt;BaseNCodec.java&lt;/tt&gt; to be public or at least protected instead of package-private (and of course update the descendants of &lt;tt&gt;BaseNCodec&lt;/tt&gt; to reflect the change).  As it stands right now they can only be called from within that package and that makes reuse by third-parties effectively impossible.  Additionally, all of the variables in both &lt;tt&gt;BaseNCodecOutputStream&lt;/tt&gt; and &lt;tt&gt;BaseNCodecInputStream&lt;/tt&gt; are private and there are no protected getters, and so that completely removes reuse by third parties.&lt;/p&gt;

&lt;p&gt;If you want to solve the problem without changing the visibility of those various pieces, then you could add a new function to &lt;tt&gt;BaseNCodecOutputStream&lt;/tt&gt; whose signature looks like this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void close(&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; closeStream)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;that contains the code currently within &lt;tt&gt;close()&lt;/tt&gt; but only closes the underlying stream (i.e. the variable &lt;tt&gt;out&lt;/tt&gt;) when &lt;tt&gt;closeStream&lt;/tt&gt; is true.  Then change the existing &lt;tt&gt;close()&lt;/tt&gt; function to call this new function with the parameter set to &lt;tt&gt;true&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;I guess a similar change could be done to &lt;tt&gt;BaseNCodecInputStream&lt;/tt&gt;, but that seems to be handled differently with respect to &lt;tt&gt;close()&lt;/tt&gt;, at least in the version I have.  Like I said, I&apos;m a couple versions behind and a quick search shows that the newer versions have a thread-based context that I know nothing about.&lt;/p&gt;</comment>
                            <comment id="13945301" author="garydgregory" created="Mon, 24 Mar 2014 16:22:59 +0000"  >&lt;p&gt;For instructions on getting the source code, please see:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://commons.apache.org/proper/commons-codec/source-repository.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://commons.apache.org/proper/commons-codec/source-repository.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A change like this would be in the next version, 1.10 or later.&lt;/p&gt;</comment>
                            <comment id="13945430" author="smwurster" created="Mon, 24 Mar 2014 18:06:34 +0000"  >&lt;p&gt;I was not planning on submitting a patch.&lt;/p&gt;</comment>
                            <comment id="14190017" author="tn" created="Thu, 30 Oct 2014 13:01:16 +0000"  >&lt;p&gt;You could use a CloseShieldOutputStream from commons-io to prevent closing the underlying output stream.&lt;/p&gt;</comment>
                            <comment id="14190103" author="smwurster" created="Thu, 30 Oct 2014 14:13:44 +0000"  >&lt;p&gt;Interesting.  I had never heard of CloseShieldOutputStream until now.  That probably would have worked for my needs.&lt;/p&gt;</comment>
                            <comment id="14190116" author="tn" created="Thu, 30 Oct 2014 14:26:36 +0000"  >&lt;p&gt;btw. the android version of the Base64OutputStream supports additional flags in its constructor, one of them is NO_CLOSE which instructs it to leave the underlying outputstream open.&lt;/p&gt;</comment>
                            <comment id="14190128" author="smwurster" created="Thu, 30 Oct 2014 14:32:15 +0000"  >&lt;p&gt;We weren&apos;t using the Android version, so that wouldn&apos;t apply.  However we can probably close this bug with the use of the CloseShieldOutputStream as the proper workaround.  I don&apos;t know if I should do that or someone else.&lt;/p&gt;</comment>
                            <comment id="14190133" author="tn" created="Thu, 30 Oct 2014 14:35:31 +0000"  >&lt;p&gt;With my last comment I just wanted to highlight that other implementations offer this possibility and we should maybe also add it to our lib.&lt;/p&gt;</comment>
                            <comment id="14190227" author="garydgregory" created="Thu, 30 Oct 2014 15:26:10 +0000"  >&lt;p&gt;Patch/commit away! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14193253" author="tn" created="Sat, 1 Nov 2014 16:11:57 +0000"  >&lt;p&gt;I thought about adding an additional flag to the BaseXXOutputStream constructors but there are already various other arguments (encode, lineLength, lineSeparator) that you can pass and adding another one would require adding at least 2 more constructors.&lt;/p&gt;

&lt;p&gt;The solution using a CloseShieldOutputStream is neat imho, so I think we should close this issue for 1.x.&lt;/p&gt;</comment>
                            <comment id="14213944" author="sebb@apache.org" created="Sun, 16 Nov 2014 15:32:14 +0000"  >&lt;p&gt;It would be helpful to add some comments to Javadoc suggesting the use of CloseShieldOutputStream.&lt;/p&gt;</comment>
                            <comment id="14213956" author="garydgregory" created="Sun, 16 Nov 2014 16:42:06 +0000"  >&lt;p&gt;Committed to SVN. Please verify.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 22 Mar 2014 23:42:24 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>380713</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 2 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1tlfr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>380992</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>