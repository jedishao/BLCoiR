<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Thu Dec 01 19:07:12 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CODEC-96/CODEC-96.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CODEC-96] Base64 encode() method is no longer thread-safe, breaking clients using it as a shared BinaryEncoder</title>
                <link>https://issues.apache.org/jira/browse/CODEC-96</link>
                <project id="12310464" key="CODEC">Commons Codec</project>
                    <description>&lt;p&gt;Streaming support was added to Base64 in commons-codec 1.4 with &lt;a href=&quot;https://issues.apache.org/jira/browse/CODEC-69&quot; title=&quot;Streaming Base64&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CODEC-69&quot;&gt;&lt;del&gt;CODEC-69&lt;/del&gt;&lt;/a&gt;. This introduced instance variables to Base64 which means the class can no longer be used as a shared BinaryEncoder instance.&lt;/p&gt;

&lt;p&gt;For example, BinaryEncoder has an interface which could be (and was) used like this with Base64:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
class Example {
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; BinaryEncoder encoder = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Base64();

    &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] someMethod(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] data) {
        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; encoder.encode(data);
        }
        &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (EncoderException e) {
            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RuntimeException(e);
        }
    } 
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Base64 is no longer thread-safe in commons-codec 1.4, so code like the above which is accessed by multiple threads can throw NullPointerException:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;java.lang.NullPointerException
	at org.apache.commons.codec.binary.Base64.encode(Base64.java:469)
	at org.apache.commons.codec.binary.Base64.encode(Base64.java:937)
	at ... (application code)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looking at the implementation of Base64, I think making it thread-safe for this kind of usage would be quite tricky. I haven&apos;t attempted to prepare a patch.&lt;/p&gt;

&lt;p&gt;I would be happy if it was indicated in the Javadoc that Base64 is not thread-safe and should not be shared. However, some other users of commons-codec might be more worried about this regression.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12457527">CODEC-96</key>
            <summary>Base64 encode() method is no longer thread-safe, breaking clients using it as a shared BinaryEncoder</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="mjryall">Matt Ryall</reporter>
                        <labels>
                    </labels>
                <created>Fri, 26 Feb 2010 04:59:01 +0000</created>
                <updated>Fri, 14 Sep 2012 20:27:20 +0000</updated>
                            <resolved>Tue, 3 Apr 2012 17:25:22 +0000</resolved>
                                    <version>1.4</version>
                                    <fixVersion>1.7</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12838758" author="jochen@apache.org" created="Fri, 26 Feb 2010 08:38:08 +0000"  >&lt;p&gt;The problem is not in the Base64 code, but in your example. Of course, you must create a new Base64 instance whenever you use it. But that&apos;s not a problem, creating an encoder is cheap.&lt;/p&gt;


&lt;p&gt;class Example {&lt;br/&gt;
    byte[] someMethod(byte[] data) {&lt;br/&gt;
        try &lt;/p&gt;
{
            return new Base64().encode(data);
        }
&lt;p&gt;        catch (EncoderException e) &lt;/p&gt;
{
            throw new RuntimeException(e);
        }
&lt;p&gt;    } &lt;br/&gt;
}&lt;/p&gt;</comment>
                            <comment id="12838924" author="juliusdavies" created="Fri, 26 Feb 2010 16:44:46 +0000"  >&lt;p&gt;I agree I should have documented (or even thought about this) when I submitted the patch to &lt;a href=&quot;https://issues.apache.org/jira/browse/CODEC-69&quot; title=&quot;Streaming Base64&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CODEC-69&quot;&gt;&lt;del&gt;CODEC-69&lt;/del&gt;&lt;/a&gt;.  Thanks for the note!&lt;/p&gt;</comment>
                            <comment id="12850350" author="juliusdavies" created="Fri, 26 Mar 2010 21:11:33 +0000"  >&lt;p&gt;The instance methods can construct their own new Base64() object to maintain thread-safety.&lt;/p&gt;

&lt;p&gt;Patch attached.&lt;/p&gt;</comment>
                            <comment id="12850430" author="juliusdavies" created="Sat, 27 Mar 2010 00:39:01 +0000"  >
&lt;p&gt;I think this patch makes usage via the old Encoder/Decoder and BinaryEncoder/BinaryDecoder interfaces thread-safe.  My 2nd attempt on this patch is a little cleaner.&lt;/p&gt;</comment>
                            <comment id="12850769" author="mjryall" created="Mon, 29 Mar 2010 01:19:06 +0000"  >&lt;p&gt;Patch looks to me like it would work. Unfortunately, I haven&apos;t got the environment to test it any more. We&apos;ve removed the BinaryEncoder-style API usage and replaced with calls to the static methods on Base64.&lt;/p&gt;

&lt;p&gt;It would be good to add a unit test for this, but I&apos;m couldn&apos;t see how you&apos;d go about it. There are no hooks in the encoding process that allow you to stop one thread while another kicks off. I&apos;ll leave it to your discretion whether some kind of test is worth pursuing.&lt;/p&gt;</comment>
                            <comment id="12851037" author="jochen@apache.org" created="Mon, 29 Mar 2010 18:24:08 +0000"  >&lt;p&gt;Excuse me, but have an instance create another instance is close to being ridiculous. In particular, as this is the first report on the issue after quite some time. Be reasonable, document the fact, and that&apos;s it.&lt;/p&gt;</comment>
                            <comment id="12851068" author="jwcarman" created="Mon, 29 Mar 2010 20:05:58 +0000"  >&lt;p&gt;Use a ThreadLocal?&lt;/p&gt;</comment>
                            <comment id="12851491" author="juliusdavies" created="Tue, 30 Mar 2010 18:04:42 +0000"  >
&lt;p&gt;I&apos;ve attached a 3rd attempt at a codec-96 patch (thread-safety).  Instead of constructing a new instance for thread-safety, the public instance methods always internally call the static methods.  In this way it&apos;s very much like the old commons-codec-1.3 implementation.&lt;/p&gt;


&lt;p&gt;For reference here&apos;s a link to the commons-codec-1.3 code:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://svn.apache.org/viewvc/commons/proper/codec/tags/CODEC_1_3/src/java/org/apache/commons/codec/binary/Base64.java?view=markup&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/commons/proper/codec/tags/CODEC_1_3/src/java/org/apache/commons/codec/binary/Base64.java?view=markup&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="13147880" author="bayard" created="Thu, 10 Nov 2011 18:17:12 +0000"  >&lt;p&gt;+1 to simply documenting this and resolving.&lt;/p&gt;</comment>
                            <comment id="13232041" author="tn" created="Sat, 17 Mar 2012 18:51:29 +0000"  >&lt;p&gt;The javadoc already contains a note that the class is not thread-safe. Additionally there are static methods to access the functionality in a thread-safe way (creating new instances each call), so I would also propose to resolve this issue.&lt;/p&gt;</comment>
                            <comment id="13233234" author="matt@atlassian.com" created="Tue, 20 Mar 2012 05:48:19 +0000"  >&lt;p&gt;I&apos;m happy to have it resolved if there&apos;s Javadoc saying that the class isn&apos;t thread-safe. That&apos;s the most important thing.&lt;/p&gt;

&lt;p&gt;Arguably encoder classes like this &lt;em&gt;should&lt;/em&gt; be thread-safe, since I can&apos;t see anything in base-64 encoding that should require state across method calls, but that&apos;s up to the maintainers. In response to &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jochen%40apache.org&quot; class=&quot;user-hover&quot; rel=&quot;jochen@apache.org&quot;&gt;Jochen Wiedmann&lt;/a&gt;&apos;s comment, the main problem is that this particular encoder was thread-safe before, and was used this way in one of the multi-threaded applications that I maintain, and upgrading commons-codec broke it in a non-obvious way.&lt;/p&gt;

&lt;p&gt;Despite being the original reporter, I don&apos;t have the necessary JIRA power to resolve the issue, so someone else will have to do it.&lt;/p&gt;</comment>
                            <comment id="13233310" author="jochen@apache.org" created="Tue, 20 Mar 2012 08:55:10 +0000"  >&lt;p&gt;I agree with Henri: Document the facts and resolve the issue: Julius, as you are the assignee, are you ready to do just that? (No need for a patch. You&apos;re a committer, os just go on, if you are.)&lt;/p&gt;</comment>
                            <comment id="13233362" author="sebb@apache.org" created="Tue, 20 Mar 2012 11:43:42 +0000"  >&lt;p&gt;I think it might be possible to move the mutable fields out of the lower level classes and back into the streaming classes which are the ones that actually need them.&lt;/p&gt;

&lt;p&gt;Whether it is possible to do this in a compatible way, I don&apos;t yet know, but I&apos;d like to give it a try over then next week or so.&lt;/p&gt;</comment>
                            <comment id="13234003" author="sebb@apache.org" created="Wed, 21 Mar 2012 01:05:23 +0000"  >&lt;p&gt;I&apos;ve got a prototype which passes all the tests.&lt;br/&gt;
Basically I put all the mutable fields in a Context class which is created by the appropriate stream classes and public methods. This allows the BaseN classes to be immutable i.e. threadsafe.&lt;/p&gt;

&lt;p&gt;Clirr reports several incompatibilities because I moved all the protected mutable fields into the context.&lt;/p&gt;

&lt;p&gt;However, these are protected fields, and are not really intended for use by external code, so it&apos;s very unlikely to cause problems. I did not need to change the test code (except where it was overriding or testing package-protected methods), which is a good sign.&lt;/p&gt;

&lt;p&gt;See attachment to follow.&lt;/p&gt;</comment>
                            <comment id="13240530" author="tn" created="Wed, 28 Mar 2012 16:48:10 +0000"  >&lt;p&gt;I have reviewed the patch, which looks good in general, just a few minor things I have noticed:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;BaseNCodec has a member xcontext which is never used&lt;/li&gt;
	&lt;li&gt;some fields in the Context class are protected, others package private&lt;/li&gt;
	&lt;li&gt;for the BaseNCodecInputStream, the mark/markSupported/reset methods should be implemented, see below&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We may opt for not supporting it:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;mark does nothing&lt;/li&gt;
	&lt;li&gt;markSupported returns false&lt;/li&gt;
	&lt;li&gt;reset throws IOException&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That would mimick the InflaterInputStream, otoh we could support it like that:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;markSupported: depends on the underlying stream&lt;/li&gt;
	&lt;li&gt;mark: if supported, saves the context, and marks underlying stream&lt;/li&gt;
	&lt;li&gt;reset: restores the context and resets underlying stream&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thomas&lt;/p&gt;</comment>
                            <comment id="13240542" author="sebb@apache.org" created="Wed, 28 Mar 2012 17:04:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;BaseNCodec has a member xcontext which is never used&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Sorry, looks like a bit of debug code I left in&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;some fields in the Context class are protected, others package private&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Should probably all be package private&lt;/p&gt;

&lt;p&gt;I&apos;ll create an amended patch.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;for the BaseNCodecInputStream, the mark/markSupported/reset methods should be implemented&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s a separate issue; this patch only addresses the thread-safety aspects.&lt;/p&gt;</comment>
                            <comment id="13240564" author="sebb@apache.org" created="Wed, 28 Mar 2012 17:23:30 +0000"  >&lt;p&gt;Supersedes CODEX-96.patch&lt;/p&gt;</comment>
                            <comment id="13240566" author="tn" created="Wed, 28 Mar 2012 17:24:13 +0000"  >&lt;blockquote&gt;
&lt;p&gt;That&apos;s a separate issue; this patch only addresses the thread-safety aspects.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s true, I just realised that problem when reviewing your patch. Should we create a new issue, or fix it together?&lt;/p&gt;</comment>
                            <comment id="13243740" author="garydgregory" created="Sun, 1 Apr 2012 14:41:17 +0000"  >&lt;p&gt;The patch CODEX-96-2.patch applies cleanly on trunk but the codec-96-3rd-attempt.patch does not.&lt;/p&gt;

&lt;p&gt;What is what here?&lt;/p&gt;

&lt;p&gt;Can someone provide a roadmap, a definitive patch, or just do it?&lt;/p&gt;

&lt;p&gt;I&apos;d like to push an RC and this seems like the last important issue. I am happy to skip it until 1.8 of course.&lt;/p&gt;

&lt;p&gt;Thank you,&lt;br/&gt;
Gary&lt;/p&gt;</comment>
                            <comment id="13243742" author="sebb@apache.org" created="Sun, 1 Apr 2012 14:58:08 +0000"  >&lt;p&gt;codec-96-3rd-attempt.patch is very old (2010). I think it can be ignored.&lt;/p&gt;

&lt;p&gt;CODEX-96-2.patch is the latest patch, but as already mentioned on the dev list causes Clirr to report errors.&lt;/p&gt;

&lt;p&gt;I think these are harmless, as they don&apos;t affect the public API as far as I can tell, but I don&apos;t use Codec in earnest.&lt;/p&gt;</comment>
                            <comment id="13244206" author="garydgregory" created="Mon, 2 Apr 2012 14:07:07 +0000"  >&lt;p&gt;OK, I see the Clirr errors now after applying CODEX-96-2.patch locally. It looks like normal users would not be affected. The issue is only if a codec is used in some advanced scheme. I am not sure what user story that would be though. According to this issue, the break was made from 1.3 to 1.4.&lt;/p&gt;

&lt;p&gt;We have choices:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Don&apos;t apply the patch and document Base-N codecs as thread-unsafe.&lt;/li&gt;
	&lt;li&gt;Apply the patch for 1.7 and document breakage.&lt;/li&gt;
	&lt;li&gt;Apply the patch for 2.0 and document breakage.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thoughts? I&apos;ll post to the ML, which would be better for discussion.&lt;/p&gt;</comment>
                            <comment id="13244472" author="sebb@apache.org" created="Mon, 2 Apr 2012 19:12:32 +0000"  >&lt;p&gt;The mark/reset patch should really be on a separate JIRA, as it is nothing to do with the original thread safety issue.&lt;/p&gt;</comment>
                            <comment id="13245516" author="garydgregory" created="Tue, 3 Apr 2012 17:25:23 +0000"  >&lt;p&gt;In SVN&lt;/p&gt;</comment>
                            <comment id="13456115" author="garydgregory" created="Fri, 14 Sep 2012 20:27:20 +0000"  >&lt;p&gt;Released in 1.7 today.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12457528">CODEC-97</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12398475">CODEC-69</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12519161" name="CODEC-96.patch" size="44963" author="sebb@apache.org" created="Wed, 21 Mar 2012 01:07:01 +0000"/>
                            <attachment id="12520293" name="CODEX-96-2.patch" size="46806" author="sebb@apache.org" created="Wed, 28 Mar 2012 17:23:29 +0000"/>
                            <attachment id="12440260" name="codec-96-3rd-attempt.patch" size="5182" author="juliusdavies" created="Tue, 30 Mar 2010 18:04:42 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 26 Feb 2010 08:38:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36662</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 11 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i05uc7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32012</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>