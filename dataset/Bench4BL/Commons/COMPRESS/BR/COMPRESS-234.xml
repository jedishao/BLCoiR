<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sat Dec 03 17:57:54 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/COMPRESS-234/COMPRESS-234.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[COMPRESS-234] Patch: TAR InputStream Huge Speed Improvements</title>
                <link>https://issues.apache.org/jira/browse/COMPRESS-234</link>
                <project id="12310904" key="COMPRESS">Commons Compress</project>
                    <description>&lt;p&gt;I have looked over TarBuffer And TarArchiveInputStream and found some ways to improve performance orders of magnitude.&lt;/p&gt;

&lt;p&gt;I used a 1 GB TAR archive file (no compression).&lt;/p&gt;

&lt;p&gt;Times for reading all entry file names:&lt;br/&gt;
Current - 630ms&lt;br/&gt;
Mine - 17ms&lt;/p&gt;

&lt;p&gt;Times for extracting all entry files:&lt;br/&gt;
Current 2446ms&lt;br/&gt;
Mine - 2214ms&lt;/p&gt;


&lt;p&gt;As you can see, I have enhanced the &quot;skip&quot; methods greatly.  Actual extraction was within a margin of error and the timings bounces around a lot.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12656998">COMPRESS-234</key>
            <summary>Patch: TAR InputStream Huge Speed Improvements</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="belugabehr">BELUGA BEHR</reporter>
                        <labels>
                    </labels>
                <created>Wed, 10 Jul 2013 01:38:18 +0000</created>
                <updated>Tue, 10 Dec 2013 12:37:43 +0000</updated>
                            <resolved>Thu, 8 Aug 2013 15:58:34 +0000</resolved>
                                                    <fixVersion>1.6</fixVersion>
                                    <component>Archivers</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13714189" author="belugabehr" created="Fri, 19 Jul 2013 22:55:18 +0000"  >&lt;p&gt;I have added a rather large patch that removed TarBuffer.java all together.  It was unnecessary and added overhead and complexity.  I substituted it out with just a regular BufferedInputStream/BufferedOutputStream.  These changes pass all current unit tests.&lt;/p&gt;

&lt;p&gt;There is one unit test to add, though I&apos;m not sure how to do it.  My implementation passed all unit tests but failed, in practice, on large TAR files.  It&apos;s because my &quot;skip&quot; functions were not skipping as I had thought.  Skipping a long distance is what brought out the problem, I would call &quot;skip&quot; once, and be done with it.  With the small test files, it was able to skip it in one jump.  For larger files, it required a while(skip() &amp;gt; 0) type of fix.  I don&apos;t think you want to be shipping around a 1 gig file with your tests though.&lt;/p&gt;

&lt;p&gt;Anyway, this implementation is much easier to read, less code, and runs a heck of a lot faster in some regards.&lt;/p&gt;

&lt;p&gt;To read the names of all the entries:&lt;br/&gt;
1.5: 640ms&lt;br/&gt;
Mine: 20ms&lt;/p&gt;

&lt;p&gt;The time in spend reading the entries and copying them out of the TAR was unchanged.&lt;/p&gt;

&lt;p&gt;This will be very beneficial for Commons VFS.  For example, in TarFileSystem#init(), it iterates through the TAR file and copies out the name of each entry.  These patches will help that immensely.&lt;/p&gt;

&lt;p&gt;For the record though, I have an SSD on my development machine, I don&apos;t know the benefit of a regular drive, but I imagine it will still be faster.&lt;/p&gt;

&lt;p&gt;The full patch is &quot;Archiver_Tar.patch&quot;.  I have left the two other patches there for my own record.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="13714335" author="bodewig" created="Sat, 20 Jul 2013 05:11:52 +0000"  >&lt;p&gt;Not having looked at your code, yet, I want to point out that we need to be extra careful about not breaking any public APIs.  Fortunately TarBuffer is package private (unlike its grandfather in Ant&apos;s codebase).&lt;/p&gt;

&lt;p&gt;As for big file tests: actually we do.  Large tars can become pretty small if you compress them.  Take a look at org.apache.commons.compress.archivers.tar.BigFilesIT and the run-tarit Maven profile.&lt;/p&gt;</comment>
                            <comment id="13714464" author="sebb@apache.org" created="Sat, 20 Jul 2013 15:53:04 +0000"  >&lt;p&gt;Unfortunately it looks like this breaks the API - a protected field of a public class has been dropped. However the field is TarBuffer so maybe that could not have been used by 3rd party code. &lt;/p&gt;

&lt;p&gt;Also please don&apos;t introduce protected fields - they make code changes and thorough testing much harder. All fields should be private - or possibly package - and final where possible. Only exceptions are final constants.&lt;/p&gt;

&lt;p&gt;Also, there are some spurious changes; some of the block start - { - markers have been moved to the next line, and there are some whitsepace changes. Please only change the minimum needed, and additional changes make it much harder to review.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Code layout changes should be done as a separate commit&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="13714472" author="belugabehr" created="Sat, 20 Jul 2013 16:22:44 +0000"  >&lt;p&gt;I will make the changes suggested.  Sorry about the formatting.  Is there an Apache Eclipse formatter template available?&lt;/p&gt;</comment>
                            <comment id="13714479" author="sebb@apache.org" created="Sat, 20 Jul 2013 16:59:20 +0000"  >&lt;p&gt;I don&apos;t know if there is a template available, but for patches any automatic formatting is likely to cause problems, because the existing code may not be exactly correctly styled. And some projects have a mix of styles in different files.&lt;/p&gt;

&lt;p&gt;Please just follow the surrounding style.&lt;/p&gt;

&lt;p&gt;Basic rules for new code that AFAIK all Commons components use:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;no tabs; use spaces for alignment&lt;/li&gt;
	&lt;li&gt;avoid trailing spaces&lt;/li&gt;
	&lt;li&gt;indentation is 4 spaces (sometimes 2 in XML files)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13714663" author="bodewig" created="Sun, 21 Jul 2013 07:59:43 +0000"  >&lt;p&gt;First of all, many thanks for the work you are putting into Compress.&lt;/p&gt;

&lt;p&gt;I&apos;m a bit reluctant about explictly adding a Buffered*Stream ourselves:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;we tell people to use Buffered*Stream as Compress wouldn&apos;t do so: &lt;a href=&quot;http://commons.apache.org/proper/commons-compress/examples.html#Common_Notes&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://commons.apache.org/proper/commons-compress/examples.html#Common_Notes&lt;/a&gt; - this means we end up layering two buffers on top of each other&lt;/li&gt;
	&lt;li&gt;the decision to not use Buffered*Streams has been deliberate to grant more control to the user.  If I have a stream containing two subsequent TAR archives for whatever reason, will the stream be in a state that I can read the second archive cleanly after the first one is done or will (the now discarded) BufferedInputStream have read more bytes than it needed and leave the inner stream pointing ahead of the start of the second archive?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That being said, I&apos;m sure we could remove TarBuffer the way you&apos;ve done.  In the output case I don&apos;t think we actually need the explicit BufferedOutputStream at all and I haven&apos;t looked close enough at the input case to see whether it actually requires it code-wise.&lt;/p&gt;

&lt;p&gt;I&apos;d be interested in your benchmark code, have you tried the original code when you wrap the original stream in a Buffered*Stream from outside of Compress&apos; code base?&lt;/p&gt;

&lt;p&gt;Finally Re: skip - I think FindBugs detects cases where you don&apos;t use the return value of skip and it found a few places in the skip package where we implemented something similar to the skipFully method you&apos;ve added.  It may be worth to look through the other packages to see whether they could benefit from the new method - not in the scope of this ticket, of course.&lt;/p&gt;</comment>
                            <comment id="13714679" author="bodewig" created="Sun, 21 Jul 2013 10:30:43 +0000"  >&lt;p&gt;After reading through your patch again, I think we can use your amended skip code and remove TarBuffer without using Buffered*Streams internally.&lt;/p&gt;

&lt;p&gt;You use the new skipFully which throws an Exception when it cannot skip the requested number of bytes, which changes the behavior of the existing skip method.  Why don&apos;t you just return the result of IOUtils#skip directly?&lt;/p&gt;</comment>
                            <comment id="13714682" author="sebb@apache.org" created="Sun, 21 Jul 2013 10:52:15 +0000"  >&lt;p&gt;If we do decide a BufferedStream is needed, we could check first if one is provided, and only wrap a buffer around it if required. There&apos;s code in Commons IO (2.5; IOUtils asBufferedxxx methods) that could be borrowed:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; BufferedInputStream asBufferedInputStream(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; InputStream inputStream) {
    &lt;span class=&quot;code-comment&quot;&gt;// reject &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; early on rather than waiting &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; IO operation to fail
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (inputStream == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) { &lt;span class=&quot;code-comment&quot;&gt;// not checked by BufferedInputStream
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; NullPointerException();
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; inputStream &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; BufferedInputStream ? (BufferedInputStream) inputStream : &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BufferedInputStream(inputStream);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13714706" author="belugabehr" created="Sun, 21 Jul 2013 13:59:57 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=bodewig&quot; class=&quot;user-hover&quot; rel=&quot;bodewig&quot;&gt;Stefan Bodewig&lt;/a&gt;: Well, TarBuffer is/was the buffering stream, so by not replacing it with another buffering stream, we are going to hurt the performance of anyone who is currently using the library without a buffered stream.  So, I like Sebb&apos;s approach and wrapping it if need-be.  So, by going with Sebb&apos;s approach, we need to decide if we want to set an explicit buffer size or just go with the default size.  As long as the buffer is larger than 512 bytes (the size of a single header), I don&apos;t see a need for us to set it.&lt;/p&gt;</comment>
                            <comment id="13714711" author="belugabehr" created="Sun, 21 Jul 2013 14:46:46 +0000"  >&lt;p&gt;New Patch: Archiver_Tar.2.patch&lt;/p&gt;

&lt;p&gt;I have made many of the changes you have asked for.  There is one note and two issues:&lt;/p&gt;

&lt;p&gt;Note:  I had to update the unit tests, because the new asBufferedInputStream throws the exception if the InputStream is NULL.  Three of the tests were creating instances of TarArchiveInputStream without an underlying InputStream because they were testing stand-alone protected methods.  I created a dummy InputStream for those to pass.&lt;/p&gt;

&lt;p&gt;Issue 1: The old TarBuffer used to check that the streams were not System.in/System.out before attempting to close them.  I have removed that with these patches.  I saw another ticket out there about using the NoCloseInputStream method.  Perhaps that can be adopted here.&lt;/p&gt;

&lt;p&gt;Issue 2: One of the unit tests is failing.  I&apos;m not sure what to do about it.  It tests that if an arbitrary trailer is appended to the TAR file, that it will no be consumed by TarArchiveInput Stream.  That is not really possible with the current setup, because the BufferedInputStream may read-ahead and consume the trailer in order to buffer.&lt;/p&gt;</comment>
                            <comment id="13714788" author="sebb@apache.org" created="Sun, 21 Jul 2013 19:37:00 +0000"  >&lt;p&gt;There are still a few tabs and spurious formatting changes, but it&apos;s better. Thanks.&lt;/p&gt;

&lt;p&gt;Not sure I understand why the code does&lt;/p&gt;

&lt;p&gt;  skip(Long.MAX_VALUE);&lt;/p&gt;

&lt;p&gt;at one point - looks very odd.&lt;br/&gt;
If it&apos;s correct it needs to be documented.&lt;/p&gt;</comment>
                            <comment id="13714905" author="bodewig" created="Mon, 22 Jul 2013 04:47:13 +0000"  >&lt;p&gt;The failing unit test is exactly why I warned against using BufferedInputStream internally. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Personally I don&apos;t have any problem with performance only being good enough if you pass in a BufferedInputStream explicitly if there are valid use-cases we cannot enable otherwise.&lt;/p&gt;</comment>
                            <comment id="13715982" author="belugabehr" created="Tue, 23 Jul 2013 02:15:51 +0000"  >&lt;p&gt;OK,  I have submitted what I believe should be the final version.  It is Archiver_Tar.3.patch.&lt;/p&gt;

&lt;p&gt;Notes: It still fails that same unit test.  I was wrong with my previous assumption as to the cause.  I think the unit test here is at fault.  The test runs an archive with random data appended onto the end of it.  I believe that the archive file has a lot of zero padding at the end.  The TarBuffer may have read that off as it was configured to read blocks of 10 * 512 chunks at one time.  I believe that a new file is required for this test.  Can you please verify and regenerate?&lt;/p&gt;

&lt;p&gt;I have removed internal buffering and pesky tabs.&lt;/p&gt;

&lt;p&gt;To answer your question about the skip Long.MAX_VALUE.  The skip function only lets you skip the length of the current archive.  It didn&apos;t seem necessary to me that I needed to calculate how far to jump, call jump, then be checked again.  Passing in Long.MAX_VALUE just lets the skip function handle the details in one place.&lt;/p&gt;</comment>
                            <comment id="13716401" author="bodewig" created="Tue, 23 Jul 2013 13:58:16 +0000"  >&lt;p&gt;First of all I&apos;m sorry about the &quot;fetch me a rock&quot; experience you&apos;ve been having - and thank you for being persistent.&lt;/p&gt;

&lt;p&gt;There still are a few formatting glitches that we can sort out easily (and you don&apos;t need to resubmit a patch).  I&apos;d probably also make some of the new methods private that you&apos;ve moved over from TarBuffer.&lt;/p&gt;

&lt;p&gt;Personally I&apos;m not concerned with the now removed buffer fields as they haven&apos;t been usable before.  I&apos;ll look into the failing test separately, but this has to do with COMPRES-206, I think.  To cite the GNU tar info page &lt;a href=&quot;https://www.gnu.org/software/tar/manual/html_node/Standard.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://www.gnu.org/software/tar/manual/html_node/Standard.html&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When writing an archive, the last record of blocks should be written at the full size, with blocks after the zero block containing all zeros. When reading an archive, a reasonable system should properly handle an archive whose last record is shorter than the rest, or which contains garbage records after a zero block. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What we currently have in trunk is code that tries to read a full record and ignores the bytes after the second EOF block.  With your changes we wouldn&apos;t consume &quot;garbage after a zero block&quot;.  The goals of &quot;allowing streams to be concatenated&quot; and &quot;swallow garbage&quot; are certainly in conflict with each other and we&apos;ve settled to &quot;swallow garbage up to a full record&apos;s size&quot; right now.  Oh my, I feel another flag looming.&lt;/p&gt;</comment>
                            <comment id="13717845" author="belugabehr" created="Wed, 24 Jul 2013 00:52:41 +0000"  >&lt;p&gt;Stefan,&lt;/p&gt;

&lt;p&gt;No problem on how things have been going.  I&apos;m not sure if you&apos;re paid staff, but regardless, I know you have a lot on your plate.&lt;/p&gt;


&lt;p&gt;Please let me know if you need any additional input on this ticket.  Now here comes the act of stating the obvious: I would love to see this in and released ASAP.  Sadly, I had to abandoned both Commons VFS and Commons Compress at work today.  I came across too many show stopping bugs with VFS and I was getting a NULL pointer exception with TarArchiveInputStream in COMPRESS 1.5.  I had to back-fill with Java&apos;s GZIP, ZIP, and different 3rd-party TAR library.&lt;/p&gt;

&lt;p&gt;If you&apos;re going to follow-up with changes... consider dropping isAtEOF/setAtEOF.  They&apos;re not used anywhere in the class and some place reference the variable directly.&lt;/p&gt;

&lt;p&gt;Follow-Up: I have included that change (and a few others) in .final.patch.&lt;/p&gt;


&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="13726687" author="bodewig" created="Thu, 1 Aug 2013 18:13:34 +0000"  >&lt;p&gt;Sorry, my net-time is currently a bit flaky.&lt;/p&gt;

&lt;p&gt;I&apos;ve run the BigFilesIT to get an idea what amount of improvement we are talking about.  Initially the test didn&apos;t use any external buffering, so I added it and ran a few tests.  On my machine I get the following runtimes&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
current code, no buffering
readFileHeadersOfArchiveBiggerThan8GByte: 26.4s
readFileBiggerThan8GBytePosix: 24.0s

current code, external buffering
readFileHeadersOfArchiveBiggerThan8GByte: 23.6s
readFileBiggerThan8GBytePosix: 23.9s

&lt;span class=&quot;code-quote&quot;&gt;&quot;latest&quot;&lt;/span&gt; patch, no buffering
readFileHeadersOfArchiveBiggerThan8GByte: 22.7s
readFileBiggerThan8GBytePosix: 21.8s

&lt;span class=&quot;code-quote&quot;&gt;&quot;latest&quot;&lt;/span&gt; patch, external buffering
readFileHeadersOfArchiveBiggerThan8GByte: 22.6s
readFileBiggerThan8GBytePosix: 21.4s
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I was surprised to see that even the tests that actually read code win by the patch - the readFileHeaders test hits skip internally a lot.  In either case I ~10% gain for cases where there is no external buffer and still ~5% with an external BufferedInputStream.  With a bit of fiddling to make the &quot;end of archive&quot; case what it used to be, I really think this is worth dropping TarBuffer and intend to make it work.&lt;/p&gt;

&lt;p&gt;As for NullPointerExceptions - I&apos;m sure they&apos;d be worth a bug report nevertheless &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13727155" author="belugabehr" created="Fri, 2 Aug 2013 00:27:53 +0000"  >&lt;p&gt;Stefan,&lt;/p&gt;

&lt;p&gt;Like I said, the test for reading just the file headers is amazingly different on my SSD HD.  Since this patch changes the class so much, submitting a separate ticket for the NPE seems futile.&lt;/p&gt;

&lt;p&gt;Please keep me posted when this makes it in!&lt;/p&gt;</comment>
                            <comment id="13733629" author="bodewig" created="Thu, 8 Aug 2013 15:58:12 +0000"  >&lt;p&gt;With the version committed in svn revision 1511843 I get roughly the same results as with the &quot;latest&quot; from above.  I&apos;ve added padding of the last buffer when writing as well as skipping the padding when hitting EOF.  This allows the original tests to pass.  What I overlooked is that you removed the calls to count(), added back as well.&lt;/p&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12656541">COMPRESS-233</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12656541">COMPRESS-233</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="12310050">
                    <name>Regression</name>
                                            <outwardlinks description="breaks">
                                        <issuelink>
            <issuekey id="12683825">COMPRESS-249</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12593402" name="Archiver_Tar.2.patch" size="24275" author="belugabehr" created="Sun, 21 Jul 2013 14:42:05 +0000"/>
                            <attachment id="12593630" name="Archiver_Tar.3.patch" size="24911" author="belugabehr" created="Tue, 23 Jul 2013 02:11:01 +0000"/>
                            <attachment id="12593286" name="Archiver_Tar.patch" size="21493" author="belugabehr" created="Fri, 19 Jul 2013 22:45:09 +0000"/>
                            <attachment id="12593824" name="TarArchiveInputStream.java.final.patch" size="12692" author="belugabehr" created="Wed, 24 Jul 2013 01:05:55 +0000"/>
                            <attachment id="12591941" name="TarArchiveInputStream.java.patch" size="8262" author="belugabehr" created="Fri, 12 Jul 2013 00:56:24 +0000"/>
                            <attachment id="12591942" name="TarBuffer.java.patch" size="7930" author="belugabehr" created="Fri, 12 Jul 2013 00:56:24 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 20 Jul 2013 05:11:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>337221</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 17 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1m5zz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>337544</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>