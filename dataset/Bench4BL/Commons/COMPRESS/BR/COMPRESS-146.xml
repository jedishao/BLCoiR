<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Thu Dec 01 20:39:53 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/COMPRESS-146/COMPRESS-146.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[COMPRESS-146] BZip2CompressorInputStream always treats 0x177245385090 as EOF, but should treat this as EOS</title>
                <link>https://issues.apache.org/jira/browse/COMPRESS-146</link>
                <project id="12310904" key="COMPRESS">Commons Compress</project>
                    <description>&lt;p&gt;BZip2CompressorInputStream always treats 0x177245385090 as EOF, but should treat this as EOS&lt;br/&gt;
This error occurs mostly on large size files as sudden EOF somwere in the middle of the file.&lt;/p&gt;

&lt;p&gt;An example of data from archived file:&lt;br/&gt;
$ cat fastq.ax.bz2 | od -t x1 | grep -A 1 &apos;17 72 45&apos;&lt;br/&gt;
22711660 d0 ff b6 01 20 10 ff ff 17 72 45 38 50 90 2e ff&lt;br/&gt;
22711700 b2 d3 42 5a 68 39 31 41 59 26 53 59 84 3c 41 75&lt;br/&gt;
&amp;#8211;&lt;br/&gt;
24637020 c5 49 ff 19 80 49 20 7f ff 17 72 45 38 50 90 a4&lt;br/&gt;
24637040 a8 ac bd 42 5a 68 39 31 41 59 26 53 59 0d 9a b4&lt;br/&gt;
&amp;#8211;&lt;br/&gt;
40302720 ff b1 24 80 10 ff ff 17 72 45 38 50 90 24 cb c5&lt;br/&gt;
40302740 90 42 5a 68 39 31 41 59 26 53 59 42 05 ae 5e 05&lt;br/&gt;
.....&lt;/p&gt;


&lt;p&gt;Suggested solution:&lt;/p&gt;

&lt;p&gt;    private void initBlock() throws IOException {&lt;br/&gt;
        char magic0 = bsGetUByte();&lt;br/&gt;
        char magic1 = bsGetUByte();&lt;br/&gt;
        char magic2 = bsGetUByte();&lt;br/&gt;
        char magic3 = bsGetUByte();&lt;br/&gt;
        char magic4 = bsGetUByte();&lt;br/&gt;
        char magic5 = bsGetUByte();&lt;/p&gt;

&lt;p&gt;        if( magic0 == 0x17 &amp;amp;&amp;amp; magic1 == 0x72 &amp;amp;&amp;amp; magic2 == 0x45&lt;br/&gt;
            &amp;amp;&amp;amp; magic3 == 0x38 &amp;amp;&amp;amp; magic4 == 0x50 &amp;amp;&amp;amp; magic5 == 0x90 ) &lt;/p&gt;

&lt;p&gt;        {&lt;br/&gt;
        	if( complete() ) // end of file);&lt;br/&gt;
        	&lt;/p&gt;
{
        		return;
        	}
&lt;p&gt; else&lt;/p&gt;
        	{
        		magic0 = bsGetUByte();
                magic1 = bsGetUByte();
                magic2 = bsGetUByte();
                magic3 = bsGetUByte();
                magic4 = bsGetUByte();
                magic5 = bsGetUByte();
        	}
&lt;p&gt;        } &lt;/p&gt;

&lt;p&gt;        if (magic0 != 0x31 || // &apos;1&apos;&lt;br/&gt;
                   magic1 != 0x41 || // &apos;A&apos;&lt;br/&gt;
                   magic2 != 0x59 || // &apos;Y&apos;&lt;br/&gt;
                   magic3 != 0x26 || // &apos;&amp;amp;&apos;&lt;br/&gt;
                   magic4 != 0x53 || // &apos;S&apos;&lt;br/&gt;
                   magic5 != 0x59 // &apos;Y&apos;&lt;br/&gt;
                   ) &lt;/p&gt;
{
            this.currentState = EOF;
            throw new IOException(&quot;bad block header&quot;);
        }
&lt;p&gt; else {&lt;br/&gt;
            this.storedBlockCRC = bsGetInt();&lt;br/&gt;
            this.blockRandomised = bsR(1) == 1;&lt;/p&gt;

&lt;p&gt;            /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Allocate data here instead in constructor, so we do not allocate&lt;/li&gt;
	&lt;li&gt;it if the input file is empty.&lt;br/&gt;
             */&lt;br/&gt;
            if (this.data == null) 
{
                this.data = new Data(this.blockSize100k);
            }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;            // currBlockNo++;&lt;br/&gt;
            getAndMoveToFrontDecode();&lt;/p&gt;

&lt;p&gt;            this.crc.initialiseCRC();&lt;br/&gt;
            this.currentState = START_BLOCK_STATE;&lt;br/&gt;
        }&lt;br/&gt;
    }&lt;/p&gt;


&lt;p&gt;    private boolean &lt;br/&gt;
    complete() throws IOException &lt;br/&gt;
    { &lt;br/&gt;
    	boolean result = false;&lt;br/&gt;
        this.storedCombinedCRC = bsGetInt();&lt;br/&gt;
        try&lt;br/&gt;
        {&lt;br/&gt;
            if (in.available() == 0 ) &lt;/p&gt;
            {
                throw new IOException( &quot;EOF&quot; );
            }
&lt;p&gt;            checkMagicChar(&apos;B&apos;, &quot;first&quot;);&lt;br/&gt;
            checkMagicChar(&apos;Z&apos;, &quot;second&quot;);&lt;br/&gt;
            checkMagicChar(&apos;h&apos;, &quot;third&quot;);&lt;/p&gt;

&lt;p&gt;            int blockSize = this.in.read();&lt;br/&gt;
            if ((blockSize &amp;lt; &apos;1&apos;) || (blockSize &amp;gt; &apos;9&apos;)) &lt;/p&gt;
{
                throw new IOException(&quot;Stream is not BZip2 formatted: illegal &quot;
                                      + &quot;blocksize &quot; + (char) blockSize);
            }

&lt;p&gt;            this.blockSize100k = blockSize - &apos;0&apos;;&lt;br/&gt;
            this.bsLive = 0;&lt;br/&gt;
            this.bsBuff = 0;&lt;/p&gt;

&lt;p&gt;        } catch( IOException e )&lt;/p&gt;
        {
        	this.currentState = EOF;
        	
        	result = true;
        }

&lt;p&gt;        this.data = null;&lt;br/&gt;
        if (this.storedCombinedCRC != this.computedCombinedCRC) &lt;/p&gt;
{
            throw new IOException(&quot;BZip2 CRC error&quot;);
        }
&lt;p&gt;        this.computedCombinedCRC = 0;    &lt;br/&gt;
        return result;&lt;br/&gt;
    }&lt;/p&gt;</description>
                <environment>&lt;p&gt;all&lt;/p&gt;</environment>
        <key id="12515173">COMPRESS-146</key>
            <summary>BZip2CompressorInputStream always treats 0x177245385090 as EOF, but should treat this as EOS</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="dsmirnov">Dmitriy Smirnov</reporter>
                        <labels>
                            <label>0x177245385090</label>
                    </labels>
                <created>Sun, 24 Jul 2011 00:00:39 +0000</created>
                <updated>Tue, 30 Apr 2013 13:41:45 +0000</updated>
                            <resolved>Mon, 7 Nov 2011 16:38:30 +0000</resolved>
                                                    <fixVersion>1.4</fixVersion>
                                    <component>Compressors</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                    <timeoriginalestimate seconds="14400">4h</timeoriginalestimate>
                            <timeestimate seconds="14400">4h</timeestimate>
                                        <comments>
                            <comment id="13088237" author="larhzu" created="Sat, 20 Aug 2011 17:56:45 +0000"  >&lt;p&gt;I didn&apos;t test, but I think the suggested fix has a few problems:&lt;/p&gt;

&lt;p&gt;in.available() == 0 cannot be used to test if end of input was reached.&lt;/p&gt;

&lt;p&gt;It doesn&apos;t handle concatenated empty .bz2 streams.&lt;/p&gt;

&lt;p&gt;The test for magic bytes and some other code is duplicated.&lt;/p&gt;

&lt;p&gt;IOException in complete() is lost.&lt;/p&gt;</comment>
                            <comment id="13088239" author="larhzu" created="Sat, 20 Aug 2011 18:02:58 +0000"  >&lt;p&gt;I attached a patch that adds support for concatenated .bz2 streams. There is a new constructor that allows getting the old behavior where the decompressor stops after the first .bz2 stream.&lt;/p&gt;

&lt;p&gt;There is also a fix for another bug: The error detail messages of the exceptions in the init and checkMagicChar functions could contain control characters. Having that information in the exceptions isn&apos;t very useful so I omitted them. I had to modify one of those messages so I thought I&apos;ll include a fix for the other too.&lt;/p&gt;</comment>
                            <comment id="13145606" author="bodewig" created="Mon, 7 Nov 2011 16:38:30 +0000"  >&lt;p&gt;applied Lasse&apos;s patch with a small modification.  The default constructor will not support concatenated streams for maximum backwards compatibility.&lt;/p&gt;

&lt;p&gt;This will need some docs that I&apos;m going to add once I&apos;ve looked into the similar patch by Lasse for gzip as well.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="13145620" author="larhzu" created="Mon, 7 Nov 2011 17:10:40 +0000"  >&lt;p&gt;XZCompressorInputStream defaults to concatenated, so doing it differently in BZip2CompressorInputStream is inconsistent. Maybe XZ needs to be changed too.&lt;/p&gt;

&lt;p&gt;I think that in most cases concatenation support is wanted. Maybe the one-argument constructor should have a warning in the docs that usually one doesn&apos;t want to use it. It would still be easy to forget to use the right constructor since non-concatenated version works on most files. I wouldn&apos;t be surprised if most of the existing users of these classes would never get fixed to use the new constructor.&lt;/p&gt;</comment>
                            <comment id="13146180" author="bodewig" created="Tue, 8 Nov 2011 09:14:46 +0000"  >&lt;p&gt;yes, we probably want all three formats to be consistent here.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure what the danger of changing the default really would be, I vaguelly recall people complaining about GzipInputStream after JDK7 added support for concatenated streams (I may be totally wrong on this, though).&lt;/p&gt;</comment>
                            <comment id="13146202" author="larhzu" created="Tue, 8 Nov 2011 10:22:25 +0000"  >&lt;p&gt;The danger is that when you have compressed data inside another file format, you want the decompressor to stop after it has decompressed one compressed stream. For example, if you have bzip2 data in a .zip file, the decompressor must stop after the first stream or things will go wrong.&lt;/p&gt;

&lt;p&gt;If the default is changed, a few applications that need the above feature (I don&apos;t know if there actually are any) will break badly. At the same time it would fix many other applications that handle standalone .gz or .bz2 files and thus should support concatenated streams. Since concatenated streams aren&apos;t very common, many don&apos;t know that their application has such a bug.&lt;/p&gt;

&lt;p&gt;Maybe the default should be changed in Compress 2.0, if API changes are OK at that point. Or maybe the single-argument constructor should be marked as deprecated so that it creates a warning at compile time, which should hopefully make people notice that there&apos;s a new two-argument constructor.&lt;/p&gt;</comment>
                            <comment id="13147139" author="bodewig" created="Wed, 9 Nov 2011 16:30:10 +0000"  >&lt;p&gt;I&apos;ve updated the documentation with svn revision 1199823.&lt;/p&gt;

&lt;p&gt;It would be good to have testcases with concatenated streams, I&apos;ll look into creating some.&lt;/p&gt;

&lt;p&gt;Yes, I think we should change the defaults with 2.0.  Deprecations won&apos;t help in the light of our factory that people may use instead of using the constructors directly.  Adding a new flag to the factory method looks wrong since there are formats (pack200) supported by the factory that don&apos;t know anything about concatenated streams.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12645206">COMPRESS-224</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12530680">COMPRESS-162</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12548643">COMPRESS-185</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12491064" name="bzip2-concatenated.patch" size="7270" author="larhzu" created="Sat, 20 Aug 2011 18:02:58 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 20 Aug 2011 17:56:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>64327</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 4 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0b4d3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>62819</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>