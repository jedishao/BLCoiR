<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Thu Dec 01 20:19:26 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/CSV-34/CSV-34.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[CSV-34] CSVFormat describes itself as immutable, but it is not - in particular it is not thread-safe</title>
                <link>https://issues.apache.org/jira/browse/CSV-34</link>
                <project id="12313222" key="CSV">Commons CSV</project>
                    <description>&lt;p&gt;CSVFormat describes itself as immutable, but it is not @Immutable - the class fields are all mutable.&lt;/p&gt;

&lt;p&gt;The methods that change the fields do so by creating a clone, and returning the changed clone.&lt;br/&gt;
So in a sense the class is immutable.&lt;/p&gt;

&lt;p&gt;However, the normal expectation is that @Immutable classes are @ThreadSafe.&lt;br/&gt;
CSVFormat is not thread-safe, because the fields are not volatile, and the fields are not written &amp;amp; read using a common lock.&lt;/p&gt;

&lt;p&gt;The comment needs to be clarified or removed.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12545405">CSV-34</key>
            <summary>CSVFormat describes itself as immutable, but it is not - in particular it is not thread-safe</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="sebb@apache.org">Sebb</reporter>
                        <labels>
                    </labels>
                <created>Tue, 6 Mar 2012 20:41:09 +0000</created>
                <updated>Thu, 14 Aug 2014 20:06:24 +0000</updated>
                            <resolved>Fri, 9 Mar 2012 16:45:02 +0000</resolved>
                                                    <fixVersion>1.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13223691" author="ebourg" created="Tue, 6 Mar 2012 21:47:44 +0000"  >&lt;p&gt;Could you elaborate a bit in this issue Seb? I&apos;m scratching my head on this and I fail to see how the current design defeats the thread safety. I even wrote a test trying the demonstrate the class wasn&apos;t thread safe but I didn&apos;t succeed.&lt;/p&gt;

&lt;p&gt;Is it sufficient to make the fields volatile and leave the logic as is?&lt;/p&gt;</comment>
                            <comment id="13223744" author="sebb@apache.org" created="Tue, 6 Mar 2012 22:32:05 +0000"  >&lt;p&gt;The Java Memory Model allows threads to cache copies of variables. This is done to improve performance.&lt;/p&gt;

&lt;p&gt;If thread A writes to a field, that write may be cached.&lt;br/&gt;
Even if the cache is written to main memory, thread B may already have cached the value so may not see the update.&lt;/p&gt;

&lt;p&gt;If the reader and writer threads use the same lock - or the field is volatile - then the JVM guarantees that the data will be published correctly. Otherwise, in general the reader may never see what the writer thread wrote, or may see writes out of order. &lt;span class=&quot;error&quot;&gt;&amp;#91;There are some further rules about final variables.&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately this is quite difficult to test, as whether and when caching occurs depends on lots of factors.&lt;/p&gt;

&lt;p&gt;So yes, adding volatile would fix this particular problem.&lt;br/&gt;
Or one could use final variables for all fields and use a constructor instead of clone.&lt;br/&gt;
That would be rather better.&lt;/p&gt;

&lt;p&gt;But given that the rest of CSV is not thread-safe, I wonder whether it&apos;s necessary to make the format class thread-safe.&lt;/p&gt;</comment>
                            <comment id="13223765" author="ebourg" created="Tue, 6 Mar 2012 23:04:02 +0000"  >&lt;p&gt;CSVFormat doesn&apos;t claim to be thread safe, it&apos;s just immutable otherwise it would be possible to modify the predefined formats (CSVFormat.DEFAULT, CSVFormat.EXCEL, etc).&lt;/p&gt;

&lt;p&gt;Thread safety is not a goal, but it&apos;s still good to have. With the current implementation it&apos;s impossible for an instance to be mutated after the reference is shared with another thread. So I think it&apos;s impossible for another thread to see a different value.&lt;/p&gt;

&lt;p&gt;The case can be described like this:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Thread A creates a bean and set a non final, non volatile field&lt;/li&gt;
	&lt;li&gt;Thread A shares this instance with Thread B (through a queue for example)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Question: Is it possible for Thread B to get the bean with the field not mutated?&lt;/p&gt;

&lt;p&gt;My understanding is that it&apos;s not possible, because for sharing the instance with Thread B the instance that may have been cached in Thread A memory must necessarily be copied in it&apos;s current state into the main memory, and that&apos;s with the field mutated. So Thread B receives the bean with the field properly initialized.&lt;/p&gt;

&lt;p&gt;Is this correct?&lt;/p&gt;</comment>
                            <comment id="13223827" author="sebb@apache.org" created="Tue, 6 Mar 2012 23:45:49 +0000"  >&lt;p&gt;OK, good point about predefined formats.&lt;/p&gt;

&lt;p&gt;The issue is not about making changes to an object after it has been shared (although that is also important), it&apos;s about ensuring that the contents of an object are correctly published to the other thread.&lt;/p&gt;

&lt;p&gt;Queues that are designed for passing work items between threads must include sufficient synch. to guarantee safe publication.&lt;/p&gt;

&lt;p&gt;However, if thread A were to store the object directly into a field in thread B, there would be no such guarantee.&lt;/p&gt;</comment>
                            <comment id="13224812" author="sebb@apache.org" created="Wed, 7 Mar 2012 22:55:46 +0000"  >&lt;p&gt;CSVFormat.java reworked to use all final variables.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Can be provided as diff if required; it&amp;#39;s easier to understand a full source file&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="13224834" author="ebourg" created="Wed, 7 Mar 2012 23:34:02 +0000"  >&lt;p&gt;Thank you for showing how this can be implemented Sebb. Considering that thread safety is not a goal I think I still prefer the current implementation.&lt;/p&gt;</comment>
                            <comment id="13224859" author="sebb@apache.org" created="Thu, 8 Mar 2012 00:11:38 +0000"  >&lt;p&gt;I thought you wanted to be able to pass CSVFormat objects between threads?&lt;/p&gt;

&lt;p&gt;As it stands, the implementation is not completely thread-safe.&lt;br/&gt;
And the Javadoc comment is still misleading.&lt;/p&gt;</comment>
                            <comment id="13226187" author="ebourg" created="Fri, 9 Mar 2012 16:43:59 +0000"  >&lt;p&gt;After checking the JLS and the excellent Java Concurrency In Practice I now understand why my analysis is wrong. CSVFormat is &quot;effectively immutable&quot; but must be safely published to avoid visibility issues.&lt;/p&gt;

&lt;p&gt;I made the fields volatile to ensure the thread safety. I prefer this to the constructor idiom which is less readable with a large number of fields. Also I expect some fields to be added or removed in the near future, the clone construct will be easier to maintain. I don&apos;t mind switching to constructors later when the API is stabilized.&lt;/p&gt;

&lt;p&gt;Thank you for pointing to this issue Sebb, that was very instructing.&lt;/p&gt;</comment>
                            <comment id="13227264" author="ebourg" created="Sun, 11 Mar 2012 23:08:39 +0000"  >&lt;p&gt;Eventually I removed the volatile modifier, it was slowing the parser by about 5% in my tests. I replaced the clones by a constructor call as you suggested.&lt;/p&gt;</comment>
                            <comment id="13227307" author="sebb@apache.org" created="Mon, 12 Mar 2012 03:33:18 +0000"  >&lt;p&gt;That&apos;s quite surprising. &lt;br/&gt;
Obviously volatile will have some overhead, but I&apos;m surprised it is as much as that, but then there are quite a few variables to be checked.&lt;/p&gt;</comment>
                            <comment id="13227352" author="ebourg" created="Mon, 12 Mar 2012 07:41:36 +0000"  >&lt;p&gt;volatile prevents the variables from being cached in the registers and creates a memory barrier, so that&apos;s not that surprising to see an impact on the performances. But I admit I didn&apos;t expect as much as 5%. That&apos;s probably because the parser calls the format properties many time on every character read.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12517482" name="CSVFormat.java" size="10441" author="sebb@apache.org" created="Wed, 7 Mar 2012 22:55:46 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 6 Mar 2012 21:47:44 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>230591</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 38 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0au87:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>61170</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>