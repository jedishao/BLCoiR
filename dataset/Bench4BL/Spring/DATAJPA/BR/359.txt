@Lock annotation doesn't work on (at least) findOne methodIf I have a repository defined thus:


public interface DataObjectRepository extends PagingAndSortingRepository(DataObject, Integer); {









	@Override




	@Lock(LockModeType.PESSIMISTIC_WRITE)




	DataObject findOne(Integer id);




	




	@Query("from DataObject o where o.id = ?1")




	@Lock(LockModeType.PESSIMISTIC_WRITE)




	DataObject findOneAndLock(Integer id);




}






and I run both findOne() and findOneAndLock() then only my more specific method acquires a lock - the @Lock annotation applied to the CRUD method has no effect on its operation. 
Interestingly, applying the annotation to the findAll method (as noted in the docs) does work !? 
The documentation suggests that the @Lock annotation should also apply to the other CRUD methods.
I've created a sample Maven/Eclipse project to demonstrate the issue (this example uses Derby as its DB, but the issue is also present on at least MySQL where I discovered it first)
The output of running the test.Application class ends with some Hibernate logging of the Derby:

Hibernate: 




    select




        dataobject0_.id as id1_0_0_,




        dataobject0_.name as name2_0_0_ 




    from




        data dataobject0_ 




    where




        dataobject0_.id=?




Hibernate: 




    select




        dataobject0_.id as id1_0_,




        dataobject0_.name as name2_0_ 




    from




        data dataobject0_ for update




            with rs




Hibernate: 




    select




        dataobject0_.id as id1_0_,




        dataobject0_.name as name2_0_ 




    from




        data dataobject0_ 




    where




        dataobject0_.id=? for update




            with rs




and I had expected that the first query (using the @Lock&amp;apos;ed findOne) should also have acquired the lock with the "for update" suffix.