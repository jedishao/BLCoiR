<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Fri Dec 23 09:59:06 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SEC-1187/SEC-1187.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SEC-1187] AbstractUserDetailsAuthenticationProvider allows login of disabled, locked or expired users</title>
                <link>https://jira.spring.io/browse/SEC-1187</link>
                <project id="10040" key="SEC">Spring Security</project>
                    <description>&lt;p&gt;If I look into AbstractUserDetailsAuthenticationProvider, I see the followng code:&lt;br/&gt;
  try &lt;/p&gt;
{
                user = retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);
            }
&lt;p&gt; catch (UsernameNotFoundException notFound) {&lt;br/&gt;
                if (hideUserNotFoundExceptions) &lt;/p&gt;
{
                    throw new BadCredentialsException(messages.getMessage(
                            &quot;AbstractUserDetailsAuthenticationProvider.badCredentials&quot;, &quot;Bad credentials&quot;));
                }
&lt;p&gt; else &lt;/p&gt;
{
                    throw notFound;
                }
&lt;p&gt;            }&lt;/p&gt;

&lt;p&gt;            Assert.notNull(user, &quot;retrieveUser returned null - a violation of the interface contract&quot;);&lt;br/&gt;
        }&lt;/p&gt;

&lt;p&gt;        preAuthenticationChecks.check(user);&lt;/p&gt;

&lt;p&gt;        try &lt;/p&gt;
{
            additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken) authentication);
        }
&lt;p&gt; catch (AuthenticationException exception) {&lt;br/&gt;
            if (cacheWasUsed) &lt;/p&gt;
{
                // There was a problem, so try again after checking
                // we&apos;re using latest data (ie not from the cache)
                cacheWasUsed = false;
                user = retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);
### HERE ###
                additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken) authentication);
            }
&lt;p&gt; else &lt;/p&gt;
{
                throw exception;
            }
&lt;p&gt;        }&lt;/p&gt;


&lt;p&gt;Isn&apos;t it necessary to execute the preAuthenticationChecks at ### HERE ### again?&lt;br/&gt;
I don&apos;t want that disabled, locked or expired users are able to log in. &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</description>
                <environment>-</environment>
        <key id="26987">SEC-1187</key>
            <summary>AbstractUserDetailsAuthenticationProvider allows login of disabled, locked or expired users</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="luke">Luke Taylor</assignee>
                                    <reporter username="res1st">Ingo</reporter>
                        <labels>
                    </labels>
                <created>Thu, 18 Jun 2009 22:08:37 +0000</created>
                <updated>Sat, 6 Feb 2016 06:11:07 +0000</updated>
                            <resolved>Tue, 7 Jul 2009 04:10:08 +0000</resolved>
                                    <version>2.0.4</version>
                                    <fixVersion>3.0.0 M2</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="45130" author="luke" created="Thu, 25 Jun 2009 21:07:59 +0000"  >&lt;p&gt;The re-loading of the user at this point only occurs if an AuthenticationException has taken place which might imply that a user has changed their password. It won&apos;t make any difference if you&apos;ve disabled their account and they authenticate correctly against the cache. If you have a separate admin application and you want the ability to lock out users, then it must be linked to the cache and remove the user entry when the data is changed. Either that or don&apos;t use a cache - you only really need one for stateless applications.&lt;/p&gt;</comment>
                            <comment id="45134" author="res1st" created="Thu, 25 Jun 2009 21:40:29 +0000"  >&lt;p&gt;Hi, thanks for your comment.&lt;br/&gt;
Of course, the correct way is that a separate admin application cleans the cache.&lt;br/&gt;
You are right, but I could also say that if the password of the user is changed, the password change code has to remove the user in the authentication user cache.&lt;br/&gt;
But the whole &quot;cacheWasUsed&quot; logic means, my cache isn&apos;t notified and that&apos;s why I re-retrieve the user again. And we don&apos;t know what a customized preAuthenticationChecks does. Doesn&apos;t exist a single scenario where we have to execute the preAuthenticationChecks again. I&apos;m not 100% sure.&lt;/p&gt;

</comment>
                            <comment id="45325" author="luke" created="Tue, 7 Jul 2009 04:04:44 +0000"  >&lt;p&gt;You could indeed say that password-changing code ought to clear the cache too, but if it did the cacheWasUsed logic would not be executed, so there would still be no real reason to call the preAuthenticationChecks again in that scenario. It is most likely that the cacheWasUsed logic just pre-dates the status checking of the UserDetails. &lt;/p&gt;

&lt;p&gt;Probably the most sensible thing would be to move the status check into the try/catch block&lt;/p&gt;

&lt;p&gt;        try &lt;/p&gt;
{
            preAuthenticationChecks.check(user);
            additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken) authentication);
        }
&lt;p&gt; catch (AuthenticationException exception) { &lt;/p&gt;

&lt;p&gt;since it will generally throw an AuthenticationException (AccountStatusException is a subclass of AuthenticationException) and then call the status check as you have suggested.&lt;/p&gt;

&lt;p&gt;That way if the cached version of the UserDetails has an invalid status, but it has actually been cleared, the user will then be able to log in.&lt;/p&gt;</comment>
                            <comment id="45326" author="luke" created="Tue, 7 Jul 2009 04:05:07 +0000"  >&lt;p&gt;Not critical.&lt;/p&gt;</comment>
                            <comment id="45327" author="luke" created="Tue, 7 Jul 2009 04:10:08 +0000"  >&lt;p&gt;Change made as suggested.&lt;/p&gt;</comment>
                            <comment id="124083" author="issuemaster" created="Sat, 6 Feb 2016 06:11:07 +0000"  >&lt;p&gt;This issue has been migrated to &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/1431&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-security/issues/1431&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 25 Jun 2009 21:07:59 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12629</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i023vz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12339</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12186</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>