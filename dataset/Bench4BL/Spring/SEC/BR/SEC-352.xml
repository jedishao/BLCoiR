<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Fri Dec 23 10:00:14 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SEC-352/SEC-352.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SEC-352] Create a label-based ACL voter</title>
                <link>https://jira.spring.io/browse/SEC-352</link>
                <project id="10040" key="SEC">Spring Security</project>
                    <description>&lt;p&gt;I have written a patch to implement a label-based ACL voter. I also have the test cases, and have verified it against SVN version 1685. It is cut-and-pasted below.&lt;/p&gt;

&lt;p&gt;Index: acegisecurity/core/src/test/java/org/acegisecurity/vote/SampleService.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; acegisecurity/core/src/test/java/org/acegisecurity/vote/SampleService.java	(revision 0)&lt;br/&gt;
+++ acegisecurity/core/src/test/java/org/acegisecurity/vote/SampleService.java	(revision 0)&lt;br/&gt;
@@ -0,0 +1,9 @@&lt;br/&gt;
+package org.acegisecurity.vote;&lt;br/&gt;
+&lt;br/&gt;
+import java.util.List;&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+public interface SampleService &lt;/p&gt;
{
+	public List getTheSampleData();
+	public void doSomethingOnThis(SampleBlockOfData block1, SampleBlockOfData block2);
+}
&lt;p&gt;Index: acegisecurity/core/src/test/java/org/acegisecurity/vote/SampleServiceImpl.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; acegisecurity/core/src/test/java/org/acegisecurity/vote/SampleServiceImpl.java	(revision 0)&lt;br/&gt;
+++ acegisecurity/core/src/test/java/org/acegisecurity/vote/SampleServiceImpl.java	(revision 0)&lt;br/&gt;
@@ -0,0 +1,45 @@&lt;br/&gt;
+package org.acegisecurity.vote;&lt;br/&gt;
+&lt;br/&gt;
+import java.util.List;&lt;br/&gt;
+import java.util.Vector;&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+import org.acegisecurity.context.SecurityContextHolder;&lt;br/&gt;
+import org.apache.log4j.Logger;&lt;br/&gt;
+&lt;br/&gt;
+public class SampleServiceImpl implements SampleService {&lt;br/&gt;
+	Logger logger = Logger.getLogger(SampleServiceImpl.class);&lt;br/&gt;
+&lt;br/&gt;
+	public List getTheSampleData() &lt;/p&gt;
{
+		logger.debug(SecurityContextHolder.getContext().getAuthentication().getName() + 
+				&quot; is requesting some sample data.&quot;);
+		
+		List dataList = new Vector();
+		SampleBlockOfData block;
+		
+		block = new SampleBlockOfData();
+		block.setId(&quot;001&quot;);
+		block.setSomeData(SampleBlockOfData.DATA_LABEL_BLUE);
+		dataList.add(block);
+		
+		block = new SampleBlockOfData();
+		block.setId(&quot;002&quot;);
+		block.setSomeData(SampleBlockOfData.DATA_LABEL_ORANGE);
+		dataList.add(block);
+		
+		block = new SampleBlockOfData();
+		block.setId(&quot;003&quot;);
+		block.setSomeData(SampleBlockOfData.DATA_LABEL_SHARED);
+		dataList.add(block);
+		
+		return dataList;
+	}
&lt;p&gt;+&lt;br/&gt;
+	public void doSomethingOnThis(SampleBlockOfData block1, SampleBlockOfData block2) &lt;/p&gt;
{
+		logger.debug(&quot;You made it! Your context is &quot; +
+				SecurityContextHolder.getContext().getAuthentication());
+		logger.debug(&quot;Block1 is &quot; + block1);
+		logger.debug(&quot;Block2 is &quot; + block2);
+	}
&lt;p&gt;+&lt;br/&gt;
+}&lt;br/&gt;
Index: acegisecurity/core/src/test/java/org/acegisecurity/vote/SampleBlockOfData.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; acegisecurity/core/src/test/java/org/acegisecurity/vote/SampleBlockOfData.java	(revision 0)&lt;br/&gt;
+++ acegisecurity/core/src/test/java/org/acegisecurity/vote/SampleBlockOfData.java	(revision 0)&lt;br/&gt;
@@ -0,0 +1,36 @@&lt;br/&gt;
+package org.acegisecurity.vote;&lt;br/&gt;
+&lt;br/&gt;
+import java.io.Serializable;&lt;br/&gt;
+&lt;br/&gt;
+import org.acegisecurity.vote.LabeledData;&lt;br/&gt;
+&lt;br/&gt;
+&lt;br/&gt;
+public class SampleBlockOfData implements Serializable, LabeledData {&lt;br/&gt;
+	private static final long serialVersionUID = 1L;&lt;br/&gt;
+	public static final String DATA_LABEL_BLUE = &quot;blue&quot;;&lt;br/&gt;
+	public static final String DATA_LABEL_ORANGE = &quot;orange&quot;;&lt;br/&gt;
+	public static final String DATA_LABEL_SHARED = &quot;blue-orange&quot;;&lt;br/&gt;
+	&lt;br/&gt;
+	private String id;&lt;br/&gt;
+	private String dataType;&lt;br/&gt;
+	&lt;br/&gt;
+	public String getId() &lt;/p&gt;
{
+		return id;
+	}
&lt;p&gt;+	public void setId(String ticketNumber) &lt;/p&gt;
{
+		this.id = ticketNumber;
+	}
&lt;p&gt;+	public String getSomeData() &lt;/p&gt;
{
+		return dataType;
+	}&lt;br/&gt;
+	public void setSomeData(String trafficType) {
+		this.dataType = trafficType;
+	}&lt;br/&gt;
+	public String toString() {
+		return this.id + &quot;/&quot; + this.dataType;
+	}&lt;br/&gt;
+	public String getLabel() {+		return dataType;+	}
&lt;p&gt;+&lt;br/&gt;
+}&lt;br/&gt;
Index: acegisecurity/core/src/test/resources/org/acegisecurity/vote/labelBasedSecurityApplicationContext.xml&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; acegisecurity/core/src/test/resources/org/acegisecurity/vote/labelBasedSecurityApplicationContext.xml	(revision 0)&lt;br/&gt;
+++ acegisecurity/core/src/test/resources/org/acegisecurity/vote/labelBasedSecurityApplicationContext.xml	(revision 0)&lt;br/&gt;
@@ -0,0 +1,91 @@&lt;br/&gt;
+&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;
+&amp;lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot; &quot;http://www.springframework.org/dtd/spring-beans.dtd&quot; &amp;gt;&lt;br/&gt;
+&amp;lt;beans&amp;gt;&lt;br/&gt;
+	&amp;lt;bean id=&quot;userDetailsService&quot; class=&quot;org.acegisecurity.userdetails.memory.InMemoryDaoImpl&quot;&amp;gt;&lt;br/&gt;
+	  &amp;lt;property name=&quot;userMap&quot;&amp;gt;&lt;br/&gt;
+	    &amp;lt;value&amp;gt;&lt;br/&gt;
+	      blueuser=password,ROLE_BASIC,LABEL_BLUE&lt;br/&gt;
+	      superuser=password2,ROLE_BASIC,LABEL_SHARED&lt;br/&gt;
+	      orangeuser=password3,ROLE_BASIC,LABEL_ORANGE&lt;br/&gt;
+	      multiuser=password4,ROLE_BASIC,LABEL_BLUE,LABEL_ORANGE&lt;br/&gt;
+	    &amp;lt;/value&amp;gt;&lt;br/&gt;
+	  &amp;lt;/property&amp;gt;&lt;br/&gt;
+	&amp;lt;/bean&amp;gt;&lt;br/&gt;
+		&lt;br/&gt;
+	&amp;lt;bean id=&quot;daoAuthenticationProvider&quot; class=&quot;org.acegisecurity.providers.dao.DaoAuthenticationProvider&quot;&amp;gt;&lt;br/&gt;
+	  &amp;lt;property name=&quot;userDetailsService&quot;&amp;gt;&amp;lt;ref bean=&quot;userDetailsService&quot;/&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
+	&amp;lt;/bean&amp;gt;        &lt;br/&gt;
+	&lt;br/&gt;
+	&amp;lt;bean id=&quot;authenticationManager&quot; class=&quot;org.acegisecurity.providers.ProviderManager&quot;&amp;gt;&lt;br/&gt;
+	  &amp;lt;property name=&quot;providers&quot;&amp;gt;&lt;br/&gt;
+	    &amp;lt;list&amp;gt;&lt;br/&gt;
+	      &amp;lt;ref local=&quot;daoAuthenticationProvider&quot;/&amp;gt;&lt;br/&gt;
+	    &amp;lt;/list&amp;gt;&lt;br/&gt;
+	  &amp;lt;/property&amp;gt;&lt;br/&gt;
+	&amp;lt;/bean&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+	&amp;lt;bean id=&quot;accessDecisionManager&quot; class=&quot;org.acegisecurity.vote.UnanimousBased&quot;&amp;gt;&lt;br/&gt;
+		&amp;lt;property name=&quot;allowIfAllAbstainDecisions&quot;&amp;gt;&amp;lt;value&amp;gt;false&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
+		&amp;lt;property name=&quot;decisionVoters&quot;&amp;gt;&lt;br/&gt;
+			&amp;lt;list&amp;gt;&lt;br/&gt;
+				&amp;lt;bean class=&quot;org.acegisecurity.vote.RoleVoter&quot;/&amp;gt;&lt;br/&gt;
+				&amp;lt;bean class=&quot;org.acegisecurity.vote.LabelBasedAclVoter&quot;&amp;gt;&lt;br/&gt;
+					&amp;lt;property name=&quot;attributeIndicatingLabeledOperation&quot;&amp;gt;&amp;lt;value&amp;gt;LABELED_OPERATION&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
+					&amp;lt;property name=&quot;labelMap&quot;&amp;gt;&lt;br/&gt;
+						&amp;lt;map&amp;gt;&lt;br/&gt;
+							&amp;lt;entry key=&quot;LABEL_BLUE&quot;&amp;gt;&lt;br/&gt;
+								&amp;lt;list&amp;gt;&lt;br/&gt;
+									&amp;lt;value&amp;gt;blue&amp;lt;/value&amp;gt;&lt;br/&gt;
+									&amp;lt;value&amp;gt;blue-orange&amp;lt;/value&amp;gt;&lt;br/&gt;
+								&amp;lt;/list&amp;gt;&lt;br/&gt;
+							&amp;lt;/entry&amp;gt;&lt;br/&gt;
+							&amp;lt;entry key=&quot;LABEL_ORANGE&quot;&amp;gt;&lt;br/&gt;
+								&amp;lt;list&amp;gt;&lt;br/&gt;
+									&amp;lt;value&amp;gt;orange&amp;lt;/value&amp;gt;&lt;br/&gt;
+									&amp;lt;value&amp;gt;blue-orange&amp;lt;/value&amp;gt;&lt;br/&gt;
+								&amp;lt;/list&amp;gt;&lt;br/&gt;
+							&amp;lt;/entry&amp;gt;&lt;br/&gt;
+							&amp;lt;entry key=&quot;LABEL_SHARED&quot;&amp;gt;&lt;br/&gt;
+								&amp;lt;list&amp;gt;&lt;br/&gt;
+									&amp;lt;value&amp;gt;blue&amp;lt;/value&amp;gt;&lt;br/&gt;
+									&amp;lt;value&amp;gt;orange&amp;lt;/value&amp;gt;&lt;br/&gt;
+									&amp;lt;value&amp;gt;blue-orange&amp;lt;/value&amp;gt;&lt;br/&gt;
+								&amp;lt;/list&amp;gt;&lt;br/&gt;
+							&amp;lt;/entry&amp;gt;&lt;br/&gt;
+						&amp;lt;/map&amp;gt;&lt;br/&gt;
+					&amp;lt;/property&amp;gt;&lt;br/&gt;
+				&amp;lt;/bean&amp;gt;&lt;br/&gt;
+			&amp;lt;/list&amp;gt;&lt;br/&gt;
+		&amp;lt;/property&amp;gt;&lt;br/&gt;
+	&amp;lt;/bean&amp;gt;&lt;br/&gt;
+	&lt;br/&gt;
+	&amp;lt;bean id=&quot;securityInteceptor&quot;&lt;br/&gt;
+		class=&quot;org.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor&quot;&amp;gt;&lt;br/&gt;
+	  &amp;lt;property name=&quot;validateConfigAttributes&quot;&amp;gt;&amp;lt;value&amp;gt;false&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
+	  &amp;lt;property name=&quot;authenticationManager&quot;&amp;gt;&amp;lt;ref bean=&quot;authenticationManager&quot;/&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
+	  &amp;lt;property name=&quot;accessDecisionManager&quot;&amp;gt;&amp;lt;ref bean=&quot;accessDecisionManager&quot;/&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
+	  &amp;lt;property name=&quot;objectDefinitionSource&quot;&amp;gt;&lt;br/&gt;
+	    &amp;lt;value&amp;gt;&lt;br/&gt;
+	      org.acegisecurity.vote.SampleService.get*=ROLE_BASIC&lt;br/&gt;
+	      org.acegisecurity.vote.SampleService.do*=ROLE_BASIC,LABELED_OPERATION&lt;br/&gt;
+	    &amp;lt;/value&amp;gt;&lt;br/&gt;
+	  &amp;lt;/property&amp;gt;&lt;br/&gt;
+	&amp;lt;/bean&amp;gt;&lt;br/&gt;
+	&lt;br/&gt;
+    &amp;lt;bean id=&quot;perfOfSecurity&quot; class=&quot;org.springframework.aop.interceptor.PerformanceMonitorInterceptor&quot;&amp;gt;&lt;br/&gt;
+    	&amp;lt;property name=&quot;prefix&quot;&amp;gt;&amp;lt;value&amp;gt;Security: &amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
+    &amp;lt;/bean&amp;gt;&lt;br/&gt;
+    &lt;br/&gt;
+	&amp;lt;bean id=&quot;sampleService&quot; class=&quot;org.acegisecurity.vote.SampleServiceImpl&quot;/&amp;gt;&lt;br/&gt;
+	&lt;br/&gt;
+ 	&amp;lt;bean class=&quot;org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator&quot;&amp;gt;&lt;br/&gt;
+	  &amp;lt;property name=&quot;beanNames&quot;&amp;gt;&amp;lt;value&amp;gt;sampleService&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
+	  &amp;lt;property name=&quot;interceptorNames&quot;&amp;gt;&lt;br/&gt;
+	    &amp;lt;list&amp;gt;&lt;br/&gt;
+	      &amp;lt;value&amp;gt;perfOfSecurity&amp;lt;/value&amp;gt;&lt;br/&gt;
+	      &amp;lt;value&amp;gt;securityInteceptor&amp;lt;/value&amp;gt;&lt;br/&gt;
+	    &amp;lt;/list&amp;gt;&lt;br/&gt;
+	  &amp;lt;/property&amp;gt;&lt;br/&gt;
+	&amp;lt;/bean&amp;gt;&lt;br/&gt;
+&lt;br/&gt;
+&amp;lt;/beans&amp;gt;&lt;br/&gt;
Index: acegisecurity/core/src/main/java/org/acegisecurity/vote/LabeledData.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; acegisecurity/core/src/main/java/org/acegisecurity/vote/LabeledData.java	(revision 0)&lt;br/&gt;
+++ acegisecurity/core/src/main/java/org/acegisecurity/vote/LabeledData.java	(revision 0)&lt;br/&gt;
@@ -0,0 +1,18 @@&lt;br/&gt;
+package org.acegisecurity.vote;&lt;br/&gt;
+&lt;br/&gt;
+/**&lt;br/&gt;
+ * This interface indicates data objects that carry a label. The purpose is to support&lt;br/&gt;
+ * the &lt;/p&gt;
{@link LabelBasedAclVoter}
&lt;p&gt;. When it votes, it evaluates all method arguments&lt;br/&gt;
+ * tagged with this interface, and votes if they match the user&apos;s granted authorities list.&lt;br/&gt;
+ * &lt;br/&gt;
+ * @author Greg Turnquist&lt;br/&gt;
+ *&lt;br/&gt;
+ */&lt;br/&gt;
+public interface LabeledData &lt;/p&gt;
{
+	/**
+	 * Retrieve the domain object&apos;s data label. NOTE: This
+	 * implementation only supports one data label per object.
+	 * @return The label value of data object as a string.
+	 */
+	public String getLabel();
+}
&lt;p&gt;Index: acegisecurity/core/src/main/java/org/acegisecurity/vote/LabelBasedAclVoter.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; acegisecurity/core/src/main/java/org/acegisecurity/vote/LabelBasedAclVoter.java	(revision 0)&lt;br/&gt;
+++ acegisecurity/core/src/main/java/org/acegisecurity/vote/LabelBasedAclVoter.java	(revision 0)&lt;br/&gt;
@@ -0,0 +1,231 @@&lt;br/&gt;
+package org.acegisecurity.vote;&lt;br/&gt;
+&lt;br/&gt;
+import java.util.HashMap;&lt;br/&gt;
+import java.util.Iterator;&lt;br/&gt;
+import java.util.List;&lt;br/&gt;
+import java.util.Vector;&lt;br/&gt;
+&lt;br/&gt;
+import org.acegisecurity.Authentication;&lt;br/&gt;
+import org.acegisecurity.ConfigAttribute;&lt;br/&gt;
+import org.acegisecurity.ConfigAttributeDefinition;&lt;br/&gt;
+import org.acegisecurity.vote.AbstractAclVoter;&lt;br/&gt;
+import org.aopalliance.intercept.MethodInvocation;&lt;br/&gt;
+import org.apache.commons.logging.Log;&lt;br/&gt;
+import org.apache.commons.logging.LogFactory;&lt;br/&gt;
+import org.springframework.util.Assert;&lt;br/&gt;
+&lt;br/&gt;
+/**&lt;br/&gt;
+ * This Acl voter will evaluate methods based on labels applied to incoming arguments. It will&lt;br/&gt;
+ * only check methods that have been properly tagged in the MethodSecurityInterceptor with the&lt;br/&gt;
+ * value stored in &amp;lt;b&amp;gt;attributeIndicatingLabeledOperation&amp;lt;/b&amp;gt;. If a method has been tagged, then&lt;br/&gt;
+ * it examines each argument, and if the argument implements &lt;/p&gt;
{@link LabeledData}
&lt;p&gt;, then it will&lt;br/&gt;
+ * asses if the user&apos;s list of granted authorities matches.&amp;lt;p&amp;gt;&lt;br/&gt;
+ * &amp;lt;p&amp;gt;&lt;br/&gt;
+ * By default, if none of the arguments are labeled, then the access will be granted. This can&lt;br/&gt;
+ * be overridden by setting &amp;lt;b&amp;gt;allowAccessIfNoAttributesAreLabeled&amp;lt;/b&amp;gt; to false in the Spring&lt;br/&gt;
+ * context file.&amp;lt;p&amp;gt;&lt;br/&gt;
+ * &amp;lt;p&amp;gt;&lt;br/&gt;
+ * In many situations, different values are linked together to define a common label, it is &lt;br/&gt;
+ * necessary to define a map in the application context that links user-assigned label access&lt;br/&gt;
+ * to domain object labels. This is done by setting up the &amp;lt;b&amp;gt;labelMap&amp;lt;/b&amp;gt; in the application&lt;br/&gt;
+ * context.&amp;lt;p&amp;gt;&lt;br/&gt;
+ * &lt;br/&gt;
+ * @author Greg Turnquist&lt;br/&gt;
+ * @see org.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor&lt;br/&gt;
+ */&lt;br/&gt;
+public class LabelBasedAclVoter extends AbstractAclVoter {&lt;br/&gt;
+	Log logger = LogFactory.getLog(LabelBasedAclVoter.class);&lt;br/&gt;
+	private String attributeIndicatingLabeledOperation = null;&lt;br/&gt;
+	private HashMap labelMap = null;&lt;br/&gt;
+	private boolean allowAccessIfNoAttributesAreLabeled = true;&lt;br/&gt;
+	&lt;br/&gt;
+	/**&lt;br/&gt;
+	 * Each method intended for evaluation by this voter must include this&lt;br/&gt;
+	 * tag name in the definition of the MethodSecurityInterceptor, indicating&lt;br/&gt;
+	 * if this voter should evaluate the arguments and compare them against&lt;br/&gt;
+	 * the label map.&amp;lt;p&amp;gt;&lt;br/&gt;
+	 * @param attributeIndicatingLabeledOperation string&lt;br/&gt;
+	 */&lt;br/&gt;
+	public void setAttributeIndicatingLabeledOperation(String attributeIndicatingLabeledOperation) &lt;/p&gt;
{
+		this.attributeIndicatingLabeledOperation = attributeIndicatingLabeledOperation;
+	}
&lt;p&gt;+	&lt;br/&gt;
+	/**&lt;br/&gt;
+	 * Set the map that correlate a user&apos;s assigned label against domain object values that&lt;br/&gt;
+	 * are considered data labels.&amp;lt;p&amp;gt;&lt;br/&gt;
+	 * &amp;lt;p&amp;gt;&lt;br/&gt;
+	 * @param labelMap - HashMap&lt;br/&gt;
+	 * &lt;br/&gt;
+	 * Example application context configuration of a labelMap:&lt;br/&gt;
+	 * &amp;lt;pre&amp;gt;&lt;br/&gt;
+	 *  &amp;lt;bean id=&quot;accessDecisionManager&quot; class=&quot;org.acegisecurity.vote.UnanimousBased&quot;&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *		&amp;lt;property name=&quot;allowIfAllAbstainDecisions&quot;&amp;gt;&amp;lt;value&amp;gt;false&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *		&amp;lt;property name=&quot;decisionVoters&quot;&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *			&amp;lt;list&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *				&amp;lt;bean class=&quot;org.acegisecurity.vote.RoleVoter&quot;/&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *				&amp;lt;bean class=&quot;net.homelinux.scifi.LabelBasedAclVoter&quot;&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *					&amp;lt;property name=&quot;attributeIndicatingLabeledOperation&quot;&amp;gt;&amp;lt;value&amp;gt;LABELED_OPERATION&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *					&amp;lt;property name=&quot;labelMap&quot;&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *						&amp;lt;map&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *							&amp;lt;entry key=&quot;DATA_LABEL_BLUE&quot;&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *								&amp;lt;list&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *									&amp;lt;value&amp;gt;blue&amp;lt;/value&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *									&amp;lt;value&amp;gt;indigo&amp;lt;/value&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *									&amp;lt;value&amp;gt;purple&amp;lt;/value&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *								&amp;lt;/list&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *							&amp;lt;/entry&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *							&amp;lt;entry key=&quot;LABEL_ORANGE&quot;&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *								&amp;lt;list&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *									&amp;lt;value&amp;gt;orange&amp;lt;/value&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *									&amp;lt;value&amp;gt;sunshine&amp;lt;/value&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *									&amp;lt;value&amp;gt;amber&amp;lt;/value&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *								&amp;lt;/list&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *							&amp;lt;/entry&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *							&amp;lt;entry key=&quot;LABEL_ADMIN&quot;&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *								&amp;lt;list&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *									&amp;lt;value&amp;gt;blue&amp;lt;/value&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *									&amp;lt;value&amp;gt;indigo&amp;lt;/value&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *									&amp;lt;value&amp;gt;purple&amp;lt;/value&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *									&amp;lt;value&amp;gt;orange&amp;lt;/value&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *									&amp;lt;value&amp;gt;sunshine&amp;lt;/value&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *									&amp;lt;value&amp;gt;amber&amp;lt;/value&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *								&amp;lt;/list&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *							&amp;lt;/entry&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *						&amp;lt;/map&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *					&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *				&amp;lt;/bean&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *			&amp;lt;/list&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *		&amp;lt;/property&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *	&amp;lt;/bean&amp;gt;&amp;lt;br&amp;gt;&lt;br/&gt;
+	 *&amp;lt;/pre&amp;gt;&lt;br/&gt;
+	 */&lt;br/&gt;
+	public void setLabelMap(HashMap labelMap) &lt;/p&gt;
{
+		this.labelMap = labelMap;
+	}
&lt;p&gt;+	&lt;br/&gt;
+	/**&lt;br/&gt;
+	 * Set whether or not to allow the user to run methods in which none of the&lt;br/&gt;
+	 * incoming arguments are labeled.&amp;lt;p&amp;gt;&lt;br/&gt;
+	 * &amp;lt;p&amp;gt;&lt;br/&gt;
+	 * Default value: &amp;lt;b&amp;gt;true, users can run such methods.&amp;lt;/b&amp;gt;&lt;br/&gt;
+	 * @param allowAccessIfNoAttributesAreLabeled boolean&lt;br/&gt;
+	 */&lt;br/&gt;
+	public void setAllowAccessIfNoAttributesAreLabeled(&lt;br/&gt;
+			boolean allowAccessIfNoAttributesAreLabeled) &lt;/p&gt;
{
+		this.allowAccessIfNoAttributesAreLabeled = allowAccessIfNoAttributesAreLabeled;
+	}
&lt;p&gt;+&lt;br/&gt;
+	/**&lt;br/&gt;
+	 * This acl voter will only evaluate labeled methods if they are marked in the security&lt;br/&gt;
+	 * interceptor&apos;s configuration with the attribute stored in&lt;br/&gt;
+	 * attributeIndicatingLabeledOperation.&lt;br/&gt;
+	 * @see org.acegisecurity.vote.AbstractAclVoter&lt;br/&gt;
+	 * @see org.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor&lt;br/&gt;
+	 */&lt;br/&gt;
+	public boolean supports(ConfigAttribute attribute) {&lt;br/&gt;
+		if (attribute.getAttribute().equals(attributeIndicatingLabeledOperation)) &lt;/p&gt;
{
+			logger.debug(attribute + &quot; is supported.&quot;);
+			return true;
+		}
&lt;p&gt;+		logger.debug(attribute + &quot; is unsupported.&quot;);&lt;br/&gt;
+		return false;&lt;br/&gt;
+	}&lt;br/&gt;
+	&lt;br/&gt;
+	/**&lt;br/&gt;
+	 * Vote on whether or not the user has all the labels necessary to match&lt;br/&gt;
+	 * the method argument&apos;s labeled data.&lt;br/&gt;
+	 * @return ACCESS_ABSTAIN, ACCESS_GRANTED, or ACCESS_DENIED.&lt;br/&gt;
+	 */&lt;br/&gt;
+	public int vote(Authentication authentication, Object object,&lt;br/&gt;
+			ConfigAttributeDefinition config) {&lt;br/&gt;
+		int result = ACCESS_ABSTAIN;&lt;br/&gt;
+		&lt;br/&gt;
+		logger.debug(&quot;==========================================================&quot;);&lt;br/&gt;
+		&lt;br/&gt;
+		if (this.supports((ConfigAttribute)config.getConfigAttributes().next())) {&lt;br/&gt;
+			result = ACCESS_DENIED;&lt;br/&gt;
+			&lt;br/&gt;
+			/* Parse out the user&apos;s labels by examining the security context, and checking&lt;br/&gt;
+			 * for matches against the label map.&lt;br/&gt;
+			 */&lt;br/&gt;
+			List userLabels = new Vector();&lt;br/&gt;
+			&lt;br/&gt;
+			for (int i=0 ; i &amp;lt; authentication.getAuthorities().length ; i++) {&lt;br/&gt;
+				if (labelMap.containsKey(authentication.getAuthorities()&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.getAuthority())) &lt;/p&gt;
{
+					String userLabel = authentication.getAuthorities()[i].getAuthority();
+					userLabels.add(userLabel);
+					logger.debug(&quot;Adding &quot; + userLabel + &quot; to &amp;lt;&amp;lt;&amp;lt;&quot; + authentication.getName() + &quot;&apos;s&amp;gt;&amp;gt;&amp;gt; authorized label list&quot;);
+				}
&lt;p&gt;+			}&lt;br/&gt;
+			&lt;br/&gt;
+			MethodInvocation invocation = (MethodInvocation)object;&lt;br/&gt;
+			&lt;br/&gt;
+			int matches = 0;&lt;br/&gt;
+			int misses = 0;&lt;br/&gt;
+			int labeledArguments = 0;&lt;br/&gt;
+			&lt;br/&gt;
+			for (int j=0; j &amp;lt; invocation.getArguments().length ; j++) {&lt;br/&gt;
+				if (invocation.getArguments()&lt;span class=&quot;error&quot;&gt;&amp;#91;j&amp;#93;&lt;/span&gt; instanceof LabeledData) {&lt;br/&gt;
+					labeledArguments++;&lt;br/&gt;
+					boolean matched = false;&lt;br/&gt;
+					&lt;br/&gt;
+					String argumentDataLabel = ((LabeledData)invocation.getArguments()&lt;span class=&quot;error&quot;&gt;&amp;#91;j&amp;#93;&lt;/span&gt;).getLabel();&lt;br/&gt;
+					logger.debug(&quot;Argument[&quot; + j + &quot;/&quot; + invocation.getArguments()&lt;span class=&quot;error&quot;&gt;&amp;#91;j&amp;#93;&lt;/span&gt;.getClass().getName() + &quot;] has a data label of &quot; + argumentDataLabel);&lt;br/&gt;
+					&lt;br/&gt;
+					List validDataLabels = new Vector();&lt;br/&gt;
+					&lt;br/&gt;
+					for (int i=0 ; i &amp;lt; userLabels.size() ; i++) &lt;/p&gt;
{
+						validDataLabels.addAll((List)labelMap.get(userLabels.get(i)));
+					}
&lt;p&gt;+					logger.debug(&quot;The valid labels for user label &quot; + userLabels + &quot; are &quot; + validDataLabels);&lt;br/&gt;
+					&lt;br/&gt;
+					Iterator dataLabelIter = validDataLabels.iterator();&lt;br/&gt;
+					while (dataLabelIter.hasNext()) {&lt;br/&gt;
+						String validDataLabel = (String)dataLabelIter.next();&lt;br/&gt;
+						if (argumentDataLabel.equals(validDataLabel)) &lt;/p&gt;
{
+							logger.debug(userLabels + &quot; maps to &quot; + validDataLabel + &quot; which matches the argument&quot;);
+							matched = true;
+						}
&lt;p&gt;+					}&lt;br/&gt;
+					if (matched) &lt;/p&gt;
{
+						logger.debug(&quot;We have a match!&quot;);
+						matches++;
+					}
&lt;p&gt; else &lt;/p&gt;
{
+						logger.debug(&quot;We have a miss!&quot;);
+						misses++;
+					}
&lt;p&gt;+				} /* if arguments is an ILabel */&lt;br/&gt;
+			} /* loop through all arguments */&lt;br/&gt;
+			&lt;br/&gt;
+			Assert.isTrue(matches + misses == labeledArguments,&lt;br/&gt;
+					&quot;The matches (&quot; + matches + &quot;) and misses (&quot; + misses + &quot; ) don&apos;t add up (&quot; + labeledArguments + &quot;)&quot;);&lt;br/&gt;
+			&lt;br/&gt;
+			logger.debug(&quot;We have &quot; + matches + &quot; matches and &quot; + misses + &quot; misses and &quot; + labeledArguments + &quot; labeled arguments.&quot;);&lt;br/&gt;
+			&lt;br/&gt;
+			/* The result has already been set to ACCESS_DENIED. Only if there is a proper match of&lt;br/&gt;
+			 * labels will this be overturned. However, if none of the attributes are actually labeled,&lt;br/&gt;
+			 * the result is dependent on allowAccessIfNoAttributesAreLabeled.&lt;br/&gt;
+			 */&lt;br/&gt;
+			if (matches &amp;gt; 0 &amp;amp;&amp;amp; misses == 0) &lt;/p&gt;
{
+				result = ACCESS_GRANTED;
+			}
&lt;p&gt; else if (labeledArguments == 0) {&lt;br/&gt;
+				if (allowAccessIfNoAttributesAreLabeled) &lt;/p&gt;
{
+					result = ACCESS_GRANTED;
+				}
&lt;p&gt; else &lt;/p&gt;
{
+					result = ACCESS_DENIED;
+				}
&lt;p&gt;+			}&lt;br/&gt;
+			&lt;br/&gt;
+		}&lt;br/&gt;
+		if (logger.isDebugEnabled()) {&lt;br/&gt;
+			switch (result) &lt;/p&gt;
{
+				case ACCESS_GRANTED: logger.debug(&quot;===== Access is granted =====&quot;); break;
+				case ACCESS_DENIED:  logger.debug(&quot;===== Access is denied =====&quot;); break;
+				case ACCESS_ABSTAIN: logger.debug(&quot;===== Abstaining =====&quot;); break;
+			}
&lt;p&gt;+					&lt;br/&gt;
+		}&lt;br/&gt;
+		return result;&lt;br/&gt;
+	}&lt;br/&gt;
+	&lt;br/&gt;
+}&lt;/p&gt;</description>
                <environment>Ubuntu Linux (dapper drake)</environment>
        <key id="14986">SEC-352</key>
            <summary>Create a label-based ACL voter</summary>
                <type id="2" iconUrl="https://jira.spring.io/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="luke">Luke Taylor</assignee>
                                    <reporter username="gregturn">Greg Turnquist</reporter>
                        <labels>
                    </labels>
                <created>Sat, 16 Sep 2006 09:29:56 +0000</created>
                <updated>Sat, 6 Feb 2016 06:31:51 +0000</updated>
                            <resolved>Thu, 17 Jan 2008 21:22:25 +0000</resolved>
                                                    <fixVersion>2.0.0 M2</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="19684" author="gregturn" created="Sat, 16 Sep 2006 09:33:29 +0000"  >&lt;p&gt;I tried to attach the patch as a file, but can&apos;t seem to pull it off.&lt;/p&gt;</comment>
                            <comment id="29146" author="luke" created="Thu, 17 Jan 2008 21:22:25 +0000"  >&lt;p&gt;Appears to be a duplicate of &lt;a href=&quot;https://jira.spring.io/browse/SEC-354&quot; title=&quot;Create label-based ACL voter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SEC-354&quot;&gt;&lt;del&gt;SEC-354&lt;/del&gt;&lt;/a&gt; which was committed over a year ago.&lt;/p&gt;</comment>
                            <comment id="126319" author="issuemaster" created="Sat, 6 Feb 2016 06:31:51 +0000"  >&lt;p&gt;This issue has been migrated to &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/613&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-security/issues/613&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 17 Jan 2008 21:22:25 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20485</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04mcf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>26994</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21643</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>