<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Fri Dec 23 10:50:47 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SEC-423/SEC-423.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SEC-423] CLONE -SEC 356 Introduces New Bug: Changes to Authentication leak into synchronous requests when using HttpSessionContextIntegrationFilter</title>
                <link>https://jira.spring.io/browse/SEC-423</link>
                <project id="10040" key="SEC">Spring Security</project>
                    <description>&lt;p&gt;HttpSessionContextIntegrationFilter will read an existing SecurityContext object from the session and attach it to the Http request thread by calling: SecurityContextHolder#setContext. This means that simultaneous requests get the same SecurityContext object. If one of those threads changes the authentication attached to the context (for example, to enable some &quot;Run As&quot; functionality such as in org.acegisecurity.intercept.AbstractSecurityInterceptor) that authentication will be seen to change in all the request threads and may enable those threads to be able to gain access that they shouldn&apos;t have.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="15826">SEC-423</key>
            <summary>CLONE -SEC 356 Introduces New Bug: Changes to Authentication leak into synchronous requests when using HttpSessionContextIntegrationFilter</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://jira.spring.io/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="vishal.puri">Vishal Puri</assignee>
                                    <reporter username="ckokotsis">Christos Kokotsis</reporter>
                        <labels>
                    </labels>
                <created>Thu, 4 Jan 2007 01:40:23 +0000</created>
                <updated>Sat, 6 Feb 2016 06:32:32 +0000</updated>
                            <resolved>Thu, 24 May 2007 12:54:29 +0000</resolved>
                                    <version>1.0.1</version>
                    <version>1.0.2</version>
                    <version>1.0.3</version>
                                    <fixVersion>1.0.4</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="21612" author="ckokotsis" created="Thu, 4 Jan 2007 01:57:39 +0000"  >&lt;p&gt;The assertion of the contextFromHttpSession is cloneable throws an illegal argument exception where the cloneable context object is null.&lt;/p&gt;

&lt;p&gt;Moving the fix to after the contextFromSessionObject != null check will resolve this issue. &lt;/p&gt;

&lt;p&gt;Here is a working doFilter method with the fixed applied:&lt;/p&gt;


&lt;p&gt;   public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)&lt;br/&gt;
       throws IOException, ServletException {&lt;br/&gt;
       if ((request != null) &amp;amp;&amp;amp; (request.getAttribute(FILTER_APPLIED) != null)) &lt;/p&gt;
{
           // ensure that filter is only applied once per request
           chain.doFilter(request, response);
       }
&lt;p&gt; else {&lt;br/&gt;
           if (request != null) &lt;/p&gt;
{
               request.setAttribute(FILTER_APPLIED, Boolean.TRUE);
           }

&lt;p&gt;           HttpSession httpSession = null;&lt;br/&gt;
           boolean httpSessionExistedAtStartOfRequest = false;&lt;/p&gt;

&lt;p&gt;           try &lt;/p&gt;
{
               httpSession = ((HttpServletRequest) request).getSession(forceEagerSessionCreation);
           }
&lt;p&gt; catch (IllegalStateException ignored) {}&lt;/p&gt;

&lt;p&gt;           if (httpSession != null) {&lt;br/&gt;
               httpSessionExistedAtStartOfRequest = true;&lt;/p&gt;

&lt;p&gt;               Object contextFromSessionObject = httpSession.getAttribute(ACEGI_SECURITY_CONTEXT_KEY);&lt;/p&gt;

&lt;p&gt;               if (contextFromSessionObject != null) {&lt;br/&gt;
            	   // move of cloning codeto after check for null (see &lt;a href=&quot;https://jira.spring.io/browse/SEC-423&quot; title=&quot;CLONE -SEC 356 Introduces New Bug: Changes to Authentication leak into synchronous requests when using HttpSessionContextIntegrationFilter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SEC-423&quot;&gt;&lt;del&gt;SEC-423&lt;/del&gt;&lt;/a&gt;) &lt;br/&gt;
                   // Clone if required (see &lt;a href=&quot;https://jira.spring.io/browse/SEC-356&quot; title=&quot;Changes to Authentication leak into synchronous requests when using HttpSessionContextIntegrationFilter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SEC-356&quot;&gt;&lt;del&gt;SEC-356&lt;/del&gt;&lt;/a&gt;)&lt;br/&gt;
                   if (cloneFromHttpSession) {&lt;br/&gt;
                   	Assert.isInstanceOf(Cloneable.class, contextFromSessionObject, &quot;Context must implement Clonable and provide a Object.clone() method&quot;);&lt;br/&gt;
                   	try {&lt;br/&gt;
                   		Method m = contextFromSessionObject.getClass().getMethod(&quot;clone&quot;, new Class[] {});&lt;br/&gt;
                   		if (!m.isAccessible()) &lt;/p&gt;
{
                       		m.setAccessible(true);
                   		}
&lt;p&gt;                   		contextFromSessionObject = m.invoke(contextFromSessionObject, new Object[] {});&lt;br/&gt;
                   	} catch (Exception ex) &lt;/p&gt;
{
                   		ReflectionUtils.handleReflectionException(ex);
                   	}
&lt;p&gt;                   }&lt;/p&gt;

&lt;p&gt;                   if (contextFromSessionObject instanceof SecurityContext) {&lt;br/&gt;
                       if (logger.isDebugEnabled()) &lt;/p&gt;
{
                           logger.debug(
                               &quot;Obtained from ACEGI_SECURITY_CONTEXT a valid SecurityContext and set to SecurityContextHolder: &apos;&quot;
                               + contextFromSessionObject + &quot;&apos;&quot;);
                       }

&lt;p&gt;                       SecurityContextHolder.setContext((SecurityContext) contextFromSessionObject);&lt;br/&gt;
                   } else {&lt;br/&gt;
                       if (logger.isWarnEnabled()) &lt;/p&gt;
{
                           logger.warn(&quot;ACEGI_SECURITY_CONTEXT did not contain a SecurityContext but contained: &apos;&quot;
                               + contextFromSessionObject
                               + &quot;&apos;; are you improperly modifying the HttpSession directly (you should always use SecurityContextHolder) or using the HttpSession attribute reserved for this class? - new SecurityContext instance associated with SecurityContextHolder&quot;);
                       }

&lt;p&gt;                       SecurityContextHolder.setContext(generateNewContext());&lt;br/&gt;
                   }&lt;br/&gt;
               } else {&lt;br/&gt;
                   if (logger.isDebugEnabled()) &lt;/p&gt;
{
                       logger.debug(
                           &quot;HttpSession returned null object for ACEGI_SECURITY_CONTEXT - new SecurityContext instance associated with SecurityContextHolder&quot;);
                   }

&lt;p&gt;                   SecurityContextHolder.setContext(generateNewContext());&lt;br/&gt;
               }&lt;br/&gt;
           } else {&lt;br/&gt;
               if (logger.isDebugEnabled()) &lt;/p&gt;
{
                   logger.debug(
                       &quot;No HttpSession currently exists - new SecurityContext instance associated with SecurityContextHolder&quot;);
               }

&lt;p&gt;               SecurityContextHolder.setContext(generateNewContext());&lt;br/&gt;
           }&lt;/p&gt;

&lt;p&gt;           // Make the HttpSession null, as we want to ensure we don&apos;t keep&lt;br/&gt;
           // a reference to the HttpSession laying around in case the&lt;br/&gt;
           // chain.doFilter() invalidates it.&lt;br/&gt;
           httpSession = null;&lt;/p&gt;

&lt;p&gt;           // Proceed with chain&lt;br/&gt;
           int contextWhenChainProceeded = SecurityContextHolder.getContext().hashCode();&lt;/p&gt;

&lt;p&gt;           try &lt;/p&gt;
{
               chain.doFilter(request, response);
           }
&lt;p&gt; catch (IOException ioe) &lt;/p&gt;
{
               throw ioe;
           }
&lt;p&gt; catch (ServletException se) &lt;/p&gt;
{
               throw se;
           }
&lt;p&gt; finally {&lt;br/&gt;
               // do clean up, even if there was an exception&lt;br/&gt;
               // Store context back to HttpSession&lt;br/&gt;
               try &lt;/p&gt;
{
                   httpSession = ((HttpServletRequest) request).getSession(false);
               }
&lt;p&gt; catch (IllegalStateException ignored) {}&lt;/p&gt;

&lt;p&gt;               if ((httpSession == null) &amp;amp;&amp;amp; httpSessionExistedAtStartOfRequest) {&lt;br/&gt;
                   if (logger.isDebugEnabled()) &lt;/p&gt;
{
                       logger.debug(
                           &quot;HttpSession is now null, but was not null at start of request; session was invalidated, so do not create a new session&quot;);
                   }
&lt;p&gt;               }&lt;/p&gt;

&lt;p&gt;               // Generate a HttpSession only if we need to&lt;br/&gt;
               if ((httpSession == null) &amp;amp;&amp;amp; !httpSessionExistedAtStartOfRequest) {&lt;br/&gt;
                   if (!allowSessionCreation) {&lt;br/&gt;
                       if (logger.isDebugEnabled()) &lt;/p&gt;
{
                           logger.debug(
                               &quot;The HttpSession is currently null, and the HttpSessionContextIntegrationFilter is prohibited from creating a HttpSession (because the allowSessionCreation property is false) - SecurityContext thus not stored for next request&quot;);
                       }
&lt;p&gt;                   } else if (!contextObject.equals(SecurityContextHolder.getContext())) {&lt;br/&gt;
                       if (logger.isDebugEnabled()) &lt;/p&gt;
{
                           logger.debug(&quot;HttpSession being created as SecurityContextHolder contents are non-default&quot;);
                       }

&lt;p&gt;                       try &lt;/p&gt;
{
                           httpSession = ((HttpServletRequest) request).getSession(true);
                       }
&lt;p&gt; catch (IllegalStateException ignored) {}&lt;br/&gt;
                   } else {&lt;br/&gt;
                       if (logger.isDebugEnabled()) &lt;/p&gt;
{
                           logger.debug(
                               &quot;HttpSession is null, but SecurityContextHolder has not changed from default: &apos; &quot;
                               + SecurityContextHolder.getContext()
                               + &quot;&apos;; not creating HttpSession or storing SecurityContextHolder contents&quot;);
                       }
&lt;p&gt;                   }&lt;br/&gt;
               }&lt;/p&gt;

&lt;p&gt;               // If HttpSession exists, store current SecurityContextHolder&lt;br/&gt;
               // contents&lt;br/&gt;
               // but only if SecurityContext has actually changed (see JIRA&lt;br/&gt;
               // &lt;a href=&quot;https://jira.spring.io/browse/SEC-37&quot; title=&quot;HttpSessionContextIntegrationFilter concurrent request handling&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SEC-37&quot;&gt;&lt;del&gt;SEC-37&lt;/del&gt;&lt;/a&gt;)&lt;br/&gt;
               if ((httpSession != null)&lt;br/&gt;
                   &amp;amp;&amp;amp; (SecurityContextHolder.getContext().hashCode() != contextWhenChainProceeded)) {&lt;br/&gt;
                   httpSession.setAttribute(ACEGI_SECURITY_CONTEXT_KEY, SecurityContextHolder.getContext());&lt;/p&gt;

&lt;p&gt;                   if (logger.isDebugEnabled()) &lt;/p&gt;
{
                       logger.debug(&quot;SecurityContext stored to HttpSession: &apos;&quot; + SecurityContextHolder.getContext()
                           + &quot;&apos;&quot;);
                   }
&lt;p&gt;               }&lt;/p&gt;

&lt;p&gt;               // Remove SecurityContextHolder contents&lt;br/&gt;
               SecurityContextHolder.clearContext();&lt;/p&gt;

&lt;p&gt;               if (logger.isDebugEnabled()) &lt;/p&gt;
{
                   logger.debug(&quot;SecurityContextHolder set to new context, as request processing completed&quot;);
               }
&lt;p&gt;           }&lt;br/&gt;
       }&lt;br/&gt;
   }&lt;/p&gt;


</comment>
                            <comment id="23451" author="vishal.puri" created="Thu, 26 Apr 2007 18:31:45 +0000"  >&lt;p&gt;Reasonable fix. I have made a change and closed the issue.&lt;/p&gt;</comment>
                            <comment id="126398" author="issuemaster" created="Sat, 6 Feb 2016 06:32:32 +0000"  >&lt;p&gt;This issue has been migrated to &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/684&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-security/issues/684&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="16490">SEC-461</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 26 Apr 2007 18:31:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20418</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i010af:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5924</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7080</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>