<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Fri Dec 23 11:33:38 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SEC-1532/SEC-1532.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SEC-1532] ProtectPointcutPostProcessor should not re-attempt to match the pointcuts against methods when used with prototype beans</title>
                <link>https://jira.spring.io/browse/SEC-1532</link>
                <project id="10040" key="SEC">Spring Security</project>
                    <description>&lt;p&gt;In our web application we use spring security combining url security as well as method security using XML configuration only.&lt;/p&gt;

&lt;p&gt;The webapp is being deployed on a stock Tomcat 6.0.29 using JDK6.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;URL-security is configured using &amp;lt;sec:intercept-url /&amp;gt; tags only.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Method-security is configured using &amp;lt;sec:protect-pointcut /&amp;gt; tags only referencing a central Pointcuts-class. The pointcut class implements dummy methods being referenced in the method security XML configuration. The reason for doing so is to have descriptive names for the pointcut expressions. The pointcut expressions are being configured using @Pointcut annotations.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The URL- and method-security XML configuration files are seperate. We don&apos;t use any annotation based security configuration. We recognized a very slow bootstrap performance as well as a &lt;em&gt;very&lt;/em&gt; poor runtime performance being caused by spring security. When disabling method-security performance is as expected.&lt;/p&gt;

&lt;p&gt;The performance difference at bootstrap is about 30 sec with method-security enabled and about 6 sec with method-security disabled.&lt;/p&gt;

&lt;p&gt;During runtime opening pages takes a couple seconds when method-security is enabled and only a fraction of a second with method-security disabled.&lt;/p&gt;

&lt;p&gt;The performance difference is so huge and evident that we did not even make concrete performance measurements in order to quantize the difference.&lt;/p&gt;

&lt;p&gt;During bootstrap we made random thread dumps recognizing the same pattern over and over where the main-Threads is stuck:&lt;/p&gt;

&lt;p&gt;&quot;main&quot; prio=10 tid=0x080e1800 nid=0xbcc waiting on condition &lt;span class=&quot;error&quot;&gt;&amp;#91;0xb73e6000&amp;#93;&lt;/span&gt;&lt;br/&gt;
   java.lang.Thread.State: RUNNABLE&lt;br/&gt;
        at java.net.URLClassLoader.findClass(URLClassLoader.java:190)&lt;br/&gt;
        at java.lang.ClassLoader.loadClass(ClassLoader.java:307)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;locked &amp;lt;0xa4000500&amp;gt; (a sun.misc.Launcher$AppClassLoader)&lt;br/&gt;
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0xa4000500&amp;gt; (a sun.misc.Launcher$AppClassLoader)&lt;br/&gt;
        at java.lang.ClassLoader.loadClass(ClassLoader.java:248)&lt;br/&gt;
        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1560)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0xa4149438&amp;gt; (a org.apache.catalina.loader.WebappClassLoader)&lt;br/&gt;
        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1491)&lt;br/&gt;
        at java.lang.Class.forName0(Native Method)&lt;br/&gt;
        at java.lang.Class.forName(Class.java:247)&lt;br/&gt;
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)&lt;br/&gt;
        at org.aspectj.weaver.reflect.ReflectionWorld.resolveDelegate(ReflectionWorld.java:111)&lt;br/&gt;
        at org.aspectj.weaver.World.resolveToReferenceType(World.java:388)&lt;br/&gt;
        at org.aspectj.weaver.World.resolve(World.java:279)&lt;br/&gt;
        at org.aspectj.weaver.patterns.SimpleScope.lookupType(SimpleScope.java:57)&lt;br/&gt;
        at org.aspectj.weaver.bcel.AtAjAttributes$BindingScope.lookupType(AtAjAttributes.java:1680)&lt;br/&gt;
        at org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInScope(WildTypePattern.java:716)&lt;br/&gt;
        at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFromFullyQualifiedTypeName(WildTypePattern.java:703)&lt;br/&gt;
        at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings(WildTypePattern.java:631)&lt;br/&gt;
        at org.aspectj.weaver.patterns.TypePattern.resolveExactType(TypePattern.java:194)&lt;br/&gt;
        at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings(ReferencePointcut.java:131)&lt;br/&gt;
        at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:196)&lt;br/&gt;
        at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression(PointcutParser.java:332)&lt;br/&gt;
        at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:310)&lt;br/&gt;
        at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:288)&lt;br/&gt;
        at org.springframework.security.intercept.method.ProtectPointcutPostProcessor.postProcessBeforeInitialization(ProtectPointcutPostProcessor.java:103)&lt;br/&gt;
        ...&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;During runtime load we also made thread dumps randomly recognized the same pattern where the request threads are being stuck. During runtime we have another problem that other http request are being blocked. This is a production no-go.&lt;/p&gt;

&lt;p&gt;The blocking thread:&lt;/p&gt;

&lt;p&gt;&quot;http-8120-6&quot; daemon prio=10 tid=0x08e1a000 nid=0x7912 waiting on condition &lt;span class=&quot;error&quot;&gt;&amp;#91;0x9a8ff000&amp;#93;&lt;/span&gt;&lt;br/&gt;
   java.lang.Thread.State: RUNNABLE&lt;br/&gt;
        at java.lang.ClassLoader.loadClass(ClassLoader.java:307)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;locked &amp;lt;0xa3fab6c0&amp;gt; (a sun.misc.Launcher$ExtClassLoader)&lt;br/&gt;
        at java.lang.ClassLoader.loadClass(ClassLoader.java:296)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0xa3fab678&amp;gt; (a sun.misc.Launcher$AppClassLoader)&lt;br/&gt;
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0xa3fab678&amp;gt; (a sun.misc.Launcher$AppClassLoader)&lt;br/&gt;
        at java.lang.ClassLoader.loadClass(ClassLoader.java:248)&lt;br/&gt;
        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1560)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0xa40cf610&amp;gt; (a org.apache.catalina.loader.WebappClassLoader)&lt;br/&gt;
        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1491)&lt;br/&gt;
        at java.lang.Class.forName0(Native Method)&lt;br/&gt;
        at java.lang.Class.forName(Class.java:247)&lt;br/&gt;
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)&lt;br/&gt;
        at org.aspectj.weaver.reflect.ReflectionWorld.resolveDelegate(ReflectionWorld.java:111)&lt;br/&gt;
        at org.aspectj.weaver.World.resolveToReferenceType(World.java:388)&lt;br/&gt;
        at org.aspectj.weaver.World.resolve(World.java:279)&lt;br/&gt;
        at org.aspectj.weaver.patterns.SimpleScope.lookupType(SimpleScope.java:57)&lt;br/&gt;
        at org.aspectj.weaver.bcel.AtAjAttributes$BindingScope.lookupType(AtAjAttributes.java:1680)&lt;br/&gt;
        at org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInScope(WildTypePattern.java:716)&lt;br/&gt;
        at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFromFullyQualifiedTypeName(WildTypePattern.java:703)&lt;br/&gt;
        at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings(WildTypePattern.java:631)&lt;br/&gt;
        at org.aspectj.weaver.patterns.TypePattern.resolveExactType(TypePattern.java:194)&lt;br/&gt;
        at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings(ReferencePointcut.java:131)&lt;br/&gt;
        at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:196)&lt;br/&gt;
        at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression(PointcutParser.java:332)&lt;br/&gt;
        at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:310)&lt;br/&gt;
        at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:288)&lt;br/&gt;
        at org.springframework.security.intercept.method.ProtectPointcutPostProcessor.postProcessBeforeInitialization(ProtectPointcutPostProcessor.java:103)&lt;br/&gt;
        ...&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The blocked threads:&lt;/p&gt;

&lt;p&gt;&quot;http-8120-5&quot; daemon prio=10 tid=0x08e74c00 nid=0x7910 waiting for monitor entry &lt;span class=&quot;error&quot;&gt;&amp;#91;0x9a950000&amp;#93;&lt;/span&gt;&lt;br/&gt;
   java.lang.Thread.State: BLOCKED (on object monitor)&lt;br/&gt;
        at java.lang.Class.forName0(Native Method)&lt;br/&gt;
        at java.lang.Class.forName(Class.java:247)&lt;br/&gt;
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)&lt;br/&gt;
        at org.aspectj.weaver.reflect.ReflectionWorld.resolveDelegate(ReflectionWorld.java:111)&lt;br/&gt;
        ...&lt;/p&gt;

&lt;p&gt;&quot;http-8120-4&quot; daemon prio=10 tid=0x08e73000 nid=0x790f waiting for monitor entry &lt;span class=&quot;error&quot;&gt;&amp;#91;0x9a9a1000&amp;#93;&lt;/span&gt;&lt;br/&gt;
   java.lang.Thread.State: BLOCKED (on object monitor)&lt;br/&gt;
        at java.lang.Class.forName0(Native Method)&lt;br/&gt;
        at java.lang.Class.forName(Class.java:247)&lt;br/&gt;
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)&lt;br/&gt;
        ...&lt;/p&gt;

&lt;p&gt;&quot;http-8120-3&quot; daemon prio=10 tid=0x09325000 nid=0x790e waiting for monitor entry &lt;span class=&quot;error&quot;&gt;&amp;#91;0x9a9f2000&amp;#93;&lt;/span&gt;&lt;br/&gt;
   java.lang.Thread.State: BLOCKED (on object monitor)&lt;br/&gt;
        at java.lang.Class.forName0(Native Method)&lt;br/&gt;
        at java.lang.Class.forName(Class.java:247)&lt;br/&gt;
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)&lt;br/&gt;
        ...&lt;/p&gt;

&lt;p&gt;&quot;http-8120-1&quot; daemon prio=10 tid=0x093d8400 nid=0x3f18 waiting for monitor entry &lt;span class=&quot;error&quot;&gt;&amp;#91;0x9af95000&amp;#93;&lt;/span&gt;&lt;br/&gt;
   java.lang.Thread.State: BLOCKED (on object monitor)&lt;br/&gt;
        at java.lang.Class.forName0(Native Method)&lt;br/&gt;
        at java.lang.Class.forName(Class.java:247)&lt;br/&gt;
        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:40)&lt;br/&gt;
        ...&lt;/p&gt;

&lt;p&gt;Please find attached a source code and configuration sample.&lt;/p&gt;

&lt;p&gt;We found a couple places on the forums where the problem is being recognized but so far we did not find any JIRA issue.&lt;/p&gt;

&lt;p&gt;Our current planned resolution is to avoid pointcut expressions for method-security at all. Instead we will use either annotations or the intercept-methods bean decorator and hope that performance increases. It would be nice though to use pointcut expressions.&lt;/p&gt;</description>
                <environment>JVM: reproducable on Windows XP using jdk1.6.0_13 and on Linux (2.6.18) using Server VM (build 16.3-b01, mixed mode) on a Tomcat: 6.0.29.  Spring Version is 2.5.6</environment>
        <key id="32601">SEC-1532</key>
            <summary>ProtectPointcutPostProcessor should not re-attempt to match the pointcuts against methods when used with prototype beans</summary>
                <type id="7" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Defect</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="8">Complete</resolution>
                                        <assignee username="luke">Luke Taylor</assignee>
                                    <reporter username="sergiusz">Sergiusz Urbaniak</reporter>
                        <labels>
                    </labels>
                <created>Fri, 6 Aug 2010 06:28:52 +0000</created>
                <updated>Sat, 6 Feb 2016 06:15:04 +0000</updated>
                            <resolved>Wed, 11 Aug 2010 10:34:45 +0000</resolved>
                                    <version>2.0.5</version>
                                    <fixVersion>3.1.0.M1</fixVersion>
                    <fixVersion>3.0.4</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="56561" author="sergiusz" created="Mon, 9 Aug 2010 04:37:02 +0000"  >&lt;p&gt;Another comment:&lt;/p&gt;

&lt;p&gt;The ProtectPointcutPostProcessor calls &quot;PointcutExpression expression = parser.parsePointcutExpression(ex);&quot; (in line 103) which is pretty expensive since the whole classpath is being scanned.&lt;/p&gt;

&lt;p&gt;This is &quot;not a big problem&quot; as long as you have singleton beans only in your context. Then only during bootstrap each bean is being scanned for pointcut matches.&lt;/p&gt;

&lt;p&gt;Once you have prototype scoped beans (as we do) then you also have a problem at runtime. The ProtectPointcutPostProcessor then calls the expensive parsePointcutExpression method also at each instantiation of a prototype scoped bean. In our case this happens at every http request.&lt;/p&gt;</comment>
                            <comment id="56566" author="luke" created="Mon, 9 Aug 2010 07:08:39 +0000"  >&lt;p&gt;The pointcut matching takes place in a BeanPostProcessor which is applied to each bean on startup, so the startup time hit is to be expected and not much can be done about it. The same behaviour is responsible for the runtime hit, because if you are using prototypes, Spring will re-invoke each BeanPostProcessor on the bean instance. It was not really originally envisaged that people would use the pointcut matching other than with singleton beans. The best we can really do is to add some sort of cache based on bean name to the PostProcessor so that it does not re-evaluate the pointcut each time. But you are better to use native AspectJ if you want to be as efficient as possible and still use pointcuts.&lt;/p&gt;</comment>
                            <comment id="56582" author="luke" created="Mon, 9 Aug 2010 17:36:59 +0000"  >&lt;p&gt;Changing the title to reflect that the runtime issue is the main concern (when used with prototype beans). We can&apos;t avoid the overhead of parsing the pointcuts initially, but they are already cached and the runtime overhead is due to matching against the methods. The overhead will increase with the number of pointcuts used and the number of methods in the prototype bean.&lt;/p&gt;</comment>
                            <comment id="56583" author="luke" created="Mon, 9 Aug 2010 17:43:52 +0000"  >&lt;p&gt;I&apos;ve added a simple bean name cache to ProtectPointcutPostProcessor. If it has already done its work for a particular bean name, it will do nothing. Since the pointcut matching is purely a function of the class and method information, the security metadata should be the same each time the bean is retrieved from the bean factory.&lt;/p&gt;</comment>
                            <comment id="56588" author="sergiusz" created="Mon, 9 Aug 2010 23:39:07 +0000"  >&lt;p&gt;Great, thanks for the quick reaction! A cache implementation was our first idea too.&lt;/p&gt;

&lt;p&gt;May I request a backport merge into 2.0.5? We&apos;ll patch our version in order to reduce refactoring efforts.&lt;/p&gt;</comment>
                            <comment id="56656" author="luke" created="Wed, 11 Aug 2010 10:34:45 +0000"  >&lt;p&gt;The commit has been applied to the 3.0.x branch and master. The 2.0.x branch is no longer under active development, but if you want to reformat the changes as a patch for it I&apos;ll certainly apply it.&lt;/p&gt;</comment>
                            <comment id="56800" author="sergiusz" created="Tue, 17 Aug 2010 06:26:09 +0000"  >&lt;p&gt;Based on the official git repo I locally checked out the &quot;2.0.5.RELEASE tag&quot; and created the attached git.patch on a local branch using &quot;git format-patch&quot;. The changed source file for the ProtectPointcutProcessor.java is attached too.&lt;/p&gt;

&lt;p&gt;A &quot;mvn compile&quot; and &quot;mvn test&quot; on the root source directory resulted in a successfull build.&lt;/p&gt;</comment>
                            <comment id="57195" author="luke" created="Thu, 26 Aug 2010 06:13:43 +0000"  >&lt;p&gt;Thanks. I&apos;ve applied the patch to the 2.0.x branch too.&lt;/p&gt;</comment>
                            <comment id="124457" author="issuemaster" created="Sat, 6 Feb 2016 06:15:04 +0000"  >&lt;p&gt;This issue has been migrated to &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/1773&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-security/issues/1773&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="17009" name="ProtectPointcutPostProcessor.java" size="7579" author="sergiusz" created="Tue, 17 Aug 2010 06:21:16 +0000"/>
                            <attachment id="17008" name="git.patch" size="2059" author="sergiusz" created="Tue, 17 Aug 2010 06:19:37 +0000"/>
                            <attachment id="16969" name="source.zip" size="1880" author="sergiusz" created="Fri, 6 Aug 2010 06:28:52 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 9 Aug 2010 07:08:39 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>19445</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i025zj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12679</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12488</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10120" key="com.atlassian.jira.plugin.system.customfieldtypes:url">
                        <customfieldname>Reference URL</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[http://forum.springsource.org/showthread.php?t=81277]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>