<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Fri Dec 23 11:08:08 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SEC-2005/SEC-2005.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SEC-2005] SecurityContext should be persisted immediately when the response is committed</title>
                <link>https://jira.spring.io/browse/SEC-2005</link>
                <project id="10040" key="SEC">Spring Security</project>
                    <description>&lt;h1&gt;&lt;a name=&quot;Summaryoffindings&quot;&gt;&lt;/a&gt;Summary of findings&lt;/h1&gt;

&lt;p&gt;Spring Security should persist the SecurityContext immediately if any of the following methods are invoked since they commit the response and can hand control back to the client immediately. This is similar to &lt;a href=&quot;https://jira.spring.io/browse/SEC-398&quot; title=&quot;HttpSessionContextIntegrationFilter/AuthenticationProcessingFilter thread concurrency issue&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SEC-398&quot;&gt;&lt;del&gt;SEC-398&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;HttpServletResponse.flushBuffer()&lt;/li&gt;
	&lt;li&gt;HttpServletResponse.getWriter().close()&lt;/li&gt;
	&lt;li&gt;HttpServletResponse.getWriter().flush()&lt;/li&gt;
	&lt;li&gt;HttpServletRespose.getOutputStream().close()&lt;/li&gt;
	&lt;li&gt;HttpServletRespose.getOutputStream().flush()&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;&lt;a name=&quot;Originaldescription&quot;&gt;&lt;/a&gt;Original description&lt;/h1&gt;

&lt;p&gt;During stress/loadtesting of our web application we are experiencing some severe-error issues regarding the freshness of a spring-security security context.&lt;/p&gt;

&lt;p&gt;The referenced forum post contains a bit more detail but here is a summary.&lt;/p&gt;

&lt;p&gt;A single loadtest client (during high tomcat-7/server load) can execute a &quot;login&quot; establishing a security context and a subsequent API call requiring a security context will fail.  The loadtest client (grinder/jython single threaded (per client)) uses a CommonsHttpInvokerRequestExecutor sending and receiving hessian content over a &quot;typical&quot; http request/response.&lt;/p&gt;

&lt;p&gt;The login request is handled by our login service bean which establishes a spring security context.  That security context is persisted in spring-security scope in a &quot;finally&quot; block of SecurityContextPersistenceFilter.doFilter.  &lt;/p&gt;

&lt;p&gt;However, the underlying components (take your pick here... tomcat-7 Connector thread, java input/output streams, etc...) have sent the http response content-length number of bytes across the wire and therefore completed the HTTP request and response pair.&lt;/p&gt;

&lt;p&gt;The completion of the HTTP request is realized by the loadtest client (and any client I suppose) and moves on to the next HTTP request expecting the proper cookie handling and security context to be applied to the next request.  &lt;/p&gt;

&lt;p&gt;This next HTTP request is accepted by the appserver and processed by spring and further spring-security &lt;b&gt;before&lt;/b&gt; the finally block on the previous request has executed.  Therefore the spring security context is &lt;b&gt;not&lt;/b&gt; available in this subsequent request.  &lt;/p&gt;

&lt;p&gt;If I place a client-side delay (100ms or so), that is typically enough time to ensure that the complete spring stack has executed and the spring security context is valid.&lt;/p&gt;

&lt;p&gt;We also have this semantically similar issue during &quot;logout&quot;.  Prior to logout, we make a call to our server that requires a security context (the last API call of our loadtest workflow).  This call appears &quot;complete&quot; to our clients because the http reqeust/response is complete.  So we continue our loadtest workflow sending a &quot;logout&quot; command.  This clears the spring security context &lt;b&gt;before&lt;/b&gt; the finally block of the previous call has executed therefore the completion of the previous request throws an exception because the session is invalid.&lt;/p&gt;

&lt;p&gt;Once again, if we place a 100ms delay prior to the logout, no race condition occurs and things work as expected.&lt;/p&gt;</description>
                <environment>linux tomcat-7 container with springframework 3.1.1.  http &amp;quot;clients&amp;quot; are also linux boxes.</environment>
        <key id="44508">SEC-2005</key>
            <summary>SecurityContext should be persisted immediately when the response is committed</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rwinch">Rob Winch</assignee>
                                    <reporter username="bradrust">Brad Rust</reporter>
                        <labels>
                    </labels>
                <created>Fri, 13 Jul 2012 13:50:16 +0000</created>
                <updated>Sat, 6 Feb 2016 06:20:02 +0000</updated>
                            <resolved>Tue, 7 Aug 2012 15:08:57 +0000</resolved>
                                    <version>3.0.7</version>
                    <version>3.1.1</version>
                                    <fixVersion>3.0.8</fixVersion>
                    <fixVersion>3.1.2</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="82117" author="rwinch" created="Mon, 30 Jul 2012 18:57:17 +0000"  >&lt;p&gt;The bug states this is within Spring Security 3.1.1 (that is the version selected), but the forums state it is Spring Security 3.0.6. Can you clarify which it is? If you have not tried, can you please try to reproduce with Spring Security 3.1.1?&lt;/p&gt;

&lt;p&gt;I have some ideas on what might be causing this and will take a look in the up coming days to asses if this will be in our 3.1.2 release (depends on how much luck I have figuring out what is happening). Any more details (i.e. a sample project) would be greatly appreciated and increase the chances of this getting into 3.1.2.&lt;/p&gt;</comment>
                            <comment id="82189" author="rwinch" created="Thu, 2 Aug 2012 09:52:34 +0000"  >&lt;p&gt;My suspicion was correct that there may be a similar issue to &lt;a href=&quot;https://jira.spring.io/browse/SEC-398&quot; title=&quot;HttpSessionContextIntegrationFilter/AuthenticationProcessingFilter thread concurrency issue&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SEC-398&quot;&gt;&lt;del&gt;SEC-398&lt;/del&gt;&lt;/a&gt;. The problem is that closing or flushing the response commits the response which means control can be immediately returned to the client. Specifically I have identified that if any of the following is invoked then there is chance the response is returned to the client prior to the SecurityContextRepository being updated. This is because all of the following methods commit the response.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;HttpServletResponse.flushBuffer()&lt;/li&gt;
	&lt;li&gt;HttpServletResponse.getWriter().close()&lt;/li&gt;
	&lt;li&gt;HttpServletResponse.getWriter().flush()&lt;/li&gt;
	&lt;li&gt;HttpServletRespose.getOutputStream().close()&lt;/li&gt;
	&lt;li&gt;HttpServletRespose.getOutputStream().flush()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I have been able to confirm the issue exists when using Tomcat 7 when either of the following are invoked:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;HttpServletResonse.getWriter().close()&lt;/li&gt;
	&lt;li&gt;HttpServletRespose.getOutputStream().close()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Do you think this might be your issue? Are you invoking flush or close? Either way we will need a fix for the issue I discovered, but I would like to ensure this resolves your issue.&lt;/p&gt;</comment>
                            <comment id="82199" author="rwinch" created="Thu, 2 Aug 2012 15:33:08 +0000"  >&lt;p&gt;FYI I have temporarily pushed a solution out to my clone. If you would like to try it to see if it fixes things for you here are the links:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;3.1.x code (package with &quot;./gradlew build&quot;) &lt;a href=&quot;https://github.com/rwinch/spring-security/tree/SEC-2005&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/rwinch/spring-security/tree/SEC-2005&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;3.0.x code (package with mvn package using mvn 2) &lt;a href=&quot;https://github.com/rwinch/spring-security/tree/SEC-2005-3.0.x&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/rwinch/spring-security/tree/SEC-2005-3.0.x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="82341" author="bradrust" created="Tue, 7 Aug 2012 09:42:22 +0000"  >&lt;p&gt;I was seeing this race condition with 3.0.x and 3.1.x code.&lt;/p&gt;

&lt;p&gt;Thank you for providing a method of testing this code.  I downloaded the 3.1.x branch and compiled it (although I had to add commons-codec:commons-codec:1.5 to buildSrc/build.gradle to compile without a dependency issue not resolving commons-codec:1.3).&lt;/p&gt;

&lt;p&gt;I know it&apos;s not deterministic but I consistently receive failures with the old jars (spring-security-3.1.1 and I have yet to see a failure with new 3.1.2-CI jars that I have compiled.&lt;/p&gt;

&lt;p&gt;I am not invoking a flush or close; in my code at least.  The http request/response cycle is being handled by the hessian servlet.&lt;/p&gt;</comment>
                            <comment id="82343" author="bradrust" created="Tue, 7 Aug 2012 10:11:55 +0000"  >&lt;p&gt;I added a comment to Jira.  Didn&apos;t realize that the more optimal workflow would be to select the &quot;provide feedback for developer&quot;.&lt;/p&gt;

&lt;p&gt;Anyway, your fixes appear to work for me.  I really appreciate your help and engineering.&lt;/p&gt;</comment>
                            <comment id="82345" author="rwinch" created="Tue, 7 Aug 2012 10:33:47 +0000"  >&lt;p&gt;Thanks for providing feedback and not a problem on the workflow (it is more for me to manage rather than making you worry about it).&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;Verify.close%28%29isinvoked%3F&quot;&gt;&lt;/a&gt;Verify .close() is invoked?&lt;/h2&gt;

&lt;p&gt;I was able to confirm that the HessianServlet &lt;a href=&quot;http://grepcode.com/file/repo1.maven.org/maven2/com.caucho/hessian/3.1.3/com/caucho/hessian/server/HessianServlet.java#393&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;will invoke getOutputStream().close()&lt;/a&gt; under some circumstances. You will notice that it is wrapped by other implementations of OutputStream depending on various factors the original OutputStream may or may not get closed.&lt;/p&gt;

&lt;p&gt;I pushed out an update that contains a printStackTrace in the close methods. Do you mind updating the code using git pull to see if this is the case? You will also need to rebuild it using ./gradlew build (you should not need to clean it). I&apos;d like to make sure this fix makes sense for your issue. If you see something similar to either of the following lines you will know the close method is invoked (note you will also see a stacktrace).&lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;**************************************ServletOutputStream.close()******************************&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;**************************************PrintWriter.close()******************************&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;

&lt;h2&gt;&lt;a name=&quot;Buildproblem&quot;&gt;&lt;/a&gt;Build problem&lt;/h2&gt;

&lt;p&gt;I was able to build with no problems even after clearing out my Gradle cache. Are you certain you are using the gradlew?&lt;/p&gt;


&lt;h2&gt;&lt;a name=&quot;Note&quot;&gt;&lt;/a&gt;Note&lt;/h2&gt;

&lt;p&gt;A note to others and myself. I am able to consistently reproduce this issue if the getOutputStream().close() is invoked by using debug points to control the order of execution. Adding a debug point just before the close() I see that the response is not sent back to the client. I step over the close() and the response is sent back to the client. At that point I make another request and see that the SecurityContext has not been set (since the SecurityContextPersistenceFilter has not been invoked). I then continue the original thread and see that the SecurityContext is then saved.&lt;/p&gt;</comment>
                            <comment id="82352" author="rwinch" created="Tue, 7 Aug 2012 15:08:57 +0000"  >&lt;p&gt;I&apos;m going to go ahead and mark this resolved since you are fairly convinced it is fixed. If you get a chance it would be great if you could try to verify that .close() is being invoked using the instructions in my previous comment.&lt;/p&gt;</comment>
                            <comment id="124969" author="issuemaster" created="Sat, 6 Feb 2016 06:20:02 +0000"  >&lt;p&gt;This issue has been migrated to &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/2230&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-security/issues/2230&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 30 Jul 2012 18:57:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31533</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i05puf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33393</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31233</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10120" key="com.atlassian.jira.plugin.system.customfieldtypes:url">
                        <customfieldname>Reference URL</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[http://forum.springsource.org/showthread.php?119274-SPRING_SECURITY_CONTEXT-not-stored-in-session-until-http-response-has-been-delivered]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>