<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Fri Dec 23 05:00:57 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SECOAUTH-423/SECOAUTH-423.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SECOAUTH-423] AuthorizationRequest is no longer Serializable, cannot be used in distributable applications</title>
                <link>https://jira.spring.io/browse/SECOAUTH-423</link>
                <project id="10440" key="SECOAUTH">Spring Security OAuth</project>
                    <description>&lt;p&gt;As of &lt;a href=&quot;https://github.com/spring-projects/spring-security-oauth/commit/9704cf66181cb1179bd02dad8cf63c0e77cf8ebc#diff-1314804fd6ca0e5eac935c37901ca157&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;commit 9704cf66181cb1179bd02dad8cf63c0e77cf8ebc&lt;/a&gt;, &lt;tt&gt;AuthorizationRequest&lt;/tt&gt; is no longer &lt;tt&gt;Serializable&lt;/tt&gt;. Because of this, any Spring Security OAuth 2 applications cannot be marked with &lt;tt&gt;&amp;lt;distributable /&amp;gt;&lt;/tt&gt; in the deployment descriptor. Doing so results in this error whenever a user attempts to authorize:&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;java.lang.IllegalArgumentException: Non-serializable attribute authorizationRequest&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;I am unable to even test out Spring Security OAuth 2 1.1.0.M1 and Java Config. I am completely blocked by this problem, for which there is no workaround. My application must be distributable; taking that off is not an option.&lt;/p&gt;

&lt;p&gt;Can we get this fixed and have M2 released ASAP, please!?&lt;/p&gt;</description>
                <environment></environment>
        <key id="51203">SECOAUTH-423</key>
            <summary>AuthorizationRequest is no longer Serializable, cannot be used in distributable applications</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://jira.spring.io/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="8">Complete</resolution>
                                        <assignee username="david_syer">Dave Syer</assignee>
                                    <reporter username="guitarking117">Nick Williams</reporter>
                        <labels>
                    </labels>
                <created>Fri, 4 Oct 2013 11:28:59 +0000</created>
                <updated>Wed, 9 Oct 2013 14:15:18 +0000</updated>
                            <resolved>Wed, 9 Oct 2013 14:15:18 +0000</resolved>
                                    <version>2.0.0</version>
                                    <fixVersion>2.0.0</fixVersion>
                                    <component>OAuth 2</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="94204" author="david_syer" created="Fri, 4 Oct 2013 12:29:41 +0000"  >&lt;p&gt;I think &lt;tt&gt;AuthorizationRequest&lt;/tt&gt; is supposed to be a transient throwaway object that is created, used and discarded all within the &lt;tt&gt;AuthorizationEndpoint&lt;/tt&gt; (or similar). I&apos;m not saying there isn&apos;t a problem, but if there is, it&apos;s not one that we thought of, and we did some thinking, so maybe if you explain what it is in your distributed system that needs to serialize an &lt;tt&gt;AuthorizationRequest&lt;/tt&gt; we can work out where the problem really is. Probably also &lt;a href=&quot;https://jira.spring.io/secure/ViewProfile.jspa?name=aanganes&quot; class=&quot;user-hover&quot; rel=&quot;aanganes&quot;&gt;Amanda Anganes&lt;/a&gt; can comment on the design.&lt;/p&gt;</comment>
                            <comment id="94205" author="guitarking117" created="Fri, 4 Oct 2013 12:36:03 +0000"  >&lt;p&gt;It&apos;s not anything I&apos;m doing. It&apos;s all out of my control. All I did was add &lt;tt&gt;&amp;lt;distributable /&amp;gt;&lt;/tt&gt; to the deployment descriptor, which marks the application as distributable in the container. One thing this enables is sharing &lt;tt&gt;HttpSession&lt;/tt&gt; instances across all containers in the server cluster. Spring Security OAuth 2 is adding the &lt;tt&gt;AuthorizationRequest&lt;/tt&gt; to the &lt;tt&gt;HttpSession&lt;/tt&gt; as a session attribute. It is against the Servlet spec to add a non-&lt;tt&gt;Serializable&lt;/tt&gt; session attribute to an &lt;tt&gt;HttpSession&lt;/tt&gt; if the application is distributable. Thus, the container throws an &lt;tt&gt;IllegalArgumentException&lt;/tt&gt; when Spring Security OAuth 2 adds the &lt;tt&gt;AuthorizationRequest&lt;/tt&gt; session attribute to the &lt;tt&gt;HttpSession&lt;/tt&gt;. &lt;em&gt;&lt;b&gt;NO&lt;/b&gt;&lt;/em&gt; Spring project should &lt;em&gt;&lt;b&gt;ever&lt;/b&gt;&lt;/em&gt; add a non-&lt;tt&gt;Serializable&lt;/tt&gt; attribute to an &lt;tt&gt;HttpSession&lt;/tt&gt;.&lt;/p&gt;</comment>
                            <comment id="94206" author="david_syer" created="Fri, 4 Oct 2013 12:40:59 +0000"  >&lt;p&gt;Right, good point (apart for the &quot;&lt;em&gt;NO&lt;/em&gt; Spring project bit&quot;). I had forgotten about that, and it&apos;s hopefully easy to fix. Pull requests always welcome.&lt;/p&gt;</comment>
                            <comment id="94258" author="jricher" created="Mon, 7 Oct 2013 10:16:33 +0000"  >&lt;p&gt;When we made this change, it sounds like we must have missed someplace where the AuthorizationRequest is getting stored into the session object, which really shouldn&apos;t be happening because (as Dave rightly points out) it&apos;s meant to be an ephemeral object. It&apos;s possible that this is happening in the bounce between the initial request and the authorization page, perhaps? (I haven&apos;t looked into it yet but this seems the likely culprit.)&lt;/p&gt;

&lt;p&gt;The motivation for removing the Serializable interface from the AuthorizationRequest object was to keep people from doing some kind of long-term storage on the AuthorizationRequest itself and instead to store the Serializable OAuth2Request object, which is made specifically separate for this purpose.&lt;/p&gt;</comment>
                            <comment id="94260" author="david_syer" created="Mon, 7 Oct 2013 10:52:10 +0000"  >&lt;p&gt;Justin, I&apos;m not sure if even OAuth2Request is fully serializable, since BaseRequest is not. I have a local change to make AuthorizationRequest Serializable, but if you think that OAuth2Request is what is needed in the @ModelAttributes (i.e. in the session), then shout now and/or make a new PR.&lt;/p&gt;</comment>
                            <comment id="94268" author="jricher" created="Mon, 7 Oct 2013 12:39:46 +0000"  >&lt;p&gt;OAuth2Request is fully Serializable because I implemented readObject and writeObject on it directly. I&apos;m hesitant to make AuthorizationRequest itself be Serializable because that could lead to some of the confusion we saw before between what AuthorizationRequest is for and what OAuth2Request is for. I don&apos;t want to lose the separation between the classes that we gained from this latest change set, and I&apos;m a little nervous that making AuthorizationRequest serializable might be a first step toward folding these two classes back into one (which would be a huge step backward in API design). (Note, I&apos;d personally prefer to not even have the BaseRequest class so that we don&apos;t have a tempting &quot;is-a&quot; relationship between the classes, but that&apos;s another thing.)&lt;/p&gt;

&lt;p&gt;I won&apos;t be able to look at this for a few days but I can try to dig deeper into it by the end of this week.&lt;/p&gt;</comment>
                            <comment id="94269" author="david_syer" created="Mon, 7 Oct 2013 12:54:15 +0000"  >&lt;p&gt;Thanks Justin. I merged my local change for now, but if you have time to look at it and decide that OAuth2Request is the true DTO for authorization, then it will be easy to back it out.&lt;/p&gt;</comment>
                            <comment id="94334" author="jricher" created="Wed, 9 Oct 2013 10:00:58 +0000"  >&lt;p&gt;After reading through the code and carefully tracing how the objects get used, it&apos;s clear that AuthorizationRequest is the correct object to be passed around here. In order to fulfill the requirement above, it&apos;s simply going to have to be made serializable. &lt;/p&gt;

&lt;p&gt;However, to (hopefully) help prevent confusion between the different classes in this tree, I&apos;ve gone through and removed the setters from BaseRequest entirely (they were protected before, at least), and moved the implementations to AuthorizationRequest and TokenRequest instead. I&apos;ve also added to the documentation of each class (and the methods in question) about which class is intended for which use. It won&apos;t fully prevent someone from doing something stupid like throwing an AuthorizationRequest into a database for later, but at least now we will have told them not to do that. &lt;/p&gt;

&lt;p&gt;I&apos;ve submitted the following pull request with these changes:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-security-oauth/pull/101&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/spring-projects/spring-security-oauth/pull/101&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="94335" author="david_syer" created="Wed, 9 Oct 2013 10:24:18 +0000"  >&lt;p&gt;What&apos;s wrong with having protected setters in BaseRequest (there&apos;s quite a lot of logic duplicated in *Request subclasses now)?&lt;/p&gt;</comment>
                            <comment id="94336" author="jricher" created="Wed, 9 Oct 2013 10:30:21 +0000"  >&lt;p&gt;Having the protected setters means we need to hide them in the subclass instead of them never being there to be hidden in the first place. It&apos;s somewhat personal style, but I would rather have more verbose code that&apos;s more explicit about its purpose than concise code that needs to jump through hoops to present the appropriate object API. There should never be an &quot;is-a&quot; relationship between any of the three *Request classes, so I&apos;ve never seen the value in the BaseRequest class to start with. &lt;/p&gt;

&lt;p&gt;The duplicated logic is all fairly simple, and some of it was being duplicated anyway already in the old setters.&lt;/p&gt;

&lt;p&gt;If nothing else, I definitely want the new comments and documentation that the patch introduces, in place of the old ones.&lt;/p&gt;</comment>
                            <comment id="94346" author="david_syer" created="Wed, 9 Oct 2013 14:15:18 +0000"  >&lt;p&gt;Fixed. Merged Justin&apos;s pull request and then added back the shared protected setters. Didn&apos;t touch the comments.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 4 Oct 2013 12:29:41 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37693</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i06mfr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38673</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37395</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>