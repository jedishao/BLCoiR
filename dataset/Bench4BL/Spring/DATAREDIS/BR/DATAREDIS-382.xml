<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 16:52:38 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/DATAREDIS-382/DATAREDIS-382.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[DATAREDIS-382] Using SCAN commands causes issues with Jedis in multi-threaded use</title>
                <link>https://jira.spring.io/browse/DATAREDIS-382</link>
                <project id="10604" key="DATAREDIS">Spring Data Redis</project>
                    <description>&lt;p&gt;Link to Jedis issue reported- &lt;br/&gt;
&lt;a href=&quot;https://github.com/xetorthio/jedis/issues/918#issuecomment-78409511&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/xetorthio/jedis/issues/918#issuecomment-78409511&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am using redis in a heavily multi-threaded java application and getting intermittent ClassCastExceptions&lt;br/&gt;
I am using Jedis pool, and have verified that spring ensures the resources are returned to the pool, by calling returnResource() and returnBrokenResource in case of exceptions. Still facing this issue. I have a heavily multi-threaded environment&lt;/p&gt;

&lt;p&gt;I am using multiple spring RedisTemplates for serializing/deserializing different models. I have configured different spring RedisTemplates with their own JedisConnectionFactory so that the jedis pool is created per factory, but this didn&apos;t solve the issue. I was always using a pool, and added testOnBorrow as well as testOnReturn true, but didn&apos;t help&lt;/p&gt;

&lt;p&gt;Exception stack trace- &lt;/p&gt;

&lt;p&gt;stack -&lt;/p&gt;

&lt;p&gt;Thread 1:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;03/01/2015 07:05:32.044&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;events-system-akka.actor.default-dispatcher-2281&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;akka://events-system/user/$YN/$b/$b/$b&amp;#93;&lt;/span&gt; java.lang.Long cannot be cast to java.util.List&lt;br/&gt;
java.lang.ClassCastException: java.lang.Long cannot be cast to java.util.List&lt;br/&gt;
at redis.clients.jedis.Connection.getRawObjectMultiBulkReply(Connection.java:230)&lt;br/&gt;
at redis.clients.jedis.Connection.getObjectMultiBulkReply(Connection.java:236)&lt;br/&gt;
at redis.clients.jedis.BinaryJedis.zscan(BinaryJedis.java:3608)&lt;br/&gt;
at org.springframework.data.redis.connection.jedis.JedisConnection$3.doScan(JedisConnection.java:2998)&lt;br/&gt;
at org.springframework.data.redis.core.KeyBoundCursor.doScan(KeyBoundCursor.java:39)&lt;br/&gt;
at org.springframework.data.redis.core.ScanCursor.scan(ScanCursor.java:85)&lt;br/&gt;
at org.springframework.data.redis.core.ScanCursor.hasNext(ScanCursor.java:168)&lt;br/&gt;
at org.springframework.data.redis.core.ConvertingCursor.hasNext(ConvertingCursor.java:56)&lt;br/&gt;
...&lt;br/&gt;
application specific stack trace&lt;br/&gt;
...&lt;/p&gt;

&lt;p&gt;Thread 2:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;03/01/2015 07:03:07.295&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;events-system-akka.actor.default-dispatcher-2273&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;akka://events-system/user/$VN/$b/$b/$b&amp;#93;&lt;/span&gt; Unknown redis exception; nested exception is java.lang.ClassCastException: [B cannot be cast to java.lang.Long&lt;br/&gt;
org.springframework.data.redis.RedisSystemException: Unknown redis exception; nested exception is java.lang.ClassCastException: [B cannot be cast to java.lang.Long&lt;br/&gt;
at org.springframework.data.redis.FallbackExceptionTranslationStrategy.getFallback(FallbackExceptionTranslationStrategy.java:48)&lt;br/&gt;
at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:38)&lt;br/&gt;
at org.springframework.data.redis.connection.jedis.JedisConnection.convertJedisAccessException(JedisConnection.java:195)&lt;br/&gt;
at org.springframework.data.redis.connection.jedis.JedisConnection.zRem(JedisConnection.java:2321)&lt;br/&gt;
at org.springframework.data.redis.core.DefaultZSetOperations$19.doInRedis(DefaultZSetOperations.java:283)&lt;br/&gt;
at org.springframework.data.redis.core.DefaultZSetOperations$19.doInRedis(DefaultZSetOperations.java:280)&lt;br/&gt;
at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:190)&lt;br/&gt;
at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:152)&lt;br/&gt;
at org.springframework.data.redis.core.AbstractOperations.execute(AbstractOperations.java:85)&lt;br/&gt;
at org.springframework.data.redis.core.DefaultZSetOperations.remove(DefaultZSetOperations.java:280)&lt;br/&gt;
...&lt;br/&gt;
application specific stack trace&lt;br/&gt;
...&lt;br/&gt;
Caused by: java.lang.ClassCastException: [B cannot be cast to java.lang.Long&lt;br/&gt;
at redis.clients.jedis.Connection.getIntegerReply(Connection.java:210)&lt;br/&gt;
at redis.clients.jedis.BinaryJedis.zrem(BinaryJedis.java:1624)&lt;br/&gt;
at org.springframework.data.redis.connection.jedis.JedisConnection.zRem(JedisConnection.java:2319)&lt;br/&gt;
... 21 more&lt;/p&gt;

&lt;p&gt;Spring redis configuration - &lt;/p&gt;

&lt;p&gt;&amp;lt;bean id=&quot;jedisConnFactory&quot;&lt;br/&gt;
      class=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;&lt;br/&gt;
      redis:usePool=&quot;true&quot; redis:poolConfig-ref=&quot;jedisPoolConfig&quot; redis:hostName=&quot;$&lt;/p&gt;
{redis.datasource.hostName}
&lt;p&gt;&quot;&lt;br/&gt;
      redis:database=&quot;$&lt;/p&gt;
{redis.database.index}
&lt;p&gt;&quot; redis:port=&quot;$&lt;/p&gt;
{redis.datastore.port}
&lt;p&gt;&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;bean id=&quot;jedisPoolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;maxIdle&quot; value=&quot;$&lt;/p&gt;
{redis.conn.maxIdle}
&lt;p&gt;&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;maxTotal&quot; value=&quot;$&lt;/p&gt;
{redis.conn.maxTotal}
&lt;p&gt;&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;minIdle&quot; value=&quot;$&lt;/p&gt;
{redis.conn.minIdle}
&lt;p&gt;&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;testOnBorrow&quot; value=&quot;true&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;bean id=&quot;redisTemplate&quot;&lt;br/&gt;
      class=&quot;org.springframework.data.redis.core.RedisTemplate&quot;&lt;br/&gt;
      redis:connectionFactory-ref=&quot;jedisConnFactory&quot;&lt;br/&gt;
      redis:keySerializer-ref=&quot;redisStringSerializer&quot;&lt;br/&gt;
      redis:valueSerializer-ref=&quot;redisStringSerializer&quot;&lt;br/&gt;
      redis:defaultSerializer-ref=&quot;redisStringSerializer&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;bean id=&quot;redisTemplate2&quot;&lt;br/&gt;
      class=&quot;org.springframework.data.redis.core.RedisTemplate&quot;&lt;br/&gt;
      redis:connectionFactory-ref=&quot;jedisConnFactory2&quot;&lt;br/&gt;
      redis:keySerializer-ref=&quot;redisStringSerializer&quot;&lt;br/&gt;
      redis:valueSerializer-ref=&quot;redisCustomDomainObjectSerializer&quot;&lt;br/&gt;
      redis:defaultSerializer-ref=&quot;redisStringSerializer&quot;/&amp;gt;&lt;/p&gt;</description>
                <environment>Java 8&lt;br/&gt;
Tomcat 8&lt;br/&gt;
Jedis version - 2.6.0&lt;br/&gt;
Spring data redis version - 1.4.1.RELEASE</environment>
        <key id="62656">DATAREDIS-382</key>
            <summary>Using SCAN commands causes issues with Jedis in multi-threaded use</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://jira.spring.io/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="mp911de">Mark Paluch</assignee>
                                    <reporter username="deepakpol@gmail.com">Deepak Pol</reporter>
                        <labels>
                    </labels>
                <created>Thu, 12 Mar 2015 07:16:09 +0000</created>
                <updated>Tue, 13 Sep 2016 12:23:39 +0000</updated>
                            <resolved>Tue, 13 Sep 2016 12:23:36 +0000</resolved>
                                    <version>1.4.1 (Evans SR1)</version>
                                                    <component>Jedis Driver</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="127334" author="dantlynch" created="Thu, 18 Feb 2016 22:31:57 +0000"  >&lt;p&gt;I am experiencing the same issue in my project.  Is there a workaround for this bug or is this a configuration issue?&lt;/p&gt;

&lt;p&gt;I am using:&lt;br/&gt;
Jedis version - 2.7.2&lt;br/&gt;
Spring data redis - 1.6.0&lt;/p&gt;

&lt;p&gt;Update:&lt;br/&gt;
The issue is still happening with jedis version 2.7.3 and spring data redis 1.6.2&lt;/p&gt;</comment>
                            <comment id="132030" author="mp911de" created="Tue, 13 Sep 2016 12:21:42 +0000"  >&lt;p&gt;That&apos;s fixed with &lt;a href=&quot;https://jira.spring.io/browse/DATAREDIS-531&quot; title=&quot;ScanCursor holds reference to closed/released Jedis connection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DATAREDIS-531&quot;&gt;&lt;del&gt;DATAREDIS-531&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10130">
                    <name>Supersede</name>
                                                                <inwardlinks description="is superseded by">
                                        <issuelink>
            <issuekey id="69133">DATAREDIS-531</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 18 Feb 2016 22:31:57 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>mp911de</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i089on:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10120" key="com.atlassian.jira.plugin.system.customfieldtypes:url">
                        <customfieldname>Reference URL</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[http://stackoverflow.com/questions/28814502/spring-data-redis-multi-threading-issue-with-jedis]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>