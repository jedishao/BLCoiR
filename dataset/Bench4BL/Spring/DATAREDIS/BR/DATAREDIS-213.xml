<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 16:36:01 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/DATAREDIS-213/DATAREDIS-213.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[DATAREDIS-213] jedis connection pool can not release connection</title>
                <link>https://jira.spring.io/browse/DATAREDIS-213</link>
                <project id="10604" key="DATAREDIS">Spring Data Redis</project>
                    <description>&lt;p&gt;I use jedis as native redis client lib, when i use pipeline and dbindex &amp;gt; 0 and an exception happened in my RedisCallback logic then jedis can not return to jedispool.&lt;/p&gt;

&lt;p&gt;code like this:&lt;br/&gt;
JedisConnection.java line 181-183&lt;br/&gt;
if (dbIndex &amp;gt; 0) {&lt;br/&gt;
  select(0);&lt;br/&gt;
}&lt;br/&gt;
JedisConnection.java line 789-801&lt;br/&gt;
public void select(int dbIndex) {&lt;br/&gt;
    try {&lt;br/&gt;
        if (isQueueing()) &lt;/p&gt;
{
		throw new UnsupportedOperationException();
	}&lt;br/&gt;
	if (isPipelined()) {		throw new UnsupportedOperationException();	}
&lt;p&gt;	jedis.select(dbIndex);&lt;br/&gt;
	} catch (Exception ex) &lt;/p&gt;
{
		throw convertJedisAccessException(ex);
	}
&lt;p&gt;}&lt;br/&gt;
in my scenario select method will catch an UnsupportedOperationException&lt;br/&gt;
and convertJedisAccessException method does not deal with UnsupportedOperationException&lt;br/&gt;
so connection&apos;s state is not broken, so pool&apos;s activeNum does not minus 1, at last my app throw redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool, because pool&apos; activeNum equal to maxActiveNum.&lt;/p&gt;</description>
                <environment>64bit ubuntu1204LTS, jdk1.6u20, jedis2.1.0, commons-pool-1.6, spring-data-redis1.0.4</environment>
        <key id="49642">DATAREDIS-213</key>
            <summary>jedis connection pool can not release connection</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jencompgeek">Jennifer Hickey</assignee>
                                    <reporter username="tedwang">wangzhiqiang</reporter>
                        <labels>
                    </labels>
                <created>Thu, 11 Jul 2013 07:18:14 +0000</created>
                <updated>Sun, 28 Jul 2013 21:17:01 +0000</updated>
                            <resolved>Sun, 28 Jul 2013 21:17:01 +0000</resolved>
                                    <version>1.0.4</version>
                    <version>1.0.5</version>
                    <version>1.1.0.M1</version>
                                    <fixVersion>1.1.0.M2</fixVersion>
                    <fixVersion>1.0.6</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="91654" author="tedwang" created="Thu, 11 Jul 2013 07:22:40 +0000"  >&lt;p&gt;I think when transactional or pipeline, connection should set broken to true.&lt;/p&gt;</comment>
                            <comment id="91660" author="jencompgeek" created="Thu, 11 Jul 2013 10:56:23 +0000"  >&lt;p&gt;We only set broken to true if the connection is unusable after the Exception occurs, like if it&apos;s a Socket problem or the connection was closed somehow. JedisConnection.close() should take care of returning the connection to the pool after the UnsupportedOperationException happens. If you are using RedisTemplate, close() should be getting called even if the method throws an Exception. Are you not seeing that happen?&lt;/p&gt;</comment>
                            <comment id="91664" author="jencompgeek" created="Thu, 11 Jul 2013 13:20:36 +0000"  >&lt;p&gt;I do see a potential issue where the select that happens in close (prior to returning the connection to the pool) could throw an Exception and this would cause the connection to be closed and never returned to the pool. This could happen if you were closing the connection without closing the pipeline first. Not sure if this is the cause of  your problem, but it seems like something we should fix.&lt;/p&gt;</comment>
                            <comment id="91667" author="tedwang" created="Thu, 11 Jul 2013 18:29:35 +0000"  >&lt;p&gt;This could happen if you were closing the connection without closing the pipeline first. Not sure if this is the cause of your problem, but it seems like something we should fix.&lt;/p&gt;


&lt;p&gt;I agree with what you write above.Maybe I shoud close the pipeline before closing the connection to avoid this problem.thanks a lot.&lt;/p&gt;

&lt;p&gt;But in RedisTemplate, closing pipeline operation is in execute method, it is very defficult for users to find this problem,Maybe you can move&lt;br/&gt;
// close pipeline&lt;br/&gt;
if (pipeline &amp;amp;&amp;amp; !pipelineStatus) {&lt;br/&gt;
    conn.closePipeline();&lt;br/&gt;
}&lt;br/&gt;
to the finnaly code block.&lt;/p&gt;</comment>
                            <comment id="91668" author="tedwang" created="Thu, 11 Jul 2013 18:45:07 +0000"  >&lt;p&gt;I found this problem did not happen in version 1.0.1,below is a code comparing.&lt;/p&gt;

&lt;p&gt;this is code in 1.0.4&lt;br/&gt;
// return the connection to the pool&lt;br/&gt;
		try {&lt;br/&gt;
			if (pool != null) {&lt;br/&gt;
				if (!broken) {&lt;br/&gt;
					// reset the connection &lt;br/&gt;
					if (dbIndex &amp;gt; 0) &lt;/p&gt;
{
						select(0);
					}&lt;br/&gt;
					pool.returnResource(jedis);&lt;br/&gt;
					return;&lt;br/&gt;
				}&lt;br/&gt;
			}&lt;br/&gt;
		} catch (Exception ex) {
			// exceptions are handled below
		}&lt;br/&gt;
&lt;br/&gt;
this is in 1.0.1&lt;br/&gt;
// return the connection to the pool&lt;br/&gt;
		try {&lt;br/&gt;
			if (pool != null) {&lt;br/&gt;
				if (broken) {
					pool.returnBrokenResource(jedis);
				}&lt;br/&gt;
				else {&lt;br/&gt;
					// reset the connection &lt;br/&gt;
					if (dbIndex &amp;gt; 0) {						select(0);					}

&lt;p&gt;					pool.returnResource(jedis);&lt;br/&gt;
				}&lt;br/&gt;
			}&lt;br/&gt;
		} catch (Exception ex) &lt;/p&gt;
{
			pool.returnBrokenResource(jedis);
		}

&lt;p&gt;in 1.0.4 exception does not handle.&lt;/p&gt;</comment>
                            <comment id="91669" author="tedwang" created="Thu, 11 Jul 2013 19:55:49 +0000"  >&lt;p&gt;I am very puzzled, why you swallow the exception in 1.0.4, it was correctly dealt in 1.0.1 version.&lt;/p&gt;</comment>
                            <comment id="91694" author="jencompgeek" created="Fri, 12 Jul 2013 09:39:35 +0000"  >&lt;p&gt;Not sure. I found the commit where it was changed, and I think it was just an oversight not to include the case where an Exception occurs and pool != null and broken=false. We&apos;ll get it fixed.&lt;/p&gt;

&lt;p&gt;I&apos;m a bit conflicted about closing the pipeline in the finally block of execute, as most of the time you won&apos;t care to waste time waiting on results of the other pipelined operations when an Exception occurs (you&apos;re not going to get those results back from RedisTemplate anyway). I think a better approach might be to just use jedis.select() directly in the close, bypassing the pipeline.&lt;/p&gt;</comment>
                            <comment id="91756" author="tedwang" created="Mon, 15 Jul 2013 20:25:39 +0000"  >&lt;p&gt;yes, closing pipeline in finally block is not a good idea.&lt;/p&gt;

&lt;p&gt;thanks a lot.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 11 Jul 2013 10:56:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36144</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i06fiv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37553</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35846</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>