<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:05:14 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1469/SPR-1469.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1469] Incorrectly set actualTransaction in AbstractPlatformTransactionManager.resume?</title>
                <link>https://jira.spring.io/browse/SPR-1469</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;It looks like there is a bug in how the actualTransaction flag is set when resuming.  If a transaction with PROPAGATION_SUPPORTS, the flag is correctly set to false.  But if the tx is suspended by calling code with REQUIRES_NEW, the reume method will always restore the flag with the value &apos;true&apos; rather than check to see whether or not the resumed transaction was real or not.  Subsequent checks to see if the TX is an actual transaction or not will fail.&lt;/p&gt;

&lt;p&gt;I&apos;ll attach test code shortly...&lt;/p&gt;</description>
            <key id="12724">SPR-1469</key>
            <summary>Incorrectly set actualTransaction in AbstractPlatformTransactionManager.resume?</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="sqrrrl">Steven Bazyl</reporter>
                        <labels>
                    </labels>
                <created>Mon, 14 Nov 2005 03:30:56 +0000</created>
                <updated>Tue, 19 Jun 2012 03:54:32 +0000</updated>
                            <resolved>Fri, 6 Jan 2006 08:59:32 +0000</resolved>
                                    <version>1.2.5</version>
                                    <fixVersion>1.2.6</fixVersion>
                                    <component>Transaction</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="15412" author="juergen.hoeller" created="Mon, 14 Nov 2005 04:32:30 +0000"  >&lt;p&gt;Actually, that situation should never arise: A &quot;non-actual&quot; transaction (as caused by PROPAGATION_SUPPORTS) will never get suspended and thus cannot get resumed either. Suspend/resume behavior only applies to actual transactions, at least for the out-of-the-box AbstractPlatformTransactionManager... Can you give me details on your scenario here?&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="15413" author="juergen.hoeller" created="Mon, 14 Nov 2005 08:02:52 +0000"  >&lt;p&gt;If you want actual transaction suspension, I would strongly recommend to use PROPAGATION_REQUIRED for the outer transaction and PROPAGATION_REQUIRES_NEW for the inner transaction. PROPAGATION_SUPPORTS is mainly meant for operations that do not have any further, fine-grained transaction demarcation within.&lt;/p&gt;

&lt;p&gt;Concretely, PROPAGATION_SUPPORTS at the outer level does not cause the inner PROPAGATION_REQUIRES_NEW to suspend the transaction. Instead, the inner transaction will simply operate on the resources of the outer transaction scope (which will be turned into transactional state for the inner scope).&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="15481" author="sqrrrl" created="Fri, 18 Nov 2005 04:17:48 +0000"  >&lt;p&gt;We probably can just change to PROPAGATION_REUIRES,readonly for this particular case.  However, there is an inconsistancy between the different transaction managers, and the behavior I was looking for &lt;b&gt;is&lt;/b&gt; available using DataSourceTransactionManager.  In that case, the isExistingTransaction() call only checks to see if a DataSource is bound, but doesn&apos;t bother to check if a real transaction exists.  Actually, this creates some really bizarre behaviors since the suspend behavior will be different depending on the sequence of calls.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;begin PROPAGATION_SUPPORTS&lt;br/&gt;
do something with JDBC - Will use connection #1 with no TX context&lt;br/&gt;
begin PROPAGATION_REQUIRED&lt;br/&gt;
do something else with JDBC - Will use connection #2 with TX &lt;br/&gt;
end&lt;br/&gt;
do more  with JDBC - Will use connection #1, still without TX context&lt;br/&gt;
end&lt;/p&gt;

&lt;p&gt;vs.&lt;/p&gt;

&lt;p&gt;begin PROPAGATION_SUPPORTS&lt;br/&gt;
begin PROPAGATION_REQUIRED&lt;br/&gt;
do something else with JDBC - Will use connection #1 with TX &lt;br/&gt;
end&lt;br/&gt;
do more  with JDBC - Will use connection #1, TX already comitted&lt;br/&gt;
end&lt;/p&gt;

&lt;p&gt;Whether or not a datasource has been used before the inner transaction significantly changes the behavior.  This isn&apos;t a good thing.&lt;/p&gt;

&lt;p&gt;Anyway, I understand your description and think its probably OK, but it probably needs to be more clearly stated in the docs what the behavior is, particularly considering that is &lt;b&gt;not&lt;/b&gt; the behavior with the DataSourceTransactionManager.&lt;/p&gt;






</comment>
                            <comment id="15987" author="juergen.hoeller" created="Fri, 6 Jan 2006 08:59:32 +0000"  >&lt;p&gt;I&apos;ve already addressed this in 1.2.6: DataSourceTransactionManagers uses a &quot;transactionActive&quot; flag in the ConnectionHolder now to track the actual transactional status of a thread-bound Connection. It will only consider an actual transactional Connection as existing transaction now, which should lead to consistent behavior in all scenarios.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 51 weeks, 6 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 14 Nov 2005 04:32:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i020hr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11789</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>