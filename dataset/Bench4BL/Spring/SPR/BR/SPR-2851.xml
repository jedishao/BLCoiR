<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 17:52:50 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2851/SPR-2851.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2851] IllegalStateException thrown by jboss 4.0.5 if PROPAGATION_REQUIRES_NEW is used in combination with HibernateTemplate</title>
                <link>https://jira.spring.io/browse/SPR-2851</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Two spring-beans using HibernateTemplate.&lt;br/&gt;
The first uses PROPAGATION_REQUIRED, the second PROPAGATION_REQUIRES_NEW as transaction attribute.&lt;/p&gt;

&lt;p&gt;This works fine with jboss 4.0.2 but in jboss 4.0.5 the following exception is thrown:&lt;br/&gt;
IllegalStateException: Trying to change transaction in enlist!&lt;/p&gt;

&lt;p&gt;This may be related to &lt;a href=&quot;https://jira.spring.io/browse/SPR-1384&quot; title=&quot;IllegalStateException thrown by JBoss 4.0.3 when PROPAGATION_REQUIRES_NEW used during active transaction in MessageBean with BMT&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-1384&quot;&gt;&lt;del&gt;SPR-1384&lt;/del&gt;&lt;/a&gt; but the workaround suggested there does not work in my case.&lt;br/&gt;
Even with transactionSynchronization=SYNCHRONIZATION_NEVER and hibernate.connection.release_mode=after_statement the exception occurs.&lt;/p&gt;

&lt;p&gt;What makes me wonder is, that the same setup using JdbcTemplate works fine in both jboss 4.0.2 and 4.0.5.&lt;br/&gt;
I also did the transaction suspension / resume using JTA and javax.transaction.TransactionManager and that worked fine too with hibernate API and jboss 4.0.5 .&lt;/p&gt;

&lt;p&gt;So it seems that HibernateTemplate is part of the problem.&lt;/p&gt;

&lt;p&gt;Remarks:&lt;br/&gt;
I checked that with spring 1.2.5, 1.2.8 and 2.0.final - all behaved the same.&lt;br/&gt;
Currently my workaround is to use HibernateTransactionManager instead of JTATransactionManager  and that works even for JdbcTemplate based DAOs.&lt;/p&gt;
</description>
            <key id="15522">SPR-2851</key>
            <summary>IllegalStateException thrown by jboss 4.0.5 if PROPAGATION_REQUIRES_NEW is used in combination with HibernateTemplate</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="uwinter">Ulrich Winter</reporter>
                        <labels>
                    </labels>
                <created>Mon, 20 Nov 2006 03:00:29 +0000</created>
                <updated>Tue, 19 Jun 2012 03:50:39 +0000</updated>
                            <resolved>Mon, 27 Nov 2006 23:21:07 +0000</resolved>
                                    <version>1.2.5</version>
                    <version>1.2.8</version>
                    <version>2.0 final</version>
                                    <fixVersion>2.0.2</fixVersion>
                    <fixVersion>1.2.9</fixVersion>
                                    <component>Transaction</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="20982" author="uwinter" created="Mon, 20 Nov 2006 03:01:34 +0000"  >&lt;p&gt;added Stacktrace as attachment.&lt;/p&gt;</comment>
                            <comment id="20983" author="uwinter" created="Mon, 20 Nov 2006 03:02:18 +0000"  >&lt;p&gt;added simple test application to reproduce the problem.&lt;/p&gt;</comment>
                            <comment id="20985" author="juergen.hoeller" created="Mon, 20 Nov 2006 03:44:21 +0000"  >&lt;p&gt;Have you tried to use Spring transaction management in combination with native Hibernate API, i.e. SessionFactory.getCurrentSession() instead of HibernateTemplate? In particular with the &quot;exposeTransactionAwareSessionFactory&quot; flag turned to &quot;false&quot; on the LocalSessionFactoryBean definition? I expect this to work properly, since such a setup relies purely on Hibernate&apos;s own JTA session synchronization (requires &quot;hibernate.transaction.manager_lookup_class&quot; to be specified in the Hibernate properties, which is recommendable in any case).&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="20987" author="uwinter" created="Mon, 20 Nov 2006 05:55:37 +0000"  >&lt;p&gt;Hi Juergen,&lt;/p&gt;

&lt;p&gt;I tried that and it works, meaning that no IllegalStateException is thrown and the transactions are suspendend/resumed/created as desired.&lt;/p&gt;

&lt;p&gt;But shouldn&apos;t it be possible to use HibernateTemplate?&lt;/p&gt;

&lt;p&gt;There are some drawbacks in this workaround I want to mention:&lt;br/&gt;
1) I have to explicitly flush() the hibernate sessions in order to get ANY effect on the database. (both in the original and in the new transaction)&lt;br/&gt;
2) I get &quot;Closing a connection for you.&quot; messages out of jboss. After several requests I run out of connections, so I have to call session.close() programmatically in my dao.&lt;/p&gt;

&lt;p&gt;It seems that neither auto-flush nor auto-close is in effect as described in org.hibernate.context.JTASessionContext which is supposed to be in effect in this setup.&lt;/p&gt;


</comment>
                            <comment id="20990" author="juergen.hoeller" created="Mon, 20 Nov 2006 08:18:25 +0000"  >&lt;p&gt;Auto-flush and auto-close should be in effect here just like in the plain Hibernate case; neither Spring&apos;s LocalSessionFactoryBean (with the given configuration) nor Spring&apos;s JtaTransactionManager should interfere in any way here. Double-check whether you specified the corresponding Hibernate properties; everything the Hibernate documentation says should apply as-is in such a scenario. Effectively, Spring just builds a native Hibernate SessionFactory and exposes it... and then some standard JTA transactions kick in, driven by Spring as well. There should be no difference to raw Hibernate and JTA usage.&lt;/p&gt;

&lt;p&gt;I agree that HibernateTemplate should work as well here, but apparently there is some issue with the Spring-managed Session in conjunction with the synchronized JTA transaction. To help track that down, it would be good to know whether the native Hibernate variant works, while still having Spring transaction demarcation in place. And of course, it should (hopefully) give you a workaround for the time being...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21006" author="uwinter" created="Tue, 21 Nov 2006 02:33:47 +0000"  >&lt;p&gt;So it took some time to figure out why auto flush did not work.&lt;br/&gt;
I completely removed the hibernate configuration from the spring appcontext. Now hibernate is set up via hibernate.properties and programmatic creation of a SessionFactory via hibernate&apos;s Configuration class.&lt;/p&gt;

&lt;p&gt;But: With hibernate 3.2.0-GA neither auto-flush nor auto-close occured.&lt;br/&gt;
After running my unchanged web application with hibernate 3.0.5 autoflush occurs and the sessions are closed automatically.&lt;/p&gt;

&lt;p&gt;To answer your question: yes - spring transaction demarcation together with native hibernate access works inside jboss 4.0.5.&lt;/p&gt;</comment>
                            <comment id="21031" author="juergen.hoeller" created="Wed, 22 Nov 2006 07:27:57 +0000"  >&lt;p&gt;After some analysis, it does look like this is caused by the Session&apos;s Connection not released in time, and JBoss being picky about that. Even if you specified &quot;after_statement&quot; as Connection release mode, the underlying ConnectionProvider might still have (silently) voted against that. Try to switch LocalSessionFactoryBean&apos;s &quot;useTransactionAwareDataSource&quot; property to &quot;true&quot;, which forces the ConnectionProvider to support &quot;after_statement&quot; (by wrapping it accordingly). That flag in combination with &quot;after_statement&quot; in the Hibernate properties could make things work even with HibernateTemplate in your scenario.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21043" author="uwinter" created="Thu, 23 Nov 2006 01:17:31 +0000"  >&lt;p&gt;after setting&lt;br/&gt;
  useTransactionAwareDataSource=true&lt;br/&gt;
  hibernate.connection.release_mode=after_statement&lt;br/&gt;
HibernateTemplate works fine.&lt;/p&gt;

&lt;p&gt;It works, too, if both, useTransactionAwareDataSource and hibernate.connection.release_mode are not set and&lt;br/&gt;
  hibernate.transaction.factory_class=org.hibernate.transaction.JTATransactionFactory&lt;br/&gt;
is configured.&lt;/p&gt;

&lt;p&gt;These are two complete sessionFactory-settings, where the HibernateTemplate works:&lt;/p&gt;

&lt;p&gt;1:  using hibernate.connection.release_mode=after_statement:&lt;br/&gt;
    &amp;lt;bean id=&quot;sf&quot;&lt;br/&gt;
          class=&quot;org.springframework.orm.hibernate3.LocalSessionFactoryBean&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;dataSource&quot; ref=&quot;ds&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;jtaTransactionManager&quot; ref=&quot;jtaTransactionManager&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;useTransactionAwareDataSource&quot; value=&quot;true&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;mappingResources&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;list&amp;gt;&lt;br/&gt;
                &amp;lt;value&amp;gt;txhandling/hibernate/PIV.hbm.xml&amp;lt;/value&amp;gt;&lt;br/&gt;
            &amp;lt;/list&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;hibernateProperties&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;props&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.connection.release_mode&quot;&amp;gt;after_statement&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.dialect&quot;&amp;gt;org.hibernate.dialect.OracleDialect&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.show_sql&quot;&amp;gt;true&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.maxActive&quot;&amp;gt;10&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.generate_statistics&quot;&amp;gt;true&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.query.substitutions&quot;&amp;gt;yes &apos;Y&apos;, no &apos;N&apos;, true 1, false 0&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.query.substitutions&quot;&amp;gt;yes &apos;Y&apos;, no &apos;N&apos;, true 1, false 0&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.format_sql&quot;&amp;gt;true&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.max_fetch_depth&quot;&amp;gt;1&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.jdbc.batch_versioned_data&quot;&amp;gt;true&amp;lt;/prop&amp;gt;&lt;br/&gt;
            &amp;lt;/props&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;/p&gt;


&lt;p&gt;2: not using after_statement:&lt;br/&gt;
    &amp;lt;bean id=&quot;sf&quot;&lt;br/&gt;
          class=&quot;org.springframework.orm.hibernate3.LocalSessionFactoryBean&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;dataSource&quot; ref=&quot;ds&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;jtaTransactionManager&quot; ref=&quot;jtaTransactionManager&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;mappingResources&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;list&amp;gt;&lt;br/&gt;
                &amp;lt;value&amp;gt;txhandling/hibernate/PIV.hbm.xml&amp;lt;/value&amp;gt;&lt;br/&gt;
            &amp;lt;/list&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;hibernateProperties&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;props&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.transaction.factory_class&quot;&amp;gt;org.hibernate.transaction.JTATransactionFactory&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.dialect&quot;&amp;gt;org.hibernate.dialect.OracleDialect&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.show_sql&quot;&amp;gt;true&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.maxActive&quot;&amp;gt;10&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.generate_statistics&quot;&amp;gt;true&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.query.substitutions&quot;&amp;gt;yes &apos;Y&apos;, no &apos;N&apos;, true 1, false 0&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.query.substitutions&quot;&amp;gt;yes &apos;Y&apos;, no &apos;N&apos;, true 1, false 0&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.format_sql&quot;&amp;gt;true&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.max_fetch_depth&quot;&amp;gt;1&amp;lt;/prop&amp;gt;&lt;br/&gt;
                &amp;lt;prop key=&quot;hibernate.jdbc.batch_versioned_data&quot;&amp;gt;true&amp;lt;/prop&amp;gt;&lt;br/&gt;
            &amp;lt;/props&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;/p&gt;


&lt;p&gt;So my problem is solved.&lt;/p&gt;


&lt;p&gt;One remark to the autoflush-problem in hibernate 3.0.5, mentioned above:&lt;br/&gt;
This has been clearified to be a change in default config settings in hibernate 3.2&lt;br/&gt;
(see HHH-2259)&lt;/p&gt;</comment>
                            <comment id="21094" author="juergen.hoeller" created="Mon, 27 Nov 2006 23:21:07 +0000"  >&lt;p&gt;I&apos;ve taken this as occasion to refine LocalSessionFactoryBean&apos;s defaults a bit: It automatically sets JTATransactionFactory if given a &quot;jtaTransactionManager&quot; now, and only sets the connection release mode &quot;on_close&quot; if not given a &quot;jtaTransactionManager&quot;. So if you specify a &quot;jtaTransactionManager&quot;, transaction suspension should work out of the box of any application server now. If you - alternatively - specify everything in Hibernate properties, the standard rules as stated in the Hibernate documentation apply.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12230" name="IllegalStateException.txt" size="2953" author="uwinter" created="Mon, 20 Nov 2006 03:01:34 +0000"/>
                            <attachment id="12231" name="my-webapp.zip" size="21087" author="uwinter" created="Mon, 20 Nov 2006 03:02:18 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 5 weeks, 2 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 20 Nov 2006 03:44:21 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00v9j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5110</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>