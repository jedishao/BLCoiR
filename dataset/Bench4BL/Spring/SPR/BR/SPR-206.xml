<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:55:53 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-206/SPR-206.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-206] SessionFactoryUtils doesn&apos;t handle EJB CMT RequiresNew correctly</title>
                <link>https://jira.spring.io/browse/SPR-206</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I&apos;m trying to just use the SessionFactoryUtils class in order to have a single session instance per transaction. Note that SessionFactoryUtils is the only thing I use from Spring, so I&apos;ve perhaps missed something important.&lt;br/&gt;
Everything works well until I use several transactions: SessionFactoryUtils returns a hibernate session; it returns the same session if a second call to getSession is made, and it flushes and closes the session at the end of the transaction. However, it doesn&apos;t work as I would expect if several transactions are used.&lt;/p&gt;

&lt;p&gt;Consider this scenario:&lt;/p&gt;

&lt;p&gt;FirstSessionBean has a method foo() marked as &quot;Requires&quot;&lt;br/&gt;
SecondSessionBean has a method bar() marked as &quot;RequiresNew&quot;&lt;br/&gt;
The foo method gets a session from SessionFactoryUtils&lt;br/&gt;
The foo method then calls bar()&lt;br/&gt;
The bar method gets a session from SessionFactoryUtils&lt;/p&gt;

&lt;p&gt;In this case, the session returned by SessionFactoryUtils in bar() is the same as the one returned in foo(). The session is flushed and closed only at the end of the foo transaction. So everything works as if bar was marked as &quot;Requires&quot; rather than &quot;RequiresNew&quot;.&lt;br/&gt;
This seems incorrect to me. Indeed, suppose I&apos;m doing some updates in the database in bar(), using the hibernate session. At the end of the bar transaction, these changes should be committed. Then, if the foo transaction rolls back, the changes made in bar should still be visible in the database, since bar has its own transaction.&lt;br/&gt;
In other words, a different session should be created and synchronied with the JTA transaction for each JTA transaction, and not for each thread as it&apos;s the case now.&lt;/p&gt;

&lt;p&gt;Am I missing something?&lt;/p&gt;</description>
            <key id="10390">SPR-206</key>
            <summary>SessionFactoryUtils doesn&apos;t handle EJB CMT RequiresNew correctly</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="jnizet">Jean-Baptiste Nizet</reporter>
                        <labels>
                    </labels>
                <created>Tue, 6 Jul 2004 19:35:27 +0000</created>
                <updated>Thu, 8 Jul 2004 08:36:28 +0000</updated>
                            <resolved>Thu, 8 Jul 2004 08:36:28 +0000</resolved>
                                    <version>1.0.2</version>
                                    <fixVersion>1.1 RC1</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="10590" author="juergen.hoeller" created="Tue, 6 Jul 2004 20:03:45 +0000"  >&lt;p&gt;Indeed, SessionFactoryUtils can just handle PROPAGATION_REQUIRES_NEW of Spring&apos;s own transaction management correctly. In the case of EJB CMT, SessionFactoryUtils is not aware of RequiresNew: It will keep returning the thread-bound Session for the enclosing transaction.&lt;/p&gt;

&lt;p&gt;More specifically, EJB CMT will suspend the JTA transaction and create a new one on RequiresNew. Unfortunately, a JTA Synchronization (as used by SessionFactoryUtils) is not informed of that: It just receives beforeCompletion and afterCompletion callbacks for the enclosing transaction.&lt;/p&gt;

&lt;p&gt;I&apos;m not aware of any portable means to become aware of EJB CMT&apos;s transaction suspension, so I don&apos;t see a chance to address this. It&apos;s rather a limitation of SessionFactoryUtils when used with JTA or EJB CMT. As I said, transaction suspension works nicely with Spring&apos;s HibernateTransactionManager.&lt;/p&gt;

&lt;p&gt;I just noticed that Spring&apos;s JtaTransactionManager involves the same limitation. However, in contrast to plain JTA respectively EJB CMT, we have a chance to address this issue there, as we get informed of transaction suspension by Spring&apos;s transaction infrastructure before delegating to JTA underneath.&lt;/p&gt;

&lt;p&gt;If you&apos;ve got ideas on how to make SessionFactoryUtils aware of JTA transaction suspension, please tell me! From my point of view, it seems that JTA&apos;s Synchronization interface would need to be extended with onSuspend and onResume callbacks to make this work.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="10593" author="jnizet" created="Tue, 6 Jul 2004 21:21:57 +0000"  >&lt;p&gt;First of all, thanks for your ultra-quick reaction! This is first-class support!&lt;/p&gt;

&lt;p&gt;Now regarding your answer:&lt;br/&gt;
I don&apos;t understand why you need to know when the enclosing transaction is suspended and resumed. Each time getSession is called, the sessionFactory is passed as argument, and the sessionFactory can be used to get the JTA transactionManager, which can be used to get the current transaction. As soon as you associate a hibernate session with the current thread AND the current JTA transaction (and not just with the current thread), it should work without problem.&lt;br/&gt;
I have written my own hibernate session transaction synchronization mechanism, and it seems to work correctly in JBoss (but I&apos;m new to Hibernate, and I&apos;m not at all a specialist of JTA, so I could have made mistakes). It&apos;s obviously a lot simpler than the Spring SessionFactoryUtils, since I only deal with JTA. &lt;br/&gt;
If you could have a look at this code and perhaps tell me if such a solution is correct, and could be used in Spring, I would be happy.&lt;br/&gt;
The code source can be found at &lt;a href=&quot;http://forum.hibernate.org/viewtopic.php?p=2207904&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.hibernate.org/viewtopic.php?p=2207904&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JB.&lt;/p&gt;</comment>
                            <comment id="10596" author="juergen.hoeller" created="Wed, 7 Jul 2004 00:00:21 +0000"  >&lt;p&gt;I need to correct myself regarding Spring&apos;s JtaTransactionManager: Synchronized resources like Hibernate Sessions get correctly handled there even when using transaction suspension.&lt;/p&gt;

&lt;p&gt;So it&apos;s really just the case of EJB CMT with RequiresNew that causes an issue here. Indeed, using the javax.transaction.Transaction as part of the ThreadLocal key could work. I&apos;ll have a look at that.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="10601" author="juergen.hoeller" created="Thu, 8 Jul 2004 08:36:28 +0000"  >&lt;p&gt;I&apos;ve integrated a similar strategy into Spring&apos;s SessionFactoryUtils, storing thread-bound Sessions per javax.transaction.Transaction to be able to handle suspended JTA transactions properly.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        12 years, 26 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 6 Jul 2004 20:03:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04yfr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28953</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>