<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:22:31 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-3426/SPR-3426.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-3426] Spring Bean Factory creation of Prototype (non-singleton) beans causes serious performance degradation under load</title>
                <link>https://jira.spring.io/browse/SPR-3426</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;please also see: &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://issues.apache.org/jira/browse/JS2-689&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/JS2-689&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know the contention is occurring in Java JDK code, not in Spring itself.&lt;br/&gt;
I would like to suggest that Spring provides an improvement: an alternative implementation for multithreaded applications&lt;/p&gt;

&lt;p&gt;Pasted in issue from Apache JIRA system:&lt;/p&gt;

&lt;p&gt;It appears that Spring prototype (non-singleton) bean factory creations cause synchronization contention issues under load.&lt;br/&gt;
The NavigationalState and PortalURL beans are created several times per request.&lt;br/&gt;
Under load with JMeter tests, the synchronization of Java Bean support code (in the JDK), called by Spring&apos;s bean factory, was causing severe performance degradation.&lt;br/&gt;
Removing this bottleneck improved performance by 5X.&lt;br/&gt;
I&apos;ve attached the Java source from the package java.beans. I believe its these synchronized methods of the java.beans.PropertyEditorManager class that are causing the contention:&lt;/p&gt;

&lt;p&gt;private static synchronized void initialize() {&lt;br/&gt;
private static synchronized void load(Class targetType, String name) {&lt;/p&gt;


&lt;p&gt;See attached screenshot for performance results before and after removal of prototypes (replaced by constructors).&lt;br/&gt;
Using a 4 processor CPU really brings the contention issue to the forefront.&lt;/p&gt;

&lt;p&gt;When we have hundreds of requests active, there are over 90 blocked threads in the findEditor stack frame:&lt;/p&gt;

&lt;p&gt;Thread t@98: (state = BLOCKED)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java.beans.PropertyEditorManager.findEditor(java.lang.Class) @bci=0, line=75 (Compiled frame; information may be imprecise)&lt;/li&gt;
	&lt;li&gt;org.springframework.beans.TypeConverterDelegate.convertIfNecessary(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Class, java.beans.PropertyDescriptor, org.springframework.core.MethodParameter) @bci=115, line=174 (Compiled frame)&lt;/li&gt;
	&lt;li&gt;org.springframework.beans.TypeConverterDelegate.convertIfNecessary(java.lang.Object, java.lang.Class, org.springframework.core.MethodParameter) @bci=7, line=95 (Compiled frame)&lt;/li&gt;
	&lt;li&gt;org.springframework.beans.factory.support.AbstractBeanFactory.doTypeConversionIfNecessary(org.springframework.beans.TypeConverter, java.lang.Object, java.lang.Class, org.springframework.core.MethodParameter) @bci=47, line=761 (Compiled frame)&lt;/li&gt;
	&lt;li&gt;org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition) @bci=191, line=126 (Compiled frame)&lt;/li&gt;
	&lt;li&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition) @bci=12, line=683 (Compiled frame)&lt;/li&gt;
	&lt;li&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[]) @bci=224, line=380 (Compiled frame)&lt;/li&gt;
	&lt;li&gt;org.springframework.beans.factory.support.AbstractBeanFactory.getBean(java.lang.String, java.lang.Class, java.lang.Object[]) @bci=362, line=264 (Compiled frame)&lt;/li&gt;
	&lt;li&gt;org.springframework.beans.factory.support.AbstractBeanFactory.getBean(java.lang.String, java.lang.Class) @bci=4, line=160 (Compiled frame)&lt;/li&gt;
	&lt;li&gt;org.apache.jetspeed.container.state.impl.JetspeedNavigationalStateComponent.createURL(javax.servlet.http.HttpServletRequest, java.lang.String) @bci=29, line=131 (Compiled frame)&lt;/li&gt;
	&lt;li&gt;org.apache.jetspeed.pipeline.JetspeedPipeline$Invocation.invokeNex&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;My first solution was to remove the Spring prototype code and replace it with straight constructors (replacing commented code below):&lt;/p&gt;

&lt;p&gt;    public PortalURL createURL( HttpServletRequest request, String characterEncoding )&lt;br/&gt;
    {&lt;br/&gt;
        //PortalURL url = (PortalURL) beanFactory.getBean(urlBeanName, PortalURL.class); &amp;lt;--- **** used to be one line prototype creation, commented out....&lt;br/&gt;
        NavigationalStateCodec codec = (NavigationalStateCodec)beanFactory.getBean(&quot;NavigationalStateCodec&quot;);&lt;br/&gt;
        JetspeedCache cache = (JetspeedCache)beanFactory.getBean(&quot;portletContentCache&quot;);&lt;br/&gt;
        NavigationalState navState = new SessionFullNavigationalState( codec, cache);&lt;br/&gt;
        PortalContext context = (PortalContext)beanFactory.getBean(&quot;PortalContext&quot;);&lt;br/&gt;
        PortalURL url = new PathInfoEncodingPortalURL(navState, context);&lt;/p&gt;

&lt;p&gt;Perhaps it could be configured as:&lt;/p&gt;

&lt;p&gt;    public PortalURL createURL( HttpServletRequest request, String characterEncoding )&lt;br/&gt;
    {&lt;br/&gt;
        if (useSpringToWireBeans)&lt;br/&gt;
        {&lt;br/&gt;
         PortalURL url = (PortalURL) beanFactory.getBean(urlBeanName, PortalURL.class);&lt;br/&gt;
}&lt;br/&gt;
        else&lt;br/&gt;
        {&lt;br/&gt;
              NavigationalStateCodec codec = (NavigationalStateCodec)beanFactory.getBean(&quot;NavigationalStateCodec&quot;);&lt;br/&gt;
              JetspeedCache cache = (JetspeedCache)beanFactory.getBean(&quot;portletContentCache&quot;);&lt;br/&gt;
              NavigationalState navState = new SessionFullNavigationalState( codec, cache);&lt;br/&gt;
              PortalContext context = (PortalContext)beanFactory.getBean(&quot;PortalContext&quot;);&lt;br/&gt;
              PortalURL url = new PathInfoEncodingPortalURL(navState, context);&lt;/p&gt;
</description>
            <key id="16727">SPR-3426</key>
            <summary>Spring Bean Factory creation of Prototype (non-singleton) beans causes serious performance degradation under load</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="david@bluesunrise.com">David Sean Taylor</reporter>
                        <labels>
                            <label>performance</label>
                    </labels>
                <created>Fri, 27 Apr 2007 04:29:16 +0000</created>
                <updated>Tue, 19 Jun 2012 02:28:16 +0000</updated>
                            <resolved>Thu, 3 May 2007 03:41:55 +0000</resolved>
                                    <version>2.0 final</version>
                                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="23470" author="robh" created="Fri, 27 Apr 2007 04:35:44 +0000"  >&lt;p&gt;David,&lt;/p&gt;

&lt;p&gt;Have you tried running against 2.0.4? A &lt;b&gt;lot&lt;/b&gt; of performance enhancements went into that release in exactly this area - hopefully we managed to cover your use case with those.&lt;/p&gt;

&lt;p&gt;Rob&lt;/p&gt;</comment>
                            <comment id="23471" author="david@bluesunrise.com" created="Fri, 27 Apr 2007 04:43:59 +0000"  >&lt;p&gt;Rob,&lt;/p&gt;

&lt;p&gt;No, we were just discussing that, along with using a custom factory.&lt;br/&gt;
Will try 2.0.4 now....&lt;br/&gt;
Can we just drop in the 2.0.4 jars (removing the 2.0 jars)  or will we need to rebuild everything?&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;</comment>
                            <comment id="23476" author="robh" created="Fri, 27 Apr 2007 18:27:41 +0000"  >&lt;p&gt;Drop in should be entirely possible.&lt;/p&gt;</comment>
                            <comment id="23478" author="juergen.hoeller" created="Sat, 28 Apr 2007 21:13:22 +0000"  >&lt;p&gt;Indeed, the entire PropertyEditor and in particular PropertyEditorManager handling has been radically optimized in Spring 2.0.4. As Rob suggested, it is definitely worth retrying your performance tests against the 2.0.4 release...&lt;/p&gt;

&lt;p&gt;For even more performance optimizations in the BeanFactory implementation itself, try a recent Spring 2.0.5 snapshot (&lt;a href=&quot;http://www.springframework.org/snapshots&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.springframework.org/snapshots&lt;/a&gt;). We optimized internal concurrency through the use of ConcurrentHashMaps, as far as possible (see &lt;a href=&quot;https://jira.spring.io/browse/SPR-3355&quot; title=&quot;Improve performance of AbstractBeanFactory for high-concurrent-load applications&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-3355&quot;&gt;&lt;del&gt;SPR-3355&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="23502" author="david@bluesunrise.com" created="Mon, 30 Apr 2007 03:07:04 +0000"  >&lt;p&gt;We diff&apos;ed the relevant code comparing 2.0 with 2.0.4. There have been no changes to address this issue in 2.0.4.&lt;br/&gt;
We will diff 2.0.5 snapshot and the SVN trunk next...&lt;/p&gt;</comment>
                            <comment id="23510" author="juergen.hoeller" created="Mon, 30 Apr 2007 03:35:33 +0000"  >&lt;p&gt;I am surprised that 2.0.4 doesn&apos;t make a difference for your particular problem... After all, we cache PropertyEditorManager results (i.e. no editor found - the typical result, since we provide default editors for all common types ourselves) in the &quot;unknownEditorTypes&quot; Map now (in TypeConverterDelegate), among other optimizations.&lt;/p&gt;

&lt;p&gt;Do you actually get the same contention stacktraces (as shown above) in 2.0.4? Or do you run into different contention situations? Please double-check that you actually tested against the 2.0.4 jars... We created misleading test results ourselves a number of times, simply caused by wrong jars (or new jars next to old jars) on the classpath...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="23569" author="juergen.hoeller" created="Wed, 2 May 2007 22:51:59 +0000"  >&lt;p&gt;Any updates on 2.0.4 / 2.0.5 test results in your scenario?&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="23578" author="david@bluesunrise.com" created="Thu, 3 May 2007 03:24:00 +0000"  >&lt;p&gt;Great news. 2.0.4 performed like a champ. Looks like the PropertyEditorManager caching and related fixes did the job.&lt;br/&gt;
We are going to move to 2.0.4 for our next 2.1.1 release. Thanks, once again excellent Spring support!&lt;/p&gt;</comment>
                            <comment id="23579" author="juergen.hoeller" created="Thu, 3 May 2007 03:41:55 +0000"  >&lt;p&gt;OK, good to hear that it works for your purposes &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;FYI, Spring 2.0.5 will be released any day now, mainly as a bug fix release for 2.0.4, so you might even upgrade to 2.0.5 right away.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="15759">SPR-2981</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10020">
                    <name>Related</name>
                                            <outwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="16559">SPR-3355</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        9 years, 35 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 27 Apr 2007 04:35:44 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04qtz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>27721</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>