<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 21:46:10 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-8190/SPR-8190.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-8190] Migrate from CGLIB to Javassist or ByteBuddy</title>
                <link>https://jira.spring.io/browse/SPR-8190</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Tracking issue for CGLIB problems and possible solutions when moving to Javassist or, as recently suggested, Byte Buddy.&lt;/p&gt;</description>
            <key id="37259">SPR-8190</key>
            <summary>Migrate from CGLIB to Javassist or ByteBuddy</summary>
                <type id="2" iconUrl="https://jira.spring.io/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="4" iconUrl="https://jira.spring.io/images/icons/statuses/reopened.png" description="This issue was once resolved, but the resolution was deemed incorrect. From here issues are either marked assigned or resolved.">Reopened</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="cbeams">Chris Beams</reporter>
                        <labels>
                            <label>cglib-to-javassist-migration</label>
                    </labels>
                <created>Mon, 4 Apr 2011 01:24:30 +0000</created>
                <updated>Tue, 20 Dec 2016 17:11:10 +0000</updated>
                                                            <fixVersion>General Backlog</fixVersion>
                                    <component>Core</component>
                    <component>Core:AOP</component>
                        <due></due>
                            <votes>40</votes>
                                    <watches>38</watches>
                                                                <comments>
                            <comment id="77454" author="kyrill007" created="Fri, 6 Apr 2012 12:54:35 +0000"  >&lt;p&gt;Is it possible to give this issue a bit for weight. CGLIB is one big disaster. It comes with an old ASM version, unmaintained, and buggy. I think Spring is the only project left that is actually using it.&lt;/p&gt;</comment>
                            <comment id="77602" author="cbeams" created="Fri, 13 Apr 2012 07:05:26 +0000"  >&lt;p&gt;@Kyrill,&lt;/p&gt;

&lt;p&gt;It&apos;s definitely on the radar.  It would be helpful to hear about exactly what pain this causes you... is it actually ASM version conflicts, for example?  What else?&lt;/p&gt;</comment>
                            <comment id="77604" author="kyrill007" created="Fri, 13 Apr 2012 07:18:33 +0000"  >&lt;p&gt;ASM is huge. I have no firm evidence for it, but I also think CGLIB still leaks memory in some scenarios. Fundamentally, CGLIB prevents us from using what you, Chris, have been working so hard on: configuring Spring in Java. &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="81614" author="jpd9808" created="Tue, 10 Jul 2012 20:59:34 +0000"  >&lt;p&gt;I have issues with CGLIB leaking memory in OSGi environments where a bundle that uses CGLIB to create proxies will not let them go, even after removing the bundle.  I suspect it&apos;s related to the root of &lt;a href=&quot;https://jira.springsource.org/browse/SPR-4153&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;SPR-4153&lt;/a&gt;.  The result is that the permgen space eventually runs out after multiple re-deploys of bundles that use CGLIB.  Currently, it&apos;s merely an inconvenience in our development environments that requires us to occasionally restart our instances since we plan to restart production instances on every application deployment.  &lt;/p&gt;

&lt;p&gt;To reproduce the issue, create a Spring bundle with a CGLIB enhanced, for example an empty @Configuration file such as the following:&lt;/p&gt;
&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: gray; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;@Configuration&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; MyConfig {&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #008200; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;// class is enhanced by CGLIB&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;

&lt;p&gt;Then deploy the bundle to an OSGi environment. Each time the bundle is stopped and started again a new instance of the MyConfig class is re-created, each time enhanced by CGLIB, which gets cached.  Take a thread dump and search for &quot;MyConfig&quot; in the heap and you&apos;ll see each CGLIB enhanced instance hanging around.  This was produced with Spring 3.1.1 and CGLIB 2.2.  &lt;/p&gt;</comment>
                            <comment id="86242" author="pzoio" created="Wed, 19 Dec 2012 01:23:57 +0000"  >&lt;p&gt;Get a similar issue when using module redeploys using &lt;a href=&quot;http://code.google.com/p/impala/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Impala&lt;/a&gt;. Any module which uses the @Transactional where the proxying is class rather than interfaces based is affected. Each time module reloading recurrs for these modules, some more perm gen space is used up, until it eventually runs out.&lt;br/&gt;
Ultimately, this issue strongly discourages making any hot redeploy of modules available in production environments, so it would be a real bonus to get it sorted.&lt;/p&gt;

&lt;p&gt;Have been using Spring 3.0.6 and Cglib 2.2. Is this problem likely to have been fixed by an upgrade to Spring 3.2, and if not, how much longer should we expect for a resolution?&lt;/p&gt;</comment>
                            <comment id="86258" author="cbeams" created="Wed, 19 Dec 2012 08:43:21 +0000"  >&lt;p&gt;Phil, I&apos;d like to make sure this is pinned down once and for all. Can you provide me with reproduction steps to get up and running with the simplest possible impala-based app that demonstrates this issue? While you&apos;re at it, please double check against 3.2. We did make some tweaks to how CGLIB caching is done there, but I cannot be sure whether it will solve your problem without looking more closely.&lt;/p&gt;</comment>
                            <comment id="90143" author="mit_jones" created="Thu, 16 May 2013 15:54:44 +0000"  >&lt;p&gt;I am not sure how far this issue has progressed but if it helps I have created a few reproducible tests that can be run in Karaf that I think highlight the issues discussed here and in &lt;a href=&quot;https://jira.springsource.org/browse/SPR-5654&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://jira.springsource.org/browse/SPR-5654&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Attached is a zip file that contains the tests and hopefully reasonable instructions on how to set up the tests. I have also added a few observations of my own.&lt;/p&gt;

&lt;p&gt;In summary I have set up 2 bundles, with one bundle exporting a transaction manager and the other bundle referencing the transaction manager with a class that has been transactionally advised via a @Transactional annotation.&lt;/p&gt;

&lt;p&gt;The tests are further divided with one group dependent on Spring 3.1.4 and the second group dependent on Spring 3.2.2. Within these two groups there are two referencing bundles, one that is coded against interfaces (=&amp;gt; JDK proxy) and the other without interfaces (=&amp;gt; CGLIB).&lt;/p&gt;

&lt;p&gt;Both the Spring 3.1.4 and Spring 3.2.2 test bundles that use interfaces seem to be fine, i.e. the referencing bundle can be loaded and unloaded many times without resulting in a OutOfMemoryError: PermGen space error. I was able to verify using JVisualVM that the classes are collected although there seems to be a difference as to when they are collected (details of which are in the readme of the zip).&lt;/p&gt;

&lt;p&gt;Both the Spring 3.1.4 and Spring 3.2.2 test bundles that do not use interfaces and hence CGLIB comes into play ultimately fail with a  OutOfMemoryError: PermGen space error. I was able to verify using JVisualVM that the classes are not collected and that after uninstalling the referencing bundle that instances of the test classes still remain.&lt;/p&gt;

&lt;p&gt;It is possible that the tests could be simplified further, perhaps one bundle rather than two would suffice but I think separating the transaction manager is more realistic.&lt;/p&gt;

&lt;p&gt;I realise that class loader permgen leaks are an old well trodden issue that came to the forefront when undeploying web apps but because OSGI permits breaking an application down into fine grained modules I think this issue will become even more apparent as the promise of undeploying/stopping/starting parts of an application becomes a significant driver for the adoption of OSGI.&lt;/p&gt;

&lt;p&gt;I hope this helps.&lt;/p&gt;


&lt;p&gt;Regards,&lt;/p&gt;

&lt;p&gt;Tim&lt;/p&gt;</comment>
                            <comment id="90144" author="mit_jones" created="Thu, 16 May 2013 15:56:44 +0000"  >&lt;p&gt;Tests highlighting perm gen leaks using Karaf&lt;/p&gt;</comment>
                            <comment id="90150" author="cbeams" created="Fri, 17 May 2013 01:01:19 +0000"  >&lt;p&gt;Tim, thank you for the detailed report. An actual move from CGLIB to Javassist is not high on our priority list right now. Could you create a new Bug, copy your comment over as the description and attach the zip there? That is more likely to get attention in the near term.&lt;/p&gt;</comment>
                            <comment id="90188" author="mit_jones" created="Sun, 19 May 2013 13:44:15 +0000"  >&lt;p&gt;I have created a new bug as requested &lt;a href=&quot;https://jira.springsource.org/browse/SPR-10573&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://jira.springsource.org/browse/SPR-10573&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="102988" author="raphw" created="Tue, 6 May 2014 00:57:19 +0000"  >&lt;p&gt;Did you ever consider moving to something else then javassist? I want to suggest Byte Buddy (&lt;a href=&quot;http://bytebuddy.net&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bytebuddy.net&lt;/a&gt;) as an option which is a rather new library. For full disclosure, note that I am the author of this library but I still hope this posting is not conceived as too self-promotional. I wrote the library after working with cglib and javassist for quite a while and I believe that I took the best ideas out of both frameworks but replaced the bad ideas with something better. I think Spring could profit especially by Byte Buddy&apos;s retention of primitive types, the smaller-sized proxy classes and the improved support for implementing around-advice. At last, with Byte Buddy repackaging ASM correctly from day one, users would not have to deal with cglib version conflicts anymore.&lt;/p&gt;

&lt;p&gt;Finally, note that the makers of cglib moved their project to GitHub where they however stated that the library is officially not longer under active development. (&lt;a href=&quot;https://github.com/cglib/cglib/issues/3&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/cglib/cglib/issues/3&lt;/a&gt;)&lt;/p&gt;</comment>
                            <comment id="119924" author="juergen.hoeller" created="Tue, 22 Sep 2015 19:20:05 +0000"  >&lt;p&gt;We intend to stick with CGLIB for the time being, picking up CGLIB 3.2 whenever it gets released (which still seems to be planned).&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="132701" author="cemokoc" created="Wed, 12 Oct 2016 11:29:13 +0000"  >&lt;p&gt;Spock also has just started use ByteBuddy. Mockito is using as well. It might be a good idea to revisit ByteBuddy to replace CGLIB for Spring 5.&lt;/p&gt;</comment>
                            <comment id="132702" author="juergen.hoeller" created="Wed, 12 Oct 2016 11:51:54 +0000"  >&lt;p&gt;From my perspective, we&apos;re happy enough with our repackaged version of CGLIB 3.2.4 against our custom ASM fork at this point, so this isn&apos;t a high priority for us in 5.0. I&apos;m sure ByteBuddy is a fine piece but I&apos;m also sure we&apos;re going to have some trouble and some regressions, beyond the migration effort to begin with. Keep in mind that we are not just using CGLIB for AOP proxies but also for runtime-generated configuration subclasses and generated lookup methods, for example.&lt;/p&gt;

&lt;p&gt;In any case, I&apos;ve brought this ticket back to life, leaving it in the 5.x backlog for the time being.&lt;/p&gt;</comment>
                            <comment id="132710" author="raphw" created="Wed, 12 Oct 2016 17:51:17 +0000"  >&lt;p&gt;I am currently helping Hibernate to migrate from Javassist to Byte Buddy after they had some issues and Spring is a big enough framework that I can offer you to try building a prototype.&lt;/p&gt;

&lt;p&gt;Since Byte Buddy is just a class generator, it should be easy enough to switch library. In the end, only the generated code is exposed. If you wanted to, you could even mimic the &quot;PoweredByCglib&quot; part of the class name even though I would suggest something more meaningful such as SpringProxy or the like. Let me know if you are interested in my help, porting something from the cglib Enhancer is usually very straight forward!&lt;/p&gt;

&lt;p&gt;Also, FYI, I still use some time maintaining cglib but the development has ended. We are only integrating critical bug fixes but we do not plan to apply any bigger extensions for future Java releases.&lt;/p&gt;</comment>
                            <comment id="133460" author="olivergierke" created="Sat, 19 Nov 2016 17:53:36 +0000"  >&lt;p&gt;One thing that came up in a discussion recently is that the pure weight of ByteBuddy is quite an obstacle. 2.6 MB is pretty hefty considering that current Spring Core is 1.2 MB and already including inlined CGLib, ASM and Objenesis. Even considering the proxying subsystem as a whole (AOP, Beans, Core) we&apos;re still at ~2MB on our own so that ByteBuddy would more than double the package. Did you consider to splitting the library up so that the footprint could be reduced?&lt;/p&gt;

&lt;p&gt;What would definitely be interesting to see is &#8212; in contrast to strive to replace CGLib right away &#8212; whether there&apos;s a way we could provide users the option to switch to ByteBuddy if they explicitly opt into it.&lt;/p&gt;</comment>
                            <comment id="133468" author="juergen.hoeller" created="Sat, 19 Nov 2016 20:01:21 +0000"  >&lt;p&gt;Frankly, from a size perspective, I&apos;d rather handcraft minimal ASM-based class generation code for our own purposes. The end result would probably be in the 200-300 KB ballpark, since we literally just need dynamic subclass generation for non-interface-based AOP proxies, for configuration classes and for lookup method replacements, always just overriding a few methods to intercept straight calls to them. As far as I&apos;m aware, Weld and OpenWebBeans use custom code there as well, primarily for performance reasons (they need to optimize more aggressively due to the overuse of proxies in CDI) but possibly also for jar size reasons.&lt;/p&gt;

&lt;p&gt;Then again, we simply don&apos;t have any issues with CGLIB at this point, not even on JDK 9 or OSGi. Our approach of generating proxy classes into the application class loader, with references to application code as well as framework code, doesn&apos;t mind references to our embedded variant of CGLIB (since such generated code depends on other parts of Spring core anyway). We do not make assumptions about the presence of annotations either: For introspection purposes, we always look at the user-declared class - if necessary, traversing up to the superclass of a CGLIB proxy class - which is quite an established pattern already.&lt;/p&gt;

&lt;p&gt;FWIW, we always bind our variant of CGLIB to our embedded variant of ASM. Back in 2013, we made CGLIB 3.0 work against our opened-up version of ASM 4.2 for Java 8 support, so we didn&apos;t even have to wait for CGLIB 3.1 in Spring Framework 4.0 milestones. The recent CGLIB 3.2 upgrade was largely a bonus, and our opened-up ASM 5.1 variant works fine on JDK 9 already... Once ASM 6.0 is out, we&apos;ll apply the corresponding upgrade to our fork, but we don&apos;t have to wait for it, and we in particular don&apos;t have to wait for an ASM-6.0-based CGLIB version. It all works fine with our custom variants for our purposes on JDK 9 already.&lt;/p&gt;

&lt;p&gt;I&apos;m sure Byte Buddy is a fine piece of engineering, and its swiss army knife capabilities for creating classes from scratch are impressive. However, for our purposes, it looks like overkill: &amp;gt;2 MB extra mandatory jar size for no particular benefit with our use cases, not even for JDK 9 compatibility. Finally, there may be new side effects and maintenance issues: While CGLIB has several stakeholders and is small enough to be patched by ourselves, Byte Buddy is not even GA for a year yet and a huge single-maintainer codebase. It may be more actively developed at this point, but even with the best of intentions, there are no guarantees for the years to come.&lt;/p&gt;</comment>
                            <comment id="133470" author="juergen.hoeller" created="Sat, 19 Nov 2016 20:59:56 +0000"  >&lt;p&gt;The above said, I certainly don&apos;t mind a &lt;tt&gt;ByteBuddyAopProxy&lt;/tt&gt; variant as an alternative to our &lt;tt&gt;CglibAopProxy&lt;/tt&gt;. The question is just when we&apos;d choose it: The plain presence of Byte Buddy on the classpath doesn&apos;t seem like a clear enough indication, in particular when brought in through Hibernate or the like.&lt;/p&gt;

&lt;p&gt;I wouldn&apos;t bother with replacements for configuration class and lookup method processing since we&apos;d have to introduce a specific class processing SPI there for a start. Runtime configuration classes don&apos;t get into the hands of user code anyway, and lookup methods are a niche feature.&lt;/p&gt;</comment>
                            <comment id="133472" author="olivergierke" created="Sat, 19 Nov 2016 21:14:26 +0000"  >&lt;p&gt;I wonder: are issues like &lt;a href=&quot;https://jira.spring.io/browse/SPR-14322&quot; title=&quot;CGLIB proxies should still consider annotations on interface methods&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-14322&quot;&gt;SPR-14322&lt;/a&gt; something tied to CGLib? I.e. would those become easily solvable with something like ByteBuddy in place?&lt;/p&gt;</comment>
                            <comment id="133473" author="juergen.hoeller" created="Sat, 19 Nov 2016 21:17:49 +0000"  >&lt;p&gt;Well, I guess a custom proxy class could artifically redeclare annotations from interfaces, even in contrast to Java&apos;s usual inheritance rules... But effectively, this is simply us not checking corresponding interface methods for annotations in such a scenario. The easiest solution is an explicit lookup on our end there, in a particular with our rather sophisticated merged annotation support.&lt;/p&gt;</comment>
                            <comment id="133476" author="raphw" created="Sun, 20 Nov 2016 11:55:28 +0000"  >&lt;p&gt;I did consider splitting up Byte Buddy in the past and even did a prototype. In the end, the core dependency would have been something around 1.7 MB with dozens of extension modules which would have made the library much more difficult to use, Another issue with this modularization, with Byte Buddy being a convention over configuration framework components need to know about default implementations and not only some interface and I did not think that class path discovery would be the right approach to overcome this either. Therefore, I decided to retain the single jar file, also because I do not think we would have a different discussion over a 1.7 MB dependency. Many users of Byte Buddy that create Java agents shade and minimize the jar anyways what then creates the minimal sized-jar for the specific use case.&lt;/p&gt;

&lt;p&gt;That said, I fully understand that you do not want to bring in a dependency of this size when it even overweights your core dependencies. From my own experience, I would still not recommend you to spin your own proxy mechanism. As a matter of fact, this is where I started out; I needed to write a small replacement for cglib that generated simple proxy classes. This &quot;small library&quot; is now Byte Buddy. Creating proxy code that is performant is not a trivial task and it took me years of fine-tuning to reduce the overhead of the proxy code to a minimum. For example, cglib&apos;s MethodProxy class quickly adds so many branches to its invoke method that its creates an inlining barrier for the JIT. On average, cglib proxied-calls bring 10 times the overhead on each invocation compared to Byte Buddy. In the end, this is the reason I suggested you to use the library in the first place; I can very much understand why you chose cglib as it perfectly covers your use-case.&lt;/p&gt;</comment>
                            <comment id="133478" author="juergen.hoeller" created="Sun, 20 Nov 2016 13:23:44 +0000"  >&lt;p&gt;Rafael, good point about proxy dispatch paths and inlining. An optimized dispatch code path would certainly be worth an option at least, i.e. back to the optional &lt;tt&gt;ByteBuddyAopProxy&lt;/tt&gt; variant suggested above. It&apos;d be great to experiment with that ahead of our 5.0 GA still.&lt;/p&gt;

&lt;p&gt;Also, point taken, designing custom class generation code is non-trivial... but not unusual out there, we&apos;re even doing it ourselves for our SpEL compilation mode already. It is probably the only way to go for a default footprint as minimal as we have it with CGLIB now.&lt;/p&gt;

&lt;p&gt;Ollie, with respect to annotation retaining, here&apos;s an interesting one from the Bean Validation world: &lt;a href=&quot;https://hibernate.atlassian.net/projects/BVAL/issues/BVAL-491&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hibernate.atlassian.net/projects/BVAL/issues/BVAL-491&lt;/a&gt; ... If a library/framework is unaware of dynamic subclassing, it may evaluate redeclared annotations as user-specified on subclasses and apply certain constraints to that, assuming an explicitly conceived hierarchy on the user&apos;s end.&lt;/p&gt;</comment>
                            <comment id="134193" author="raphw" created="Fri, 16 Dec 2016 18:56:52 +0000"  >&lt;p&gt;I finally found the time to prototype a solution: &lt;a href=&quot;https://github.com/raphw/spring-framework/commit/ba838f689012d5cb49671ca6d766192212ba730b&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/raphw/spring-framework/commit/ba838f689012d5cb49671ca6d766192212ba730b&lt;/a&gt; - In the end, it was not difficult at all.&lt;/p&gt;

&lt;p&gt;I am not entirely sure about the caching part, but all in all it should work out. I have not yet tested much of the solution but I would love to talk it through with someone. Is there a way to get in touch?&lt;/p&gt;</comment>
                            <comment id="134244" author="raphw" created="Tue, 20 Dec 2016 17:11:10 +0000"  >&lt;p&gt;I updated my PR with a hacked property-based switch in order to be able to run the unit tests. Everything seems to work just fine. Let me know what you guys think.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10150">
                    <name>Depend</name>
                                            <outwardlinks description="depends on">
                                        <issuelink>
            <issuekey id="18638">SPR-4153</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="26251">SPR-5654</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="32870">SPR-7484</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="16397">SPR-3279</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="21203" name="permgen-leak-spring.tar.gz" size="504582" author="mit_jones" created="Thu, 16 May 2013 15:56:44 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        2 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 6 Apr 2012 12:54:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>raphw</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00z33:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5729</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                </customfields>
    </item>
</channel>
</rss>