<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:17:15 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2684/SPR-2684.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2684] SpringSessionSynchronization fails after moving from Hibernate 3.0 to 3.1</title>
                <link>https://jira.spring.io/browse/SPR-2684</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I&apos;ve been asked to create this JIRA for issue I&apos;ve encountered with the SpringSessionSynchronisation class after moving our application from Hibernate 3.0 to 3.1. &lt;/p&gt;

&lt;p&gt;Essentially, it looks like Spring is closing the Hibernate session and then attempting to reconnect to it and complaining that it has been closed i.e.&lt;/p&gt;

&lt;p&gt;2006-10-04 11:42:00,281 DEBUG  AAAScheduler_Worker-4 org.springframework.transaction.interceptor.TransactionInterceptor - Invoking commit for transaction on com.aaa.bbb.core.business.billing.BillingService.processPaymentRequests&lt;br/&gt;
2006-10-04 11:42:00,281 DEBUG  AAAScheduler_Worker-4 org.springframework.orm.hibernate3.SessionFactoryUtils - Flushing Hibernate Session on transaction synchronization&lt;br/&gt;
2006-10-04 11:42:00,281 DEBUG  AAAScheduler_Worker-4 org.springframework.orm.hibernate3.SessionFactoryUtils - Flushing Hibernate Session on transaction synchronization&lt;br/&gt;
2006-10-04 11:42:00,281 DEBUG  AAAScheduler_Worker-4 org.springframework.transaction.support.TransactionSynchronizationManager - Removed value &lt;span class=&quot;error&quot;&gt;&amp;#91;org.springframework.orm.hibernate3.SessionHolder@556547&amp;#93;&lt;/span&gt; for key &lt;span class=&quot;error&quot;&gt;&amp;#91;org.hibernate.impl.SessionFactoryImpl@be5687&amp;#93;&lt;/span&gt; from thread &lt;span class=&quot;error&quot;&gt;&amp;#91;AAAScheduler_Worker-4&amp;#93;&lt;/span&gt;&lt;br/&gt;
2006-10-04 11:42:00,281 DEBUG  AAAScheduler_Worker-4 org.springframework.orm.hibernate3.SessionFactoryUtils - Closing Hibernate Session&lt;br/&gt;
2006-10-04 11:42:00,281 ERROR  AAAScheduler_Worker-4 com.aaa.bbb.core.common.event.hibernate.HibernateTransactionManagerEventProducer - TransactionSynchronization.afterCompletion threw exception&lt;br/&gt;
org.hibernate.SessionException: Session is closed!&lt;br/&gt;
	at org.hibernate.impl.AbstractSessionImpl.errorIfClosed(AbstractSessionImpl.java:49)&lt;br/&gt;
	at org.hibernate.impl.SessionImpl.reconnect(SessionImpl.java:374)&lt;br/&gt;
	at org.springframework.orm.hibernate3.SessionFactoryUtils$SpringSessionSynchronization.afterCompletion(SessionFactoryUtils.java:981)&lt;br/&gt;
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.invokeAfterCompletion(AbstractPlatformTransactionManager.java:729)&lt;br/&gt;
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerAfterCompletion(AbstractPlatformTransactionManager.java:701)&lt;br/&gt;
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:538)&lt;br/&gt;
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:473)&lt;br/&gt;
	at org.springframework.transaction.interceptor.TransactionAspectSupport.doCommitTransactionAfterReturning(TransactionAspectSupport.java:267)&lt;br/&gt;
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:106)&lt;br/&gt;
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170)&lt;br/&gt;
	at com.aaa.bbb.core.business.common.dao.EntitySessionScopeInterceptor.invoke(EntitySessionScopeInterceptor.java:64)&lt;br/&gt;
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170)&lt;br/&gt;
	at com.aaa.bbb.core.business.common.dao.OptimisticLockInterceptor.invoke(OptimisticLockInterceptor.java:46)&lt;br/&gt;
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170)&lt;br/&gt;
	at com.aaa.bbb.core.business.aop.PerformanceLoggerInterceptor.invoke(PerformanceLoggerInterceptor.java:377)&lt;br/&gt;
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170)&lt;br/&gt;
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:176)&lt;br/&gt;
	at $Proxy99.processPaymentRequests(Unknown Source)&lt;br/&gt;
	at com.aaa.bbb.core.business.billing.scheduling.PaymentRequestRunJobWrapper.executeInternal(PaymentRequestRunJobWrapper.java:51)&lt;br/&gt;
	at com.aaa.bbb.core.business.common.scheduling.AbstractBbbQuartzJobBean.execute(AbstractBbbQuartzJobBean.java:96)&lt;br/&gt;
	at org.quartz.core.JobRunShell.run(JobRunShell.java:195)&lt;br/&gt;
	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:520)&lt;/p&gt;

&lt;p&gt;The full details of the issue are described in my post on the Spring forums &lt;a href=&quot;http://forum.springframework.org/showthread.php?t=29680&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.springframework.org/showthread.php?t=29680&lt;/a&gt;&lt;/p&gt;</description>
            <key id="15140">SPR-2684</key>
            <summary>SpringSessionSynchronization fails after moving from Hibernate 3.0 to 3.1</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="banderson">Ben Anderson</reporter>
                        <labels>
                    </labels>
                <created>Thu, 5 Oct 2006 13:00:06 +0000</created>
                <updated>Tue, 19 Jun 2012 03:51:15 +0000</updated>
                            <resolved>Mon, 20 Nov 2006 20:30:37 +0000</resolved>
                                    <version>1.2.8</version>
                                    <fixVersion>1.2.9</fixVersion>
                                    <component>Data</component>
                    <component>Transaction</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="20107" author="juergen.hoeller" created="Thu, 5 Oct 2006 21:28:34 +0000"  >&lt;p&gt;That reconnection code has actually been removed in Spring 2.0, since later Hibernate 3.1 versions did not expose the behavior anymore, therefore didn&apos;t require the special check anymore. I consider removing it in Spring 1.2.9 as well, which would remove the potential for the failure that you experienced.&lt;/p&gt;

&lt;p&gt;That said, it is actually rather strange that you run into this situation in the first place. The reconnection attempt only kicks in for a Session &lt;b&gt;which has been open before the current transaction&lt;/b&gt;, in which case the Session won&apos;t be closed by the current transaction in any case. For some reason, your scenario leads to the Session being closed nevertheless, with a subsequent reconnection attempt. I can&apos;t find a code path that might lead to this...&lt;/p&gt;

&lt;p&gt;What&apos;s also strange is that you have &lt;b&gt;two&lt;/b&gt; &quot;Flushing Hibernate Session on transaction synchronization&quot; entries in your log. This looks like there are two synchronizations registered for the same Session, which is really odd. Do you maybe have some special handling of your SessionFactory, with the SessionFactory exposed in a wrapped and a non-wrapped fashion (or the like)? Session synchronizations are registered with the SessionFactory as key, hence the question...&lt;/p&gt;

&lt;p&gt;In any case, details on your transaction manager, SessionFactory setup, etc would certainly be helpful.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="20141" author="juergen.hoeller" created="Fri, 6 Oct 2006 05:14:19 +0000"  >&lt;p&gt;It would also be great if you could give this a try with Spring 2.0 final, and let me know whether the problem is still present there. As I mentioned, there is no such reconnection code in Spring 2.0 anymore, similar to what&apos;s planned for Spring 1.2.9...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="20166" author="banderson" created="Sun, 8 Oct 2006 16:35:41 +0000"  >&lt;p&gt;Hi Juergen,&lt;/p&gt;

&lt;p&gt;Thanks for looking at my issue. I tried with Spring 2.0 final but ran into a few unrelated issues. First one was the removal of the BeanReferenceFactoryBean which we have a dependency on. After I implemented a workaround for that I hit what appears to be another configuration issue:&lt;/p&gt;

&lt;p&gt;2006-10-09 14:08:13,140 ERROR  org.springframework.web.context.ContextLoader - Context initialization failed&lt;br/&gt;
...&lt;br/&gt;
Caused by: &lt;br/&gt;
java.lang.IllegalArgumentException: Key must not be null&lt;br/&gt;
	at org.springframework.util.Assert.notNull(Assert.java:113)&lt;br/&gt;
	at org.springframework.transaction.support.TransactionSynchronizationManager.hasResource(TransactionSynchronizationManager.java:119)&lt;br/&gt;
	at org.springframework.orm.hibernate3.HibernateTransactionManager.doGetTransaction(HibernateTransactionManager.java:386)&lt;br/&gt;
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:281)&lt;br/&gt;
	at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:257)&lt;br/&gt;
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:102)&lt;br/&gt;
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)&lt;br/&gt;
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:209)&lt;br/&gt;
	at $Proxy12.load(Unknown Source)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:324)&lt;br/&gt;
	at org.springframework.util.MethodInvoker.invoke(MethodInvoker.java:270)&lt;br/&gt;
...&lt;/p&gt;

&lt;p&gt;For some reason the getSessionFactory method appears to be returning null at line 386 in the HibernateTransactionManager.&lt;/p&gt;

&lt;p&gt;I&apos;ll read through the 2.0 release notes again and see if anything obvious leaps out. Meanwhile I&apos;ll get together the other details you have requested regarding our transaction manager and sessionFactory setup.&lt;/p&gt;
</comment>
                            <comment id="20167" author="banderson" created="Sun, 8 Oct 2006 18:41:15 +0000"  >&lt;p&gt;Juergen,&lt;/p&gt;

&lt;p&gt;Our transaction manager configuration is similar to the following:&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;transactionManager&quot; init-method=&quot;validateState&quot;&lt;br/&gt;
		class=&quot;com.aaa.bbb.HibernateTransactionManagerEventProducer&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;dataSource&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref bean=&quot;dataSource&quot; /&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;listener&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref bean=&quot;hibernateTransactionalFlushTrigger&quot; /&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;sessionFactory&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref bean=&quot;sessionFactory&quot; /&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;The HibernateTransactionManagerEventProducer class simply extends the Spring HibernateTransactionManager for the purpose of creating our own application events when the doBegin, doCommit, doResume methods are invoked. The datasource is obtained via a JNDI lookup from a Sun One application server.&lt;/p&gt;

&lt;p&gt;Our session factory configuration is as follows:&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;sessionFactory&quot;&lt;br/&gt;
		class=&quot;com.aaa.bbb.AAALocalSessionFactoryBean&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;dataSource&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref bean=&quot;dataSource&quot;/&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;mappingResources&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref bean=&quot;hibernateMappingResources&quot;/&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;entityInterceptor&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref bean=&quot;hibernateEntityInterceptor&quot;/&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;eventListeners&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref bean=&quot;hibernateEventListeners&quot;/&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;hibernateProperties&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;bean class=&quot;org.springframework.beans.factory.config.MethodInvokingFactoryBean&quot;&amp;gt;&lt;br/&gt;
		        &amp;lt;property name=&quot;targetObject&quot;&amp;gt;&lt;br/&gt;
		            &amp;lt;ref bean=&quot;applicationConfigurationProperties&quot;/&amp;gt;&lt;br/&gt;
		        &amp;lt;/property&amp;gt;&lt;br/&gt;
		        &amp;lt;property name=&quot;targetMethod&quot;&amp;gt;&lt;br/&gt;
		            &amp;lt;value&amp;gt;getProperties&amp;lt;/value&amp;gt;&lt;br/&gt;
		        &amp;lt;/property&amp;gt;&lt;br/&gt;
        	&amp;lt;/bean&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;	&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;AAALocalSessionFactoryBean simply extends the Spring org.springframework.orm.hibernate3.LocalSessionFactoryBean class without adding any additional functionality. We&apos;re also using the Hibernate event framework to initiate business logic when persisted object properties obtain values of interest (this may result in the creation of new persisted objects within the same database transaction).&lt;/p&gt;

&lt;p&gt;Is there anything more specific I can provide?&lt;/p&gt;</comment>
                            <comment id="20180" author="juergen.hoeller" created="Tue, 10 Oct 2006 20:02:10 +0000"  >&lt;p&gt;FYI, BeanReferenceFactoryBean has been re-added for Spring 2.0.1, since it seems to be in active use despite being somewhat superseded (but as we learned, not fully superseded for all use cases). You&apos;ll find the class present again in recent 2.0.1 snapshots (available from &lt;a href=&quot;http://www.springframework.org/snapshots&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.springframework.org/snapshots&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;As for the general issue, I&apos;ll have a closer look at it later today or tomorrow. There is probably some non-common issue hiding in your specific setup there...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="20211" author="juergen.hoeller" created="Thu, 12 Oct 2006 00:17:03 +0000"  >&lt;p&gt;This is really odd... Why does &quot;getSessionFactory()&quot; return null there? I&apos;m afraid you&apos;ll have to track this down on your installation, or try to isolate the problem and submit a corresponding test case... From a static review, I really have no clue what the root cause could be... I still wonder why you seem to have &lt;b&gt;2&lt;/b&gt; transactional Sessions there, according to your log.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="20457" author="juergen.hoeller" created="Wed, 25 Oct 2006 23:36:14 +0000"  >&lt;p&gt;Any new insights on this, Ben? The 2.0.1 deadline is approaching...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="20478" author="banderson" created="Thu, 26 Oct 2006 11:30:27 +0000"  >&lt;p&gt;Sorry, no new insights as yet. We&apos;re a long way off migrating to Spring 2.0 at the moment so we&apos;ll probably just have to wait for 1.2.9. I haven&apos;t been able to spend much time on it because we&apos;ve internally rated it a low priority. I&apos;ll look at it again in the next few weeks and see if I can develop some sort of test case.&lt;/p&gt;

&lt;p&gt;Ben&lt;/p&gt;</comment>
                            <comment id="20992" author="robvarga" created="Mon, 20 Nov 2006 17:46:17 +0000"  >&lt;p&gt;With all respects, is trying to get this bug fixed in 1.2.9 worth delaying all the other fixes in 1.2.9? &lt;/p&gt;

&lt;p&gt;Why do you not make an 1.2.10 for only this bug, and release the rest of the stuff as 1.2.9?&lt;/p&gt;

&lt;p&gt;Best regards,&lt;/p&gt;

&lt;p&gt;Robert &lt;/p&gt;</comment>
                            <comment id="21001" author="juergen.hoeller" created="Mon, 20 Nov 2006 20:30:37 +0000"  >&lt;p&gt;Good point! However, this bug is not the only reason why 1.2.9 is not out yet; it&apos;s also waiting for some further backports from 2.0.1 (which are already marked as fixed for 2.0.1 and 1.2.9, but haven&apos;t been backported to the 1.2 branch yet).&lt;/p&gt;

&lt;p&gt;1.2.9 is supposed to be released ASAP after Spring 2.0.1. We might publish a 1.2.9 snapshot this week already, alongside our 2.0.x snapshots. I&apos;ll keep you informed.&lt;/p&gt;

&lt;p&gt;As for this bug, I consider it closed for the time being, since it is likely to go away without that special Hibernate 3.1 RC1 check. To be reopened if the issue still arises in the 1.2.9 release and we can&apos;t find a config-based solution for it.&lt;/p&gt;

&lt;p&gt;BTW, any subsequent 1.2.x releases are likely to be called 1.2.9a, 1.2.9b, etc, since we do not plan any further feature backports - rather just critical fixes.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21430" author="juergen.hoeller" created="Fri, 22 Dec 2006 05:48:16 +0000"  >&lt;p&gt;FYI, the Spring 1.2.9 release is - finally - just around the corner, scheduled for December 30th. I&apos;ve made a sort of release candidate available in the form of the 1.2.9-20061222 snapshot, available from:&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://static.springframework.org/downloads/nightly&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://static.springframework.org/downloads/nightly&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please give this a try, simply replacing the 1.2.8 jar with the 1.2.9 snapshot jar and testing whether everything still works for you. This will help us to ensure the quality of the actual 1.2.9 release next week!&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21538" author="banderson" created="Mon, 1 Jan 2007 14:55:54 +0000"  >&lt;p&gt;I gave our application a try with the 1.2.9 snapshot (spring-framework-1.2.9-20061231.zip) by simply replacing the 1.2.8 spring.jar file with the 1.2.9 version.&lt;/p&gt;

&lt;p&gt;Unfortunately our application failed to start up with the 1.2.9 spring.jar file - I&apos;ve pasted a fragment from the application log below. When I went back to the 1.2.8 spring.jar file the application started without any problems.&lt;/p&gt;


&lt;p&gt;2007-01-02 15:28:45,596 ERROR  org.springframework.web.context.ContextLoader - Context initialization failed&lt;/p&gt;

&lt;p&gt;...&amp;lt;BeanCreationExceptions removed&amp;gt;...&lt;/p&gt;

&lt;p&gt;org.springframework.beans.factory.FactoryBeanNotInitializedException: Error creating bean with name &apos;systemLocaleDao&apos;: FactoryBean returned null object: probably not fully initialized (maybe due to circular bean reference)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForSharedInstance(AbstractBeanFactory.java:841)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:192)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:182)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:105)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1053)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:862)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:382)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:233)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)&lt;/p&gt;

&lt;p&gt; ...&amp;lt;I&apos;ve cut out 150 lines or so here because its the same lines being repeated over and over&amp;gt;...&lt;/p&gt;

&lt;p&gt;org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:211)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:604)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.registerListeners(AbstractApplicationContext.java:486)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:317)&lt;br/&gt;
	at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:139)&lt;br/&gt;
	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:252)&lt;br/&gt;
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:190)&lt;br/&gt;
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49)&lt;br/&gt;
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4010)&lt;br/&gt;
	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4522)&lt;br/&gt;
	at com.sun.enterprise.web.WebModule.start(WebModule.java:241)&lt;br/&gt;
	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1086)&lt;br/&gt;
	at org.apache.catalina.core.StandardHost.start(StandardHost.java:833)&lt;br/&gt;
	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1086)&lt;br/&gt;
	at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:483)&lt;br/&gt;
	at org.apache.catalina.startup.Embedded.start(Embedded.java:894)&lt;br/&gt;
	at com.sun.enterprise.web.WebContainer.start(WebContainer.java:707)&lt;br/&gt;
	at com.sun.enterprise.web.PEWebContainer.startInstance(PEWebContainer.java:507)&lt;br/&gt;
	at com.sun.enterprise.web.PEWebContainerLifecycle.onStartup(PEWebContainerLifecycle.java:54)&lt;br/&gt;
	at com.sun.enterprise.server.ApplicationServer.onStartup(ApplicationServer.java:300)&lt;br/&gt;
	at com.sun.enterprise.server.PEMain.run(PEMain.java:294)&lt;br/&gt;
	at com.sun.enterprise.server.PEMain.main(PEMain.java:220)&lt;/p&gt;</comment>
                            <comment id="21539" author="banderson" created="Mon, 1 Jan 2007 15:16:18 +0000"  >&lt;p&gt;Ok, looking at the 1.2.9 release notes it says under the changes to package org.springframework.aop:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;ProxyFactoryBean returns null in case of a circular reference, leading to a FactoryBeanNotInitializedException&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So it looks like we may have discovered an issue related to this fix. I&apos;ll try and determine if we really do have a circular reference.&lt;/p&gt;</comment>
                            <comment id="21540" author="banderson" created="Mon, 1 Jan 2007 16:17:51 +0000"  >&lt;p&gt;Seems to be related to the transaction interceptors that we define on our dao proxies. This is the definition of the &apos;systemLocaleDao&apos; bean that fails to be created in the previous stacktrace:&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;systemLocaleDao&quot; &lt;br/&gt;
		class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;proxyInterfaces&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;value&amp;gt;com.platefood.pfp.core.business.system.dao.SystemLocaleDao&amp;lt;/value&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;target&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;ref local=&quot;systemLocaleDaoTarget&quot;/&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;interceptorNames&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;list&amp;gt;&lt;br/&gt;
				&amp;lt;value&amp;gt;systemLocaleDaoTransactionInterceptor&amp;lt;/value&amp;gt;&lt;br/&gt;
			&amp;lt;/list&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;If I comment out the interceptor names the problem goes away (well, what actually happens is that I get the same exception but for a different dao).&lt;/p&gt;</comment>
                            <comment id="21541" author="juergen.hoeller" created="Mon, 1 Jan 2007 16:28:21 +0000"  >&lt;p&gt;Ouch... that ProxyFactoryBean change was just intended to give a &lt;b&gt;better&lt;/b&gt; exception message, but apparently has a side effect that&apos;s not caught by the test suite. Looks like we&apos;ll have to revert that change.&lt;/p&gt;

&lt;p&gt;The 1.2.9-20061222 snapshot didn&apos;t have that ProxyFactoryBean change (and is otherwise virtually identical), so you might want to give that a try instead for your purposes.&lt;/p&gt;

&lt;p&gt;Thanks a lot for the testing... That sort of stuff is exactly what we need to catch &lt;b&gt;before&lt;/b&gt; the official release!&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21561" author="banderson" created="Tue, 2 Jan 2007 08:57:27 +0000"  >&lt;p&gt;Hi Juergen,&lt;/p&gt;

&lt;p&gt;The spring.jar from the 1.2.9-20061222 snapshot appears to work fine and has resolved our original issue!&lt;/p&gt;

&lt;p&gt;If I get a chance I&apos;ll try and run our full application test suite with this version and see if the ProxyFactoryBean change is the only issue that will stop us upgrading to 1.2.9.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Ben&lt;/p&gt;</comment>
                            <comment id="21566" author="juergen.hoeller" created="Tue, 2 Jan 2007 18:27:25 +0000"  >&lt;p&gt;Thanks for the feedback, Ben. It would be great if you run your entire test suite and let me know how it goes...&lt;/p&gt;

&lt;p&gt;Since that ProxyFactoryBean change was intended to be entirely cosmetic - in that it was just supposed to present a nicer error message for circular references -, I&apos;m inclined to revert it completely, back to the original 1.2.8 / 1.2.9-20061222 code. The final 1.2.9 release must not contain such potential breakages, in particular not caused by cosmetic changes.&lt;/p&gt;

&lt;p&gt;I&apos;ll probably publish another 1.2.9 snapshot tonight, with that ProxyFactoryBean change reverted, and potentially incorporating further feedback coming in today.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21673" author="juergen.hoeller" created="Sun, 7 Jan 2007 19:14:40 +0000"  >&lt;p&gt;FYI, there&apos;s a new snapshot available: 1.2.9-20070107. The ProxyFactoryBean should be fully compatible with 1.2.8 again; otherwise, there shouldn&apos;t be any surprises.&lt;/p&gt;

&lt;p&gt;So if you happen to have a chance to run your application test suite against Spring 1.2.9, that would be the preferred snapshot to run against &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The actual 1.2.9 release is now scheduled for tomorrow.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21680" author="banderson" created="Mon, 8 Jan 2007 13:01:06 +0000"  >&lt;p&gt;I&apos;m testing 1.2.9-20070107 with our test suite and have tests failing with exceptions that look related to the following change (from changelog.txt)&lt;/p&gt;

&lt;p&gt;Package org.springframework.validation&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&quot;Errors.addAllErrors&quot; only accepts Errors instance with same object name&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The following is fragments from the stack trace:&lt;/p&gt;

&lt;p&gt;java.rmi.RemoteException: Errors object needs to have same object name; nested exception is: &lt;br/&gt;
	java.lang.IllegalArgumentException: Errors object needs to have same object name&lt;br/&gt;
...&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)&lt;br/&gt;
Caused by: java.lang.IllegalArgumentException: Errors object needs to have same object name&lt;br/&gt;
	at org.springframework.validation.BindException.addAllErrors(BindException.java:269)&lt;br/&gt;
...&lt;/p&gt;

&lt;p&gt;What JIRA issue is the Errors.addAllErrors change addressing?&lt;/p&gt;</comment>
                            <comment id="21682" author="banderson" created="Mon, 8 Jan 2007 15:06:41 +0000"  >&lt;p&gt;I&apos;ve had at look at our usage of BindException and I think we can make a relatively minor change to our code to be compatible with the new same object name requirement.&lt;/p&gt;</comment>
                            <comment id="21685" author="juergen.hoeller" created="Mon, 8 Jan 2007 18:03:36 +0000"  >&lt;p&gt;While I do recommend to stick with the same object name for all entries in the same Errors object, this is an indication that we shouldn&apos;t have that assertion in Spring 1.2.9. We have in Spring 2.0.x, which is feasible, but 1.2.9 should accept all (non-dangerous) usage models that 1.2.8 accepted. Hence, I&apos;m going to remove that same-object-name assertion and publish another snapshot &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21690" author="juergen.hoeller" created="Tue, 9 Jan 2007 00:16:23 +0000"  >&lt;p&gt;Ben, I&apos;ve attached a 1.2.9-20070109 jar (this time here on JIRA) that does not include the same-object-name assertion anymore.&lt;/p&gt;

&lt;p&gt;Thanks for your testing efforts...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21700" author="banderson" created="Tue, 9 Jan 2007 11:30:05 +0000"  >&lt;p&gt;Hi Juergen,&lt;/p&gt;

&lt;p&gt;The 1.2.9-20070109 jar resolves the BindException issue however, I&apos;ve found a more serious problem. We&apos;ve got a test case failing due to an optimistic lock exception which does not occur under 1.2.8. It looks like it may be related to the aop changes.&lt;/p&gt;

&lt;p&gt;The relevant part of the stack trace is:&lt;/p&gt;

&lt;p&gt;Caused by: com.platefood.pfp.core.business.exception.dao.OptimisticLockException&lt;br/&gt;
	at com.platefood.pfp.core.business.common.dao.OptimisticLockInterceptor.invoke(OptimisticLockInterceptor.java:55)&lt;br/&gt;
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:169)&lt;br/&gt;
	at com.platefood.pfp.core.business.aop.PerformanceLoggerInterceptor.invoke(PerformanceLoggerInterceptor.java:377)&lt;br/&gt;
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:169)&lt;br/&gt;
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:176)&lt;br/&gt;
	at $Proxy75.processPaymentTransaction(Unknown Source)&lt;br/&gt;
	at com.platefood.pfp.core.business.billing.StatementCalculationTestCase$1.execute(StatementCalculationTestCase.java:166)&lt;br/&gt;
	... 32 more&lt;/p&gt;
</comment>
                            <comment id="21711" author="juergen.hoeller" created="Thu, 11 Jan 2007 00:51:39 +0000"  >&lt;p&gt;Hi Ben,&lt;/p&gt;

&lt;p&gt;Oh well, I guess this is why such pre-release testing is so important...&lt;/p&gt;

&lt;p&gt;Based on which criteria does your OptimisticLockInterceptor throw the OptimisticLockException? It seems that things get invoked properly, but that your OptimisticLockInterceptor somehow encounters an optimistic locking failure and decides to throw an exception. Is the OptimisticLockInterceptor supposed to kick in there in the first place?&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21758" author="juergen.hoeller" created="Sun, 14 Jan 2007 07:47:51 +0000"  >&lt;p&gt;Ben,&lt;/p&gt;

&lt;p&gt;Even after some review, I cannot find any potential cause for this... There is no relevant change in 1.2.9&apos;s AOP framework that I could think of.&lt;/p&gt;

&lt;p&gt;Any details regarding the different behavior would be highly appreciated...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21787" author="banderson" created="Tue, 16 Jan 2007 16:00:57 +0000"  >&lt;p&gt;Hi Juergen,&lt;/p&gt;

&lt;p&gt;The criteria on which our OptimisticLockInterceptor throws the OptimisticLockException is as follows:&lt;/p&gt;

&lt;p&gt;public class OptimisticLockInterceptor implements MethodInterceptor {&lt;/p&gt;

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@see org.aopalliance.intercept.MethodInterceptor#invoke(org.aopalliance.intercept.MethodInvocation)&lt;br/&gt;
     */&lt;br/&gt;
    public Object invoke(MethodInvocation invocation) throws Throwable {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;        Object retVal = null;&lt;/p&gt;

&lt;p&gt;        try &lt;/p&gt;
{
            retVal = invocation.proceed();

        }
&lt;p&gt; catch (Throwable throwable) {&lt;br/&gt;
            if (throwable&lt;br/&gt;
                    instanceof ObjectOptimisticLockingFailureException) &lt;/p&gt;
{

                HibernateOptimisticLockingFailureException lckExcptn =
                    (HibernateOptimisticLockingFailureException) throwable;

                throw new OptimisticLockException(lckExcptn
                        .getPersistentClass(), lckExcptn
                        .getPersistentClassName(), lckExcptn.getIdentifier());
            }
&lt;p&gt; else &lt;/p&gt;
{
                throw throwable;
            }
&lt;p&gt;        }&lt;br/&gt;
        return retVal;&lt;br/&gt;
    }&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;Ben&lt;/p&gt;</comment>
                            <comment id="21794" author="juergen.hoeller" created="Tue, 16 Jan 2007 23:37:21 +0000"  >&lt;p&gt;So the interceptor is simply converting an optimistic locking exception that comes from Hibernate. Which means that the root of the problem is Hibernate detecting an actual optimistic locking failure. I assume you did not upgrade the Hibernate version alongside Spring? Then we need to find out why Hibernate suddently considers the state of the object to be outdated, raising the optimistic locking exception...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21799" author="banderson" created="Wed, 17 Jan 2007 11:02:43 +0000"  >&lt;p&gt;Yes, it&apos;s an odd one.&lt;/p&gt;

&lt;p&gt;I&apos;ve now done a complete pass through our business test suite (1789 junit tests) and web test suite (400 canoo tests) using the 1.2.9-20070109 spring jar. This is the only test that is failing - so it must be doing something that is rather atypical. I&apos;ll examine the test case more closely and try it with Hibernate 3.2.1 (we&apos;re currently using 3.1.3 with Spring 1.2.8 and don&apos;t plan on upgrading to 3.2.+ anytime soon).&lt;/p&gt;

&lt;p&gt;Ben &lt;/p&gt;</comment>
                            <comment id="21800" author="banderson" created="Wed, 17 Jan 2007 16:42:28 +0000"  >&lt;p&gt;I&apos;ve attached the SQL generated by the test case when running under spring 1.2.8 followed by the sql generated when running under 1.2.9.&lt;/p&gt;

&lt;p&gt;Under 1.2.9, additional updates are being performed. This is causing the version numbers to get out of sync leading to the OptimisticLockException (you can see the new statement that updates the version to 5, followed by the select statement that tries to take out a pessismistic lock on version 4). &lt;/p&gt;</comment>
                            <comment id="21803" author="juergen.hoeller" created="Wed, 17 Jan 2007 22:45:03 +0000"  >&lt;p&gt;So the question is: Where do those additional updates come from? I guess it&apos;s a difference in the (actual) Hibernate runtime configuration, somehow making Hibernate update the version number too early. What does your LocalSessionFactoryBean configuration (plus hibernate.cfg.xml, if used) look like?&lt;/p&gt;

&lt;p&gt;Hibernate 3.1.3 should be fine, as should be 3.0.5; we do not intend to force anybody to upgrade to Hibernate 3.2.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="22036" author="juergen.hoeller" created="Mon, 5 Feb 2007 09:45:40 +0000"  >&lt;p&gt;FYI, I&apos;ve made (another) Spring 1.2.9 release candidate snapshot available at:&lt;br/&gt;
&lt;a href=&quot;http://static.springframework.org/downloads/nightly&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://static.springframework.org/downloads/nightly&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The current candidate is the 20070205 snapshot, which is finally scheduled for release this Friday unless any issues are found.&lt;br/&gt;
Please give this snapshot a sanity check and let me know whether it works for you!&lt;/p&gt;

&lt;p&gt;I doubt that there&apos;s any difference in the optimistic locking failure (which still looks mysterious to me).&lt;br/&gt;
That said, I&apos;d be happy enough if the rest of your application&apos;s test suite still passes...&lt;/p&gt;

&lt;p&gt;Thanks for your efforts,&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="22145" author="banderson" created="Thu, 8 Feb 2007 11:36:57 +0000"  >&lt;p&gt;I gave it a run under our test suite and other than the optimistic lock failure issue there were no other problems.&lt;/p&gt;

&lt;p&gt;Ben&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12342" name="optimisticLockTrace.txt" size="10327" author="banderson" created="Wed, 17 Jan 2007 16:42:28 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        9 years, 47 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 5 Oct 2006 21:28:34 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00vmf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5168</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>