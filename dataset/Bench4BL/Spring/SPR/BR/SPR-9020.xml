<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 21:50:08 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-9020/SPR-9020.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-9020] Hibernate4 version of SpringSessionContext.currentSession() does not create a session if TransactionSynchronizationManager does not contain one</title>
                <link>https://jira.spring.io/browse/SPR-9020</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;The Hibernate4 support of Spring 3.1 does not open and register a session in case of the method called is annotated with @Transactional(propagation = Propagation.SUPPORTS).&lt;br/&gt;
In this case HibernateTransactionManager.doBegin() is never called which is the only place where hibernate session is opened. The result is, that all read operations which do not require a transaction will fail because the call to SessionFactory.currentSession() will result in an exception.&lt;/p&gt;

&lt;p&gt;The Hibernate3 implementation contains a fallback for this case in SessionFactoryUtils.doGetSession(...) which is missing in the corresponding Hibernate4 implementation of SpringSessionContext.currentSession().&lt;/p&gt;

&lt;p&gt;If the transaction propagation is changed to REQUIRES_NEW everything is working fine.&lt;/p&gt;</description>
            <key id="41713">SPR-9020</key>
            <summary>Hibernate4 version of SpringSessionContext.currentSession() does not create a session if TransactionSynchronizationManager does not contain one</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="8">Complete</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="urferr">Reto Urfer</reporter>
                        <labels>
                            <label>hibernate4</label>
                    </labels>
                <created>Thu, 12 Jan 2012 04:29:16 +0000</created>
                <updated>Mon, 1 Jun 2015 11:08:34 +0000</updated>
                            <resolved>Sat, 9 Aug 2014 09:39:52 +0000</resolved>
                                    <version>3.1 GA</version>
                                    <fixVersion>4.1 RC2</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>19</votes>
                                    <watches>28</watches>
                                                                <comments>
                            <comment id="74708" author="juergen.hoeller" created="Thu, 12 Jan 2012 09:03:38 +0000"  >&lt;p&gt;This is actually not a bug but rather a limitation that originates in Hibernate itself: The standard Hibernate CurrentSessionContext implementations only really work within active transactions. Since we&apos;re trying to do things the Hibernate way as far as possible for Hibernate 4, our SpringSessionContext delegates to Hibernate&apos;s JTASessionContext now and hence inherits its limitations. In any case, I&apos;ll have a look at what we can do about this for Spring 3.1.1.&lt;/p&gt;

&lt;p&gt;As an alternative to SUPPORTS, consider using REQUIRED in combination with readOnly=true. This is quite close in efficiency in many scenarios: There will be an active database transaction but just with read-only operations at runtime.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="79252" author="janbols" created="Thu, 24 May 2012 01:52:17 +0000"  >&lt;p&gt;Using @Transactional(readOnly = true, propagation = Propagation.SUPPORTS) annotations is a very common usecase for db reads. Most of the time there&apos;s no need for a transaction when we just want to read data.&lt;/p&gt;

&lt;p&gt;The workaround of using @Transactional(readOnly = true) works, but degrades db throughput and might also increase deadlocks due to the shared locks that are taken during transactional reads (guessing here...).&lt;/p&gt;</comment>
                            <comment id="86152" author="j1234d2004" created="Sun, 16 Dec 2012 17:35:43 +0000"  >&lt;p&gt;This issue is now a real show-stopper for us as this currently leads to severe performance issues and other database bottlenecks. Due to sheer size of project changes, it is unreasonable to go back to Hibernate 3. Can we expect any solutions to this problem and SUPPORTS read-only is such a common usecase and it is an absolute show stopper for us now. Is there any alternative - however ugly - I can try to workaround this problem?&lt;/p&gt;</comment>
                            <comment id="86173" author="fguitton" created="Mon, 17 Dec 2012 05:11:58 +0000"  >&lt;p&gt;We have not moved to hibernate4 for the same reason. This is going to be a problem real soon as we would like to take advantage of the multi-tenancy features in h4. &lt;/p&gt;</comment>
                            <comment id="86189" author="j1234d2004" created="Mon, 17 Dec 2012 08:50:46 +0000"  >&lt;p&gt;Juergen can you please elaborate on &quot;The standard Hibernate CurrentSessionContext implementations only really work within active transactions.&quot; &lt;/p&gt;

&lt;p&gt;On looking into the org.hibernate.context.internal.ThreadLocalSessionContext.currentSession() and org.hibernate.context.internal.JTASessionContext.currentSession(), it seems like both openSession() causing a new session when no session is present. &lt;/p&gt;

&lt;p&gt;Are you referring to the fact that when a org.hibernate.internal.SessionImpl/StatelessSessionImpl gets created, a new org.hibernate.internal.TransactionCoordinatorImpl gets created whose reset() creates a new TransactionImplementor, thereby requiring a &quot;live&quot; transaction to be associated with a session.&lt;/p&gt;

&lt;p&gt;If sessions require a valid TransactionImplementor, what is your opinion to inject a TransactionFactory that instantiates a proxying TransactionImplementor that in turn creates a &quot;real&quot; transaction only when necessary?&lt;/p&gt;

&lt;p&gt;Please advice.&lt;/p&gt;</comment>
                            <comment id="86249" author="juergen.hoeller" created="Wed, 19 Dec 2012 05:43:23 +0000"  >&lt;p&gt;In standard Hibernate, JTASessionContext and ThreadLocalSessionContext do lazily create Sessions - but only within active transactions. The JTA variant will fail if no JTA transaction is active before even trying to create a Session, and the ThreadLocal variant will create a Session that is unusable before beginTransaction has been called on it.&lt;/p&gt;

&lt;p&gt;So my point basically is: The Hibernate team is quite strongly against &lt;b&gt;any&lt;/b&gt; access to the datastore outside of a transaction. That has been the case for many years, and in more recent Hibernate versions, they are trying to enforce it rather strongly. Spring has been supporting SUPPORTS-style access to Hibernate 3 as a Spring-specific feature, and we&apos;ve had several accusations of working against Hibernate&apos;s intentions there.&lt;/p&gt;

&lt;p&gt;As an important note, we&apos;ve been using our own management of JTA-synchronized Hibernate 3 Sessions before which was quite involved and fragile to maintain. For our Hibernate 4 support, we are delegating to Hibernate&apos;s standard JTA synchronization now. This makes it harder to support a fallback to non-transactional Sessions since we can only do so through differentiating between JTA and non-JTA transactions in some custom way.&lt;/p&gt;

&lt;p&gt;Now, I understand that this is a common scenario. We&apos;ll see what we can do without reintroducing the deeply involved arrangement (and its problems) that we had for Hibernate 3.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="86261" author="juergen.hoeller" created="Wed, 19 Dec 2012 11:05:54 +0000"  >&lt;p&gt;A question to you guys: What kind of negative effects are you seeing when using REQUIRED instead of SUPPORTS? This should lead to a standard JDBC transaction with isolation level READ_COMMITTED, which is largely equivalent to non-transactional reading a.k.a. auto-commit reading when issuing a single SQL statement, since auto-commit operations basically use READ_COMMITTED isolation as well. The difference is just that multiple SQL statements get batched into one larger READ_COMMITTED operation instead of several.&lt;/p&gt;

&lt;p&gt;If you are seeing negative effects, I&apos;d love to hear about your database and how it handles READ_COMMITTED. I am aware that DBMS behavior varies widely but I&apos;m sincerely wondering about when to use SUPPORTS over REQUIRED and how database-specific any advice there is.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="87893" author="maciek" created="Tue, 12 Feb 2013 07:42:09 +0000"  >&lt;p&gt;Hibernate does actually supports different CurrentSessionContext from outside Spring, and the session factory can be configured to use another one. There&apos;s a ManagedSessionContext that allows to bind a Session to the current thread.&lt;/p&gt;

&lt;p&gt;We&apos;ve got the same issue migrating from Hibernate 3 to 4, and I found a workaround that works fine for us. I created a CurrentSessionContext that first delegates to SpringSessionContext and then it determines whether there&apos;s a Session bound to the current thread or not. If not, it means that there&apos;s no transaction in progress at all (or it was created with PROPAGATION_NEVER or PROPAGATION_SUPPORTS) so it opens a new Session and binds it to the current thread via ManagedSessionContext.&lt;/p&gt;

&lt;p&gt;In order to cleanup and close the Session at the end of the current transaction (if any), this CurrentSessionContext registers a Synchronization into TransactionSynchronizationManager, so if there&apos;s a transaction opened as PROPAGATION_NEVER or PROPAGATION_SUPPORTS the Session will be closed at the end. If there&apos;s no transaction active (which means that commit() or rollback() will never be invoked), the Session will never close.&lt;/p&gt;

&lt;p&gt;Here&apos;s the gist for this class:&lt;br/&gt;
&lt;a href=&quot;https://gist.github.com/seykron/4770724&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gist.github.com/seykron/4770724&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can be configured in the hibernate.current_session_context_class property.&lt;/p&gt;

&lt;p&gt;Hope this help.&lt;/p&gt;

&lt;p&gt;Mat&#237;as&lt;/p&gt;</comment>
                            <comment id="92994" author="dhukas" created="Thu, 22 Aug 2013 07:48:18 +0000"  >&lt;p&gt;Hi, any answers to Juergens question(s)?&lt;/p&gt;

&lt;p&gt;Migrated a project to Hibernate 4 and run into this problem today, thinking about eliminating all Propagation.SUPPORTS now...&lt;/p&gt;

&lt;p&gt;Cheers&lt;br/&gt;
Burkhard&lt;/p&gt;</comment>
                            <comment id="94207" author="ramchjob" created="Fri, 4 Oct 2013 13:47:19 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;We used Matias work around and working well so far. &lt;/p&gt;

&lt;p&gt;Thanks Matias.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Ram&lt;/p&gt;</comment>
                            <comment id="94511" author="andrew.goode" created="Tue, 15 Oct 2013 09:56:40 +0000"  >&lt;p&gt;I used a slightly modified version of Matias&apos;s workaround, and it seems to work well.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://jira.springsource.org/browse/SPR-9020?focusedCommentId=87893&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-87893&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;his comment above&lt;/a&gt; and &lt;a href=&quot;https://gist.github.com/nexdrew/6992329&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;my fork of his Gist&lt;/a&gt; for further details.&lt;/p&gt;</comment>
                            <comment id="101250" author="fabriciobc" created="Tue, 1 Apr 2014 07:55:47 +0000"  >&lt;p&gt;The side effect caused by this approach is the overhead of creating and using a HibernateTransactionManager on simple queries. Not in resource consumption of the database, but in processing of the application server.&lt;/p&gt;</comment>
                            <comment id="103486" author="thiagoh" created="Fri, 16 May 2014 15:42:32 +0000"  >&lt;p&gt;For when the spring developers are scheduling to fix this bug?&lt;/p&gt;</comment>
                            <comment id="103491" author="juergen.hoeller" created="Sat, 17 May 2014 05:51:57 +0000"  >&lt;p&gt;Note that the effort of managing a Spring transaction scope within the application - just for the purpose of a read operation - is negligible compared to the amount of CPU cycles wasted by creating a new Hibernate Session itself... Admittedly this can become a bit more concerning with JTA in an application server environment, where the application server&apos;s JTA subsystem is also wasting some cycles on begin and commit. However, is that really significant? Have you tested that overhead or are you simply assuming that it&apos;s concerning?&lt;/p&gt;

&lt;p&gt;In addition, even our old Hibernate 3 behavior of creating a locally synchronized Session within a SUPPORTS transaction involves the management of a local transaction scope. The only difference with using REQUIRED is that the JTA subsystem and/or the underlying database resource is also being told about the transaction scope and can consider it accordingly. In a well-optimized scenario, the latter effect can be positive in terms of optimized resource management within that transaction scope.&lt;/p&gt;

&lt;p&gt;It&apos;s also still true that the Hibernate team has a very strong opinion on this: They want you to execute all Hibernate operations within a transaction, and - with every Hibernate release - make it harder and harder to achieve 100% correct behavior outside of a transaction, for both users and framework integrators. They simply don&apos;t consider that a first-class scenario and don&apos;t expose proper hooks etc (see JTASessionContext and its exception design for an example).&lt;/p&gt;

&lt;p&gt;Finally, if this is really commonly desired among Spring users even at this point, we can revisit this for Spring Framework 4.1. We definitely won&apos;t do custom JTA-based synchronization (that&apos;s pointless since the JTA synchronization facility will only work within active JTA transactions, and that&apos;s covered by Hibernate&apos;s JTASessionContext already) but can at least consider a best-effort Spring-based synchronization arrangement as a fallback if none of the regular Session retrieval strategies worked out.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="104879" author="bahmed786" created="Wed, 25 Jun 2014 12:21:14 +0000"  >&lt;p&gt;Hi All, &lt;/p&gt;

&lt;p&gt;I am migrating my application from Spring 3.0.5.RELEASE to 4.3.5.Final, and Hibernate 3.6.0.Beta2 to 4.3.5.Final.&lt;br/&gt;
Primary reason for this upgrade is to support multi-tenancy in our application using Hibernate 4.&lt;/p&gt;

&lt;p&gt;Application has been working perfectly fine in older versions of Spring and Hibernate. To Juergen&apos;s point, of using &quot;REQUIRED&quot; instead of &quot;SUPPORTS&quot;, &lt;br/&gt;
I am not marking my method by any Propagation strategy, hence by default it is &quot;REQUIRED&quot;, according to Spring documentation ... but ... still getting this error. I even tried to explicitly mark my transactional method with &quot;REQUIRED&quot; .. no luck.&lt;/p&gt;

&lt;p&gt;Need to know, what&apos;s the fate of this bug, as it is becoming an obstacle for us at this point.&lt;/p&gt;

&lt;p&gt;Here are some details :&lt;/p&gt;

&lt;p&gt;Transactional Method Added in Service Class - From Spring Log&lt;br/&gt;
-----------------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;2014-06-25 15:00:33&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;DEBUG &amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.getTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:108)&amp;#93;&lt;/span&gt; &quot;Adding transactional method &apos;UserServiceImpl.validateUser&apos; with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly; &apos;&apos;&quot;&lt;/p&gt;

&lt;p&gt;Service Layer&lt;br/&gt;
------------------	&lt;br/&gt;
@Service(&quot;userServiceBean&quot;)&lt;br/&gt;
public class UserServiceImpl implements UserService{&lt;/p&gt;

&lt;p&gt;	private static final Logger logger = MyVacationLogger.getLogger(UserServiceImpl.class);&lt;/p&gt;

&lt;p&gt;	@Autowired(required=true)&lt;br/&gt;
	private UserDAO userDAO;&lt;/p&gt;

&lt;p&gt;	@Transactional(readOnly=true, propagation = Propagation.REQUIRED)&lt;br/&gt;
	public UserBean validateUser(UserBean userbean) throws MyVacationRuntimeException &lt;/p&gt;
{
	   ....
	}
&lt;p&gt;}&lt;/p&gt;


&lt;p&gt;DAO Layer&lt;br/&gt;
--------------&lt;br/&gt;
@Repository(&quot;UserDAOBean&quot;)&lt;br/&gt;
public class UserDAOImpl implements UserDAO {&lt;/p&gt;

&lt;p&gt;	@Autowired(required=true)&lt;br/&gt;
	@Qualifier(&quot;commondbSessionFactory&quot;)&lt;br/&gt;
	private SessionFactory sessFactory;&lt;/p&gt;

&lt;p&gt;	@Override&lt;br/&gt;
	public UserDTO findUserbyEmail(String email) throws DataAccessException &lt;/p&gt;
{
		Session sess = sessFactory.getCurrentSession(); &amp;lt;&amp;lt; Error Line
        ....		
	}
&lt;p&gt;}	&lt;/p&gt;

&lt;p&gt;Error &lt;br/&gt;
--------&lt;br/&gt;
Caused by: org.hibernate.HibernateException: No Session found for current thread&lt;br/&gt;
	at org.springframework.orm.hibernate4.SpringSessionContext.currentSession(SpringSessionContext.java:106)&lt;br/&gt;
	at org.hibernate.internal.SessionFactoryImpl.getCurrentSession(SessionFactoryImpl.java:1014)&lt;br/&gt;
	at com.ellisdon.portal.mv.dao.impl.UserDAOImpl.findUserbyEmail(UserDAOImpl.java:31)&lt;br/&gt;
	at com.ellisdon.portal.mv.service.impl.UserServiceImpl.validateUser(UserServiceImpl.java:38)	&lt;/p&gt;
</comment>
                            <comment id="106696" author="luke maurer" created="Thu, 7 Aug 2014 18:21:21 +0000"  >&lt;p&gt;It appears that programmatic demarcation using TransactionTemplate suffers from this same issue.&lt;/p&gt;

&lt;p&gt;Is it fair to say that Spring simply does not support Propagation.SUPPORTS with Hibernate 4? I fail to see what use SUPPORTS has if it doesn&apos;t bind a Hibernate session to the thread. By my understanding, if there&apos;s no transaction when a SUPPORTS method is called, the code runs non-transactionally but with a single Hibernate session used for all accesses. If SessionFactory.getCurrentSession() isn&apos;t the means to get at that single session, what is? Or, if there&apos;s no session bound to the thread at all in this case, how does @Transactional(propagation=SUPPORTS) differ from no annotation at all?&lt;/p&gt;</comment>
                            <comment id="106747" author="juergen.hoeller" created="Sat, 9 Aug 2014 09:39:52 +0000"  >&lt;p&gt;Added for 4.1 RC2 now - please give it a try in the upcoming 4.1 snapshot, or in 4.1 RC2 itself once available!&lt;/p&gt;

&lt;p&gt;We only delegate to Hibernate&apos;s JTASessionContext in case of an active JTA transaction now, manually checking the JTA status upfront. If no JTA transaction is available, we lazily create and bind a Hibernate Session to the current Spring transaction synchronization scope (for propagation SUPPORTS).&lt;/p&gt;

&lt;p&gt;Note that in contrast to our Hibernate 3 support, we don&apos;t check for any interleaving with JTA transactions here. This propagation SUPPORTS mode is only meant to work within a HibernateTransactionManager arrangement, and generally only meant to be used for transaction scopes which won&apos;t be upgraded to a full REQUIRES transaction further down the call stack.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="57798">SPR-11801</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10151">
                    <name>Relate</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="41232">SPR-8908</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="64060">SPR-13089</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="60264">SPR-12349</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        2 years, 19 weeks, 5 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 12 Jan 2012 09:03:38 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>juergen.hoeller</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0348v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>18230</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>