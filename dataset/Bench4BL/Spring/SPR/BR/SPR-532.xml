<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:30:14 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-532/SPR-532.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-532] Spring JtaSessionSynchronizer not able to close session when used across Weblogic Domains</title>
                <link>https://jira.spring.io/browse/SPR-532</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Spring Team,&lt;/p&gt;

&lt;p&gt;I have noticed that Spring will not close sessions when running an XA transaction between separate weblogic domain instances.  In the one domain, there exists a WLI Business Process that initiates a transaction.  It then makes a remote call to an EJB in a separate process in another domain.  This EJB uses Spring&apos;s HibernateTemplate to store information to one database and uses CMT Required to join the existing transaction.  Once it returns, the WLI business process calls some of its own EJBs (w/ CMT Required too) that wrap calls to underlying Spring/Hibernate DAOs to persist data into a separate database.  Upon completion, we see the transaction commit, but in the log we see an IllegalStateException saying it can&apos;t find the session (see below).  This is strange to us, because it found the bound session when flushing, just not when closing.  This in turn causes all sorts of unexplainable problems like NoSuchElementExceptions, etc.&lt;/p&gt;

&lt;p&gt;When I move the JPD to the same server that is running the EJB, I no longer see this error and I see a corresponding close for each session opened.   Keep in mind, I do no special handling of sessions, as I expect HibernateTemplate will take care of this for me (i.e., no SessionFactoryUtil calls).&lt;/p&gt;

&lt;p&gt;Please let me know your opinion on this issue.  My original post can be found here showing more details: &lt;a href=&quot;http://forum.springframework.org/viewtopic.php?t=2411&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.springframework.org/viewtopic.php?t=2411&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Lou&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;br/&gt;
####&amp;lt;Nov 18, 2004 1:24:02 PM PST&amp;gt; &amp;lt;Warning&amp;gt; &amp;lt;JTA&amp;gt; &amp;lt;pj8801&amp;gt; &amp;lt;cgServer&amp;gt; &amp;lt;ExecuteThread: &apos;2&apos; for queue: &apos;weblogic.kernel.Non-Blocking&apos;&amp;gt; &amp;lt;&amp;lt;WLS Kernel&amp;gt;&amp;gt; &amp;lt;&amp;gt; &amp;lt;BEA-110401&amp;gt; &amp;lt;Ignoring error in afterCompletion. Object=org.springframework.orm.hibernate.SessionFactoryUtils$JtaSessionSynchronization@1ddec9e, Exception=java.lang.IllegalStateException: No value for key &lt;span class=&quot;error&quot;&gt;&amp;#91;net.sf.hibernate.impl.SessionFactoryImpl@ae2593&amp;#93;&lt;/span&gt; bound to thread &lt;span class=&quot;error&quot;&gt;&amp;#91;ExecuteThread: &amp;#39;2&amp;#39; for queue: &amp;#39;weblogic.kernel.Non-Blocking&amp;#39;&amp;#93;&lt;/span&gt;&lt;br/&gt;
java.lang.IllegalStateException: No value for key &lt;span class=&quot;error&quot;&gt;&amp;#91;net.sf.hibernate.impl.SessionFactoryImpl@ae2593&amp;#93;&lt;/span&gt; bound to thread &lt;span class=&quot;error&quot;&gt;&amp;#91;ExecuteThread: &amp;#39;2&amp;#39; for queue: &amp;#39;weblogic.kernel.Non-Blocking&amp;#39;&amp;#93;&lt;/span&gt;&lt;br/&gt;
	at org.springframework.transaction.support.TransactionSynchronizationManager.unbindResource(TransactionSynchronizationManager.java:156)&lt;br/&gt;
	at org.springframework.orm.hibernate.SessionFactoryUtils$SpringSessionSynchronization.beforeCompletion(SessionFactoryUtils.java:684)&lt;br/&gt;
	at org.springframework.orm.hibernate.SessionFactoryUtils$JtaSessionSynchronization.afterCompletion(SessionFactoryUtils.java:770)&lt;br/&gt;
	at weblogic.transaction.internal.ServerSCInfo.callAfterCompletions(ServerSCInfo.java:853)&lt;br/&gt;
	at weblogic.transaction.internal.ServerTransactionImpl.callAfterCompletions(ServerTransactionImpl.java:2708)&lt;br/&gt;
	at weblogic.transaction.internal.ServerTransactionImpl.afterCommittedStateHousekeeping(ServerTransactionImpl.java:2606)&lt;br/&gt;
	at weblogic.transaction.internal.ServerTransactionImpl.setCommittedUnsync(ServerTransactionImpl.java:2644)&lt;br/&gt;
	at weblogic.transaction.internal.ServerTransactionImpl.ackCommit(ServerTransactionImpl.java:997)&lt;br/&gt;
	at weblogic.transaction.internal.CoordinatorImpl.ackCommit(CoordinatorImpl.java:234)&lt;br/&gt;
	at weblogic.transaction.internal.CoordinatorImpl_WLSkel.invoke(Unknown Source)&lt;br/&gt;
	at weblogic.rmi.internal.BasicServerRef.invoke(BasicServerRef.java:477)&lt;br/&gt;
	at weblogic.rmi.internal.BasicServerRef$1.run(BasicServerRef.java:420)&lt;br/&gt;
	at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:363)&lt;br/&gt;
	at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:144)&lt;br/&gt;
	at weblogic.rmi.internal.BasicServerRef.handleRequest(BasicServerRef.java:415)&lt;br/&gt;
	at weblogic.rmi.internal.BasicExecuteRequest.execute(BasicExecuteRequest.java:30)&lt;br/&gt;
	at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:219)&lt;br/&gt;
	at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:178)&lt;span class=&quot;error&quot;&gt;&amp;#91;/code&amp;#93;&lt;/span&gt;&lt;/p&gt;</description>
            <key id="10840">SPR-532</key>
            <summary>Spring JtaSessionSynchronizer not able to close session when used across Weblogic Domains</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://jira.spring.io/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="lousacco">Lou Sacco</reporter>
                        <labels>
                    </labels>
                <created>Wed, 8 Dec 2004 15:58:54 +0000</created>
                <updated>Sat, 18 Dec 2004 21:32:13 +0000</updated>
                            <resolved>Sat, 18 Dec 2004 21:32:13 +0000</resolved>
                                    <version>1.1.2</version>
                                    <fixVersion>1.1.3</fixVersion>
                                    <component>Transaction</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="11729" author="juergen.hoeller" created="Wed, 8 Dec 2004 19:30:28 +0000"  >&lt;p&gt;So this problem only arises in with remote transaction propagation: that is, where the server that starts and ends the transaction is not the server that performs the actual data access.&lt;/p&gt;

&lt;p&gt;I guess that WebLogic&apos;s JTA subsystem (in particular, its javax.transaction.TransactionManager implementations) registers synchronizations on each server. Such synchronizations are not serializable, so need to be kept locally, on each server that participates in the transaction.&lt;/p&gt;

&lt;p&gt;The question is: How does the WebLogic transaction coordinator actually execute those synchronizations callbacks? Once the transaction gets committed, each of the participating servers needs to be told to execute its local synchronizations. I guess this happens in a new thread, which will break Spring&apos;s Session cleanup.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure how to get around this. Spring will bind a Hibernate Session to the thread during the data access operations within that transaction, on each participating server. But if it gets the synchronization callbacks in a different thread, how should it find the Sessions it bound to the thread earlier?&lt;/p&gt;

&lt;p&gt;I&apos;ll do some research on WebLogic&apos;s remote transaction propagation. There has to be a solution for this!&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="11732" author="juergen.hoeller" created="Wed, 8 Dec 2004 20:20:29 +0000"  >&lt;p&gt;Actually, there seems to be a pretty straightforward solution: I&apos;ve added a check whether there is a SessionHolder bound to the current thread, only invoking &quot;unbindResource&quot; if found. Else, the SessionHolder is simply left bound to the thread: It&apos;s empty anyway, as the synchronization code will have removed and closed the transactional Session. The next data access operation on that thread will simply reuse the same SessionHolder, adding a new Hibernate Session to it.&lt;/p&gt;

&lt;p&gt;I&apos;ll attach the new version of SessionFactoryUtils.java, which just includes one additional if check in the synchronization code. Replace the corresponding file in your Spring 1.1.2 distribution with that new version, and invoke &quot;build alljars&quot; in the root of the distribution to build updated jar files.&lt;/p&gt;

&lt;p&gt;It would be great if you could give this a try ASAP, as we&apos;re just about to release 1.1.3. We still got the chance to make the official 1.1.3 release work properly with remote transaction propagation.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="11733" author="juergen.hoeller" created="Wed, 8 Dec 2004 20:21:54 +0000"  >&lt;p&gt;SessionFactoryUtils.java, fresh from the source &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="11742" author="lousacco" created="Thu, 9 Dec 2004 06:35:44 +0000"  >&lt;p&gt;Thanks Juergen for looking into this so promptly.  It looks like this fix may have helped the IllegalStateException and closing problem, but I still see an anomaly intermittently when Spring tries to get the Session midstream in the process.  Any thoughts?&lt;/p&gt;

&lt;p&gt;Here&apos;s the stack trace:&lt;/p&gt;

&lt;p&gt;java.util.NoSuchElementException&lt;br/&gt;
        at java.util.HashMap$HashIterator.nextEntry()Ljava.util.HashMap$Entry;(U&lt;br/&gt;
nknown Source)&lt;br/&gt;
        at java.util.HashMap$ValueIterator.next()Ljava.lang.Object;(Unknown Sour&lt;br/&gt;
ce)&lt;br/&gt;
        at org.springframework.orm.hibernate.SessionHolder.getAnySession()Lnet.s&lt;br/&gt;
f.hibernate.Session;(SessionHolder.java:70)&lt;br/&gt;
        at org.springframework.orm.hibernate.SessionFactoryUtils.getJtaSynchroni&lt;br/&gt;
zedSession(Lorg.springframework.orm.hibernate.SessionHolder;Lnet.sf.hibernate.Se&lt;br/&gt;
ssionFactory;Lorg.springframework.jdbc.support.SQLExceptionTranslator;Z)Lnet.sf.&lt;br/&gt;
hibernate.Session;(SessionFactoryUtils.java:359)&lt;br/&gt;
        at org.springframework.orm.hibernate.SessionFactoryUtils.getSession(Lnet&lt;br/&gt;
.sf.hibernate.SessionFactory;Lnet.sf.hibernate.Interceptor;Lorg.springframework.&lt;br/&gt;
jdbc.support.SQLExceptionTranslator;ZZ)Lnet.sf.hibernate.Session;(SessionFactory&lt;br/&gt;
Utils.java:298)&lt;br/&gt;
        at org.springframework.orm.hibernate.SessionFactoryUtils.getSession(Lnet&lt;br/&gt;
.sf.hibernate.SessionFactory;Lnet.sf.hibernate.Interceptor;Lorg.springframework.&lt;br/&gt;
jdbc.support.SQLExceptionTranslator;Z)Lnet.sf.hibernate.Session;(SessionFactoryU&lt;br/&gt;
tils.java:249)&lt;br/&gt;
        at org.springframework.orm.hibernate.SessionFactoryUtils.getSession(Lnet&lt;br/&gt;
.sf.hibernate.SessionFactory;Lnet.sf.hibernate.Interceptor;Lorg.springframework.&lt;br/&gt;
jdbc.support.SQLExceptionTranslator;)Lnet.sf.hibernate.Session;(SessionFactoryUt&lt;br/&gt;
ils.java:206)&lt;/p&gt;</comment>
                            <comment id="11743" author="lousacco" created="Thu, 9 Dec 2004 07:01:08 +0000"  >&lt;p&gt;I&apos;m also seeing this error almost all the time, once the transaction completes.  Looks like I&apos;m missing this JDBCExceptionReporter, but I don&apos;t understand how.&lt;/p&gt;

&lt;p&gt;Lou&lt;/p&gt;

&lt;p&gt;&amp;lt;Dec 9, 2004 12:55:50 PM PST&amp;gt; &amp;lt;Warning&amp;gt; &amp;lt;JTA&amp;gt; &amp;lt;BEA-110401&amp;gt; &amp;lt;Ignoring error in af&lt;br/&gt;
terCompletion. Object=org.springframework.orm.hibernate.SessionFactoryUtils$JtaS&lt;br/&gt;
essionSynchronization@2ae0ac3, Exception=java.lang.NoClassDefFoundError: net/sf/&lt;br/&gt;
hibernate/util/JDBCExceptionReporter&lt;br/&gt;
java.lang.NoClassDefFoundError: net/sf/hibernate/util/JDBCExceptionReporter&lt;br/&gt;
        at net.sf.hibernate.util.JDBCExceptionReporter.logWarnings(Ljava.sql.SQL&lt;br/&gt;
Warning;)V(JDBCExceptionReporter.java:???)&lt;br/&gt;
        at net.sf.hibernate.impl.BatcherImpl.closeConnection(Ljava.sql.Connectio&lt;br/&gt;
n;)V(BatcherImpl.java:297)&lt;br/&gt;
        at net.sf.hibernate.impl.SessionImpl.disconnect()Ljava.sql.Connection;(S&lt;br/&gt;
essionImpl.java:3352)&lt;br/&gt;
        at net.sf.hibernate.impl.SessionImpl.close()Ljava.sql.Connection;(Sessio&lt;br/&gt;
nImpl.java:576)&lt;br/&gt;
        at org.springframework.orm.hibernate.SessionFactoryUtils.doClose(Lnet.sf&lt;br/&gt;
.hibernate.Session;)V(SessionFactoryUtils.java:651)&lt;br/&gt;
        at org.springframework.orm.hibernate.SessionFactoryUtils.closeSessionOrR&lt;br/&gt;
egisterDeferredClose(Lnet.sf.hibernate.Session;Lnet.sf.hibernate.SessionFactory;&lt;br/&gt;
)V(SessionFactoryUtils.java:640)&lt;br/&gt;
        at org.springframework.orm.hibernate.SessionFactoryUtils.access$300(Lnet&lt;br/&gt;
.sf.hibernate.Session;Lnet.sf.hibernate.SessionFactory;)V(SessionFactoryUtils.ja&lt;br/&gt;
va:86)&lt;br/&gt;
        at org.springframework.orm.hibernate.SessionFactoryUtils$SpringSessionSy&lt;br/&gt;
nchronization.beforeCompletion()V(SessionFactoryUtils.java:776)&lt;br/&gt;
        at org.springframework.orm.hibernate.SessionFactoryUtils$JtaSessionSynch&lt;br/&gt;
ronization.afterCompletion(I)V(SessionFactoryUtils.java:874)&lt;br/&gt;
        at weblogic.transaction.internal.ServerSCInfo.callAfterCompletions(I)V(S&lt;br/&gt;
erverSCInfo.java:853)&lt;br/&gt;
        at weblogic.transaction.internal.ServerTransactionImpl.callAfterCompleti&lt;br/&gt;
ons()V(ServerTransactionImpl.java:2708)&lt;br/&gt;
        at weblogic.transaction.internal.ServerTransactionImpl.afterCommittedSta&lt;br/&gt;
teHousekeeping()V(ServerTransactionImpl.java:2606)&lt;br/&gt;
        at weblogic.transaction.internal.ServerTransactionImpl.setCommitted()V(S&lt;br/&gt;
erverTransactionImpl.java:2638)&lt;br/&gt;
        at weblogic.transaction.internal.ServerTransactionImpl.globalRetryCommit&lt;br/&gt;
(II)V(ServerTransactionImpl.java:2436)&lt;br/&gt;
        at weblogic.transaction.internal.ServerTransactionImpl.globalCommit()V(S&lt;br/&gt;
erverTransactionImpl.java:2365)&lt;br/&gt;
        at weblogic.transaction.internal.ServerTransactionImpl.internalCommit()V&lt;br/&gt;
(ServerTransactionImpl.java:278)&lt;br/&gt;
        at weblogic.transaction.internal.ServerTransactionImpl.commit()V(ServerT&lt;br/&gt;
ransactionImpl.java:244)&lt;br/&gt;
        at weblogic.ejb20.internal.BaseEJBObject.postInvoke(Lweblogic.ejb20.inte&lt;br/&gt;
rnal.InvocationWrapper;Ljava.lang.Throwable;)V(BaseEJBObject.java:299)&lt;br/&gt;
        at weblogic.ejb20.internal.StatelessEJBObject.postInvoke(Lweblogic.ejb20&lt;br/&gt;
.internal.InvocationWrapper;Ljava.lang.Throwable;)V(StatelessEJBObject.java:140)&lt;/p&gt;</comment>
                            <comment id="11747" author="lousacco" created="Thu, 9 Dec 2004 15:32:52 +0000"  >&lt;p&gt;Finally, I see one more type of exception as follows below (note: all these exceptions occur intermittently and with no way to reproduce one over the other).  I also see my connection pool grow and grow till all callers are blocked.  It seems that Spring would like to do something on the doClose() but these exceptions are preventing it from happening and thus the connections don&apos;t get cleaned up.  I&apos;m not sure where to go with this, so any suggestions would be greatly appreaciated.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Lou&lt;/p&gt;

&lt;p&gt;&amp;lt;Dec 9, 2004 9:15:38 PM PST&amp;gt; &amp;lt;Warning&amp;gt; &amp;lt;JTA&amp;gt; &amp;lt;BEA-110401&amp;gt; &amp;lt;Ignoring error in afterCompletion. Object=org.springframework.orm.hibernate.SessionFactoryUtils$JtaSessionSynchronization@224f524, Exception=java.lang.ExceptionInInitializerError&lt;br/&gt;
java.lang.ExceptionInInitializerError&lt;br/&gt;
        at net.sf.hibernate.util.JDBCExceptionReporter.logWarnings(Ljava.sql.SQL&lt;br/&gt;
Warning;)V(JDBCExceptionReporter.java:???)&lt;br/&gt;
        at net.sf.hibernate.impl.BatcherImpl.closeConnection(Ljava.sql.Connectio&lt;br/&gt;
n;)V(BatcherImpl.java:300)&lt;br/&gt;
        at net.sf.hibernate.impl.SessionImpl.disconnect()Ljava.sql.Connection;(S&lt;br/&gt;
essionImpl.java:3387)&lt;br/&gt;
        at net.sf.hibernate.impl.SessionImpl.close()Ljava.sql.Connection;(Sessio&lt;br/&gt;
nImpl.java:584)&lt;br/&gt;
        at org.springframework.orm.hibernate.SessionFactoryUtils.doClose(Lnet.sf&lt;br/&gt;
.hibernate.Session;)V(SessionFactoryUtils.java:651)&lt;br/&gt;
        at org.springframework.orm.hibernate.SessionFactoryUtils.closeSessionOrR&lt;br/&gt;
egisterDeferredClose(Lnet.sf.hibernate.Session;Lnet.sf.hibernate.SessionFactory;&lt;br/&gt;
)V(SessionFactoryUtils.java:640)&lt;br/&gt;
        at org.springframework.orm.hibernate.SessionFactoryUtils.access$300(Lnet&lt;br/&gt;
.sf.hibernate.Session;Lnet.sf.hibernate.SessionFactory;)V(SessionFactoryUtils.ja&lt;br/&gt;
va:86)&lt;br/&gt;
        at org.springframework.orm.hibernate.SessionFactoryUtils$SpringSessionSy&lt;br/&gt;
nchronization.beforeCompletion()V(SessionFactoryUtils.java:776)&lt;br/&gt;
        at org.springframework.orm.hibernate.SessionFactoryUtils$JtaSessionSynch&lt;br/&gt;
ronization.afterCompletion(I)V(SessionFactoryUtils.java:881)&lt;br/&gt;
        at weblogic.transaction.internal.ServerSCInfo.callAfterCompletions(I)V(S&lt;br/&gt;
erverSCInfo.java:853)&lt;br/&gt;
        at weblogic.transaction.internal.ServerTransactionImpl.callAfterCompleti&lt;br/&gt;
ons()V(ServerTransactionImpl.java:2708)&lt;br/&gt;
        at weblogic.transaction.internal.ServerTransactionImpl.afterCommittedSta&lt;br/&gt;
teHousekeeping()V(ServerTransactionImpl.java:2606)&lt;br/&gt;
        at weblogic.transaction.internal.ServerTransactionImpl.setCommitted()V(S&lt;br/&gt;
erverTransactionImpl.java:2638)&lt;br/&gt;
        at weblogic.transaction.internal.ServerTransactionImpl.globalRetryCommit&lt;br/&gt;
(II)V(ServerTransactionImpl.java:2436)&lt;br/&gt;
        at weblogic.transaction.internal.ServerTransactionImpl.globalCommit()V(S&lt;br/&gt;
erverTransactionImpl.java:2365)&lt;br/&gt;
        at weblogic.transaction.internal.ServerTransactionImpl.internalCommit()V&lt;br/&gt;
(ServerTransactionImpl.java:278)&lt;br/&gt;
        at weblogic.transaction.internal.ServerTransactionImpl.commit()V(ServerT&lt;br/&gt;
ransactionImpl.java:244)&lt;br/&gt;
        at weblogic.ejb20.internal.BaseEJBObject.postInvoke(Lweblogic.ejb20.inte&lt;br/&gt;
rnal.InvocationWrapper;Ljava.lang.Throwable;)V(BaseEJBObject.java:299)&lt;br/&gt;
        at weblogic.ejb20.internal.StatelessEJBObject.postInvoke(Lweblogic.ejb20&lt;br/&gt;
.internal.InvocationWrapper;Ljava.lang.Throwable;)V(StatelessEJBObject.java:140)&lt;/p&gt;

&lt;p&gt;        at com.bea.wlw.runtime.core.bean.SyncDispatcher_k1mrl8_EOImpl.invoke(Lco&lt;br/&gt;
m.bea.wlw.runtime.core.request.Request;)Lcom.bea.wlw.runtime.core.request.Respon&lt;br/&gt;
se;(SyncDispatcher_k1mrl8_EOImpl.java:56)&lt;br/&gt;
        at com.bea.wlw.runtime.core.dispatcher.Dispatcher.remoteDispatch(Lcom.be&lt;br/&gt;
a.wlw.runtime.core.dispatcher.DispFile;Lcom.bea.wlw.runtime.core.request.Request&lt;br/&gt;
;)Lcom.bea.wlw.runtime.core.request.Response;(Dispatcher.java:161)&lt;br/&gt;
        at com.bea.wlw.runtime.core.dispatcher.Dispatcher.dispatch(Lcom.bea.wlw.&lt;br/&gt;
runtime.core.dispatcher.DispFile;Lcom.bea.wlw.runtime.core.request.Request;Ljava&lt;br/&gt;
x.servlet.http.HttpServletResponse;Ljavax.servlet.ServletContext;)V(Dispatcher.j&lt;br/&gt;
ava:49)&lt;br/&gt;
        at com.bea.wlw.runtime.core.dispatcher.HttpServerHelper.executePostReque&lt;br/&gt;
st(Ljavax.servlet.http.HttpServletRequest;Ljavax.servlet.http.HttpServletRespons&lt;br/&gt;
e;Ljavax.servlet.ServletContext;Ljavax.servlet.ServletConfig;)V(HttpServerHelper&lt;br/&gt;
.java:713)&lt;br/&gt;
        at com.bea.wlw.runtime.core.dispatcher.HttpServer.doPost(Ljavax.servlet.&lt;br/&gt;
http.HttpServletRequest;Ljavax.servlet.http.HttpServletResponse;)V(HttpServer.ja&lt;br/&gt;
va:49)&lt;br/&gt;
        at javax.servlet.http.HttpServlet.service(Ljavax.servlet.http.HttpServle&lt;/p&gt;</comment>
                            <comment id="11753" author="juergen.hoeller" created="Fri, 10 Dec 2004 04:20:07 +0000"  >&lt;p&gt;The JDBCExceptionReporter issue is quite certainly not a Spring issue, but rather a classpath issue with Hibernate. Please double-check that you Hibernate jars from a single Hibernate version in your classpath, on all your servers.&lt;/p&gt;

&lt;p&gt;If Hibernate throws up when trying to disconnect, with the NoClassDefFoundError for JDBCExceptionReporter, you&apos;ll indeed get a leak in the connection pool, because that Hibernate failure unfortunately happens before the Connection.close call...&lt;/p&gt;

&lt;p&gt;Regarding the NoSuchElementException: That needed to be fixed in Spring&apos;s SessionHolder class, as there can be an empty SessionHolder bound to the thread now (since my previous change). I&apos;ll attach the revised SessionHolder.java file; please give it a try!&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="11758" author="lousacco" created="Fri, 10 Dec 2004 07:37:54 +0000"  >&lt;p&gt;Yes, I agree on the other classpath issues.  I had to move all the JOS jars to the server&apos;s classpath and this has resolved those issues.  This morning I was only left with the NoSuchElementException, but it appears your fix has addressed that.  Let me do some more testing especially from the UI and I can let you know for certain, but this certainly looks very, very promising!!&lt;/p&gt;

&lt;p&gt;I&apos;ll give you a final response by the end of today on the status.  If you could let me know when 1.1.3 will be released and if this will be included, that will allow me to reassure the Change Mgt. guys that this is a permanent fix that they can get from Spring directly.&lt;/p&gt;

&lt;p&gt;Thanks Juergen for you support.  My management has been very impressed with your response time and visibilty placed on this critical issue for us.  You&apos;ve helped me have Spring live another day! :o)&lt;/p&gt;

&lt;p&gt;Lou&lt;/p&gt;</comment>
                            <comment id="11759" author="juergen.hoeller" created="Fri, 10 Dec 2004 08:15:22 +0000"  >&lt;p&gt;Glad to see that things work out &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I&apos;m confident that the NoSuchElementException will not occur anymore now, but I&apos;m grateful for any live feedback on this issue. Both fixes are already committed to Spring CVS and will be part of 1.1.3, which will finally be released tomorrow (if there aren&apos;t any obstacles left).&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="11775" author="lousacco" created="Mon, 13 Dec 2004 09:08:20 +0000"  >&lt;p&gt;After a few days of testing, I have not seen any more errors like the ones described in this SCR.  We can close this SPR now as resolved.&lt;/p&gt;

&lt;p&gt;Juergen, again thank you very much for your support.&lt;/p&gt;

&lt;p&gt;Best,&lt;br/&gt;
Lou&lt;/p&gt;</comment>
                            <comment id="11804" author="juergen.hoeller" created="Sat, 18 Dec 2004 21:32:13 +0000"  >&lt;p&gt;I&apos;m glad that it works for you now, Lou! And supporting Hibernate Session synchronization in a remote transaction scenario too is a nice improvement, after all &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="10359" name="SessionFactoryUtils.java" size="40022" author="juergen.hoeller" created="Wed, 8 Dec 2004 20:21:54 +0000"/>
                            <attachment id="10363" name="SessionHolder.java" size="3420" author="juergen.hoeller" created="Fri, 10 Dec 2004 04:43:18 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        12 years, 2 weeks, 4 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 8 Dec 2004 19:30:28 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04xtb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28852</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>