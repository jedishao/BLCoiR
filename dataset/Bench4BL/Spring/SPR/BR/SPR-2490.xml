<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:19:03 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2490/SPR-2490.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2490] AbstractOverridingClassLoader doesn&apos;t work correctly.</title>
                <link>https://jira.spring.io/browse/SPR-2490</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;There are 3 problems in AbstractOverridingClassLoader class.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;If &quot;inclusions&quot; is empty, excludeFromUndelegation() always returns true.&lt;br/&gt;
   This is not intended operation.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;AbstractOverridingClassLoader should override loadClass(String name, boolean resolve),&lt;br/&gt;
   instead of loadClass(String name).&lt;br/&gt;
   Because, if declared as follows,&lt;br/&gt;
     loader1 = new SimpleThrowawayClassLoader(parent);&lt;br/&gt;
     loader2 = new URLClassLoader(..., loader1);&lt;br/&gt;
   loader2.loadClass(&quot;FooClass&quot;) call is processed as follows.&lt;br/&gt;
     loader2.loadClass(&quot;FooClass&quot;) =&amp;gt; loader2.loadClass(&quot;FooClass&quot;, false)&lt;br/&gt;
       =&amp;gt; loader1.loadClass(&quot;FooClass&quot;, false)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;loadClass() and addClassName*() methods should be synchronized.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;These problems are solved by the following patch.&lt;/p&gt;

&lt;p&gt;Index: AbstractOverridingClassLoader.java&lt;br/&gt;
===================================================================&lt;br/&gt;
RCS file: /cvsroot/springframework/spring/tiger/src/org/springframework/instrument/classloading/AbstractOverridingClassLoader.java,v&lt;br/&gt;
retrieving revision 1.6&lt;br/&gt;
diff -u -r1.6 AbstractOverridingClassLoader.java&lt;br/&gt;
&amp;#8212; AbstractOverridingClassLoader.java	20 Aug 2006 20:43:30 -0000	1.6&lt;br/&gt;
+++ AbstractOverridingClassLoader.java	28 Aug 2006 02:59:09 -0000&lt;br/&gt;
@@ -59,21 +59,21 @@&lt;br/&gt;
 	}&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public void addClassNameToExcludeFromUndelegation(String className) {&lt;br/&gt;
+	public synchronized void addClassNameToExcludeFromUndelegation(String className) 
{
 		this.exclusions.add(className);
 	}&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public void addClassNameToExplicitlyInclude(String className) {&lt;br/&gt;
+	public synchronized void addClassNameToExplicitlyInclude(String className) 
{
 		this.inclusions.add(className);
 	}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; 	protected boolean excludeFromUndelegation(String name) &lt;/p&gt;
{
-		return (this.exclusions.contains(name) || !this.inclusions.contains(name));
+		return (this.exclusions.contains(name) || (!this.inclusions.isEmpty() &amp;amp;&amp;amp; !this.inclusions.contains(name)));
 	}


&lt;p&gt; 	@Override&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public Class&amp;lt;?&amp;gt; loadClass(String name) throws ClassNotFoundException {&lt;br/&gt;
+	protected synchronized Class&amp;lt;?&amp;gt; loadClass(String name, boolean resolve) throws ClassNotFoundException {&lt;br/&gt;
 		if (!name.startsWith(&quot;java&quot;) &amp;amp;&amp;amp; !this.namesSeen.contains(name) &amp;amp;&amp;amp; !excludeFromUndelegation(name)) {&lt;br/&gt;
 			this.namesSeen.add(name);&lt;br/&gt;
 			String internalName = StringUtils.replace(name, &quot;.&quot;, &quot;/&quot;) + &quot;.class&quot;;&lt;br/&gt;
@@ -86,7 +86,11 @@&lt;br/&gt;
 				byte[] bytes = FileCopyUtils.copyToByteArray(is);&lt;br/&gt;
 				// Transform if necessary and use the potentially transformed bytes.&lt;br/&gt;
 				byte[] transformed = transformIfNecessary(name, internalName, bytes);&lt;/li&gt;
	&lt;li&gt;return defineClass(name, transformed, 0, transformed.length);&lt;br/&gt;
+				Class&amp;lt;?&amp;gt; c = defineClass(name, transformed, 0, transformed.length);&lt;br/&gt;
+				if (resolve) 
{
+					resolveClass(c);
+				}
&lt;p&gt;+				return c;&lt;br/&gt;
 			}&lt;br/&gt;
 			catch (IOException ex) &lt;/p&gt;
{
 				throw new ClassNotFoundException(&quot;Cannot load resource for class [&quot; + name + &quot;]&quot;, ex);
@@ -94,7 +98,7 @@
 		}
&lt;p&gt; 		else &lt;/p&gt;
{
 			// We don&apos;t override this class.
-			return super.loadClass(name);
+			return super.loadClass(name, resolve);
 		}
&lt;p&gt; 	}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
            <key id="14846">SPR-2490</key>
            <summary>AbstractOverridingClassLoader doesn&apos;t work correctly.</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="yamasa">OISHI Masakuni</reporter>
                        <labels>
                    </labels>
                <created>Sun, 27 Aug 2006 14:06:02 +0000</created>
                <updated>Tue, 19 Jun 2012 03:50:48 +0000</updated>
                            <resolved>Mon, 28 Aug 2006 23:52:51 +0000</resolved>
                                    <version>2.0 RC3</version>
                                    <fixVersion>2.0 RC4</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="19236" author="juergen.hoeller" created="Mon, 28 Aug 2006 23:52:51 +0000"  >&lt;p&gt;Thanks for pointing those issues out! As it happens, we already found the exclusion one during our JPA agent tests, but we haven&apos;t spotted the loadClass and synchronization issues yet.&lt;/p&gt;

&lt;p&gt;FWIW, for the synchronizations, I&apos;ve synchronized the internal sets rather than the external methods. It&apos;s really only the set access that needs to be synchronized, not the entire loadClass method (since only the superclass loadClass method needs to be synchronized, as far as I understand, because of it class caching).&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="19273" author="yamasa" created="Tue, 29 Aug 2006 20:34:01 +0000"  >&lt;p&gt;Thank you for your response!&lt;/p&gt;

&lt;p&gt;&amp;gt; FWIW, for the synchronizations, I&apos;ve synchronized the internal sets rather&lt;br/&gt;
&amp;gt; than the external methods. It&apos;s really only the set access that needs to be&lt;br/&gt;
&amp;gt; synchronized, not the entire loadClass method (since only the superclass&lt;br/&gt;
&amp;gt; loadClass method needs to be synchronized, as far as I understand, because of&lt;br/&gt;
&amp;gt; it class caching).&lt;/p&gt;

&lt;p&gt;Hmm..., but in AbstractOverridingClassLoader(rev. 1.7),&lt;br/&gt;
there is a race condition between findLoadedClass(line 86) and&lt;br/&gt;
defineClass(line 96).  So, I think that the entire loadClass() method&lt;br/&gt;
should be made synchronized.&lt;/p&gt;

&lt;p&gt;Additionally, in isEligibleForOverriding(), iterating over excludedPackages&lt;br/&gt;
should be synchronized like the following.&lt;br/&gt;
&amp;#8211;&lt;br/&gt;
synchronized (excludedPackages) {&lt;br/&gt;
  for (String packageName : this.excludedPackages) {&lt;br/&gt;
    if (className.startsWith(packageName)) &lt;/p&gt;
{
      return false;
    }
&lt;p&gt;  }&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;br/&gt;
OISHI Masakuni&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 18 weeks, 1 day ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 28 Aug 2006 23:52:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00w1b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5235</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>