<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 21:47:55 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-8767/SPR-8767.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-8767] Parallel bean initialization during startup</title>
                <link>https://jira.spring.io/browse/SPR-8767</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Spring should provide a way (possibly a &lt;tt&gt;BeanFactory&lt;/tt&gt; with a different &lt;tt&gt;ConfigurableListableBeanFactory#preInstantiateSingletons&lt;/tt&gt; implementation) to initialize singleton non-lazy beans on startup in parallel using a thread pool. This could significantly reduce startup (and maybe shutdown) time by creating and initializing independent beans concurrently.&lt;/p&gt;

&lt;p&gt;The algorithm is pretty simple in principle. Whereas the normal bean factory creates beans in single thread in rather random order, this implementation should:&lt;/p&gt;

&lt;p&gt;1. Find all bean definitions that don&apos;t have any unresolved dependencies.&lt;br/&gt;
2. Schedule creation of each bean found in 1. in a separate concurrent task to allow parallel creation&lt;br/&gt;
3. When any of the tasks scheduled in 2. is completed go to 1.&lt;/p&gt;

&lt;p&gt;The algorithm stops when all beans are created.&lt;/p&gt;

&lt;p&gt;Implementation notes:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;circular dependencies might require extra care&lt;/li&gt;
	&lt;li&gt;bean factory should create a thread pool with configurable number of threads and shut it down after all beans are created&lt;/li&gt;
&lt;/ul&gt;
</description>
            <key id="40130">SPR-8767</key>
            <summary>Parallel bean initialization during startup</summary>
                <type id="2" iconUrl="https://jira.spring.io/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="4" iconUrl="https://jira.spring.io/images/icons/statuses/reopened.png" description="This issue was once resolved, but the resolution was deemed incorrect. From here issues are either marked assigned or resolved.">Reopened</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="nurkiewicz">Tomasz Nurkiewicz</reporter>
                        <labels>
                            <label>performance</label>
                            <label>startup</label>
                    </labels>
                <created>Wed, 12 Oct 2011 14:39:05 +0000</created>
                <updated>Sat, 17 Dec 2016 22:30:48 +0000</updated>
                                            <version>3.1 RC1</version>
                                    <fixVersion>5.1 Backlog</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>52</votes>
                                    <watches>53</watches>
                                                                <comments>
                            <comment id="71410" author="cbeams" created="Mon, 17 Oct 2011 11:26:35 +0000"  >&lt;p&gt;Hi Tomasz,&lt;/p&gt;

&lt;p&gt;Reading through the linked forum thread, Marten&apos;s suggestion hits the nail on the head&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The problem here, imho, is that you are mixing bean construction and bean initialization. &lt;/p&gt;

&lt;p&gt;The latter is something you (judging from your post) want to do in parallel. The easiest approach, I guess, is to create an ApplicationListener which listens to ContextRefreshedEvents. (This is fired when the context is up) and which starts initializing the caches, you could plugin a TaskExecutor for this which utilizes the servers threadpool, which in turn should utilize the underlying hardware to its fullest...&lt;/p&gt;

&lt;p&gt;Best of both worlds imho...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;(&lt;a href=&quot;http://forum.springsource.org/showthread.php?105896-Initialize-spring-beans-in-parallel-at-startup&amp;amp;p=352702#post352702&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.springsource.org/showthread.php?105896-Initialize-spring-beans-in-parallel-at-startup&amp;amp;p=352702#post352702&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;While it is conceptually straightforward to imagine the container introducing concurrent bean initialization, in practice it would be anything but.  We would need to see quite a bit of feedback and demand that Spring container initialization is fundamentally too slow to seriously consider this kind of change.  Again, given the specific scenario in the forum post, it appears that the user can make changes that would both solve the startup time problem and probably improve the design of his program in the process.&lt;/p&gt;

&lt;p&gt;Feel free to comment further if you think there is a compelling case that&apos;s been missed here, and we can leave this open for further comments and votes to that effect.  Otherwise I&apos;ll close as won&apos;t fix for now.&lt;/p&gt;</comment>
                            <comment id="72030" author="niklas" created="Tue, 25 Oct 2011 10:55:01 +0000"  >&lt;p&gt;Hi Chris,&lt;br/&gt;
we&apos;re currently working on a migration of over 50 web applications to SpringIOC. Startup time is a big issue &apos;cause we need quick startup during development and (more important) in production environment. Since Spring does not support concurrent singleton bean instantiation we have a startup time of out complete production environment of ~2h 30 Minutes. which is not acceptable to our operations teams. We just ,igrated from a proprietary container solution that we developed. That proprietary container supported parallel instantiation. Now, we have to argue why we migrated to Spring ... to us, this is not a minor issue and we would highly appreciate any progress on this. &lt;/p&gt;

&lt;p&gt;With regards to the solution it should be something like a &quot;managed task executor&quot; &apos;cause ideally the concurrent threads have the container managed thread context (JNDI, JPA resources must be accessible etc.). Therefore the solution is not so straight formward imho.&lt;/p&gt;

&lt;p&gt;Best regards,&lt;br/&gt;
Niklas&lt;/p&gt;</comment>
                            <comment id="73032" author="cbeams" created="Wed, 23 Nov 2011 19:58:50 +0000"  >&lt;p&gt;Niklas,&lt;/p&gt;

&lt;p&gt;2h 30m is a very long time indeed, but again, I would encourage a more pragmatic approach.&lt;/p&gt;

&lt;p&gt;For the majority of Spring applications, container startup time is not an issue.  We can be fairly certain of this simply because it is not a complaint we often encounter here in JIRA, in our forums, at conferences or with paying customers.  When it does come up as a concern, we usually advise profiling the application to determine exactly which beans are causing the slowdown, and taking specific action to reduce the impact.  Marten&apos;s suggestion that I quoted above would be perfectly adequate in many cases.&lt;/p&gt;

&lt;p&gt;The upside of parallelizing bean initialization in the Spring container could be significant for a minority of applications using Spring, while the downsides - the inevitable bugs, added complexity and unintended side effects - would affect potentially every application using Spring.  Not an attractive outlook, I&apos;m afraid.&lt;/p&gt;

&lt;p&gt;I&apos;m resolving this issue as Won&apos;t Fix because indeed it is very unlikely that we would introduce a change of this magnitude into the core framework at this point without a very strong rationale.&lt;/p&gt;

&lt;p&gt;Users are free to reopen this issue and add new comments, and continue to add votes if there are arguments that have not yet been heard.&lt;/p&gt;</comment>
                            <comment id="73040" author="niklas" created="Wed, 23 Nov 2011 23:40:17 +0000"  >&lt;p&gt;Hi Chris,&lt;/p&gt;

&lt;p&gt;understand your view point. Thanks for the comprehensive reply.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Niklas&lt;/p&gt;</comment>
                            <comment id="83366" author="asaikali" created="Sat, 8 Sep 2012 01:40:55 +0000"  >&lt;p&gt;I think parallel startup of Spring is very important, in my application spring is taking up 50% of my startup time, reducing that would be very helpful during development a major time saver. &lt;/p&gt;</comment>
                            <comment id="84405" author="rrva" created="Tue, 23 Oct 2012 11:30:24 +0000"  >&lt;p&gt;Please see &lt;a href=&quot;https://github.com/gredler/spriths&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/gredler/spriths&lt;/a&gt; for an experimental example implementation. Seems like the spriths implementation goes far into making it work. The author of spriths mentions &lt;a href=&quot;https://jira.spring.io/browse/SPR-5360&quot; title=&quot;Threads bottlenecking in DefaultSingletonBeanRegistry when using Wicket&amp;#39;s @SpringBean annotation for injection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-5360&quot;&gt;&lt;del&gt;SPR-5360&lt;/del&gt;&lt;/a&gt; that needs to be solved in order to make parallel startup thread-safe.&lt;/p&gt;

&lt;p&gt;It would be nice if the framework at least did not stand in the way of users wanting parallel startup.&lt;/p&gt;</comment>
                            <comment id="91051" author="jontejj" created="Wed, 19 Jun 2013 15:38:48 +0000"  >&lt;p&gt;I think a ConfigurableListableBeanFactory#setConcurrentInstantiationOfSingletons(boolean) would be great. Default to non-concurrent but make it super easy to get a parallel version. &lt;/p&gt;</comment>
                            <comment id="93703" author="scottland" created="Thu, 19 Sep 2013 11:21:16 +0000"  >&lt;p&gt;For a single instance web application, the speed of Spring initialization is fine.  However, when you have an application that uses 20+ instances, the slowness of Spring initialization begins to a have a detrimental impact on the ability to scale dynamically. We are currently feeling major pain using Spring on App Engine.  If Spring supported a multi-threaded start up, we would see a significant improvement in our ability to scale as well benefit from enormous cost savings. &lt;/p&gt;</comment>
                            <comment id="93704" author="scottland" created="Thu, 19 Sep 2013 11:23:05 +0000"  >&lt;p&gt;Is this worth revisiting now that it is 2 years later?&lt;/p&gt;</comment>
                            <comment id="93705" author="scottland" created="Thu, 19 Sep 2013 11:24:52 +0000"  >&lt;p&gt;&quot;Users are free to reopen this issue&quot;&lt;/p&gt;

&lt;p&gt;Maybe keep this issue open so it can be voted upon?&lt;/p&gt;</comment>
                            <comment id="103063" author="asaikali" created="Wed, 7 May 2014 07:23:26 +0000"  >&lt;p&gt;I think this problem has two distinct parts parallel discovery of beans and parallel initialization of beans. Both of which can be implemented separately to improve performance unless component scanning for a large application can not be made any faster.&lt;/p&gt;</comment>
                            <comment id="103140" author="jdubois" created="Fri, 9 May 2014 05:40:02 +0000"  >&lt;p&gt;Start-up performance is a very important issue to me, and I think a lot of beans could be initialized in parallel. So yes this issue should stay open, it should even have a higher criticity level as far as I&apos;m concerned.&lt;/p&gt;</comment>
                            <comment id="116543" author="akiraly" created="Thu, 11 Jun 2015 02:20:51 +0000"  >&lt;p&gt;Our applications have really big spring contexts with a lof ot spring beans. Our cache initializations are already running in parallel but the applications still take a long time to start up because simply some of our beans require time (for example because loading reference data from various sources, which we need for other bean creation already) in creation/initialization before we can say they are &quot;done&quot;.&lt;/p&gt;

&lt;p&gt;So we would definitely benefit from a build in bean init parallelization.&lt;/p&gt;</comment>
                            <comment id="118112" author="dukethrash" created="Wed, 29 Jul 2015 10:53:53 +0000"  >&lt;p&gt;We are struggling with this as well. Lazy loading beans helped a bit but I believe @Controller beans end up lazy loading its autowired fields anyway which doesn&apos;t improve the speed that much. Also entity manager and other data source beans in the config must be carefully set to eagerly be loaded, which is cumbersome. With all of this talk of microservices and Spring Boot it is obvious that separating out the modules in to separate projects may improve the speed, but this increases the overhead of managing independently deployed and managed services + it is a project in its own to figure out how to refactor the Spring bean autowiring dependencies.&lt;/p&gt;

&lt;p&gt;I also attempted to define all beans in XML dynamically at startup using a custom implemented component scanning method found in some of these &lt;a href=&quot;https://delicious.com/dukethrash/spring,speed&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;links&lt;/a&gt;. I found that it did improve the speed but not dramatically. The maintenance of ensuring the bean was dynamically created correctly was also cumbersome and did not work completely based on the complexities in having @Scope and @Qualifier.&lt;/p&gt;

&lt;p&gt;Summary is we need monolith applications to increase their speed time and this ticket should be evaluated! Thanks.&lt;/p&gt;</comment>
                            <comment id="119502" author="wecai@ebay.com" created="Fri, 18 Sep 2015 09:13:03 +0000"  >&lt;p&gt;I&apos;m thinking to enhance below project:  &lt;a href=&quot;https://github.com/gredler/spriths&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/gredler/spriths&lt;/a&gt;&lt;br/&gt;
The basic idea of this project is Analyze bean dependencies -&amp;gt; Form DAG -&amp;gt; Parallel Bean Initialize.&lt;/p&gt;

&lt;p&gt;To analyze the dependencies, I should handle dependencies that are set via Setter, Constructor and annotations including:&lt;br/&gt;
@Resource  TYPE, FIELD, METHOD&lt;br/&gt;
@Inject  METHOD, CONSTRUCTOR, FIELD&lt;br/&gt;
@AutoWired METHOD, CONSTRUCTOR, FIELD&lt;br/&gt;
For dependencies introduced by ApplicationContextAware, Lookup method injection, Class.forName, Reflect..., may unable to handle...&lt;/p&gt;

&lt;p&gt;User is allowed to specify the parallel bean init in a context.xml as below: &lt;br/&gt;
&amp;lt;context:parallel-bean-init enabled=&quot;true&quot; alwaysGenerate=&quot;true&quot; dag=&quot;dag.xml&quot;/&amp;gt;  &lt;/p&gt;

&lt;p&gt;a DAG is quite straightforward.&lt;br/&gt;
&amp;lt;dag&amp;gt;&lt;br/&gt;
    &amp;lt;bean name=&quot;A&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;dependOn bean=&quot;C&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;br/&gt;
    &amp;lt;bean name=&quot;B&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;dependOn bean=&quot;C&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;dependOn bean=&quot;D&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;br/&gt;
    &amp;lt;bean name=&quot;C&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;dependOn bean=&quot;E&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;br/&gt;
    &amp;lt;bean name=&quot;D&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;dependOn bean=&quot;E&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;br/&gt;
    &amp;lt;bean name=&quot;E&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;dependOn bean=&quot;G&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;br/&gt;
    &amp;lt;bean name=&quot;F&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;dependOn bean=&quot;G&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;br/&gt;
    &amp;lt;bean name=&quot;G&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;/dag&amp;gt;&lt;/p&gt;

&lt;p&gt;User can always let Spring generate a dag file or specify a dag file as they wish(set alwaysGenerate=&quot;false&quot;).&lt;br/&gt;
We know It is almost impossible for users to create the DAG from scratch. They have to know the bean dependencies and find out all beans defined via annotation.&lt;br/&gt;
The typical use case is user will first generate the DAG, then they may adjust the sequences in DAG if there are any server startup failures caused by the concurrent bean initialization.&lt;/p&gt;

&lt;p&gt;Just my 2 cents. Please share your expertise and let me know your concerns.&lt;/p&gt;</comment>
                            <comment id="122172" author="juergen.hoeller" created="Sun, 6 Dec 2015 17:54:07 +0000"  >&lt;p&gt;Note that we put &lt;a href=&quot;https://jira.spring.io/browse/SPR-13732&quot; title=&quot;Background initialization option for JPA EntityManagerFactory / Hibernate SessionFactory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-13732&quot;&gt;&lt;del&gt;SPR-13732&lt;/del&gt;&lt;/a&gt; onto the 4.3 roadmap now, with a dedicated background initialization option in &lt;tt&gt;LocalContainerEntityManagerFactoryBean&lt;/tt&gt; / &lt;tt&gt;LocalSessionFactoryBean&lt;/tt&gt; that allows to run JPA / Hibernate initialization in parallel to all other beans in the context. We do &lt;b&gt;not&lt;/b&gt; intend to let the container initialize beans in parallel there; we just allow those two &lt;tt&gt;FactoryBean&lt;/tt&gt; implementations to internally delegate to a separate thread and lazily access the initialized result through a &lt;tt&gt;Future&lt;/tt&gt; handle. Such specific background initializations options seem like a sweet spot, with configuration validation and dependency resolution happening as usual and just a well-known expensive bootstrap step delegated to a separate thread internally.&lt;/p&gt;

&lt;p&gt;A generalized solution based on a DAG analysis of a container&apos;s bean interdependencies is unfortunately absolutely non-trivial. We have plenty of components which dynamically resolve dependencies at runtime or make auto-configuration decisions based on the presence / non-presence of beans at runtime, etc. It seems like asking for a lot of trouble when trying to generalize such parallel bootstrapping as container-level guesswork, with hard-to-predict benefits in comparison to allowing well-known expensive components to use background initialization internally. And based on our experience, a large chunk of the startup time is occupied by very few components even in large Spring applications; tackling those components specifically and seeing how far we get with that seems like a very worthwhile effort.&lt;/p&gt;

&lt;p&gt;In any case, the most important part: We are revisiting this topic in 4.3, and we may take it a few steps further in 5.0. If you have specific hotspot insight into the startup time of your applications, please let us know... in particular if it deviates from our assumptions above.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="122174" author="jdubois" created="Sun, 6 Dec 2015 21:18:57 +0000"  >&lt;p&gt;If we could just have a specific annotation, like @Background to load a bean in the background, it would be nice: a bit like the @Lazy annotation in fact. Anyway each project is different, and usually people know which beans should run in the background.&lt;/p&gt;

&lt;p&gt;There should also be a specific thread pool for those, so we can manage how those background beans run -&amp;gt; like you have 4 CPU cores, launch 6 beans in &quot;background&quot;, and run them on 2 threads...&lt;/p&gt;</comment>
                            <comment id="122189" author="juergen.hoeller" created="Mon, 7 Dec 2015 11:05:43 +0000"  >&lt;p&gt;For specifically demarcated beans, it&apos;s a much simpler problem for sure. You may still end up with deadlocks in case of dependency cycles etc but hey, why not let badly designed applications hang on startup right away &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Seriously, opting in for specific beans is certainly the way to go - in one way or the other.&lt;/p&gt;

&lt;p&gt;Depending on the kind of bean, internal delegation to a separate thread can be quite beneficial, with dependency resolution and configuration validation happening first and then e.g. just the &lt;tt&gt;buildSessionFactory()&lt;/tt&gt; call actually executing in a separate thread. This seems like a pretty sweet spot, as long as nobody tries to call the resulting proxy early.&lt;/p&gt;

&lt;p&gt;Whereas for other kinds of beans, a more generic &lt;tt&gt;@Background&lt;/tt&gt; marker could wrap the entire &lt;tt&gt;createBean&lt;/tt&gt; step in a separate thread. The question is just what it would return to the immediate caller then, since the bean factory itself is not in the business of creating proxies. We had the same problem with &lt;tt&gt;@Lazy&lt;/tt&gt;-triggered proxies for injection points, though, and solved it through an SPI call that the context package implements on a proxy basis; I guess we could do something similar here.&lt;/p&gt;

&lt;p&gt;In any case, both options sound worth exploring. Let&apos;s keep this JIRA ticket open for an &lt;tt&gt;@Background&lt;/tt&gt;-style model (probably rather 5.0) and &lt;a href=&quot;https://jira.spring.io/browse/SPR-13732&quot; title=&quot;Background initialization option for JPA EntityManagerFactory / Hibernate SessionFactory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-13732&quot;&gt;&lt;del&gt;SPR-13732&lt;/del&gt;&lt;/a&gt; for the specific Hibernate/JPA factory case (certainly 4.3).&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="130358" author="vvk" created="Thu, 30 Jun 2016 12:02:27 +0000"  >&lt;p&gt;This issue is one of the most voted of unresolved ones in the Spring Framework JIRA project and is desired by various Spring-users for 5 years already (starting on the ticket creation date). Doesn&apos;t it deserve a priority higher than Minor? &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="130359" author="juergen.hoeller" created="Thu, 30 Jun 2016 12:08:24 +0000"  >&lt;p&gt;Alright, bumping this one to &quot;Major&quot;, keeping it in the 5.0 backlog.&lt;/p&gt;

&lt;p&gt;Please note that we&apos;ve been shipping 4.3 with &lt;a href=&quot;https://jira.spring.io/browse/SPR-13732&quot; title=&quot;Background initialization option for JPA EntityManagerFactory / Hibernate SessionFactory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-13732&quot;&gt;&lt;del&gt;SPR-13732&lt;/del&gt;&lt;/a&gt; included already. From our perspective, this addresses the most common case - expensive persistence provider bootstrapping - in a reasonably straightforward way.&lt;/p&gt;</comment>
                            <comment id="130718" author="vvk" created="Thu, 21 Jul 2016 11:03:52 +0000"  >&lt;p&gt;@juergen.hoeller, please add &lt;tt&gt;performance&lt;/tt&gt; and &lt;tt&gt;startup&lt;/tt&gt; labels to the ticket, it would help tracking such issues.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="45774">SPR-9887</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10151">
                    <name>Relate</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="25084">SPR-5360</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="45774">SPR-9887</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="70516">SPR-14920</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="70226">SPR-14832</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="66888">SPR-13732</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        22 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 17 Oct 2011 11:26:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>juergen.hoeller</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00wqn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5349</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10120" key="com.atlassian.jira.plugin.system.customfieldtypes:url">
                        <customfieldname>Reference URL</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[http://forum.springsource.org/showthread.php?105896-Initialize-spring-beans-in-parallel-at-startup]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>