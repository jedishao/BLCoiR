<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:18:45 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1193/SPR-1193.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1193] Binding error codes aren&apos;t consistent</title>
                <link>https://jira.spring.io/browse/SPR-1193</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;The error codes returned when binding Map values (and possibly other collections as well) isn&apos;t consistent.  They depend on the pre-bound values of the collection.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;Scenario **&lt;br/&gt;
When binding to a single Map entry (e.g. entries&lt;span class=&quot;error&quot;&gt;&amp;#91;FOOBAR&amp;#93;&lt;/span&gt;), the error codes returned in BindException depend on whether or not the entry has an inital value of null or not.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In this case, I have a Map keyed by Strings and containing Long values.  I have a SimpleFormController with this custom editor in place:&lt;/p&gt;

&lt;p&gt;binder.registerCustomEditor(Long.class, &quot;entries&quot;, new CustomNumberEditor(Long.class, false));&lt;/p&gt;

&lt;p&gt;My command class looks like this:&lt;/p&gt;

&lt;p&gt;public class MemberMapping {&lt;br/&gt;
    private Map entries = new HashMap();&lt;/p&gt;

&lt;p&gt;    public Map getEntries() &lt;/p&gt;
{ return entries; }
&lt;p&gt;    public void setEntries(Map entries) &lt;/p&gt;
{ this.entries = entries; }
&lt;p&gt;	&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;I&apos;m binding the string &quot;A&quot;, which obviously should raise an error because it cannot be converted to a Long.&lt;/p&gt;

&lt;p&gt;If the form backing object contains an initial (pre-bind) entry: entries&lt;span class=&quot;error&quot;&gt;&amp;#91;FOOBAR&amp;#93;&lt;/span&gt;=null, then these codes are returned:&lt;/p&gt;

&lt;p&gt;typeMismatch.mapping.entries&lt;span class=&quot;error&quot;&gt;&amp;#91;FOOBAR&amp;#93;&lt;/span&gt;&lt;br/&gt;
typeMismatch.mapping.entries&lt;br/&gt;
typeMismatch.entries&lt;span class=&quot;error&quot;&gt;&amp;#91;FOOBAR&amp;#93;&lt;/span&gt;&lt;br/&gt;
typeMismatch.entries&lt;br/&gt;
typeMismatch &lt;/p&gt;

&lt;p&gt;If the form backing object contains an initial (pre-bind) entry: entries&lt;span class=&quot;error&quot;&gt;&amp;#91;FOOBAR&amp;#93;&lt;/span&gt;=java.lang.Long(0), then these codes are returned:&lt;/p&gt;

&lt;p&gt;typeMismatch.mapping.entries&lt;span class=&quot;error&quot;&gt;&amp;#91;FOOBAR&amp;#93;&lt;/span&gt;&lt;br/&gt;
typeMismatch.mapping.entries&lt;br/&gt;
typeMismatch.entries&lt;span class=&quot;error&quot;&gt;&amp;#91;FOOBAR&amp;#93;&lt;/span&gt;&lt;br/&gt;
typeMismatch.entries&lt;br/&gt;
typeMismatch.java.lang.Long // ** NOTE&lt;br/&gt;
typeMismatch &lt;/p&gt;

&lt;p&gt;I would think that the error codes should be the same.  Afterall it&apos;s not the previous value that we care about when binding, it&apos;s the new value.&lt;/p&gt;

&lt;p&gt;This behavior makes it impossible to define generic error messages for  type conversion errors.  Instead of only defining a global message for code &quot;typeMismatch.java.lang.Long&quot;, I must also provide scenario specific ones like &quot;typeMismatch.entries&quot;.&lt;/p&gt;

&lt;p&gt;I&apos;ve attached a test case that demonstrates this problem.&lt;/p&gt;

&lt;p&gt;There is a thread on the forums which discusses how this came to be in the first place. &lt;a href=&quot;http://forum.springframework.org/viewtopic.php?p=29691&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.springframework.org/viewtopic.php?p=29691&lt;/a&gt;&lt;/p&gt;</description>
            <key id="12103">SPR-1193</key>
            <summary>Binding error codes aren&apos;t consistent</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="cnelson">Christian Nelson</reporter>
                        <labels>
                    </labels>
                <created>Sun, 31 Jul 2005 07:56:15 +0000</created>
                <updated>Sat, 6 Aug 2005 06:45:01 +0000</updated>
                            <resolved>Sat, 6 Aug 2005 06:45:01 +0000</resolved>
                                                    <fixVersion>1.2.4</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="14183" author="juergen.hoeller" created="Tue, 2 Aug 2005 02:33:43 +0000"  >&lt;p&gt;The problem is that we cannot determine the type of the Map entry through static checking. The best we can do is analyzing an existing entry object, which of course doesn&apos;t work if it is null.&lt;/p&gt;

&lt;p&gt;The property editors are not checked here: It&apos;s only the type of the property itself and/or of its content. I&apos;m not convinced that we should fall back to checking the type of property editor...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="14190" author="cnelson" created="Tue, 2 Aug 2005 04:18:08 +0000"  >&lt;p&gt;Juergen,&lt;/p&gt;

&lt;p&gt;I have two responses.  The first is in principle:&lt;/p&gt;

&lt;p&gt;When you define a custom editor for a specific property, I feel like you&apos;re defining a hard contract stating: &quot;I want the type of this property to be X, and if it cannot be converted to X, then raise a binding error.&quot;  This is the current behavior.  Whenever a binding error occurs, the most descriptive set of error codes should be associated with the error, even if it&apos;s a collection.  If this was a property, then all of the codes would be returned, even if the value was initially null.  Why should a collection be different?  I see the technical reason for the current behavior, but I would expect the behavior to be the same from a framework user&apos;s perspective.&lt;/p&gt;

&lt;p&gt;And the pratical:&lt;/p&gt;

&lt;p&gt;Having to define custom error codes for every scenario where you&apos;re binding to a collection type is cumbersome and error prone; it&apos;s nice to have a set of default binding/conversion error messages that are just used automatically for simple types, especially in a large web application.  Also, with the addition of Java 1.5&apos;s generics, we&apos;re becoming more accustomed to typed collections, and would expect the same behavior from both.  When Spring supports 1.5 internally, then this can be implemented in a static fashion.  In the meantime, we can do it in a dynamic fashion to approxiamte future behavior.&lt;/p&gt;

&lt;p&gt;I think the code would look something like this:&lt;/p&gt;

&lt;p&gt;...&lt;br/&gt;
// maybe an indexed/mapped property&lt;br/&gt;
Object value = getPropertyValue(propertyName);&lt;br/&gt;
if (value != null) {&lt;br/&gt;
    return value.getClass();&lt;br/&gt;
}&lt;br/&gt;
else {&lt;br/&gt;
    // check to see if there is a custom editor &lt;br/&gt;
    if (this.customEditors.containsKey(propertyName))&lt;br/&gt;
        return return ((CustomEditorHolder) this.customEditors.get(propertyName)).getRegisteredType();&lt;br/&gt;
}&lt;br/&gt;
...&lt;/p&gt;

&lt;p&gt;Though it may be required to loop through variations of the propertyName to make sure you&apos;ve got the custom editor (there may be a method that does this already).&lt;/p&gt;

&lt;p&gt;So that&apos;s my argument for this functionality. &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  Thanks for considering it, and for the amazing work!&lt;/p&gt;

&lt;p&gt;Christian&lt;/p&gt;</comment>
                            <comment id="14253" author="juergen.hoeller" created="Sat, 6 Aug 2005 06:45:01 +0000"  >&lt;p&gt;OK, convinced &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I&apos;ve refined BeanWrapperImpl&apos;s &quot;getPropertyType&quot; implementation to check registered custom editors as well, taking their registered type as hint for the expected property type.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="11002" name="MapBindingErrorCodeTests.java" size="4269" author="cnelson" created="Sun, 31 Jul 2005 07:57:44 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 21 weeks, 5 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 2 Aug 2005 02:33:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i011yv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6196</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>