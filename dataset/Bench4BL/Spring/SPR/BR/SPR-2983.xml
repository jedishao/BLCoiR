<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:44:50 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2983/SPR-2983.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2983] Scoped FactoryBeans Cause Access to Scope When Scope is NOT Active (leading to NPE in ScopedProxyFactoryBean on WebApplicationContext initialisation)</title>
                <link>https://jira.spring.io/browse/SPR-2983</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;When scoping a FactoryBean at any scope other than singleton or prototype (using &amp;lt;aop:scopedProxy/&amp;gt;), Spring attempts to access the FactoryBean&apos;s target object instance from its backing scope when creating the scoped proxy - i.e. when initialising the WebApplicationContext (assuming that the proxy is injected into any singletons - e.g. a controller or interceptor). The same problem does not occur when the scoped bean is a standard bean instance, rather than an object created by a FactoryBean.&lt;/p&gt;

&lt;p&gt;The stack trace is:&lt;/p&gt;

&lt;p&gt;2006-12-27 17:21:04,628|ERROR|org.springframework.web.servlet.DispatcherServlet||Context initialization failed&lt;br/&gt;
org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;testInterceptor&apos; defined in ServletContext resource &lt;span class=&quot;error&quot;&gt;&amp;#91;/WEB-INF/test-servlet.xml&amp;#93;&lt;/span&gt;: Cannot resolve reference to bean &apos;myBean&apos; while setting bean property &apos;myBean&apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;myBean&apos;: Initialization of bean failed; nested exception is java.lang.NullPointerException&lt;br/&gt;
Caused by: &lt;br/&gt;
org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;myBean&apos;: Initialization of bean failed; nested exception is java.lang.NullPointerException&lt;br/&gt;
Caused by: &lt;br/&gt;
java.lang.NullPointerException&lt;br/&gt;
	at org.springframework.aop.scope.ScopedProxyFactoryBean.setBeanFactory(ScopedProxyFactoryBean.java:91)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1020)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:420)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:246)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:955)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:729)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:416)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:290)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348)&lt;br/&gt;
	at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156)&lt;br/&gt;
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:308)&lt;br/&gt;
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:252)&lt;br/&gt;
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:221)&lt;br/&gt;
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:115)&lt;br/&gt;
	at javax.servlet.GenericServlet.init(GenericServlet.java:211)&lt;br/&gt;
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1105)&lt;br/&gt;
	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:932)&lt;br/&gt;
	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:3915)&lt;br/&gt;
	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4176)&lt;br/&gt;
	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012)&lt;br/&gt;
	at org.apache.catalina.core.StandardHost.start(StandardHost.java:718)&lt;br/&gt;
	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012)&lt;br/&gt;
	at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442)&lt;br/&gt;
	at org.apache.catalina.core.StandardService.start(StandardService.java:450)&lt;br/&gt;
	at org.apache.catalina.core.StandardServer.start(StandardServer.java:700)&lt;br/&gt;
	at org.apache.catalina.startup.Catalina.start(Catalina.java:551)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:324)&lt;br/&gt;
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:275)&lt;br/&gt;
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)&lt;/p&gt;

&lt;p&gt;If you turn on debugging, the underlying cause is revealed to be:&lt;/p&gt;

&lt;p&gt;2006-12-27 17:21:04,612|DEBUG|org.springframework.beans.factory.support.DefaultListableBeanFactory||Ignoring bean creation exception on FactoryBean type check&lt;br/&gt;
org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;scopedTarget.myBean&apos;: Scope &apos;request&apos; is not active; nested exception is java.lang.IllegalStateException: No thread-bound request: use RequestContextFilter&lt;br/&gt;
Caused by: &lt;br/&gt;
java.lang.IllegalStateException: No thread-bound request: use RequestContextFilter&lt;br/&gt;
	at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:61)&lt;br/&gt;
	at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:40)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:279)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1197)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:563)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:396)&lt;br/&gt;
	at org.springframework.aop.scope.ScopedProxyFactoryBean.setBeanFactory(ScopedProxyFactoryBean.java:90)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1020)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:420)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:246)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:955)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:729)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:416)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:290)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348)&lt;br/&gt;
	at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156)&lt;br/&gt;
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:308)&lt;br/&gt;
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:252)&lt;br/&gt;
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:221)&lt;br/&gt;
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:115)&lt;br/&gt;
	at javax.servlet.GenericServlet.init(GenericServlet.java:211)&lt;br/&gt;
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1105)&lt;br/&gt;
	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:932)&lt;br/&gt;
	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:3915)&lt;br/&gt;
	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4176)&lt;br/&gt;
	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012)&lt;br/&gt;
	at org.apache.catalina.core.StandardHost.start(StandardHost.java:718)&lt;br/&gt;
	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012)&lt;br/&gt;
	at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442)&lt;br/&gt;
	at org.apache.catalina.core.StandardService.start(StandardService.java:450)&lt;br/&gt;
	at org.apache.catalina.core.StandardServer.start(StandardServer.java:700)&lt;br/&gt;
	at org.apache.catalina.startup.Catalina.start(Catalina.java:551)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:324)&lt;br/&gt;
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:275)&lt;br/&gt;
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)&lt;/p&gt;

&lt;p&gt;The problem is that the call to beanFactory.getType() on line 90 of ScopedProxyFactoryBean results in the bean factory trying to retrieve the FactoryBean&apos;s target object from the backing scope in order to identify its type. I&apos;m not sure of the exact reason for this, as my FactoryBean implements the getObjectType() method, so I would have thought that a throw-away instance could be created to call this method quite easily. Perhaps this was done to improve performance or to allow FactoryBeans to dynamically alter the type of returned objects?&lt;/p&gt;

&lt;p&gt;Whatever the underlying reason, it is surely wrong for Spring to attempt to access a request-based scope at web application start-up when no current request exists. Note that Tomcat users have a work-around available for this issue as long as they are only using the built-in request and / or session scopes (see the description of additional problems with custom scopes below), which is to lazy-load the WebApplicationContext by not loading the DispatcherServlet at startup. But this does not work on Websphere (haven&apos;t tried any other servers), even if you use the RequestContextListener or RequestContextFilter, because Websphere calls the servlet&apos;s init() method before invoking either the RequestContextListener.requestInitialized() or RequestContextFilter.doFilter() methods. The only solution I&apos;ve been able to come up with for Websphere is to override the DispatcherServlet / FrameworkServlet initialisation routines to disable context initialisation until the first request is actually being processed.&lt;/p&gt;

&lt;p&gt;The problem is even worse when using a custom scope (e.g. I have a scope which operates at the level of a Tiles ComponentContext - roughly equivalent to page scope in a JSP). This scope is not active until the view rendering phase, so even the solutions discussed above cause a failure. In order to get a FactoryBean to work with the custom scope, I have to avoid throwing any exceptions if the scope is accessed when it is not yet active, and I have to create and return a throw-away instance of the scoped FactoryBean object (without storing it in the backing scope) so that Spring can do its type check to create the proxy at context initialisation.&lt;/p&gt;

&lt;p&gt;Sounds like a lot of work doesn&apos;t it? Surely there is some way the bean factory can handle this for us.&lt;/p&gt;</description>
            <key id="15763">SPR-2983</key>
            <summary>Scoped FactoryBeans Cause Access to Scope When Scope is NOT Active (leading to NPE in ScopedProxyFactoryBean on WebApplicationContext initialisation)</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="daveblumenfeld">Dave Blumenfeld</reporter>
                        <labels>
                    </labels>
                <created>Tue, 26 Dec 2006 17:55:22 +0000</created>
                <updated>Tue, 19 Jun 2012 03:50:15 +0000</updated>
                            <resolved>Fri, 29 Dec 2006 02:42:41 +0000</resolved>
                                    <version>2.0.1</version>
                                    <fixVersion>2.0.2</fixVersion>
                                    <component>Core</component>
                    <component>Core:AOP</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="21452" author="daveblumenfeld" created="Tue, 26 Dec 2006 18:06:58 +0000"  >&lt;p&gt;Simple test application attached to enable easy experimentation. It&apos;s set up to fail - remove the following line from web.xml to make it work:&lt;br/&gt;
&amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;&lt;/p&gt;

&lt;p&gt;To use the application, just deploy and enter the following into your browser:&lt;br/&gt;
http://&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/testScope/home.htm?param=&amp;lt;some_value&amp;gt;&lt;br/&gt;
e.g. &lt;a href=&quot;http://localhost:8080/testScope/home.htm?param=hello&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8080/testScope/home.htm?param=hello&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that this application does not include any custom scopes, but should be sufficient to demonstrate the problem.&lt;/p&gt;</comment>
                            <comment id="21493" author="juergen.hoeller" created="Fri, 29 Dec 2006 00:00:27 +0000"  >&lt;p&gt;The problem here is the &amp;lt;aop:scoped-proxy/&amp;gt; part: This forces the bean factory to create a shared proxy for the scoped bean, with the shared proxy being available on startup already. And in order to create a shared proxy, we need to know the type of the target bean... Which works fine in case of a normal bean, but for a FactoryBean, we need to instantiate the FactoryBean to determine the type of its object. This is exactly what goes wrong in your scenario: The proxy factory tries to find out the type of your FactoryBean, which triggers creation of the latter - with the target scope not being active yet!&lt;/p&gt;

&lt;p&gt;This is unfortunately a general problem with &amp;lt;aop:scoped-proxy/&amp;gt; and FactoryBeans, which is not trivial to resolve. Probably the simplest option is to create a throwaway instance of the FactoryBean to determine its type, using the two-step approach that we already have for singletons: First see whether a plain instance can already satisfy a &quot;getObjectType()&quot; call, else fall back to full creation of the FactoryBean. For a scoped FactoryBean, that instance would always have to be a throwaway one, though, but at least it wouldn&apos;t require the target scope to be active.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21494" author="juergen.hoeller" created="Fri, 29 Dec 2006 00:10:54 +0000"  >&lt;p&gt;Of course, the NPE in ScopedProxyFactoryBean is unfortunate. I&apos;ve fixed this to throw a nice exception there if we couldn&apos;t the determine the type of the target bean.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21495" author="juergen.hoeller" created="Fri, 29 Dec 2006 02:42:41 +0000"  >&lt;p&gt;I&apos;ve addressed this the way I indicated above, with a throwaway instance of the FactoryBean created for the type check. Note that it is helpful if the FactoryBean class implements &quot;getObjectType()&quot; to return a hard-coded static type, which allows for a shortcut type check; if it doesn&apos;t, the FactoryBean will get fully initialized just for the type check.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21496" author="juergen.hoeller" created="Fri, 29 Dec 2006 04:28:31 +0000"  >&lt;p&gt;This should be available in the next nightly snapshot (&lt;a href=&quot;http://www.springframework.org/snapshots&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.springframework.org/snapshots&lt;/a&gt;). Feel free to give it an early try and let me know whether it works for you!&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21510" author="daveblumenfeld" created="Sat, 30 Dec 2006 15:52:22 +0000"  >&lt;p&gt;Juergen,&lt;/p&gt;

&lt;p&gt;Thanks very much for your prompt action on this. I&apos;ll download the latest snapshot after New Year and let you know the results.&lt;/p&gt;

&lt;p&gt;Cheers&lt;br/&gt;
Dave&lt;/p&gt;</comment>
                            <comment id="21670" author="daveblumenfeld" created="Sun, 7 Jan 2007 09:45:39 +0000"  >&lt;p&gt;Juergen,&lt;/p&gt;

&lt;p&gt;This seems to work fine. I can now load the DispatcherServlet at startup on both Tomcat and Websphere.&lt;/p&gt;

&lt;p&gt;Do you know when v2.0.2 is due for release?&lt;/p&gt;

&lt;p&gt;Cheers&lt;br/&gt;
Dave&lt;/p&gt;</comment>
                            <comment id="21672" author="juergen.hoeller" created="Sun, 7 Jan 2007 18:41:24 +0000"  >&lt;p&gt;Hi Dave,&lt;/p&gt;

&lt;p&gt;Good to hear that it&apos;s working for you now!&lt;/p&gt;

&lt;p&gt;2.0.2 is scheduled for release &lt;b&gt;tonight&lt;/b&gt; &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12303" name="testScope.war" size="2884632" author="daveblumenfeld" created="Tue, 26 Dec 2006 18:06:58 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        9 years, 51 weeks, 4 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 29 Dec 2006 00:00:27 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00uzj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5065</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>