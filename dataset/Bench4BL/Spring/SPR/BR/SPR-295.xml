<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:39:59 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-295/SPR-295.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-295] spring tx and ejb cmt not fully compatible if ejb is RequiresNew</title>
                <link>https://jira.spring.io/browse/SPR-295</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I have set up 2 statless session beans - One has a clientPurchase() method demarcated as RequiresNew, the other bean has a serverSidePurchase() method that calls the clientPurchase() within a tx managed by TransactionTemplate. Inside clientPurchase(), a spring managed pojo is called with PROPAGATION_REQUIRED.&lt;/p&gt;

&lt;p&gt;Attached please find all source codes I&apos;m using.&lt;/p&gt;

&lt;p&gt;Here is the situation:&lt;/p&gt;

&lt;p&gt;1) if I use a ejb client to call clientPurchase() of the 1st bean, everything is fine, db record will be created as expectd.&lt;/p&gt;

&lt;p&gt;2) if I use a ejb client to call serverSidePurchase() of the 2nd bean, I&apos;ll get the following errors.&lt;/p&gt;


&lt;p&gt;======================&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;8/30/04 13:40:39:000 EDT&amp;#93;&lt;/span&gt; 4dce51da SystemOut     U DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;ORB.thread.pool:1&amp;#93;&lt;/span&gt; (BatcherImpl.java:196) - about to open: 0 open PreparedStatements, 0 open ResultSets&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;8/30/04 13:40:39:000 EDT&amp;#93;&lt;/span&gt; 4dce51da SystemOut     U DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;ORB.thread.pool:1&amp;#93;&lt;/span&gt; (BatcherImpl.java:237) - insert into TestProduct (name, price, id) values (?, ?, ?)&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;8/30/04 13:40:39:000 EDT&amp;#93;&lt;/span&gt; 4dce51da SystemOut     U DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;ORB.thread.pool:1&amp;#93;&lt;/span&gt; (BatcherImpl.java:241) - preparing statement&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;8/30/04 13:40:39:016 EDT&amp;#93;&lt;/span&gt; 4dce51da SystemOut     U DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;ORB.thread.pool:1&amp;#93;&lt;/span&gt; (JDBCExceptionReporter.java:36) - SQL Exception&lt;br/&gt;
com.ibm.websphere.ce.cm.StaleConnectionException: class com.ibm.ejs.cm.proxy.OracleConnectionProxy is closed&lt;br/&gt;
	at com.ibm.ejs.cm.proxy.OracleConnectionProxy.prepareStatement(OracleConnectionProxy.java:206)&lt;br/&gt;
	at net.sf.hibernate.impl.BatcherImpl.getPreparedStatement(BatcherImpl.java:249)&lt;br/&gt;
	at net.sf.hibernate.impl.BatcherImpl.prepareStatement(BatcherImpl.java:61)&lt;br/&gt;
	at net.sf.hibernate.impl.BatcherImpl.prepareStatement(BatcherImpl.java:56)&lt;br/&gt;
	at net.sf.hibernate.impl.BatcherImpl.prepareBatchStatement(BatcherImpl.java:109)&lt;br/&gt;
	at net.sf.hibernate.persister.EntityPersister.insert(EntityPersister.java:460)&lt;br/&gt;
	at net.sf.hibernate.persister.EntityPersister.insert(EntityPersister.java:442)&lt;br/&gt;
	at net.sf.hibernate.impl.ScheduledInsertion.execute(ScheduledInsertion.java:29)&lt;br/&gt;
	at net.sf.hibernate.impl.SessionImpl.executeAll(SessionImpl.java:2414)&lt;br/&gt;
	at net.sf.hibernate.impl.SessionImpl.execute(SessionImpl.java:2367)&lt;br/&gt;
	at net.sf.hibernate.impl.SessionImpl.flush(SessionImpl.java:2236)&lt;br/&gt;
	at org.springframework.orm.hibernate.SessionFactoryUtils$SpringSessionSynchronization.beforeCommit(SessionFactoryUtils.java:633)&lt;br/&gt;
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerBeforeCommit(AbstractPlatformTransactionManager.java:500)&lt;br/&gt;
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:364)&lt;br/&gt;
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:126)&lt;br/&gt;
	at com.cot.esd.Test2SpringSBBean.serverSidePurchase(Test2SpringSBBean.java:37)&lt;br/&gt;
	at com.cot.esd.EJSRemoteStatelessTest2SpringSB_27f3e5e8.serverSidePurchase(EJSRemoteStatelessTest2SpringSB_27f3e5e8.java:22)&lt;br/&gt;
	at com.cot.esd._EJSRemoteStatelessTest2SpringSB_27f3e5e8_Tie.serverSidePurchase(_EJSRemoteStatelessTest2SpringSB_27f3e5e8_Tie.java:152)&lt;br/&gt;
	at com.cot.esd._EJSRemoteStatelessTest2SpringSB_27f3e5e8_Tie._invoke(_EJSRemoteStatelessTest2SpringSB_27f3e5e8_Tie.java:96)&lt;br/&gt;
	at com.ibm.CORBA.iiop.ExtendedServerDelegate.dispatch(ExtendedServerDelegate.java:532)&lt;br/&gt;
	at com.ibm.CORBA.iiop.ORB.process(ORB.java:2450)&lt;br/&gt;
	at com.ibm.CORBA.iiop.OrbWorker.run(OrbWorker.java:186)&lt;br/&gt;
	at com.ibm.ejs.oa.pool.ThreadPool$PooledWorker.run(ThreadPool.java:104)&lt;br/&gt;
	at com.ibm.ws.util.CachedThread.run(ThreadPool.java(Compiled Code))&lt;/p&gt;</description>
            <key id="10513">SPR-295</key>
            <summary>spring tx and ejb cmt not fully compatible if ejb is RequiresNew</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="victorwon">Victor</reporter>
                        <labels>
                    </labels>
                <created>Mon, 30 Aug 2004 05:25:26 +0000</created>
                <updated>Wed, 1 Sep 2004 07:32:58 +0000</updated>
                            <resolved>Wed, 1 Sep 2004 07:32:58 +0000</resolved>
                                    <version>1.1 RC2</version>
                                    <fixVersion>1.1 final</fixVersion>
                                    <component>Transaction</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="10879" author="victorwon" created="Mon, 30 Aug 2004 05:34:25 +0000"  >&lt;p&gt;Ejb jar file with source code inside.&lt;/p&gt;</comment>
                            <comment id="10880" author="victorwon" created="Mon, 30 Aug 2004 05:38:34 +0000"  >&lt;p&gt;sql scripts to create the testproduct table.&lt;/p&gt;</comment>
                            <comment id="10882" author="victorwon" created="Mon, 30 Aug 2004 05:42:39 +0000"  >&lt;p&gt;ejb test client&lt;/p&gt;</comment>
                            <comment id="10884" author="juergen.hoeller" created="Mon, 30 Aug 2004 05:57:37 +0000"  >&lt;p&gt;Seems that WebSphere closes the JDBC connection for the outer transaction: It&apos;s obviously not open anymore after completing the inner transaction and resuming the outer one.&lt;/p&gt;

&lt;p&gt;This means that WebSphere&apos;s JTA TransactionManager does not offer transaction suspension in a nice JTA-compliant fashion. Spring does nothing fancy here, just call TransactionManager.suspend/resume. &lt;/p&gt;

&lt;p&gt;Unfortunately, the J2EE spec does not cover the JTA TransactionManager but just the JTA UserTransaction, so vendors are not required to support transaction suspension outside of EJB CMT.&lt;/p&gt;

&lt;p&gt;We recently had similar problems with WebLogic, whose JTA TransactionManager also has a peculiarity with resume: You need to invoke WebLogic&apos;s proprietary forceResume there to cover all cases.&lt;/p&gt;

&lt;p&gt;Note that none of this affects normal usage of JtaTransactionManager, i.e. REQUIRES/SUPPORTS/MANDATORY/NEVER! Vendor-specific problems just start to arise when touching transaction suspension.&lt;/p&gt;

&lt;p&gt;To address this with a vendor-specific WebSphereJtaTransactionManager subclass, we need to figure out how to do suspend/resume on WebSphere without side effects. Please check the WebSphere docs on this!&lt;/p&gt;

&lt;p&gt;Does WebSphere maybe have the option to see the source code of generated EJB proxies? That would also help, as we would see how an EJB proxy triggers suspend and resume internally.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="10887" author="victorwon" created="Mon, 30 Aug 2004 06:42:53 +0000"  >&lt;p&gt;In the attached Atest.jar you may find the source code of the stubs generated by websphere (file name start with an underscore or EJS). Let me know please if you need anything else.&lt;/p&gt;</comment>
                            <comment id="10888" author="juergen.hoeller" created="Mon, 30 Aug 2004 07:06:46 +0000"  >&lt;p&gt;Thanks for the generated stubs! However, those WebSphere ties on the server delegate to an EJSDeployedSupport support in the com.ibm.ejs.container package: Transaction demarcation obviously happens there in the internals. So unfortunately, I can&apos;t figure out what WebSphere JTA methods EJB CMT delegates too...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="10895" author="juergen.hoeller" created="Mon, 30 Aug 2004 20:07:22 +0000"  >&lt;p&gt;A new morning, a fresh look:&lt;/p&gt;

&lt;p&gt;This issue is probably &lt;b&gt;not&lt;/b&gt; caused by Spring&apos;s interaction with WebSphere&apos;s JTA TransactionManager in the first place: You have marked one of your EJB methods as REQUIRES_NEW, &lt;b&gt;not&lt;/b&gt; a Spring transaction. Spring never touches the JTA TransactionManager in this case, if I understand your scenario correctly.&lt;/p&gt;

&lt;p&gt;The problem is rather that you use Spring&apos;s transaction synchronization in combination with EJB CMT transaction suspension: The inner transaction will synchronize its Hibernate Session with the outer Spring transaction, because that outer Spring transaction does not know that it has been suspended.&lt;/p&gt;

&lt;p&gt;Please try the following: Turn off Spring&apos;s transaction synchronization on your JtaTransactionManager instance, via&lt;/p&gt;

&lt;p&gt;  JtaTransactionManager springTm = ...;&lt;br/&gt;
  springTm.setTransactionSynchronization(JtaTransactionManager.SYNCHRONIZATION_NEVER);&lt;/p&gt;

&lt;p&gt;respectively&lt;/p&gt;

&lt;p&gt;  &amp;lt;bean id=&quot;springTm&quot; class=&quot;org.springframework.transaction.jta.JtaTransactionManager&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;property name=&quot;transactionSynchronizationName&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;value&amp;gt;SYNCHRONIZATION_NEVER&amp;lt;/value&amp;gt;&lt;br/&gt;
    &amp;lt;/property&amp;gt;&lt;br/&gt;
  &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;This leaves transaction synchronization entirely to JTA itself, so there shouldn&apos;t be any side effects with transactions suspended by EJB CMT anymore. Spring&apos;s Hibernate support will then synchronize with JTA rather than with Spring&apos;s transaction subsystem, which should work with EJB CMT suspension too.&lt;/p&gt;

&lt;p&gt;The only requirement for the latter is to specify an appropriate TransactionManagerLookup for Hibernate, either as Hibernate properties or via LocalSessionFactoryBean&apos;s &quot;jtaTransactionManager&quot; property. This will be autodetected by Spring&apos;s Hibernate support, and used for synchronizing with JTA directly.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="10896" author="juergen.hoeller" created="Mon, 30 Aug 2004 20:14:43 +0000"  >&lt;p&gt;In short (assuming that the above solves your issue): If you combine outer Spring transaction management with inner EJB CMT transactions that cause transaction suspension (REQUIRES_NEW, NOT_SUPPORTED), turn off Spring&apos;s transaction synchronization.&lt;/p&gt;

&lt;p&gt;There is unfortunately no way to get informed of transaction suspension caused by EJB CMT respectively JTA directly, so the above is the best we can do with Spring&apos;s JtaTransactionManager. Note that Spring-driven transaction suspension should work properly!&lt;/p&gt;

&lt;p&gt;Speaking of it: Have you tried Spring-driven transaction suspension, i.e. Spring transactions with REQUIRES_NEW? I&apos;m curious whether that works without issues on WebSphere (provided that you pass a reference to a WebSphereTransactionManagerFactoryBean into JtaTransactionManager&apos;s &quot;transactionManager&quot; property).&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="10900" author="victorwon" created="Tue, 31 Aug 2004 01:18:22 +0000"  >&lt;p&gt;Wow! You&apos;re the genius!! The error simply disappears after I implement your suggestion. I was just about to call IBM support although I knew I would get nothing from them.&lt;/p&gt;

&lt;p&gt;However, will this affect other objects that use the Spring&apos;s TransactionSynchronizationManager, e.g. the ClobStringType? Is it safe to assume they will participate in JTA transaction after setting the SYNCHRONIZATION_NEVER? It&apos;ll be terrific if that&apos;s true, and I think it definately worths of mentioning in the reference.&lt;/p&gt;

&lt;p&gt;Victor&lt;/p&gt;</comment>
                            <comment id="10901" author="victorwon" created="Tue, 31 Aug 2004 01:25:02 +0000"  >&lt;p&gt;I forgot to comment that spring-driven transaction is working well as long as the EJB is set as Required instead of RequiresNew. But in my project I do need to use EJB tx because the ejb client needs to be distributed to other divisions that are not ready to adopt Spring.&lt;/p&gt;</comment>
                            <comment id="10911" author="juergen.hoeller" created="Tue, 31 Aug 2004 04:09:25 +0000"  >&lt;p&gt;Good that it generally works now!&lt;/p&gt;

&lt;p&gt;What I do not completely understand about your scenario is why you need to demarcate an &lt;b&gt;outer&lt;/b&gt; transaction with Spring and an &lt;b&gt;inner&lt;/b&gt; transaction with EJB CMT (with the special case of REQUIRES_NEW). The other way round would work in any case: The problem just arises when you have an existing Spring transaction and let EJB CMT suspend it. &lt;/p&gt;

&lt;p&gt;So if you want to stick to EJB CMT, I recommend to do either all transaction demarcation via EJB CMT, or at least do all &lt;b&gt;outer&lt;/b&gt; transactions with it. You can still use Spring transaction management &lt;b&gt;within&lt;/b&gt; those EJB CMT transactions, although it&apos;s generally recommendable to solely stick to EJB CMT in such a scenario.&lt;/p&gt;

&lt;p&gt;Spring&apos;s Hibernate support will automatically synchronize with either Spring transactions or JTA transactions. However, you have a point there regarding ClobStringType: The current implementation of that indeed depends on Spring transaction synchronization. I&apos;ll have a look whether we can add support for JTA synchronization there too.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="10912" author="juergen.hoeller" created="Tue, 31 Aug 2004 04:12:36 +0000"  >&lt;p&gt;Coming back to one of my earlier questions: Have you tried Spring transactions with REQUIRES_NEW (no EJB CMT involved)? I&apos;m curious to know whether it correctly suspends and resumes an existing Spring-managed JTA transaction on WebSphere...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="10916" author="juergen.hoeller" created="Tue, 31 Aug 2004 05:26:02 +0000"  >&lt;p&gt;I&apos;ve just reworked AbstractLobType, the common base class of ClobStringType, to be able to synchronize with either Spring transactions or direct JTA.&lt;/p&gt;

&lt;p&gt;This should allow you to work with deactivated Spring transaction synchronization - or solely EJB CMT - and still leverage ClobStringType.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="10918" author="victorwon" created="Tue, 31 Aug 2004 07:02:39 +0000"  >&lt;p&gt;1. I&apos;ve tested spring RequiresNew on websphere 4.0.6, it does suspend and resume the tx as expected without any error. So it&apos;s good to that point.&lt;/p&gt;

&lt;p&gt;2. The reason I use spring tx outside, then ejb tx then spring tx is that the ejb is a service gateway, it should be able to serve both spring-enabled client and spring-agonistic client, and I have to resort to EJB due to the distributed requirement(BTW, EJB BMT doesn&apos;t propergate the tx from the client for some reason). And demarcating the EJB is more obvious to non-spring client and more flexible(in case we choose other server side implementation in future) than demarcating spring inside. All I was trying to do is hiding the spring implementation behind ejb facade, because not all our clients are ready to understand spring. But I do foresee a strong growth of spring in near future, sadly I can&apos;t persuade everyone at this point.&lt;/p&gt;

&lt;p&gt;Do you maybe have better suggestion for such situation? Or do you foresee any risk in the framework due to solely using JTA&apos;s synchronization?&lt;/p&gt;

&lt;p&gt;Thanks a lot!!!&lt;/p&gt;</comment>
                            <comment id="10919" author="juergen.hoeller" created="Tue, 31 Aug 2004 07:22:12 +0000"  >&lt;p&gt;Thanks for testing Spring REQUIRES_NEW on WebSphere, Victor! Let me ask for one further test: Does suspend and resume also work if the outer transaction has been marked rollback-only? I.e.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;outer transaction begin (REQUIRED)&lt;/li&gt;
	&lt;li&gt;(some data access operation)&lt;/li&gt;
	&lt;li&gt;outer transaction setRollbackOnly&lt;/li&gt;
	&lt;li&gt;inner transaction begin (REQUIRES_NEW)&lt;/li&gt;
	&lt;li&gt;(some data access operation)&lt;/li&gt;
	&lt;li&gt;inner transaction commit&lt;/li&gt;
	&lt;li&gt;(some data access operation)&lt;/li&gt;
	&lt;li&gt;outer transaction commit&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The question why I ask is that that particular scenario fails on WebLogic without some vendor-specific coding: WebLogic by default refuses the resume the outer transaction because it has been marked rollback-only. I&apos;m curious whether that works on WebSphere.&lt;/p&gt;

&lt;p&gt;Regarding your scenario: The Hibernate support should work nicely with direct JTA synchronization, including ClobStringType now. However, the JDO support won&apos;t, because there&apos;s no direct JTA synchronization option there.&lt;/p&gt;

&lt;p&gt;A compromise (for example for JDO) would be to deactivate Spring transaction synchronization for the outer transaction, but let it activated for the inner transaction. This can be achieved by using two different instances of JtaTransactionManager: one for the outer transaction (without synchronization), and one for the inner transaction (with synchronization).&lt;/p&gt;

&lt;p&gt;But as I said, don&apos;t bother in the Hibernate case. Direct JTA synchronization should work nicely there too, with Spring transaction synchronization turned off completely.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="10925" author="victorwon" created="Wed, 1 Sep 2004 06:36:17 +0000"  >&lt;p&gt;I tested the process you mentioned in an EJB method demarcated as Required/RequiresNew. It went through with correct result - inner tx committed, outer tx rolled back. Full situation is as following:&lt;/p&gt;

&lt;p&gt;ejb method (Required/RequiresNew both will do)&lt;br/&gt;
&amp;#8211; spring managed method1 (Required)&lt;br/&gt;
&amp;#8211; getSessionContext().setRollbackOnly()&lt;br/&gt;
&amp;#8211; spring managed method2 (RequiresNew)&lt;br/&gt;
&amp;#8211; spring managed method3 (Required)&lt;br/&gt;
end of ejb method&lt;/p&gt;

&lt;p&gt;During the test I didn&apos;t set the jtaTransactionManager to use SYNCHRONIZATION_NEVER (I think it uses ALWAYS by default). Therefore I don&apos;t think websphere had the same problem as weblogic.&lt;/p&gt;

&lt;p&gt;Thank you for the comments on my previous questions. I do have one last wondering - why couldn&apos;t make spring&apos;s sync manager to have built-in check for existing JTA support and use JTA&apos;s synchronization instead of spring&apos;s whenever possible (or at least according to certain config that can be set by the developer)?&lt;/p&gt;

&lt;p&gt;If this is possible, then we can totally rely on using spring&apos;s sync manager and don&apos;t have to code any additional code for things like LobType. Do you think it&apos;s good?&lt;/p&gt;

&lt;p&gt;Victor&lt;/p&gt;</comment>
                            <comment id="10926" author="victorwon" created="Wed, 1 Sep 2004 07:15:20 +0000"  >&lt;p&gt;Realizing the test may not be enough, I tried also another situation:&lt;/p&gt;

&lt;p&gt;ejb method(RequiresNew)&lt;br/&gt;
&amp;#8211; spring method1(Required, pass sessionContext in)&lt;br/&gt;
---- sessionContext.setRollbackOnly()&lt;br/&gt;
---- spring method2(RequiresNew)&lt;br/&gt;
---- db access&lt;br/&gt;
&amp;#8211; end of spring method1&lt;br/&gt;
end of ejb method&lt;/p&gt;

&lt;p&gt;It also worked. tx in spring method2 committed and db access in method1 rolled back. No exceptions or errors.&lt;/p&gt;</comment>
                            <comment id="10927" author="juergen.hoeller" created="Wed, 1 Sep 2004 07:31:38 +0000"  >&lt;p&gt;Thanks for the tests, Victor! This means that it&apos;s now quite safe to assume that WebSphere&apos;s JTA TransactionManager is fully compatible with Spring, at least on WebSphere 4. I&apos;ll try to find somebody to do tests on WebSphere 5, to make sure that it works there too.&lt;/p&gt;

&lt;p&gt;Regarding synchronization: Spring&apos;s transaction synchronization offers more fine-grained hooks that JTA itself. So if we can, we should keep using Spring&apos;s transaction synchronization, as it allows for optimized resource handling. IMO, the current strategy of explicitly falling back to direct JTA synchronization is an appropriate compromise.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="10928" author="juergen.hoeller" created="Wed, 1 Sep 2004 07:32:58 +0000"  >&lt;p&gt;Transaction suspension via EJB CMT will only work with Spring&apos;s transaction synchronization turned off. Need to document this.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="10186" name="ATest.jar" size="118473" author="victorwon" created="Mon, 30 Aug 2004 05:34:25 +0000"/>
                            <attachment id="10188" name="TestClient.java" size="3326" author="victorwon" created="Mon, 30 Aug 2004 05:42:39 +0000"/>
                            <attachment id="10184" name="beanRefContext.xml" size="567" author="victorwon" created="Mon, 30 Aug 2004 05:26:26 +0000"/>
                            <attachment id="10187" name="db_sql.txt" size="185" author="victorwon" created="Mon, 30 Aug 2004 05:38:34 +0000"/>
                            <attachment id="10185" name="springContext.xml" size="3818" author="victorwon" created="Mon, 30 Aug 2004 05:28:52 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        12 years, 18 weeks, 1 day ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 30 Aug 2004 05:57:37 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01sp3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10526</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>