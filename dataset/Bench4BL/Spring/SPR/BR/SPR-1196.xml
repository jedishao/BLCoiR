<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:18:59 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1196/SPR-1196.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1196] ClassPathApplicationContext et al should use fixed class loader</title>
                <link>https://jira.spring.io/browse/SPR-1196</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;ClassPathXmlApplicationContext and other classes use the thread context classloader for resource loading and other operations. This is a good default in itself, however, I think they should get that classloader exactly once and remember it. Surprising behaviour can occur otherwise if you have a different tccl later.&lt;/p&gt;

&lt;p&gt;Example: The existence of a Resource obtained from a CPXAC depends on the thread context class loader:&lt;/p&gt;

&lt;p&gt;/*&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Copyright (c) 2004 CoreMedia AG, Hamburg. All rights reserved.&lt;br/&gt;
 */&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;package org.mernst.subsystems.crosscontext.test;&lt;/p&gt;

&lt;p&gt;import org.springframework.context.support.ClassPathXmlApplicationContext;&lt;br/&gt;
import org.springframework.core.io.Resource;&lt;/p&gt;

&lt;p&gt;import java.net.URLClassLoader;&lt;br/&gt;
import java.net.URL;&lt;br/&gt;
import java.net.MalformedURLException;&lt;/p&gt;

&lt;p&gt;public class WhichClassLoader {&lt;br/&gt;
  public static void main(String[] args) throws MalformedURLException {&lt;br/&gt;
    URLClassLoader cl = new URLClassLoader(new URL[] &lt;/p&gt;
{
      new URL(&quot;http://www.springframework.org/&quot;)
    }
&lt;p&gt;);&lt;/p&gt;

&lt;p&gt;    ClassLoader current = Thread.currentThread().getContextClassLoader();&lt;br/&gt;
    ClassPathXmlApplicationContext context;&lt;br/&gt;
    Resource resource;&lt;/p&gt;

&lt;p&gt;    Thread.currentThread().setContextClassLoader(cl);&lt;br/&gt;
    try &lt;/p&gt;
{
      context = new ClassPathXmlApplicationContext(new String[0]);
      resource = context.getResource(&quot;/files/xdev-spring_logo.jpg&quot;);
      System.out.println(&quot;&quot;+resource+&quot; exists: &quot;+resource.exists());
    }
&lt;p&gt; finally &lt;/p&gt;
{
      Thread.currentThread().setContextClassLoader(current);
    }

&lt;p&gt;    System.out.println(&quot;&quot;&lt;ins&gt;resource&lt;/ins&gt;&quot; exists: &quot;+resource.exists());&lt;br/&gt;
  }&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;This code prints &quot;true&quot; and &quot;false&quot; for the same resource.&lt;/p&gt;

&lt;p&gt;This can happen, for example, when using JMX remote. Take such a context and export beans via a JMX remote connector. The connector will call into your context using the application classloader as context.&lt;/p&gt;

&lt;p&gt;I think it would be more intuitive if DefaultResourceLoader (from which this behaviour is inherited) would remember the context class loader in a field and always use that one.&lt;/p&gt;

&lt;p&gt;As a side effect, #getClassLoader on an ApplicationContext would return something meaningful.&lt;/p&gt;</description>
            <key id="12109">SPR-1196</key>
            <summary>ClassPathApplicationContext et al should use fixed class loader</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="mernst">matthias ernst</reporter>
                        <labels>
                    </labels>
                <created>Sun, 31 Jul 2005 23:50:49 +0000</created>
                <updated>Sat, 6 Aug 2005 06:16:24 +0000</updated>
                            <resolved>Sat, 6 Aug 2005 06:16:25 +0000</resolved>
                                    <version>1.2.1</version>
                                    <fixVersion>1.2.4</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="14171" author="mernst" created="Mon, 1 Aug 2005 02:24:28 +0000"  >&lt;p&gt;I can work around this by subclassing:&lt;/p&gt;

&lt;p&gt;    cl = Thread.currentThread().getContextClassLoader();&lt;br/&gt;
    context = new ClassPathXmlApplicationContext(...) {&lt;br/&gt;
      public ClassLoader getClassLoader() &lt;/p&gt;
{
	return cl;
      }
&lt;p&gt;    };&lt;/p&gt;

&lt;p&gt;However, I would still like this to be the default.&lt;/p&gt;</comment>
                            <comment id="14172" author="mernst" created="Mon, 1 Aug 2005 02:50:44 +0000"  >&lt;p&gt;Another thing:&lt;/p&gt;

&lt;p&gt;AbstractXmlApplicationContext#loadBeanDefinitions should also set its ClassLoader on the bean definition reader:&lt;/p&gt;

&lt;p&gt;in line 68 insert:&lt;/p&gt;

&lt;p&gt;beanDefinitionReader.setBeanClassLoader(getClassLoader());&lt;/p&gt;</comment>
                            <comment id="14178" author="juergen.hoeller" created="Mon, 1 Aug 2005 22:00:51 +0000"  >&lt;p&gt;I&apos;ve changed AbstractXmlApplicationContext and XmlWebApplicationContext to apply the context&apos;s class loader, if any, as bean class loader to the XmlBeanDefinitionReader.&lt;/p&gt;

&lt;p&gt;Note that we shouldn&apos;t pass in &quot;null&quot; as &quot;beanClassLoader&quot;, as this will effectively turn the bean definition reader into &quot;let&apos;s not load any actual classes&quot; mode. Hence, I&apos;ve added a corresponding check there.&lt;/p&gt;

&lt;p&gt;I&apos;m afraid that ClassPathXmlApplicationContext can&apos;t use a fixed ClassLoader by default, at least not within Spring 1.2.x, as this will break current semantics. OK, hardly anyone will rely on that, but still - someone might. &lt;/p&gt;

&lt;p&gt;Overriding ClassPathXmlApplicationContext&apos;s &quot;getClassLoader()&quot; method should be fine to enforce a fixed ClassLoader. I&apos;ve also added a &quot;setClassLoader&quot; method to DefaultResourceLoader, which is inherited by ClassPathXmlApplicationContext and can be used like this:&lt;/p&gt;

&lt;p&gt;  ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(new String[] &lt;/p&gt;
{&quot;myLocation&quot;}
&lt;p&gt;, false);&lt;br/&gt;
  ctx.setClassLoader(Thread.currentThread().getContextClassLoader());&lt;br/&gt;
  ctx.refresh();&lt;/p&gt;

&lt;p&gt;Alternatively, consider using a GenericApplicationContext in combination with a separate XmlBeanDefinitionReader. This will already work with Spring 1.2.3:&lt;/p&gt;

&lt;p&gt;  GenericApplicationContext ctx = new GenericApplicationContext();&lt;br/&gt;
  ctx.setResourceLoader(new DefaultResourceLoader(Thread.currentThread().getContextClassLoader()));&lt;br/&gt;
  XmlBeanDefinitionReader xmlReader = new XmlBeanDefinitionReader(ctx);&lt;br/&gt;
  xmlReader.loadBeanDefinitions(&quot;myLocation&quot;);&lt;br/&gt;
  ctx.refresh();&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="14252" author="juergen.hoeller" created="Sat, 6 Aug 2005 06:16:24 +0000"  >&lt;p&gt;Closed for the time being: There is a dedicated option for setting a specific ClassLoader on an ApplicationContext now, passed through to all relevant classes such as bean definition readers.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 21 weeks, 5 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 1 Aug 2005 22:00:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04wgf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28632</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>