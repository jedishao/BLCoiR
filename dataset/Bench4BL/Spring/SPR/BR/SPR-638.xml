<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:44:25 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-638/SPR-638.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-638] SessionFactoryUtils.getSession(..) before PROPAGATION_REQUIRED</title>
                <link>https://jira.spring.io/browse/SPR-638</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;&quot;GenerateLetters.java:42&quot; calls SessionFactoryUtils.getSession(), before the adviced method &quot;ProfileBuilderLogicSupport.java:542&quot; is called. Problem: SessionFactoryUtils looks up the Session with SessionHolder.DEFAULT_KEY, though the Session is stored with the current transaction as key.&lt;/p&gt;

&lt;p&gt;java.lang.NullPointerException&lt;br/&gt;
        at org.springframework.orm.hibernate.HibernateTemplate.createQuery(HibernateTemplate.java:836)&lt;br/&gt;
        at org.springframework.orm.hibernate.HibernateTemplate$25.doInHibernate(HibernateTemplate.java:469)&lt;br/&gt;
        at org.springframework.orm.hibernate.HibernateTemplate.execute(HibernateTemplate.java:200)&lt;br/&gt;
        at org.springframework.orm.hibernate.HibernateTemplate.executeFind(HibernateTemplate.java:220)&lt;br/&gt;
        at org.springframework.orm.hibernate.HibernateTemplate.find(HibernateTemplate.java:467)&lt;br/&gt;
        at wilken.openshop.modules.eprofiler.dao.support.hibernate.EProfilerDaoSupport.getFavoritAttributesForBp(EProfilerDaoSupport.java:103)&lt;br/&gt;
        at wilken.openshop.modules.eprofiler.logic.support.ProfileBuilderLogicSupport.getAllFavoriteAttributes(ProfileBuilderLogicSupport.java:691)&lt;br/&gt;
        at wilken.openshop.modules.eprofiler.logic.support.ProfileBuilderLogicSupport.getEmptyFavoriteTree(ProfileBuilderLogicSupport.java:527)&lt;br/&gt;
        at wilken.openshop.modules.eprofiler.logic.support.ProfileBuilderLogicSupport.getFilledFavoriteTree(ProfileBuilderLogicSupport.java:542)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:324)&lt;br/&gt;
        at org.springframework.aop.framework.AopProxyUtils.invokeJoinpointUsingReflection(AopProxyUtils.java:61)&lt;br/&gt;
        at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:149)&lt;br/&gt;
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:116)&lt;br/&gt;
        at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:56)&lt;br/&gt;
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:138)&lt;br/&gt;
        at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:152)&lt;br/&gt;
        at $Proxy4.getFilledFavoriteTree(Unknown Source)&lt;br/&gt;
        at wilken.openshop.modules.ecampaign.logic.support.CampaignContentBuilderSupport.getFavoriteTree(CampaignContentBuilderSupport.java:384)&lt;br/&gt;
        at wilken.openshop.modules.ecampaign.logic.support.CampaignContentBuilderSupport.buildContent(CampaignContentBuilderSupport.java:236)&lt;br/&gt;
        at wilken.openshop.modules.ecampaign.campaign.GenerateLetters.getLocalizedContentItems(GenerateLetters.java:74)&lt;br/&gt;
        at wilken.openshop.modules.ecampaign.campaign.GenerateLetters.createNewsletter(GenerateLetters.java:65)&lt;br/&gt;
        at wilken.openshop.modules.ecampaign.campaign.GenerateLetters.execute(GenerateLetters.java:42)&lt;br/&gt;
        at org.concern.controller.Controller.execute(Controller.java:725)&lt;br/&gt;
        at org.concern.controller.Controller.process(Controller.java:642)&lt;br/&gt;
        at org.concern.controller.Controller.process(Controller.java:608)&lt;br/&gt;
        at org.concern.controller.Controller.timeout(Controller.java:198)&lt;br/&gt;
        at org.concern.controller.Controller$TimeoutTask.run(Controller.java:1131)&lt;br/&gt;
        at java.util.TimerThread.mainLoop(Timer.java:432)&lt;br/&gt;
        at java.util.TimerThread.run(Timer.java:382)&lt;/p&gt;</description>
            <key id="11002">SPR-638</key>
            <summary>SessionFactoryUtils.getSession(..) before PROPAGATION_REQUIRED</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="hengels">Holger Engels</reporter>
                        <labels>
                    </labels>
                <created>Tue, 18 Jan 2005 19:04:02 +0000</created>
                <updated>Wed, 26 Jan 2005 17:09:34 +0000</updated>
                            <resolved>Wed, 26 Jan 2005 07:32:09 +0000</resolved>
                                    <version>1.1.1</version>
                                    <fixVersion>1.1.4</fixVersion>
                                    <component>Transaction</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12011" author="hengels" created="Tue, 18 Jan 2005 19:05:59 +0000"  >&lt;p&gt;SessionFactoryUtils is going through &quot;Registering Spring transaction synchronization for existing Hibernate session&quot;.&lt;/p&gt;</comment>
                            <comment id="12013" author="hengels" created="Tue, 18 Jan 2005 21:15:37 +0000"  >&lt;p&gt;affects 1.1.3, too&lt;/p&gt;</comment>
                            <comment id="12080" author="juergen.hoeller" created="Tue, 25 Jan 2005 05:42:01 +0000"  >&lt;p&gt;As you&apos;re using JTA synchronization with the full JTA TransactionManager, this might share a common cause with issue &lt;a href=&quot;https://jira.spring.io/browse/SPR-638&quot; title=&quot;SessionFactoryUtils.getSession(..) before PROPAGATION_REQUIRED&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-638&quot;&gt;&lt;del&gt;SPR-638&lt;/del&gt;&lt;/a&gt;. Actually, it&apos;s very likely: the per-JTA-transaction synchronization (which just kicks in for the full JTA TransactionManager, to cover transaction suspension) might have a corner case that doesn&apos;t work properly.&lt;/p&gt;</comment>
                            <comment id="12088" author="juergen.hoeller" created="Wed, 26 Jan 2005 07:32:09 +0000"  >&lt;p&gt;This is caused when a pre-bound SessionHolder with a JTA-synchronized Session already exists when a new Spring-managed transaction (with Spring transaction synchronization active) kicks in.&lt;/p&gt;

&lt;p&gt;Fixed through adding a check to the synchronization code in SessionFactoryUtils, and (of course) a unit test.&lt;/p&gt;

&lt;p&gt;The remaining question is: How would you get into such a scenario? I can only imagine EJB CMT with fine-grained Spring-managed transactions within, which is of course a typical use case.&lt;/p&gt;

&lt;p&gt;However, you said you were using JOTM... How do you start a JTA transaction before a Spring-managed transaction in this case? Manual JTA UserTransaction calls?&lt;/p&gt;

&lt;p&gt;This fix will make it into 1.1.4. Feel free to give a current nightly snapshot a try (probably the one generated Thursday night rather than tonight, as anonymous CVS won&apos;t catch up immediately).&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="12093" author="hengels" created="Wed, 26 Jan 2005 17:09:34 +0000"  >&lt;p&gt;Thanks J&#252;rgen!&lt;/p&gt;

&lt;p&gt;The scenario is activities synchronously called from a workflow engine (con:cern). The transactions are started and commited by the engine using the UserTransaction.&lt;/p&gt;

&lt;p&gt;I had even more prolems with this scenario. When the jta transaction is commited, the spring transaction is not and the hibernate sessions stay open. I had to register a javax.transaction.Synchronization with the jta transation and simulate what the SpringSessionSynchronization should normally do:&lt;/p&gt;

&lt;p&gt;            if (!TransactionSynchronizationManager.isSynchronizationActive())&lt;br/&gt;
                TransactionSynchronizationManager.initSynchronization();&lt;/p&gt;

&lt;p&gt;            final Session session = SessionFactoryUtils.getSession(getSessionFactory(), true);&lt;br/&gt;
            System.out.println(&quot;session = &quot; + session);&lt;/p&gt;

&lt;p&gt;            if (synchronizations.get() == null) {&lt;br/&gt;
                session.setFlushMode(FlushMode.NEVER);&lt;/p&gt;

&lt;p&gt;                Synchronization synchronization = new Synchronization() {&lt;br/&gt;
                    public void beforeCompletion() {&lt;br/&gt;
                        try &lt;/p&gt;
{
                            session.flush();
                        }
&lt;p&gt;                        catch (HibernateException e) &lt;/p&gt;
{
                            e.printStackTrace();
                        }
&lt;p&gt;                        closeSession();&lt;br/&gt;
                    }&lt;/p&gt;

&lt;p&gt;                    public void afterCompletion(int i) &lt;/p&gt;
{
                        System.out.println(&quot;Status = &quot; + i);
                        if (session.isOpen())
                            closeSession();
                    }

&lt;p&gt;                    private void closeSession() &lt;/p&gt;
{
                        TransactionSynchronizationManager.unbindResource(getSessionFactory());
                        SessionFactoryUtils.closeSessionIfNecessary(session, getSessionFactory());
                        synchronizations.set(null);
                    }
&lt;p&gt;                };&lt;br/&gt;
                synchronizations.set(synchronization);&lt;br/&gt;
                controller.getTransactionManager().getTransaction().registerSynchronization(synchronization);&lt;br/&gt;
            }&lt;br/&gt;
            return session.load(getEntityClass(), typedId(id));&lt;/p&gt;

&lt;p&gt;All this is happening within a jta transaction.&lt;/p&gt;

&lt;p&gt;Regards,&lt;/p&gt;

&lt;p&gt;Holger&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="11048">SPR-654</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 49 weeks, 1 day ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 25 Jan 2005 05:42:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04xmv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28823</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>