<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:58:56 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1362/SPR-1362.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1362] HibernateTransactionManager incompatible with Hibernate 3.1?</title>
                <link>https://jira.spring.io/browse/SPR-1362</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I just updated from Hibernate 3.0.5 to 3.1rc, and in an application that ran fine on 3.0.5, I now get the following exception in HibernateTransactionManager, at the end of calling my service methods:&lt;/p&gt;

&lt;p&gt;Oct 10, 2005 10:19:41 AM org.springframework.orm.hibernate3.HibernateTransactionManager doCleanupAfterCompletion&lt;br/&gt;
INFO: Could not access JDBC Connection of Hibernate Session&lt;br/&gt;
org.hibernate.SessionException: Session is currently disconnected&lt;br/&gt;
at org.hibernate.jdbc.JDBCContext.connection(JDBCContext.java:134)&lt;br/&gt;
at org.hibernate.jdbc.JDBCContext.userConnection(JDBCContext.java:125)&lt;br/&gt;
at org.hibernate.impl.SessionImpl.connection(SessionImpl.java:366)&lt;br/&gt;
at org.springframework.orm.hibernate3.HibernateTransactionManager.doCleanupAfterCompletion(HibernateTransactionManager.java:550)&lt;br/&gt;
at org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion(AbstractPlatformTransactionManager.java:749)&lt;br/&gt;
at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:536)&lt;br/&gt;
at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:468)&lt;br/&gt;
at org.springframework.transaction.interceptor.TransactionAspectSupport.doCommitTransactionAfterReturning(TransactionAspectSupport.java:258)&lt;br/&gt;
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:106)&lt;br/&gt;
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144)&lt;br/&gt;
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:174)&lt;/p&gt;

&lt;p&gt;See also:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://opensource2.atlassian.com/projects/hibernate/browse/HHH-1011&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://opensource2.atlassian.com/projects/hibernate/browse/HHH-1011&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://forum.springframework.org/viewtopic.php?p=37276&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.springframework.org/viewtopic.php?p=37276&lt;/a&gt;&lt;/p&gt;</description>
            <key id="12514">SPR-1362</key>
            <summary>HibernateTransactionManager incompatible with Hibernate 3.1?</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="goonie">Andreas Schildbach</reporter>
                        <labels>
                    </labels>
                <created>Sun, 9 Oct 2005 20:35:30 +0000</created>
                <updated>Tue, 19 Jun 2012 03:54:03 +0000</updated>
                            <resolved>Wed, 12 Oct 2005 07:00:48 +0000</resolved>
                                    <version>1.2.5</version>
                                    <fixVersion>1.2.6</fixVersion>
                                    <component>Data</component>
                        <due></due>
                            <votes>4</votes>
                                    <watches>8</watches>
                                                                <comments>
                            <comment id="14932" author="tew" created="Mon, 10 Oct 2005 02:56:44 +0000"  >&lt;p&gt;Nearly same problem here.&lt;/p&gt;

&lt;p&gt;org.springframework.transaction.CannotCreateTransactionException: Could not open Hibernate Session for transaction; nested exception is org.hibernate.SessionException: Session is currently disconnected&lt;br/&gt;
org.hibernate.SessionException: Session is currently disconnected&lt;br/&gt;
	at org.hibernate.jdbc.JDBCContext.connection(JDBCContext.java:134)&lt;br/&gt;
	at org.hibernate.jdbc.JDBCContext.userConnection(JDBCContext.java:125)&lt;br/&gt;
	at org.hibernate.impl.SessionImpl.connection(SessionImpl.java:366)&lt;br/&gt;
	at org.springframework.orm.hibernate3.HibernateTransactionManager.doBegin(HibernateTransactionManager.java:407)&lt;br/&gt;
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:281)&lt;br/&gt;
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:111)&lt;br/&gt;
	at com.katalisindonesia.prosper.test.DBUtil.doInTransaction(DBUtil.java:51)&lt;br/&gt;
	at com.katalisindonesia.prosper.test.DBUtil.saveAll(DBUtil.java:80)&lt;br/&gt;
	at com.katalisindonesia.prosper.test.DataGenerator.saveAll(DataGenerator.java:299)&lt;br/&gt;
	at com.katalisindonesia.prosper.test.DataGenerator.getSuppliers(DataGenerator.java:560)&lt;br/&gt;
	at com.katalisindonesia.prosper.test.DataGenerator.getInventories(DataGenerator.java:285)&lt;br/&gt;
	at com.katalisindonesia.prosper.dao.hibernate.SaleDAOImplTest.testConnectSaleReturnsToSales(SaleDAOImplTest.java:63)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:31)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)&lt;/p&gt;
</comment>
                            <comment id="14944" author="juergen.hoeller" created="Wed, 12 Oct 2005 07:00:48 +0000"  >&lt;p&gt;Hibernate 3.1 RC1 changed the transaction completion behavior significantly: Transaction completion now turns the Session into disconnected state! Which means that the Session won&apos;t perform any further data access until it gets explicitly reconnected or beginTransaction gets called... which breaks Spring&apos;s assumptions of how a Hibernate Session behaves (which have remained the same since Hibernate 2.0).&lt;/p&gt;

&lt;p&gt;I&apos;ve addressed this through an automatic reconnect at the end of a transaction in case of a pre-bound Session (e.g. in the case of Open Session in View), both for local Hibernate transactions and for JTA transactions. This just applies to scenarios that actually use pre-bound Sessions, and remains fully compatible with Hibernate 3.0.&lt;/p&gt;

&lt;p&gt;Note that the cleanup exception is just a warning, logged at &quot;info&quot; level. It is not an exception actually thrown by HibernateTransactionManager. This cleanup will now just get performed for a Session that is still connected (on Hibernate 3.0); else, the connection pool is responsible for resetting the state of the Connection (on Hibernate 3.1). Some pools automatically do this (for example: C3P0), some don&apos;t (unfortunately: Commons DBCP).&lt;/p&gt;

&lt;p&gt;Furthermore, HibernateTransactionManager has a &quot;prepareConnection&quot; flag now that allows to turn special JDBC Connection preparation (such as setting isolation level and/or read-only flag) off completely. This is mainly relevant if you run against a pool that doesn&apos;t clean up, where custom isolation levels and Connection read-only flags should be deactivated completely, to avoid the potential for side effects.&lt;/p&gt;

&lt;p&gt;This change should be available in tomorrow night&apos;s 1.2.6 snapshot. Please give it a try and let me know whether it works for you!&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="14950" author="memelet" created="Wed, 12 Oct 2005 16:31:46 +0000"  >&lt;p&gt;Since the message is INFO, do we need to have the exception logged as well? I&apos;m not used to seeing  green bar /and/ an exception. It keeps distracting me.&lt;/p&gt;</comment>
                            <comment id="14951" author="memelet" created="Wed, 12 Oct 2005 16:32:15 +0000"  >&lt;p&gt;Oh, this fix does indeed solve the problem. Thanks!&lt;/p&gt;</comment>
                            <comment id="14954" author="goonie" created="Wed, 12 Oct 2005 20:43:34 +0000"  >&lt;p&gt;Juergen, thanks a lot for fixing this and for your explanation. With the latest snapshot, my application is now running fine again.&lt;/p&gt;

&lt;p&gt;However, I still get one of the warning messages/stacktraces (quoted in the description of this bug) for each transaction. I wonder why this warning appears. You write that cleanup will just get performed for still connected sessions (which obviously isn&apos;t the case) and only for Hibernate 3.0 (does not apply - I am using Hibernate 3.1rc). So why is a cleanup even attempted? From the stacktrace, I see that the warning is triggered by HibernateTransactionManager.doCleanupAfterCompletion.&lt;/p&gt;

&lt;p&gt;Btw. what exactly is a &quot;pre-bound session&quot;? Is it a session that is already connected when the transaction starts?&lt;/p&gt;</comment>
                            <comment id="14971" author="ssergio" created="Fri, 14 Oct 2005 02:35:49 +0000"  >&lt;p&gt;I&apos;m using Jsf+Spring+ Hibernate with the OpenSessionInViewFilter but with this new version I had to take the filter for a correct navigation.&lt;/p&gt;

&lt;p&gt;And... yes the info/stacktraces is not good for my eyes &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14992" author="gredler" created="Sun, 16 Oct 2005 19:48:30 +0000"  >&lt;p&gt;I had the same issue as described above related to Hibernate 3.1rc1 and Spring 1.2.5, but after upgrading to spring-framework-1.2.6-build.357-20051015 I&apos;m still seeing what I think are incompatibilities. The problem is that I define a proxy template for my service beans where the getXXX methods are read-only:&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;txProxyTemplate&quot; lazy-init=&quot;true&quot; class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;transactionManager&quot;&amp;gt;&amp;lt;ref bean=&quot;myTransactionManager&quot;/&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;transactionAttributes&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;props&amp;gt;&lt;br/&gt;
				&amp;lt;prop key=&quot;save*&quot;&amp;gt;PROPAGATION_REQUIRED&amp;lt;/prop&amp;gt;&lt;br/&gt;
				&amp;lt;prop key=&quot;remove*&quot;&amp;gt;PROPAGATION_REQUIRED&amp;lt;/prop&amp;gt;&lt;br/&gt;
				&amp;lt;prop key=&quot;*&quot;&amp;gt;PROPAGATION_REQUIRED,readOnly&amp;lt;/prop&amp;gt;&lt;br/&gt;
			&amp;lt;/props&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;For some reason if getXXX methods are read-only, then I get a SQLException when I try to save a domain object that has been retrieved using a getXXX method:&lt;/p&gt;

&lt;p&gt;10:24:50,421 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;AbstractFlushingEventListener&amp;#93;&lt;/span&gt; Could not synchronize database state with session&lt;br/&gt;
org.hibernate.exception.GenericJDBCException: Could not execute JDBC batch update&lt;br/&gt;
        at org.hibernate.exception.SQLStateConverter.handledNonSpecificException(SQLStateConverter.java:91)&lt;br/&gt;
        at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:79)&lt;br/&gt;
        at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:43)&lt;br/&gt;
        at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:200)&lt;br/&gt;
        at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:230)&lt;br/&gt;
        at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:141)&lt;br/&gt;
        at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:296)&lt;br/&gt;
        at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27)&lt;br/&gt;
        at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:877)&lt;br/&gt;
        at org.hibernate.impl.SessionImpl.managedFlush(SessionImpl.java:345)&lt;br/&gt;
        at org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:106)&lt;br/&gt;
        at org.springframework.orm.hibernate3.HibernateTransactionManager.doCommit(HibernateTransactionManager.java:535)&lt;br/&gt;
        at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:495)&lt;br/&gt;
        at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:468)&lt;br/&gt;
        at org.springframework.transaction.interceptor.TransactionAspectSupport.doCommitTransactionAfterReturning(TransactionAspectSupport.java:258)&lt;br/&gt;
        at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:106)&lt;br/&gt;
        &lt;span class=&quot;error&quot;&gt;&amp;#91;snip&amp;#93;&lt;/span&gt;&lt;br/&gt;
Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification are not allowed&lt;br/&gt;
        at com.mysql.jdbc.ServerPreparedStatement.executeBatch(ServerPreparedStatement.java:532)&lt;br/&gt;
        at org.apache.commons.dbcp.DelegatingStatement.executeBatch(DelegatingStatement.java:294)&lt;br/&gt;
        at org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:58)&lt;br/&gt;
        at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:193)&lt;br/&gt;
        ... 57 more&lt;/p&gt;

&lt;p&gt;My best guess is that the current Session is being bound to the current thread by Hibernate, and since the first place that I need a Session is in a read-only context, it gets created in read-only mode.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure that the best way of fixing this is going to be an incremental approach as defined above by Juergen... as he has said, the transaction semantics seem to have changed considerable with the latest RC. See for example &lt;a href=&quot;http://blog.hibernate.org/cgi-bin/blosxom.cgi/2005/09/30#sessioncontext&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://blog.hibernate.org/cgi-bin/blosxom.cgi/2005/09/30#sessioncontext&lt;/a&gt; which is slightly outdated, as well as the more current &lt;a href=&quot;http://www.hibernate.org/42.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.hibernate.org/42.html&lt;/a&gt; and &lt;a href=&quot;http://www.hibernate.org/43.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.hibernate.org/43.html&lt;/a&gt; doc pages.&lt;/p&gt;</comment>
                            <comment id="15020" author="garpinc" created="Tue, 18 Oct 2005 07:17:35 +0000"  >&lt;p&gt;Seems hibernate changed their mind again in rc2. See HHH-1038 in hibernate jira. But when I tried it with &amp;lt;prop key=&quot;hibernate.connection.release_mode&quot;&amp;gt;on_close&amp;lt;/prop&amp;gt; it leaked db connections.&lt;/p&gt;</comment>
                            <comment id="15022" author="gredler" created="Tue, 18 Oct 2005 09:37:58 +0000"  >&lt;p&gt;I just tried spring-framework-1.2.6-build.357-20051015 with Hibernate 3.1-rc2: both the stack trace initially described in this bug report, as well as the read-only connection issue I was seeing have disappeared. I also don&apos;t see the database connection leakage described by Keith, but there&apos;s a 200% chance my use case is different than his.&lt;/p&gt;</comment>
                            <comment id="15033" author="juergen.hoeller" created="Wed, 19 Oct 2005 06:10:54 +0000"  >&lt;p&gt;Indeed, Hibernate 3.1 RC2 has changed its behavior again, introduced after discussion between myself and Steve Ebersole from the Hibernate team. Unfortunately, there is a bug in 3.1 RC2&apos;s &quot;on_close&quot; handling that leads to wrong state detection and, as a consequence, a Connection leak in Spring&apos;s HibernateTransactionManager...&lt;/p&gt;

&lt;p&gt;So I would recommend to turn HibernateTransactionManager&apos;s preparing/cleanup of JDBC Connections off completely until the dust has settled on the Hibernate 3.1 side of things (that is, until 3.1 final). Simply take a recent nightly Spring 1.2.6 snapshot, switch HibernateTransactionManager&apos;s &quot;prepareConnection&quot; bean property to &quot;false&quot; - and all resource handling problems should go away. Note that you won&apos;t be able to use custom per-transaction isolation levels then, and that &quot;Connection.setReadOnly()&quot; optimization hints won&apos;t get applied anymore.&lt;/p&gt;

&lt;p&gt;In Spring 1.2.6&apos;s final Hibernate3 support, LocalSessionFactoryBean will always set the default connection release mode to &quot;on_close&quot; (instead of Hibernate 3.1 RC2&apos;s &quot;auto&quot;), to be overridden if explicitly specified in Hibernate properties. This should allow easy out-of-the-box use with HibernateTransactionManager&apos;s full functionality. Furthermore, HibernateTransactionManager will autodetect if it is able to prepare JDBC Connections (i.e. whether Hibernate&apos;s connection release mode is &quot;on_close&quot;) and automatically adapt accordingly. The &quot;prepareConnection&quot; flag will just serve as an optional explicit switch to override this then.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="15045" author="garpinc" created="Wed, 19 Oct 2005 12:58:30 +0000"  >&lt;p&gt;I suppose hibernate team has been made aware of this right?&lt;/p&gt;</comment>
                            <comment id="15296" author="juergen.hoeller" created="Sun, 6 Nov 2005 07:09:37 +0000"  >&lt;p&gt;Steve Ebersole from the Hibernate team is aware of this, yes. However, due to that unfortunate bug in Hibernate 3.1 RC2, it still doesn&apos;t work quite properly out of the box. Hibernate 3.1 final should resolve this issue then.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="15621" author="garpinc" created="Fri, 2 Dec 2005 05:52:47 +0000"  >&lt;p&gt;Is it resolved in rc3?&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 4 weeks, 6 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 10 Oct 2005 02:56:44 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00zof:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5825</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>