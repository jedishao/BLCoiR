<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:51:18 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2976/SPR-2976.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2976] Multiple singleton bean dependending on proxied prototype bean not supported</title>
                <link>https://jira.spring.io/browse/SPR-2976</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Multiple singleton beans depending on a proxied (AOP) prototype bean definition is not supported.  When trying to do that, the bean factory throws an exception.&lt;/p&gt;

&lt;p&gt;Here is how to reproduce:&lt;/p&gt;

&lt;p&gt;application context file:&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;Service&quot; class=&quot;org.xyz.ServiceBean&quot; scope=&quot;prototype&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;ServiceDependent1&quot; class=&quot;org.xyz.ServiceDependent1&quot; &amp;gt;&lt;br/&gt;
		&amp;lt;constructor-arg ref=&quot;Service&quot;/&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;ServiceDependent2&quot; class=&quot;org.xyz.ServiceDependent2&quot; &amp;gt;&lt;br/&gt;
		&amp;lt;constructor-arg ref=&quot;Service&quot;/&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;ServiceInterceptor&quot; class=&quot;org.xyz.ServiceInterceptor&quot; /&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;aop:config proxy-target-class=&quot;false&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;aop:pointcut id=&quot;ServicePointcut&quot;&lt;br/&gt;
			expression=&quot;target(org.xyz.Service)&quot; /&amp;gt;&lt;/p&gt;

&lt;p&gt;		&amp;lt;aop:advisor advice-ref=&quot;ServiceInterceptor&quot;&lt;br/&gt;
			pointcut-ref=&quot;ServicePointcut&quot; /&amp;gt;&lt;br/&gt;
	&amp;lt;/aop:config&amp;gt;&lt;/p&gt;

&lt;p&gt;Java code behind this application context:&lt;/p&gt;

&lt;p&gt;// Service interface is used to define &quot;ServicePointcut&quot; &lt;br/&gt;
public interface Service&lt;br/&gt;
{&lt;br/&gt;
	void doSomething();&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;// &quot;Service&quot; bean:&lt;br/&gt;
public class ServiceBean implements Service&lt;br/&gt;
{&lt;br/&gt;
	public void doSomething()&lt;/p&gt;
	{
		System.out.println(&quot;Doing something...&quot;);		
	}
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;// &quot;ServiceDependent1&quot; bean:&lt;br/&gt;
public class ServiceDependent1&lt;br/&gt;
{&lt;br/&gt;
	private Service service;&lt;/p&gt;

&lt;p&gt;	public ServiceDependent1(Service pService)&lt;/p&gt;
	{
		service = pService;
	}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
// &quot;ServiceDependent2&quot; bean:&lt;br/&gt;
public class ServiceDependent2&lt;br/&gt;
{&lt;br/&gt;
	private Service service;&lt;br/&gt;
&lt;br/&gt;
	public ServiceDependent2(Service pService)&lt;br/&gt;
	{		service = pService;	}
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;// &quot;ServiceInterceptor&quot; bean:&lt;br/&gt;
import org.aopalliance.intercept.MethodInterceptor;&lt;br/&gt;
import org.aopalliance.intercept.MethodInvocation;&lt;/p&gt;

&lt;p&gt;public class ServiceInterceptor implements MethodInterceptor&lt;br/&gt;
{&lt;br/&gt;
	public Object invoke(MethodInvocation pArg0) throws Throwable&lt;/p&gt;
	{
		System.out.println(&quot;Intercepting...&quot;);
		return pArg0.proceed();
	}
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Here is the full stack trace of the exception.  Maybe I am mistaken and this is not a bug, but something I am sure of is that the error message is incorrect when it says &quot;Bean with name &apos;Service&apos; has been injected into other beans &lt;span class=&quot;error&quot;&gt;&amp;#91;ServiceDependent1&amp;#93;&lt;/span&gt; in its raw version as part of a circular reference&quot; because bean &lt;span class=&quot;error&quot;&gt;&amp;#91;ServiceDependent1&amp;#93;&lt;/span&gt; does not receive a raw version of bean &lt;span class=&quot;error&quot;&gt;&amp;#91;Service&amp;#93;&lt;/span&gt; - it received a proxied one and I am  pretty sure as well that there is no circular reference there....&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;ServiceDependent2&apos; defined in class path resource &lt;span class=&quot;error&quot;&gt;&amp;#91;spring/config.xml&amp;#93;&lt;/span&gt;: Cannot resolve reference to bean &apos;Service&apos; while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name &apos;Service&apos;: Bean with name &apos;Service&apos; has been injected into other beans &lt;span class=&quot;error&quot;&gt;&amp;#91;ServiceDependent1&amp;#93;&lt;/span&gt; in its raw version as part of a circular reference, but has eventually been wrapped (for example as part of auto-proxy creation). This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using &apos;getBeanNamesOfType&apos; with the &apos;allowEagerInit&apos; flag turned off, for example.&lt;br/&gt;
Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name &apos;Service&apos;: Bean with name &apos;Service&apos; has been injected into other beans &lt;span class=&quot;error&quot;&gt;&amp;#91;ServiceDependent1&amp;#93;&lt;/span&gt; in its raw version as part of a circular reference, but has eventually been wrapped (for example as part of auto-proxy creation). This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using &apos;getBeanNamesOfType&apos; with the &apos;allowEagerInit&apos; flag turned off, for example.&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:424)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:264)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:248)&lt;br/&gt;
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128)&lt;br/&gt;
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:329)&lt;br/&gt;
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:97)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:684)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:622)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:381)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:140)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242)&lt;br/&gt;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156)&lt;br/&gt;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:273)&lt;br/&gt;
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:346)&lt;br/&gt;
	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:92)&lt;br/&gt;
	at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt;(ClassPathXmlApplicationContext.java:77)&lt;br/&gt;
	at org.xyz.Main.main(Main.java:13)&lt;/p&gt;</description>
            <key id="15750">SPR-2976</key>
            <summary>Multiple singleton bean dependending on proxied prototype bean not supported</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="gduchesneau">Guillaume Duchesneau</reporter>
                        <labels>
                    </labels>
                <created>Sat, 23 Dec 2006 04:39:09 +0000</created>
                <updated>Tue, 19 Jun 2012 03:50:03 +0000</updated>
                            <resolved>Mon, 1 Jan 2007 05:04:17 +0000</resolved>
                                    <version>2.0.1</version>
                                    <fixVersion>2.0.2</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="21531" author="juergen.hoeller" created="Mon, 1 Jan 2007 05:04:17 +0000"  >&lt;p&gt;Thanks for pointing this out! That check was a bit over-eager there: It is only supposed to kick in for singletons, so got lost once it tried to check the second instance of your prototype...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 3 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 1 Jan 2007 05:04:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00uzz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5067</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>