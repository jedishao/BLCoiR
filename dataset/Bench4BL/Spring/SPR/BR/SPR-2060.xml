<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:54:34 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2060/SPR-2060.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2060] How to exit gracefully from Spring so it  calls  cleanup methods?</title>
                <link>https://jira.spring.io/browse/SPR-2060</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I am using Spring in a stand-alone environment.   Spring creates and initializes my beans correctly and in a predictable order.   I can see it in the trace messages.   However when my application exits, I don&apos;t see the invoking of my cleanup.   I have a strong feeling that I should be calling a Spring cleanup message before exiting.&lt;/p&gt;

&lt;p&gt;I should also say that I have experimented with Spring.   I am satisfied that Spring calls init and cleanup methods as described in the reference manual.   In my stand-alone application, I want to know how to exit gracefully.&lt;/p&gt;

&lt;p&gt;Here is end section of my trace file.   The bean with the main() is called Exec.java.  You can see that the init() was called properly but when my application exits, my cleanup methods are not called.   I suspect that I am not exiting gracefully.&lt;/p&gt;

&lt;p&gt;     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 1062 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory  - Invoking custom init method &apos;init&apos; on bean with name &apos;rootNode&apos;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; EvolvingPopulationNode.init()&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 1062 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory  - Invoking BeanPostProcessors after initialization of bean &apos;rootNode&apos;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 1062 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; DEBUG org.springframework.core.CollectionFactory  - Creating &lt;span class=&quot;error&quot;&gt;&amp;#91;java.util.LinkedHashSet&amp;#93;&lt;/span&gt;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 1062 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; DEBUG org.springframework.core.CollectionFactory  - Creating &lt;span class=&quot;error&quot;&gt;&amp;#91;java.util.LinkedHashSet&amp;#93;&lt;/span&gt;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 1078 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; DEBUG org.springframework.context.support.ClassPathXmlApplicationContext  - Publishing event in context &lt;span class=&quot;error&quot;&gt;&amp;#91;org.springframework.context.support.ClassPathXmlApplicationContext;hashCode=26143190&amp;#93;&lt;/span&gt;: org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext: display name &lt;span class=&quot;error&quot;&gt;&amp;#91;org.springframework.context.support.ClassPathXmlApplicationContext;hashCode=26143190&amp;#93;&lt;/span&gt;; startup date &lt;span class=&quot;error&quot;&gt;&amp;#91;Thu May 25 16:25:49 EDT 2006&amp;#93;&lt;/span&gt;; root of context hierarchy]&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 1078 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory  - Returning cached instance of singleton bean &apos;exec&apos;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Exec.run() was called!&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; 1078 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; INFO  main  - Exec.run() was called!&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Exit Exec.main()&lt;/p&gt;

&lt;p&gt;BUILD SUCCESSFUL&lt;br/&gt;
Total time: 3 seconds&lt;/p&gt;</description>
            <key id="14057">SPR-2060</key>
            <summary>How to exit gracefully from Spring so it  calls  cleanup methods?</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="5" iconUrl="https://jira.spring.io/images/icons/priorities/trivial.png">Trivial</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="springboy">Rick Evans</assignee>
                                    <reporter username="colbert_philippe">Colbert Philippe</reporter>
                        <labels>
                    </labels>
                <created>Thu, 25 May 2006 17:43:28 +0000</created>
                <updated>Tue, 19 Jun 2012 03:52:43 +0000</updated>
                            <resolved>Mon, 29 May 2006 09:41:26 +0000</resolved>
                                    <version>2.0 M4</version>
                                    <fixVersion>2.0 M5</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="17737" author="colbert_philippe" created="Fri, 26 May 2006 17:38:47 +0000"  >&lt;p&gt;While experimenting with Spring, I did something tha had all my cleanup methods being called.  So Spring did exit gracefully.   I can pinpoint exactly what it is I did.&lt;/p&gt;

&lt;p&gt;Looking at the simple examples given in the reference, which looks as follows:&lt;/p&gt;

&lt;p&gt;ClassPathResource res = new ClassPathResource(&quot;beans.xml&quot;);&lt;br/&gt;
XmlBeanFactory factory = new XmlBeanFactory(res);&lt;/p&gt;

&lt;p&gt;If this code is in the main() static method, when the application finishes, it is up to the garbage collector to start deleting object factory.   That is not acceptable in my application.   We need a way to do a graceful and predictable exit that will call all cleanup methods.&lt;/p&gt;

&lt;p&gt;The way things are right now, it seems like it is a race between the main thread and the garbageg collector as to who wins the race.&lt;/p&gt;</comment>
                            <comment id="17763" author="gmazza" created="Mon, 29 May 2006 08:46:59 +0000"  >&lt;p&gt;The main idea is you want to call XMLBeanFactory.destroySingletons(), which can be called in the destroy() method of your servlet.&lt;/p&gt;

&lt;p&gt;But for regular non-web applications, Rob Harrop&apos;s Pro Spring (APress), on page 109, discusses a Java shutdown hook  implementing Runnable that can created to call destroySingletons().  Initialize the shutdown hook with the XMLBeanFactory, and in the shutdownhook&apos;s run() method just call factory.destroySingletons().&lt;/p&gt;

&lt;p&gt;In the main() method of your standalone application, you can register the shutdown hook as follows:&lt;br/&gt;
Runtime.getRuntime().addShutdownHook(new Thread(new ShutdownHook(xmlBeanFactory)));&lt;/p&gt;

&lt;p&gt;In either case, in order for this to work, you will need to have your beans that need cleanup either implement the DisposableBean interface (p. 106) (which in turn requires the beans to implement a destroy() method where you do your cleanup) or add a destroy-method attribute to each bean definition requiring a cleanup in your ApplicationContext.xml file.&lt;/p&gt;

&lt;p&gt;Glen&lt;/p&gt;</comment>
                            <comment id="17766" author="springboy" created="Mon, 29 May 2006 09:41:26 +0000"  >&lt;p&gt;Hi Colbert and Glen&lt;/p&gt;

&lt;p&gt;I have added a section to the Spring reference manual entitled &apos;&apos;, that describes hwo to effect what you want (thanks Glenn!). The AbstractApplicationContext class actually exposes a public method called (cunningly enough) regsiterShutdownHook that you can call (see the code snippet below).&lt;/p&gt;

&lt;p&gt;And thanks to Colbert for highlighting this issue.&lt;/p&gt;

&lt;p&gt;Cheers&lt;br/&gt;
Rick&lt;/p&gt;

&lt;p&gt;import org.springframework.context.support.AbstractApplicationContext;&lt;br/&gt;
import org.springframework.context.support.ClassPathXmlApplicationContext;&lt;/p&gt;

&lt;p&gt;public final class Boot {&lt;/p&gt;

&lt;p&gt;    public static void main(final String[] args) throws Exception {&lt;br/&gt;
        AbstractApplicationContext ctx  = new ClassPathXmlApplicationContext(new String []&lt;/p&gt;
{&quot;beans.xml&quot;}
&lt;p&gt;);&lt;/p&gt;

&lt;p&gt;        // add a shutdown hook for the above context...&lt;br/&gt;
        ctx.registerShutdownHook();&lt;/p&gt;

&lt;p&gt;        // app runs here...&lt;/p&gt;

&lt;p&gt;        // main method exits, hook is called prior to the app shutting down...&lt;br/&gt;
    }&lt;br/&gt;
}&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 31 weeks, 3 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 29 May 2006 08:46:59 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i047ev:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24575</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>