<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:13:08 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1634/SPR-1634.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1634] Using JdbcTemplate with TransactionAwareDataSourceProxy may close connection</title>
                <link>https://jira.spring.io/browse/SPR-1634</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;A JdbcTemplate constructed with a TransactionAwareDataSourceProxy as its dataSource may cause a premature connection close if it is used in a connection-based transaction where the transaction&apos;s connection belongs to the data source that the proxy wraps and that transaction is suspended.&lt;/p&gt;

&lt;p&gt;That&apos;s a mouthful. Let me give an example (pardon the psuedocode, I&apos;ll provide real code if requested). I use HibernateTransactionManager (since that&apos;s where I&apos;m seeing the problem personally), but I suspect this would also occur with a DataSourceTransactionManager:&lt;/p&gt;


&lt;p&gt;HibernateTransactionManager hibTxnMgr;&lt;br/&gt;
LocalSessionFactoryBean sesFactory;&lt;br/&gt;
BasicDataSource dataSource;&lt;br/&gt;
TransactionAwareDataSourceProxy txnAwareDataSource;&lt;/p&gt;

&lt;p&gt;sesFactory.setDataSource(dataSource);&lt;br/&gt;
hibTxnMgr.setSessionFactory(sesFactory);&lt;br/&gt;
txnAwareDataSource.setTargetDataSource(dataSource);&lt;/p&gt;

&lt;p&gt;hibTxnMgr.getTransaction(REQUIRED); // creates new txn with connection from dataSource&lt;br/&gt;
new JdbcTemplate(txnAwareDataSource).execute(&quot;update something&quot;);&lt;br/&gt;
hibTxnMgr.getTransaction(REQUIRED_NEW); // outer txn suspended, but its connection is closed!&lt;/p&gt;


&lt;p&gt;What happens is this: when the JdbcTemplate calls DataSourceUtils.getConnection(txnAwareDataSource), the DataSourceUtils doesn&apos;t find a thread-bound ConnectionHolder for the txnAwareDataSource (since the transaction is based on dataSource), so it registers a new ConnectionSynchronization with a Connection wrapper around the transaction&apos;s connection. When the transaction is suspended, all synchronizations are also suspended, and as of 1.2.6, the ConnectionSynchronization closes its connection. This, unfortunately, also closes the underlying transaction connection. When the outer transaction is resumed, the first attempt to use the database fails with a &quot;Connection is closed&quot; message.&lt;/p&gt;


&lt;p&gt;I don&apos;t think this is a major bug, since there is nothing in the documentation that indicates a JdbcTemplate can be used with a TransactionAwareDataSourceProxy, so doing so may be considered inappropriate use. Of course, there&apos;s nothing that explicitly forbids it, either. The closest I could find was from the TransactionAwareDataSourceProxy javadoc:&lt;/p&gt;

&lt;p&gt;&quot;Note that the transaction manager, for example DataSourceTransactionManager, still needs to work with underlying DataSource, not with this proxy.&quot;&lt;/p&gt;

&lt;p&gt;Perhaps this guideline can be expanded from just transaction managers to include JdbcTemplate? (and anything else that calls DataSourceUtils.getConnection() ?)&lt;/p&gt;</description>
            <key id="13179">SPR-1634</key>
            <summary>Using JdbcTemplate with TransactionAwareDataSourceProxy may close connection</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="cozinga">Charles Ozinga</reporter>
                        <labels>
                    </labels>
                <created>Fri, 20 Jan 2006 12:57:49 +0000</created>
                <updated>Tue, 19 Jun 2012 03:54:39 +0000</updated>
                            <resolved>Sat, 21 Jan 2006 03:55:07 +0000</resolved>
                                    <version>1.2.6</version>
                                    <fixVersion>1.2.7</fixVersion>
                    <fixVersion>2.0 M2</fixVersion>
                                    <component>Transaction</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="16133" author="juergen.hoeller" created="Sat, 21 Jan 2006 03:55:07 +0000"  >&lt;p&gt;Thanks for pointing this out! I&apos;ve addressed this through a refinement in AbstractPlatformTransactionManager: Synchronizations are not suspended &lt;b&gt;before&lt;/b&gt; the actual transaction has been suspended, and resumed &lt;b&gt;after&lt;/b&gt; the actual transaction has been resumed. This exposes correct transactional context to the synchronizations&apos;s &quot;suspend&quot; and &quot;resume&quot; methods, which also makes TransactionAwareDataSourceProxy work correctly in the present scenario.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 49 weeks, 5 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 21 Jan 2006 03:55:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00ztr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5849</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>