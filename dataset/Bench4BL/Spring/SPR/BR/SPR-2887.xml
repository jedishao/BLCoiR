<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:33:32 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2887/SPR-2887.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2887] Support easier merge/concatenation of lists</title>
                <link>https://jira.spring.io/browse/SPR-2887</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;This is in regards to forum thread: &lt;a href=&quot;http://forum.springframework.org/showthread.php?t=31932&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.springframework.org/showthread.php?t=31932&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically, I was looking for a way to factor out some common values of two lists.  I was able to solve it ultimately by declaring the common list as a org.springframework.beans.factory.config.ListFactoryBean, and then having the shared lists declare the common list as a parent with the &quot;sourceList&quot; property of the child set to merge.  This works but isn&apos;t very friendly for an operation that doesn&apos;t seem like it should be infrequent.  One proposed solution in the forum thread was to add support for &quot;abstract&quot; and &quot;parent&quot; attributes to &amp;lt;util:list&amp;gt;.  That would allow my current solution to at least be a bit terser.&lt;/p&gt;

&lt;p&gt;Unfortunately, I don&apos;t think this really covers the general case very well, since what if someone wanted to merge in more than just one list?  The bean inheritence model doesn&apos;t support multiple parents, so you would be back to square one...&lt;/p&gt;

&lt;p&gt;org.springframework.beans.factory.config.PropertiesFactoryBean handles this pretty nicely with its support for the &quot;propertiesArray&quot; property.&lt;/p&gt;

&lt;p&gt;I suppose whatever the solution ultimately is should also be applied to Maps and Sets if applicable.&lt;/p&gt;</description>
            <key id="15574">SPR-2887</key>
            <summary>Support easier merge/concatenation of lists</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="cbeams">Chris Beams</assignee>
                                    <reporter username="perfnorm">Jasper Rosenberg</reporter>
                        <labels>
                    </labels>
                <created>Tue, 28 Nov 2006 01:10:26 +0000</created>
                <updated>Sun, 3 Apr 2011 23:00:39 +0000</updated>
                            <resolved>Sun, 3 Apr 2011 23:00:39 +0000</resolved>
                                    <version>2.0.1</version>
                                                    <component>Core</component>
                        <due></due>
                            <votes>16</votes>
                                    <watches>18</watches>
                                                                <comments>
                            <comment id="27221" author="allnightlong" created="Thu, 1 Nov 2007 00:44:23 +0000"  >&lt;p&gt;May be it would be better to add &amp;lt;subList&amp;gt; property?&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;&amp;lt;util:list id=&quot;list1&quot;&amp;gt;&lt;br/&gt;
&amp;lt;value&amp;gt;a&amp;lt;/value&amp;gt;&lt;br/&gt;
&amp;lt;value&amp;gt;b&amp;lt;/value&amp;gt;&lt;br/&gt;
&amp;lt;value&amp;gt;c&amp;lt;/value&amp;gt;&lt;br/&gt;
&amp;lt;/util:list&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;util:list id=&quot;list2&quot;&amp;gt;&lt;br/&gt;
&amp;lt;value&amp;gt;d&amp;lt;/value&amp;gt;&lt;br/&gt;
&amp;lt;value&amp;gt;e&amp;lt;/value&amp;gt;&lt;br/&gt;
&amp;lt;value&amp;gt;f&amp;lt;/value&amp;gt;&lt;br/&gt;
&amp;lt;/util:list&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;util:list id=&quot;mergedList&quot;&amp;gt;&lt;br/&gt;
&amp;lt;subList ref=&quot;list1&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;subList ref=&quot;list2&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;value&amp;gt;g&amp;lt;/value&amp;gt;&lt;br/&gt;
&amp;lt;value&amp;gt;h&amp;lt;/value&amp;gt;&lt;br/&gt;
&amp;lt;/util:list&amp;gt;&lt;/p&gt;

&lt;p&gt;The result of mergedList is: a,b,c,d,e,f,g,h&lt;/p&gt;


</comment>
                            <comment id="31996" author="ccanning" created="Tue, 12 Feb 2008 14:09:06 +0000"  >&lt;p&gt;It would be really great if you could forward reference the list of properties. An example would be where in a lower level framework layer, you would define your standard database beans. Say we are using hibernate, so I have something like:&lt;/p&gt;

&lt;p&gt;    &amp;lt;util:list id=&quot;myAnnotatedClasses&quot; /&amp;gt;&lt;/p&gt;

&lt;p&gt;    &amp;lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;dataSource&quot; ref=&quot;datasource&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;annotatedClasses&quot; ref=&quot;myAnnotatedClasses&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;Then at multiple layers through the system, you could add classes to the session factory by doing something like&lt;/p&gt;

&lt;p&gt;    &amp;lt;utli:list parent=&quot;myAnnotatedClasses&quot; merge=&quot;true&quot;&amp;gt; &amp;lt;!-- or even append --&amp;gt;&lt;br/&gt;
        &amp;lt;value&amp;gt;Foo.class&amp;lt;/value&amp;gt;&lt;br/&gt;
        &amp;lt;value&amp;gt;Bar.class&amp;lt;/value&amp;gt;&lt;br/&gt;
    &amp;lt;/util:list&amp;gt;&lt;/p&gt;

&lt;p&gt;and someone else could do&lt;/p&gt;

&lt;p&gt;    &amp;lt;utli:list parent=&quot;myAnnotatedClasses&quot; merge=&quot;true&quot;&amp;gt; &amp;lt;!-- or even append --&amp;gt;&lt;br/&gt;
        &amp;lt;value&amp;gt;Ernie.class&amp;lt;/value&amp;gt;&lt;br/&gt;
        &amp;lt;value&amp;gt;Bert.class&amp;lt;/value&amp;gt;&lt;br/&gt;
    &amp;lt;/util:list&amp;gt;&lt;/p&gt;

&lt;p&gt;in the end, the SessionFactory gets configured with&lt;br/&gt;
    &amp;lt;list&amp;gt;&lt;br/&gt;
        &amp;lt;value&amp;gt;Foo.class&amp;lt;/value&amp;gt;&lt;br/&gt;
        &amp;lt;value&amp;gt;Bar.class&amp;lt;/value&amp;gt;&lt;br/&gt;
        &amp;lt;value&amp;gt;Ernie.class&amp;lt;/value&amp;gt;&lt;br/&gt;
        &amp;lt;value&amp;gt;Bert.class&amp;lt;/value&amp;gt;&lt;br/&gt;
    &amp;lt;/list&amp;gt;&lt;/p&gt;

&lt;p&gt;We have a lot of places in our system configuration where something like this would be useful. Now we are forced to configure all of this stuff at the highest level and some of the lists can become unwieldy since they can contain 1000&apos;s of items. This would allow us to break the lists into multiple configurations.&lt;/p&gt;
</comment>
                            <comment id="35497" author="dougbateman" created="Thu, 8 May 2008 03:45:49 +0000"  >&lt;p&gt;I also would have a use for this feature.   However, I&apos;d want to make sure that not only is it supported by the util:list syntax (which I do like), but also in the ListFActoryBean itself (similar to PropertiesFactoryBean)...  like this...&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;mergedList&quot; class=&quot;org.springframework.beans.factory.config.ListFactoryBean&quot; &amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;sourceListArray&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;list&amp;gt;&lt;br/&gt;
				&amp;lt;ref local=&quot;sublistOne&quot;/&amp;gt;&lt;br/&gt;
				&amp;lt;ref local=&quot;sublistTwo&quot;/&amp;gt;&lt;br/&gt;
			&amp;lt;/list&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;sublistOne&quot; class=&quot;org.springframework.beans.factory.config.ListFactoryBean&quot; &amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;sourceList&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;list&amp;gt;&lt;br/&gt;
				&amp;lt;value&amp;gt;A&amp;lt;/value&amp;gt;&lt;br/&gt;
				&amp;lt;value&amp;gt;B&amp;lt;/value&amp;gt;&lt;br/&gt;
			&amp;lt;/list&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;sublistTwo&quot; class=&quot;org.springframework.beans.factory.config.ListFactoryBean&quot; &amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;sourceList&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;list&amp;gt;&lt;br/&gt;
				&amp;lt;value&amp;gt;A&amp;lt;/value&amp;gt;&lt;br/&gt;
				&amp;lt;value&amp;gt;B&amp;lt;/value&amp;gt;&lt;br/&gt;
			&amp;lt;/list&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;
</comment>
                            <comment id="35550" author="jherico" created="Sat, 10 May 2008 16:33:41 +0000"  >&lt;p&gt;I&apos;m looking at an approach to this that would resolve this in a slightly different way.  Given the below XML (disregarding the new unroll-collections attribute) you end up with a list of lists each containing one item...&lt;/p&gt;


&lt;p&gt;    &amp;lt;util:list id=&quot;coreClasses&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;value&amp;gt;foo&amp;lt;/value&amp;gt;&lt;br/&gt;
    &amp;lt;/util:list&amp;gt;&lt;/p&gt;

&lt;p&gt;    &amp;lt;util:list id=&quot;musicClasses&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;value&amp;gt;bar&amp;lt;/value&amp;gt;&lt;br/&gt;
    &amp;lt;/util:list&amp;gt;&lt;/p&gt;

&lt;p&gt;    &amp;lt;util:list id=&quot;vizmediaClasses&quot; &amp;gt;&lt;br/&gt;
        &amp;lt;value&amp;gt;baz&amp;lt;/value&amp;gt;&lt;br/&gt;
    &amp;lt;/util:list&amp;gt;&lt;/p&gt;

&lt;p&gt;    &amp;lt;util:list id=&quot;swiftClasses&quot; unroll-collections=&quot;true&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;ref bean=&quot;coreClasses&quot; /&amp;gt;&lt;br/&gt;
        &amp;lt;ref bean=&quot;musicClasses&quot; /&amp;gt;&lt;br/&gt;
        &amp;lt;ref bean=&quot;vizmediaClasses&quot; /&amp;gt;&lt;br/&gt;
    &amp;lt;/util:list&amp;gt;&lt;/p&gt;

&lt;p&gt;However, I made a modification to the UtilNamespaceHandler and ListFactoryBeans class that causes the unroll-collections attribute to trigger in the factory the ability to recognize when a member of the sourceList is a collection itself and if so, to add the members of that collection to the resulting list bean.  &lt;/p&gt;

&lt;p&gt;There are some caveats.  It doesn&apos;t work well for a collection that is intended to contain other collections. I&apos;m unsure how to integrate it with the TypeConverter code in the ListFactoryBean, and I can&apos;t seem to find find generalized utility code for converting a string to a boolean value (there&apos;s duplicated code in CustomBooleanEditor, PortletRequestUtils and ServletRequestUtils).  &lt;/p&gt;

&lt;p&gt;I&apos;m attaching a first pass patch.&lt;/p&gt;</comment>
                            <comment id="39662" author="ccanning" created="Wed, 17 Sep 2008 13:32:49 +0000"  >&lt;p&gt;I have posted another solution that allows you to merge any number of child lists into a parent list by merging the values instead of have to specify each list. The code and simple test example is here: &lt;a href=&quot;http://forum.springframework.org/showthread.php?p=202207#post202207&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.springframework.org/showthread.php?p=202207#post202207&lt;/a&gt;. It would be very easy to post from mine solution into the current codebase if so desired.&lt;/p&gt;</comment>
                            <comment id="43657" author="ndeckard" created="Tue, 14 Apr 2009 05:35:24 +0000"  >&lt;p&gt;This thread helped me work around the problem of combining hibernate mappings from multiple spring contexts into 1 list: &lt;a href=&quot;http://forum.springsource.org/showthread.php?t=18135&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.springsource.org/showthread.php?t=18135&lt;/a&gt;. &lt;/p&gt;</comment>
                            <comment id="46599" author="jherico" created="Tue, 8 Sep 2009 08:59:35 +0000"  >&lt;p&gt;I&apos;ve since worked around this issue with the attached classes.  I have the same problem as previously mentioned, how to combine lists of classes in different projects into a single list to be passed to a hibernate configuration.  Its not as versatile as being able to pull other lists inline into the one you&apos;re creating, but it does the trick.&lt;/p&gt;</comment>
                            <comment id="60314" author="astalla" created="Fri, 5 Nov 2010 03:48:31 +0000"  >&lt;p&gt;FWIW, I solved this problem in my project by patching ListFactoryBean (and SetFactoryBean as well) to accept multiple source lists. You can see the source for it here: &amp;lt;&lt;a href=&quot;http://code.google.com/p/dynaspring/source/browse/trunk/src/dynaspring/support/ListFactoryBean.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://code.google.com/p/dynaspring/source/browse/trunk/src/dynaspring/support/ListFactoryBean.java&lt;/a&gt;&amp;gt;. Syntax-wise, my project does not use XML (it&apos;s a DSL meant to replace XML in Spring!), so I don&apos;t have a ready solution for that; the merge of two lists is accomplished in two different (and orthogonal) ways: by having a master list that merges several children lists (case 1), and by having several peer lists with the same name and the &quot;merge&quot; property set to true (case 2). Translated to XML, it might look like:&lt;/p&gt;

&lt;p&gt;case 1)&lt;/p&gt;

&lt;p&gt;&amp;lt;util:list id=&quot;foo&quot;&amp;gt;&lt;br/&gt;
  &amp;lt;list&amp;gt;&amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;&amp;lt;/list&amp;gt;&lt;br/&gt;
  &amp;lt;value&amp;gt;2&amp;lt;/value&amp;gt;&lt;br/&gt;
  &amp;lt;ref bean=&quot;otherList&quot; /&amp;gt;&lt;br/&gt;
&amp;lt;/util:list&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;&lt;span class=&quot;error&quot;&gt;Unable to render embedded object: File (list now) not found.&lt;/span&gt; --&amp;gt;&lt;/p&gt;

&lt;p&gt;case 2)&lt;/p&gt;

&lt;p&gt;&amp;lt;util:list id=&quot;foo&quot; merge=&quot;true&quot;&amp;gt;&lt;br/&gt;
  &amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;&lt;br/&gt;
&amp;lt;/util:list&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;util:list id=&quot;foo&quot; merge=&quot;true&quot;&amp;gt;&lt;br/&gt;
  &amp;lt;value&amp;gt;2&amp;lt;/value&amp;gt;&lt;br/&gt;
&amp;lt;/util:list&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;!-- foo will be &lt;span class=&quot;error&quot;&gt;&amp;#91;1, 2&amp;#93;&lt;/span&gt; - this is not supported by Spring now, but it&apos;s not semantically incompatible --&amp;gt;&lt;/p&gt;

&lt;p&gt;In my project, the effect of merge=true is simply to add beanFactory.getBeanDefinition(nameOfTheList) to the source lists of the ListFactoryBean. I don&apos;t know very well how custom namespaces work in Spring, but if they can do that, then case 2) could be ported without much hassle.&lt;/p&gt;</comment>
                            <comment id="64957" author="cbeams" created="Sun, 3 Apr 2011 22:51:16 +0000"  >&lt;p&gt;Duplicates &lt;a href=&quot;https://jira.spring.io/browse/SPR-6523&quot; title=&quot;Introduce &amp;#39;merge&amp;#39; attribute for util namespace collection elements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-6523&quot;&gt;SPR-6523&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="64958" author="cbeams" created="Sun, 3 Apr 2011 23:00:05 +0000"  >&lt;p&gt;Duplicates &lt;a href=&quot;https://jira.spring.io/browse/SPR-6523&quot; title=&quot;Introduce &amp;#39;merge&amp;#39; attribute for util namespace collection elements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-6523&quot;&gt;SPR-6523&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="29126">SPR-6523</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="15701" name="AListAggregationFactoryBean.java" size="1044" author="jherico" created="Tue, 8 Sep 2009 08:57:04 +0000"/>
                            <attachment id="15702" name="ClassListAggregationFactoryBean.java" size="584" author="jherico" created="Tue, 8 Sep 2009 08:57:15 +0000"/>
                            <attachment id="14048" name="patch.txt" size="6066" author="jherico" created="Sat, 10 May 2008 16:33:54 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        5 years, 38 weeks, 3 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 1 Nov 2007 00:44:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01ctr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7955</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>