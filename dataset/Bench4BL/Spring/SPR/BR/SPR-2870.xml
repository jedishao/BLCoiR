<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:51:01 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2870/SPR-2870.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2870] Race condition in lazy singleton creation, potentially leading to unintended BeanCurrentlyInCreationException</title>
                <link>https://jira.spring.io/browse/SPR-2870</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I expect there is a race problem in the applicationcontext.&lt;/p&gt;

&lt;p&gt;Go to the getBean method in AbstractBeanFactory &lt;br/&gt;
and continue to this line:&lt;br/&gt;
Object sharedInstance = getSingleton(beanName);&lt;/p&gt;

&lt;p&gt;Multiple threads are able to execute this statement at exactly the same moment (there is no exclusion). This means that they all could get a null value and they are now able to go to the else part of the if statement.&lt;/p&gt;

&lt;p&gt;When you go to the beginning of the else part, you will see this:&lt;/p&gt;

&lt;p&gt;// Fail if we&apos;re already creating this singleton instance:&lt;br/&gt;
// We&apos;re assumably within a circular reference.&lt;br/&gt;
if (isSingletonCurrentlyInCreation(beanName)) {&lt;br/&gt;
    throw new BeanCurrentlyInCreationException(beanName);&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;This method is not going to stop them either. Eventually they all can call the createBean method and this means that multiple instances of the singleton bean could be created.&lt;/p&gt;

&lt;p&gt;Solution:&lt;br/&gt;
Difficult question. The most simplest thing to do would be to add a monitor surrounding this class by making all methods synchronized. But what worries me is that deadlocks are more likely to occur. I will think about this one &lt;b&gt;makes some oil-like coffee&lt;/b&gt;.&lt;/p&gt;</description>
            <key id="15545">SPR-2870</key>
            <summary>Race condition in lazy singleton creation, potentially leading to unintended BeanCurrentlyInCreationException</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="alarmnummer">Peter Veentjer</reporter>
                        <labels>
                    </labels>
                <created>Thu, 23 Nov 2006 05:59:48 +0000</created>
                <updated>Tue, 19 Jun 2012 03:51:14 +0000</updated>
                            <resolved>Fri, 24 Nov 2006 02:46:47 +0000</resolved>
                                    <version>2.0.1</version>
                                    <fixVersion>2.0.2</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="21052" author="juergen.hoeller" created="Fri, 24 Nov 2006 02:46:47 +0000"  >&lt;p&gt;Actually, a singleton still cannot get created twice: The isCurrentlyInCreation check is &lt;b&gt;not&lt;/b&gt; meant to stop further attempts from other threads to create the same singleton; it&apos;s rather just there for circular reference resolution. So assuming we&apos;re in that else block, we&apos;ll continue down to the &quot;getSingleton(beanName, new ObjectFactory() &lt;/p&gt;
{...}
&lt;p&gt;)&quot; call, which is gonna do another check whether the singleton exists before actually attempting to create the instance - all within a synchronized block on the singletonCache. Hence, this should be perfectly safe; the quick getSingleton check at the beginning is only meant as shortcut to find an existing bean instance without even looking for the bean definition.&lt;/p&gt;

&lt;p&gt;Arguably, that isCurrentlyInCreation check should really be an isPrototypeCurrentlyInCreation check, since a singleton check is done before actual singleton instance creation anyway. It was just meant as a quick check before starting to look for the bean definition. Since such an early check for a singleton-in-creation marker can potentially lead into a race condition where the caller gets a BeanCurrentlyInCreationException instead of waiting for the singleton to be finished (in case of some other thread creating the instance), I&apos;ve changed that check to prototypes only at that point.  However, note that this is &lt;b&gt;not&lt;/b&gt; about the instance getting created twice; just about a potential BeanCurrentlyInCreationException (and that only for a lazy-init singleton that won&apos;t get created on application startup).&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 5 weeks, 6 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 24 Nov 2006 02:46:47 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00v8v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5107</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>