<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 17:53:04 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2916/SPR-2916.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2916] ServletRequestUtils.getXXXParameter with default value argument uses too much memory</title>
                <link>https://jira.spring.io/browse/SPR-2916</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;While profiling the memory of our application, we discovered that the ServletRequestUtils.getXXXParameter methods allocate memory for an error message that is caught and eaten:&lt;/p&gt;

&lt;p&gt;This code...&lt;/p&gt;

&lt;p&gt;public static boolean getBooleanParameter(ServletRequest request, String name, boolean defaultVal) {&lt;br/&gt;
		try &lt;/p&gt;
{
			return getRequiredBooleanParameter(request, name);
		}
&lt;p&gt;		catch (ServletRequestBindingException ex) &lt;/p&gt;
{
			return defaultVal;
		}
&lt;p&gt;	}&lt;/p&gt;

&lt;p&gt;...results in the creation of an exception object:&lt;/p&gt;

&lt;p&gt;protected final void validateRequiredParameter(String name, Object parameter)&lt;br/&gt;
				throws ServletRequestBindingException {&lt;/p&gt;

&lt;p&gt;			if (parameter == null) &lt;/p&gt;
{
				throw new ServletRequestBindingException(
						&quot;Required &quot; + getType() + &quot; parameter &apos;&quot; + name + &quot;&apos; is not present&quot;);
			}
&lt;p&gt;		}&lt;/p&gt;

&lt;p&gt;Attaching the output from a profiling session where getBooleanParameter was called ~300 times.&lt;/p&gt;

&lt;p&gt;Possible solutions:&lt;/p&gt;

&lt;p&gt;1) Use a StringBuffer to construct the message instead of (expensive) String concatentation;&lt;br/&gt;
2) Build the assembly smarts into ServletRequestBindingException so the message is only assembled when requested, i.e. throw new ServletRequestBindingException( getType(), name ).&lt;/p&gt;

&lt;p&gt;In this case, given that there are a whole class of methods that depend on eating ServletRequestBindingExceptions, options 2 would seem prudent - defer the message construction until if/when it is needed (it would be avoided totally for the getXXXParameter calls).&lt;/p&gt;

&lt;p&gt;Categorizing this as a bug vs. improvement, as the message construction uses excessive memory when other options are available.&lt;/p&gt;</description>
            <key id="15645">SPR-2916</key>
            <summary>ServletRequestUtils.getXXXParameter with default value argument uses too much memory</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="chrislee">Chris Lee</reporter>
                        <labels>
                    </labels>
                <created>Tue, 5 Dec 2006 09:03:46 +0000</created>
                <updated>Tue, 19 Jun 2012 03:50:59 +0000</updated>
                            <resolved>Sat, 6 Jan 2007 00:53:37 +0000</resolved>
                                    <version>2.0.1</version>
                                    <fixVersion>2.0.2</fixVersion>
                                    <component>Web</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="21209" author="chrislee" created="Tue, 5 Dec 2006 09:06:41 +0000"  >&lt;p&gt;YourKit memory profile session&lt;/p&gt;</comment>
                            <comment id="21363" author="costin" created="Tue, 19 Dec 2006 23:52:13 +0000"  >&lt;p&gt;I see the problem and I think the best solution would be avoiding the exception creation in a way similar to what you have when doing logging:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;br/&gt;
if (log.enabled) log;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/code&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;here something similar should be used:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;br/&gt;
if (create.exception)&lt;br/&gt;
  getParameterWithException();&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/code&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Creating a lazy string exception might also work (i.e. the string creation can be postponed until the message is required) but however, the exception still has to be thrown which might hurt performance if called for too many times (as happens in your case).&lt;/p&gt;</comment>
                            <comment id="21370" author="chrislee" created="Wed, 20 Dec 2006 02:13:08 +0000"  >&lt;p&gt;Sounds good; not having the exception thrown for a standard path call to getXXXParameter() is indeed a good thing.  From looking at the source, this would require some re-work of all the parser classes (adding the conditional around validateRequiredParameter and dealing with default values).  The try/catch in getXXXParameter would still be required as an exception is also thrown for invalid values.&lt;/p&gt;</comment>
                            <comment id="21652" author="juergen.hoeller" created="Sat, 6 Jan 2007 00:53:37 +0000"  >&lt;p&gt;While we&apos;re talking about optimizing 0.006 ms &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/warning.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; per &quot;getXxxParameter&quot; operation here, I do agree that the common &apos;missing parameter&apos; case can be implemented much much efficiently. Hence, I&apos;ve addressed the performance of the &apos;default value&apos; variants simply through blocks like the following:&lt;/p&gt;

&lt;p&gt;	if (request.getParameter(name) == null) &lt;/p&gt;
{
		return defaultVal;
	}

&lt;p&gt;at the very beginning of each such operation, even before calling the parser object. This handles the common case of a non-existing parameter very efficiently - a 100 times faster than before -, only ever going into the parser with its exception-based reporting when the parameter actually exists.&lt;/p&gt;

&lt;p&gt;Additionally, I&apos;ve also introduced a dedicated MissingServletRequestParameterException (subclass of ServletRequestBindingException) that builds its message on demand based on given name and type Strings. This doesn&apos;t gain a lot in comparison to avoid the exception completely (like above), but it is still worthwhile for the &quot;getRequiredXxxParameter&quot; variants where the caller does expect an exception in the first place.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="21653" author="juergen.hoeller" created="Sat, 6 Jan 2007 01:29:08 +0000"  >&lt;p&gt;FYI, I&apos;ve backported the&lt;/p&gt;

&lt;p&gt;	if (request.getParameter(name) == null) &lt;/p&gt;
{
		return defaultVal;
	}

&lt;p&gt;shortcut checks to 1.2.9&apos;s RequestUtils class. The newly introduced exception classes remain 2.0.2+ only.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12264" name="booleanParameterParser.jpg" size="195167" author="chrislee" created="Tue, 5 Dec 2006 09:06:41 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        9 years, 51 weeks, 5 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 19 Dec 2006 23:52:13 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00v5j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5092</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>