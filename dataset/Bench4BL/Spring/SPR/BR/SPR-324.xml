<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:31:27 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-324/SPR-324.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-324] BeanFactory does not take bean-refs into account for destruction order</title>
                <link>https://jira.spring.io/browse/SPR-324</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Consider two bean definitions as follows:&lt;/p&gt;

&lt;p&gt;&amp;lt;bean name=&quot;B&quot; class=&quot;B&quot;&amp;gt;&lt;br/&gt;
  &amp;lt;property name=&quot;a&quot;&amp;gt;&amp;lt;ref bean=&quot;A&quot;/&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;bean name=&quot;A&quot; class=&quot;A&quot;/&amp;gt;&lt;/p&gt;


&lt;p&gt;Clearly, B depends on A and Spring makes sure that A is initialized when handed to B. However, on destruction, it does not consider this dependency but only explicit &apos;depends-on&apos;. So, if A and B are DisposableBeans they are destroyed in random order - thus B cannot bet on A being available anymore.&lt;/p&gt;

&lt;p&gt;I suggest extending DefaultListableBeanFactory#getDependingBeanNames to include the names of beans that have a &amp;lt;ref&amp;gt; to the bean in question.&lt;/p&gt;</description>
            <key id="10546">SPR-324</key>
            <summary>BeanFactory does not take bean-refs into account for destruction order</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="mernst">matthias ernst</reporter>
                        <labels>
                    </labels>
                <created>Thu, 9 Sep 2004 01:33:25 +0000</created>
                <updated>Wed, 23 Feb 2005 06:04:47 +0000</updated>
                            <resolved>Wed, 22 Sep 2004 19:13:51 +0000</resolved>
                                    <version>1.1 RC2</version>
                                    <fixVersion>1.1.1</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="11012" author="mernst" created="Thu, 9 Sep 2004 02:21:08 +0000"  >&lt;p&gt;Actually, the suggested fix is not complete. You would actually also want autowired dependencies to be considered, too. Since we don&apos;t want to evaluate that logic again on destruction, the bean factory should keep track of the dependencies arising at creation time. Code like #resolveReference could carry a onBehalfOf parameter and record the dependencies.&lt;/p&gt;

&lt;p&gt;Sounds a little complicated but would solve the problem.&lt;/p&gt;</comment>
                            <comment id="11062" author="juergen.hoeller" created="Wed, 22 Sep 2004 19:13:50 +0000"  >&lt;p&gt;Thanks for the suggestion!&lt;/p&gt;

&lt;p&gt;I&apos;ve reworked the mechanism quite a bit: AbstractAutowireCapableBeanFactory now always keeps tracks of which beans a singleton that it creates is dependent on, no matter if through bean properties or constructor arguments, respectively direct references or autowiring, or explicit &quot;depends-on&quot; arguments.&lt;/p&gt;

&lt;p&gt;As a side effect of that change, the &quot;getDependentBeanNames&quot; hook is no longer necessary: All that stuff is determined and stored at singleton creation time now. Of course, AbstractAutowireCapableBeanFactory properly removes that cached dependency information on singleton destruction.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="11067" author="mernst" created="Wed, 22 Sep 2004 19:32:10 +0000"  >&lt;p&gt;Legendary service, indeed! Thanks!&lt;/p&gt;</comment>
                            <comment id="12363" author="sethladd" created="Fri, 18 Feb 2005 12:48:43 +0000"  >&lt;p&gt;I still see what I think is this issue.&lt;/p&gt;

&lt;p&gt;I have this dependency:  A -&amp;gt; B -&amp;gt; DB Pool&lt;/p&gt;

&lt;p&gt;DB Pool is shutting down before A.  A is busy writing to the DB in a thread, and since DB Pool is gone before A is shutdown, the A thread gives an exception.&lt;/p&gt;

&lt;p&gt;While this might not be too big of a deal (since the A thread was going to shut down anyway soon), it makes me wonder if this fix applies to my solution.&lt;/p&gt;

&lt;p&gt;The dependencies are explicit (no autowiring).  I&apos;ve also tried to set the depends-on attribute for extra-explicit goodness.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;

&lt;p&gt;To be specific, I receive this exception from inside my thread (leading me to believe the pool was shutdown before the thread):&lt;/p&gt;

&lt;p&gt;java.lang.IllegalStateException: Pool not open&lt;br/&gt;
	at org.apache.commons.pool.BaseObjectPool.assertOpen(BaseObjectPool.java:78)&lt;/p&gt;</comment>
                            <comment id="12364" author="mernst" created="Fri, 18 Feb 2005 18:32:08 +0000"  >&lt;p&gt;There is a difference between bean &quot;A&quot; and &quot;a thread started by/using A&quot;. Spring manages beans, not threads. If have to make sure you terminate the thread from within A#destroy. For example, you can interrupt and then join the thread. Or you could keep a read/write-lock &amp;#8212; if A#destroy acquires the write lock you make sure no &quot;readers&quot; are using it anymore.&lt;/p&gt;

</comment>
                            <comment id="12411" author="sethladd" created="Wed, 23 Feb 2005 06:04:47 +0000"  >&lt;p&gt;Yup... that&apos;s exactly what I figured out.  It was the thread that needed the dependency, not the bean itself.  All cleared up now!  Thanks!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 45 weeks, 1 day ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 22 Sep 2004 19:13:50 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04xhz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28801</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>