<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:22:12 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1796/SPR-1796.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1796] Concurrency problem with JaxRpcPortClientInterceptor when specifying portInterface on Axis</title>
                <link>https://jira.spring.io/browse/SPR-1796</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Symptom: Parameters from two client requests are getting included in the same web services call.&lt;br/&gt;
(Relevant piece of stack is below)&lt;/p&gt;

&lt;p&gt;See method JaxRpcPortClientInterceptor.invoke() for the case where the interface implements Remote.&lt;br/&gt;
Problem is instance variable portStub.&lt;br/&gt;
This portStub in initialized in JaxRpcPortClientInterceptor.prepare() which only gets called once.&lt;br/&gt;
In the prepare method, jaxRpcService.getPort(...) returns an instance of Remote which is stored as portStub.&lt;br/&gt;
This guy has the AxisClientProxy which has an org.apache.axis.client.Call instance variable. See code that creates stub in org.apache.client.Service.getPort(String,QName,Class).&lt;/p&gt;

&lt;p&gt;If two threads are executing at the same time, the parameter array passed to an org.apache.axis.client.Call.invoke(...) appears to have both request&apos;s parameters(or some portion of both depending on timing).&lt;/p&gt;

&lt;p&gt;Probably need to call prepare() every time so that we get a new portStub everytime. Should make portStub the return val of prepare. I assume the prepare is done once for performance reasons but how bad can this be to do everytime?&lt;/p&gt;

&lt;p&gt;FYI - the quick fix was to use serviceInterface as opposed to portInterface in the context config.&lt;/p&gt;

&lt;p&gt;Stack trace:&lt;br/&gt;
org.springframework.remoting.RemoteAccessException: Cannot access remote service [&lt;/p&gt;
{http://webservice.impl.enrolment.service.maa.agr.gc.ca}
&lt;p&gt;SpringMAAEnrolmentServiceEndPoint]; nested exception is org.apache.axis.AxisFault: ; nested exception is: &lt;br/&gt;
&#160;&#160;&#160;&#160;&#160; javax.xml.rpc.JAXRPCException: Number of parameters passed in (6) doesn&apos;t match the number of IN/INOUT parameters (11) from the addParameter() calls&lt;br/&gt;
AxisFault&lt;br/&gt;
&#160;faultCode: &lt;/p&gt;
{http://schemas.xmlsoap.org/soap/envelope/}
&lt;p&gt;Server.userException&lt;br/&gt;
&#160;faultSubcode: &lt;br/&gt;
&#160;faultString: javax.xml.rpc.JAXRPCException: Number of parameters passed in (6) doesn&apos;t match the number of IN/INOUT parameters (11) from the addParameter() calls&lt;br/&gt;
&#160;faultActor: &lt;br/&gt;
&#160;faultNode: &lt;br/&gt;
&#160;faultDetail: &lt;br/&gt;
&#160;&#160;&#160;&#160;&#160; &lt;/p&gt;
{http://xml.apache.org/axis/}
&lt;p&gt;stackTrace:javax.xml.rpc.JAXRPCException: Number of parameters passed in (6) doesn&apos;t match the number of IN/INOUT parameters (11) from the addParameter() calls&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160; at org.apache.axis.client.Call.getParamList(Call.java:2042)&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160; at org.apache.axis.client.Call.invoke(Call.java:2345)&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160; at org.apache.axis.client.Call.invoke(Call.java:1804)&lt;br/&gt;
&#160;&#160;&#160;&#160;&#160; at org.apache.axis.client.AxisClientProxy.invoke(AxisClientProxy.java:163)&lt;/p&gt;</description>
            <key id="13553">SPR-1796</key>
            <summary>Concurrency problem with JaxRpcPortClientInterceptor when specifying portInterface on Axis</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="prohne">Peter Rohne</reporter>
                        <labels>
                    </labels>
                <created>Thu, 16 Mar 2006 07:55:34 +0000</created>
                <updated>Tue, 19 Jun 2012 03:54:14 +0000</updated>
                            <resolved>Sat, 25 Mar 2006 05:57:30 +0000</resolved>
                                                    <fixVersion>1.2.8</fixVersion>
                    <fixVersion>2.0 M4</fixVersion>
                                    <component>Remoting</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="16845" author="arjen.poutsma" created="Thu, 16 Mar 2006 08:02:17 +0000"  >&lt;p&gt;Moved from Spring Web Services to Spring Framework Remoting.&lt;/p&gt;</comment>
                            <comment id="16905" author="juergen.hoeller" created="Tue, 21 Mar 2006 09:38:01 +0000"  >&lt;p&gt;I&apos;m puzzled - this means that Axis-generated port proxies aren&apos;t thread-safe. They really should be thread-safe, so I would qualify this as an Axis bug... The JAX-RPC spec isn&apos;t particularly clear about that, but the usual provider behavior is to return a thread-safe proxy here.&lt;/p&gt;

&lt;p&gt;Anyway: As you noted, specifying a &quot;serviceInterface&quot; gets you around the problem. I would argue that this is actually the recommended style, since it uses the JAX-RPC dynamic invocation mechanism with a Spring-generated proxy (which is definitely thread-safe). Specifying a &quot;portInterface&quot; only really adds value if there&apos;s some specific feature that you&apos;d like to leverage, and that your provider just happens to expose through the JAX-RPC proxy mechanism.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="16922" author="prohne" created="Wed, 22 Mar 2006 06:10:14 +0000"  >&lt;p&gt;Actually, since I submitted this we were able to produce the same error with the serviceInterface specified (although now it looks like more threads are needed in order to see the problem because it is very difficult to reproduce). &lt;/p&gt;

&lt;p&gt;Perhaps this is an Axis bug but I don&apos;t know whos responsibility it is to be thread-safe.&lt;/p&gt;

&lt;p&gt;Axis keeps an instance of Call on the Service for no good reason I can see. Have a look at&lt;br/&gt;
org.apache.axis.client.Service.createCall(). It updates the instance variable &quot;_call&quot; with a new instance on every call. Furthermore, Call has the Service as an instance variable as well. This is passed into the Call constructor, and Call uses it in the method Call.invokeEngine(...). This is un-thread-safe and probably the reason for the parameters on Call getting messed up (although I&apos;ve yet to prove it). Anyway, Spring keeps the same instance variable Service on JaxRpcPortClientInterceptor (which is a singleton). The Service is set once when the prepare() method is called. &lt;/p&gt;

&lt;p&gt;If the spec isn&apos;t clear, as you say, Spring should be creating a new instance of Service on each call to JaxRpcPortClientInterceptor.invoke()&lt;/p&gt;

</comment>
                            <comment id="16934" author="prohne" created="Thu, 23 Mar 2006 09:05:35 +0000"  >&lt;p&gt;I am able to reliably reproduce the threading problem with the serviceInterface.&lt;br/&gt;
One way to remedy the situation is to put a sync block around the creation of the Call in JaxRpcPortClientInterceptor.performJaxRpcCall(..)&lt;/p&gt;

&lt;p&gt;...&lt;br/&gt;
synchronized(this) {&lt;br/&gt;
    call = service.createCall(portQName,invocation.getMethod().getName());&lt;br/&gt;
}&lt;br/&gt;
...&lt;/p&gt;

&lt;p&gt;This solution was devised  experimentally as opposed to actually understanding the scenario where more that one client&apos;s request params could make it into Call.invoke(). Thoughts on why this works?&lt;/p&gt;

&lt;p&gt;FYI. This doesn&apos;t seem to hinder performance greatly since there is just object creation in the serialized block.&lt;/p&gt;</comment>
                            <comment id="16951" author="juergen.hoeller" created="Sat, 25 Mar 2006 05:57:30 +0000"  >&lt;p&gt;Thanks for the analysis!&lt;/p&gt;

&lt;p&gt;I&apos;ve addressed this in that JaxRpcPortClientInterceptor now synchronizes the creation of JAX-RPC Call objects, as you suggested. As far as I was able to find out from the Axis source code, this should do the job.&lt;/p&gt;

&lt;p&gt;The problem with the Axis Service implementation is simply that it first creates the Call instance and then assigns it to the instance variable and returns it. So in case of concurrent access, another Call instance might be created and assigned to the instance variable before the current threads returns the current content of the instance variable...&lt;/p&gt;

&lt;p&gt;    public javax.xml.rpc.Call createCall() throws ServiceException &lt;/p&gt;
{
        _call = new org.apache.axis.client.Call(this);
        return _call;
    }

&lt;p&gt;Now if they changed the Axis code to the following, it would be thread-safe with respect to the createCall operation, while still assigning the reference to the instance variable:&lt;/p&gt;

&lt;p&gt;    public javax.xml.rpc.Call createCall() throws ServiceException &lt;/p&gt;
{
        Call call = new org.apache.axis.client.Call(this);
        this._call = call;
        return call;
    }

&lt;p&gt;The only reason why they keep the instance variable in the first place is that there&apos;s some Service method to access the last Call instance created by the Service. However, that method is deprecated...&lt;/p&gt;

&lt;p&gt;Anyway,  the added synchronized block in JaxRpcPortClientInterceptor should get us around this problem in Axis. I&apos;ve added this for both Spring 2.0 M4 and 1.2.8.&lt;/p&gt;

&lt;p&gt;Furthermore, I&apos;ve also refined the semantics of the &quot;serviceInterface&quot; and &quot;portInterface&quot; properties for 2.0 M4: A JAX-RPC port stub will only actually be used if &quot;portInterface&quot; is specified. So even if you specify an RMI interface as &quot;serviceInterface&quot;, we&apos;ll still prefer JAX-RPC dynamic invocations over a JAX-RPC port stub.&lt;/p&gt;

&lt;p&gt;The reason for this change in preference is that Axis port stubs are inherently non-thread-safe, which we can&apos;t do anything about. Recreating port stubs for every invocation is completely unfeasible, hence we simply prefer dynamic invocations on a JAX-RPC call there now.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 40 weeks, 5 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 16 Mar 2006 08:02:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04vg7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28469</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>