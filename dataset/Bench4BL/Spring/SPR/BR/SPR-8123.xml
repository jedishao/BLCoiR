<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:06:33 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-8123/SPR-8123.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-8123] SimpleClientHttpResponse disconnects the underlying HttpURLConnection when closing</title>
                <link>https://jira.spring.io/browse/SPR-8123</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I&apos;ve noticed that SimpleClientHttpResponse.close() (which it is documented you MUST always call it after completing the request) invokes HttpURLConnection.disconnect() for the wrapped connection.&lt;br/&gt;
JDK javadoc for HttpURLConnection states the following:&lt;/p&gt;

&lt;p&gt;Calling the close() methods on the InputStream or OutputStream of an HttpURLConnection after a request may free network resources associated with this instance but has no effect on any shared persistent connection. Calling the disconnect() method may close the underlying socket if a persistent connection is otherwise idle at that time.&lt;/p&gt;

&lt;p&gt;So, when you close SimpleClientHttpResponse you may be disconnecting the underlying socket for a connection that could otherwise be reused (not the HttpURLConnection instance itself, but the underlying socket connection).&lt;br/&gt;
I believe close should close any open InputStreams (if either HttpURLConnection.getErrorStream() or URLConnection.getInputStream() were invoked), but not invoke the disconnect method.&lt;br/&gt;
If such functionality is required to be available for users of SimpleHttpUrlConnection, then I believe a new method should be added (for example disconnect()) that is not required to be called.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Juan&lt;/p&gt;</description>
            <key id="37137">SPR-8123</key>
            <summary>SimpleClientHttpResponse disconnects the underlying HttpURLConnection when closing</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="bclozel">Brian Clozel</assignee>
                                    <reporter username="juan.farre">Juan Antonio Farr&#233; Basurte</reporter>
                        <labels>
                    </labels>
                <created>Thu, 31 Mar 2011 08:58:03 +0000</created>
                <updated>Mon, 4 Apr 2016 17:06:41 +0000</updated>
                            <resolved>Mon, 4 Apr 2016 17:06:41 +0000</resolved>
                                    <version>3.0.5</version>
                                                    <component>Web</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                            <timeestimate seconds="0">0d</timeestimate>
                            <timespent seconds="10140">2h 49m</timespent>
                                <comments>
                            <comment id="64893" author="cbeams" created="Thu, 31 Mar 2011 23:16:55 +0000"  >&lt;p&gt;Arjen - you implemented the code in question. Can you comment?&lt;/p&gt;</comment>
                            <comment id="67115" author="arjen.poutsma" created="Mon, 6 Jun 2011 05:51:22 +0000"  >&lt;p&gt;While I do agree that closing the underlying connection for every RestTemplate call is a bit overaggressive, I don&apos;t see a good alternative. Closing the body stream, as suggested, is simply not good enough, as I believe this will keep the underlying socket open indefinitely.&lt;/p&gt;

&lt;p&gt;That said, it&apos;s rather hard to find good documentation about the way HttpUrlConnection actually works. The javadoc only contains hollow phrases with &apos;may close&apos; and &apos;may disconnect&apos;, which is completely useless IMO.&lt;/p&gt;

&lt;p&gt;Also, we should consider the fact that Google App Engine has their own implementation of HttpURLConnection, and that there is no guarantee that GAE deals with reusing sockets the same &apos;intelligent&apos; way the SUN JDK does. By calling disconnect(), we at least know for sure that everything is properly cleaned up.&lt;/p&gt;</comment>
                            <comment id="67122" author="juan.farre" created="Mon, 6 Jun 2011 09:21:58 +0000"  >&lt;p&gt;I understand your point and the fact that calling disconnect in the close method is a save way of avoiding connection leaks.&lt;br/&gt;
But I&apos;d like to comment a couple more details:&lt;/p&gt;

&lt;p&gt;HttpURLConnection javadoc starts referring to HTTP spec for details. So, when it talks about persistent connections, it&apos;s referring to the definition in HTTP spec and its explanation of the standard-compliant behaviour regarding to them (using persistent connections is, in fact, the default for HTTP 1.1 and hence, calling disconnect for every request, wouldn&apos;t be standard-compliant strictly speaking).&lt;/p&gt;

&lt;p&gt;This also implies that an idle persistent connection can always be explicitly closed in two possible ways:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Calling disconnect, which, following the javadoc, &quot;Indicates that other requests to the server are unlikely in the near future&quot;, and could be done through a specialized method of SimpleHttpUrlConnection.&lt;/li&gt;
	&lt;li&gt;Just sending &quot;Connection: close&quot; header in any request or response, as HTTP standard specifies.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There are more details about persistent connections, their importance and their implementation in java.net doc, which you probably have already read:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://download.oracle.com/javase/6/docs/technotes/guides/net/http-keepalive.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.oracle.com/javase/6/docs/technotes/guides/net/http-keepalive.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It also gives interesting guidelines for applications using this API.&lt;br/&gt;
One of the many interesting points in that documentation is that you can control keep-alive behavior via system properties http.keepAlive and http.maxConnections. This gives users of HttpURLConnection (or SimpleHttpUrlConnection) the hability to change default behavior if they wish. Having SimpleHttpUrlConnection.close() call disconnect() gives no chance to change default behavior, unless you do the bad practice of not following the specs strictly and just not calling close().&lt;/p&gt;

&lt;p&gt;As a last point, if google implementation does not manage connections &quot;well enough&quot; it must mean that they fail to follow HTTP and/or HttpURLConnection specs. This would be a bug and I don&apos;t think spring API implementation should be conditioned by a buggy underlaying implementation (at most, im my oppinion, it could include a configurable workaround).&lt;/p&gt;

&lt;p&gt;For my concrete needs, having close() call disconnect() makes SimpleHttpUrlConnection completely unusable, as I could never reuse connections, and then I must use apache-commons implementation.&lt;/p&gt;

&lt;p&gt;Of course, you have the last word about this, and for sure you know better the needs (and politics) of spring, so I accept that your final decission be &quot;won&apos;t fix&quot;.&lt;/p&gt;

&lt;p&gt;Thanks a lot,&lt;/p&gt;

&lt;p&gt;Juan&lt;/p&gt;

&lt;p&gt;PS: By the way, is there intention of implementing a new wrapper for the new apache HTTP-client implementation?&lt;/p&gt;</comment>
                            <comment id="67142" author="arjen.poutsma" created="Tue, 7 Jun 2011 02:34:08 +0000"  >&lt;p&gt;@Juan&lt;/p&gt;

&lt;p&gt;I am aware of HTTP 1.1 persistent connections, and the settings HttpURLConnection has to enable it. What I am struggling with, however, is to ensure that the TCP connection is properly closed in the end. As far as I can tell, the only way to ensure that is to use disconnect(), so that&apos;s what I do.&lt;/p&gt;

&lt;p&gt;Apache commons and the new HTTP client (that will be in 3.1 M2) solve this by having a separate connection factory, which I can close as the application context is closed. I could write such a connection factory object for the HttpURLConnection, but since we already have superior alternatives in the form of the Apache clients, I don&apos;t see the point. &lt;/p&gt;

&lt;p&gt;Regarding the Google App Engine: reports about key differences between the GAE and JDK HttpURLConnection have already been made. For instance, see &lt;a href=&quot;https://jira.spring.io/browse/SPR-7146&quot; title=&quot;AppEngine : bug with SimpleClientHttpResponse.getHeaders&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-7146&quot;&gt;&lt;del&gt;SPR-7146&lt;/del&gt;&lt;/a&gt;, which could definitely be labeled as a GAE bug, as it doesn&apos;t follow the HttpURLConnection javadoc. Doing so wouldn&apos;t help Spring users at all, however, so I wrote a workaround.&lt;/p&gt;

&lt;p&gt;Thanks for the feedback, and do let me know if you know of a way to solve the issues I&apos;ve described above.&lt;/p&gt;




</comment>
                            <comment id="67145" author="juan.farre" created="Tue, 7 Jun 2011 03:23:26 +0000"  >&lt;p&gt;Thanks, now I understand the problem much better &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
The only idea that comes to my mind that could ensure that TCP connections are properly closed in the end and looks straightforward enough to implement is to keep WeakReferences to all SimpleHttpUrlConnection instances and have a thread invoke disconnect for the underlaying HttpURLConnections when these references have been cleared by the garbage collector.&lt;br/&gt;
But you&apos;re right that this might not be worth the effort having Apache alternatives.&lt;br/&gt;
Thanks again for your time and interest.&lt;/p&gt;</comment>
                            <comment id="128430" author="bclozel" created="Mon, 4 Apr 2016 17:06:41 +0000"  >&lt;p&gt;This has been resolved as part of &lt;a href=&quot;https://jira.spring.io/browse/SPR-14040&quot; title=&quot;HTTP persistent connections for HTTP Invoker and RestTemplate&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-14040&quot;&gt;&lt;del&gt;SPR-14040&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="67957">SPR-14040</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        37 weeks, 3 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 31 Mar 2011 23:16:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>bclozel</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00pb3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4145</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>