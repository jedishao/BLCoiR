<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:29:16 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2584/SPR-2584.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2584] Strange behaviour in Spring AOP when calling proceed() a second time in a loop in an around advice (different to AspectJ beaviour)</title>
                <link>https://jira.spring.io/browse/SPR-2584</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Description of the scenario:&lt;/p&gt;

&lt;p&gt;I&apos;ve created a test case to investigate a strange behaviour I had with an exception handler around advice, which is in front of the Spring TransactionInterceptor. &lt;br/&gt;
The idea is to implement a retry functionality, which reruns the same service method again, if a retryable exception has been raised by the service. In that scenario, I wanted the exception handler aspect to be the first in the interceptor chain, so the transaction gets rolled back by the retryable exception and a new one is started when retrying the service.&lt;/p&gt;

&lt;p&gt;Test aspect:&lt;/p&gt;

&lt;p&gt;so I have tried to implement the scenario in a small test case, this is the aspect, the first advice is the retry handler and the second one simulates the transaction management.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
@Aspect&lt;br/&gt;
public class RetryAspect {&lt;/p&gt;

&lt;p&gt;	@Pointcut(&quot;execution(public * Main.*(..))&quot;)&lt;br/&gt;
	public void execOfPublicMethod() {&lt;br/&gt;
	}&lt;/p&gt;

&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Retry Advice&lt;br/&gt;
	 */&lt;br/&gt;
	@Around(&quot;execOfPublicMethod()&quot;)&lt;br/&gt;
	public Object retry(ProceedingJoinPoint jp) throws Throwable {&lt;br/&gt;
		boolean retry = true;&lt;br/&gt;
		Object o = null;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;		while (retry) {&lt;br/&gt;
			try &lt;/p&gt;
{
				retry = false;
				o = jp.proceed();
			}
&lt;p&gt; catch (RetryableException re) &lt;/p&gt;
{
				retry = true;
			}
&lt;p&gt;		}&lt;/p&gt;

&lt;p&gt;		return o;&lt;br/&gt;
	}&lt;/p&gt;

&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Just simulating TransactionInterceptor, could be anything else&lt;br/&gt;
	 */&lt;br/&gt;
	@Around(&quot;execOfPublicMethod()&quot;)&lt;br/&gt;
	public Object transaction(ProceedingJoinPoint jp) throws Throwable {&lt;br/&gt;
		Object o = null;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;		System.out.println(&quot;starting transaction .....&quot;);&lt;/p&gt;

&lt;p&gt;		try &lt;/p&gt;
{
			o = jp.proceed();
		}
&lt;p&gt; catch (RetryableException e) &lt;/p&gt;
{
			System.out.println(&quot;rolback transaction .... &quot;);
			throw e;
		}

&lt;p&gt;		System.out.println(&quot;committing transaction .....&quot;);&lt;br/&gt;
		return o;&lt;br/&gt;
	}&lt;/p&gt;

&lt;p&gt;}&lt;br/&gt;
----------------------------------------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;When I use this with SpringAOP and the service method throws an RetryableException once and the second time it finishes successfully, then I get this on the console:&lt;/p&gt;

&lt;p&gt;------------------------------------------------------&lt;br/&gt;
starting transaction .....&lt;br/&gt;
I&apos;m in the service now ....&lt;br/&gt;
.... about to throw a RetryableException ...&lt;br/&gt;
rolback transaction ....&lt;br/&gt;
I&apos;m in the service now ....&lt;br/&gt;
------------------------------------------------------&lt;/p&gt;

&lt;p&gt;If I switch to AspectJ and weave the aspect at at compile-time, then I get the expected behavior:&lt;/p&gt;

&lt;p&gt;------------------------------------------------------&lt;br/&gt;
starting transaction .....&lt;br/&gt;
I&apos;m in the service now ....&lt;br/&gt;
.... about to throw a RetryableException ...&lt;br/&gt;
rolback transaction ....&lt;br/&gt;
starting transaction .....&lt;br/&gt;
I&apos;m in the service now ....&lt;br/&gt;
committing transaction .....&lt;br/&gt;
------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Tested with Spring RC3 and a 1 week-old RC4.&lt;/p&gt;

&lt;p&gt;There is also an active thread on the AOP Spring Forum: &lt;a href=&quot;http://forum.springframework.org/showthread.php?t=29120&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://forum.springframework.org/showthread.php?t=29120&lt;/a&gt;&lt;/p&gt;
</description>
            <key id="14971">SPR-2584</key>
            <summary>Strange behaviour in Spring AOP when calling proceed() a second time in a loop in an around advice (different to AspectJ beaviour)</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="robh">Rob Harrop</assignee>
                                    <reporter username="gschmutz">Guido Schmutz</reporter>
                        <labels>
                    </labels>
                <created>Wed, 13 Sep 2006 20:07:41 +0000</created>
                <updated>Tue, 19 Jun 2012 03:51:04 +0000</updated>
                            <resolved>Wed, 20 Sep 2006 19:54:44 +0000</resolved>
                                    <version>2.0 RC3</version>
                                    <fixVersion>2.0 final</fixVersion>
                                    <component>Core:AOP</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="19592" author="gschmutz" created="Wed, 13 Sep 2006 20:08:29 +0000"  >&lt;p&gt;test case&lt;/p&gt;</comment>
                            <comment id="19767" author="anders" created="Wed, 20 Sep 2006 14:07:07 +0000"  >&lt;p&gt;I ran into this problem as well.  I attempted to use invocableClone on the MethodInterceptor, but ran into &lt;a href=&quot;https://jira.spring.io/browse/SPR-2608&quot; title=&quot;AbstractAspectJAdvice and AspectJAroundAdvice subvert ReflectiveMethodInvocation.invocableClone&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-2608&quot;&gt;&lt;del&gt;SPR-2608&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The workaround, for now, is to use invocableClone and remove the PJP from the clone&apos;s userAttributes, so that a new one gets created.&lt;/p&gt;</comment>
                            <comment id="20635" author="dohunt" created="Fri, 3 Nov 2006 10:48:10 +0000"  >&lt;p&gt;I am having this problem too.  Either I am doing something wrong or this is a major bug.  &lt;/p&gt;

&lt;p&gt;Can interceptor chains be retried (proceed) after exception?&lt;/p&gt;</comment>
                            <comment id="20636" author="dohunt" created="Fri, 3 Nov 2006 10:59:02 +0000"  >&lt;p&gt;Sorry, I didn&apos;t see it was resolved.  Will this be back ported to 1.2.8?&lt;/p&gt;</comment>
                            <comment id="21922" author="juergen.hoeller" created="Fri, 26 Jan 2007 10:00:12 +0000"  >&lt;p&gt;Sorry, didn&apos;t see the comment earlier... No, this is not planned for backporting: Spring 1.2&apos;s AOP capabilities will remain as-is; this also applies to the upcoming 1.2.9 release. Only Spring 2.0&apos;s AOP framework features the revised semantics for alignment with AspectJ.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="11954" name="aop-springaop-and-retry.zip" size="10663" author="gschmutz" created="Wed, 13 Sep 2006 20:08:29 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        9 years, 48 weeks, 6 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 20 Sep 2006 14:07:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00vtr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5201</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>