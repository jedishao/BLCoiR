<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 21:23:02 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-230/SPR-230.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-230] Please improve BeanFactory support for containers &amp; collections</title>
                <link>https://jira.spring.io/browse/SPR-230</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Objects that contain other objects (common examples include Swing Containers and the Collections classes) frequently cannot have their initial state specified through setting javabeans properties alone. &lt;/p&gt;

&lt;p&gt;This is a request for the spring core to include extensions to the syntax of the applicationContext.xml to allow such objects to be setup completely from XML. Some reasonably conveinient syntax is needed that allows methods like &quot;add()&quot; to be invoked on the bean at construction time. Ideally, I think the syntax should allow any arbritrary methods to be called on a bean during preparation.&lt;/p&gt;

&lt;p&gt;There is a clear precendent to be found in the design of the java.beans.XMLEncoder/Decoder classes, designed to support long term bean perisstence. Consider the extract below generated by XML-serializing a List:&lt;/p&gt;

&lt;p&gt; &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt; &lt;br/&gt;
 &amp;lt;java version=&quot;1.4.2_03&quot; class=&quot;java.beans.XMLDecoder&quot;&amp;gt;&lt;br/&gt;
  &amp;lt;object class=&quot;java.util.ArrayList&quot;&amp;gt;&lt;br/&gt;
   &amp;lt;void method=&quot;add&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;string&amp;gt;item&amp;lt;/string&amp;gt; &lt;br/&gt;
   &amp;lt;/void&amp;gt;&lt;br/&gt;
  &amp;lt;/object&amp;gt;&lt;br/&gt;
 &amp;lt;/java&amp;gt;&lt;/p&gt;

&lt;p&gt;Evidently, it was recognized as an important feature as its present from the first release of the peristence mechanism. &lt;/p&gt;

&lt;p&gt;Consider what is &lt;b&gt;not&lt;/b&gt; readily doable from XML without this feature:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Cannot create any Swing component heirarchies.&lt;/li&gt;
	&lt;li&gt;Cannot initialize custom collections (ie anything not a vanilla set/map/list impl), unless it provides a copy-constructor.&lt;/li&gt;
	&lt;li&gt;Cannot init arbritrary state on objects which do not observe the get/setXXX convention (and legacy code is littered with them).&lt;/li&gt;
&lt;/ul&gt;
</description>
            <key id="10427">SPR-230</key>
            <summary>Please improve BeanFactory support for containers &amp; collections</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="cbeams">Chris Beams</assignee>
                                    <reporter username="ben_hutchison">Ben Hutchison</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 Jul 2004 15:54:01 +0000</created>
                <updated>Thu, 7 Jul 2011 18:15:30 +0000</updated>
                            <resolved>Thu, 7 Jul 2011 18:11:38 +0000</resolved>
                                    <version>1.0.2</version>
                                                    <component>Core</component>
                        <due></due>
                            <votes>32</votes>
                                    <watches>28</watches>
                                                                <comments>
                            <comment id="10663" author="asenft" created="Thu, 22 Jul 2004 18:09:57 +0000"  >
&lt;p&gt;I would appreciate such a feature since it could allow for even better configuration. Especially registration of listeners does often require invocation of an addListener() or registerListener() method. This could then also be supported by spring configuration directly.&lt;/p&gt;

&lt;p&gt;My proposal for the xml structure is like that:&lt;/p&gt;

&lt;p&gt;&amp;lt;bean id=&quot;MyBean&quot; class=&quot;mypkg.MyClass&quot;&amp;gt;&lt;br/&gt;
  &amp;lt;method name=&quot;addListener&quot;&amp;gt;&lt;br/&gt;
    &amp;lt;method-args&amp;gt;&lt;br/&gt;
      &amp;lt;method-arg&amp;gt;...&amp;lt;/method-arg&amp;gt;&lt;br/&gt;
    &amp;lt;/method-args&amp;gt;&lt;br/&gt;
  &amp;lt;/method&amp;gt;&lt;br/&gt;
&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the method-arg tag behaves similar to a constructor-arg tag&lt;br/&gt;
(either also allowing type and index specification or be assigned by index of occurence)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the method-args tag should be capable of containing multiple arguments in order to invoke methods with more than one parameter.&lt;br/&gt;
This is sometimes useful for more complex registrations.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the method tag could be allowed to contain more than one (but at least one) method-args tag. This would make things more concise in the case of multiple invocations&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In my opinion, that would be a useful and elegant extension.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Andreas&lt;/p&gt;</comment>
                            <comment id="10667" author="rod.johnson" created="Thu, 22 Jul 2004 22:40:38 +0000"  >&lt;p&gt;I can see valid usages for this. I&apos;ve considered it from time to time. My main reservation is that I don&apos;t think that people should &lt;em&gt;program&lt;/em&gt; in XML. But of course we are still dealing with configuration.&lt;/p&gt;

&lt;p&gt;I think the best approach may be to allow for configuration in bean definition via scripting, in Groovy or another language. I would prefer that to an XML mechanism. Thoughts?&lt;/p&gt;</comment>
                            <comment id="10670" author="asenft" created="Thu, 22 Jul 2004 22:51:48 +0000"  >
&lt;p&gt;I see your point, but I am not sure if I interpret the scripting proposal correctly.&lt;/p&gt;

&lt;p&gt;Does it mean to have some kind of tag within the bean definition containing scripting code?&lt;br/&gt;
That would indeed be more flexible, yet It would invite even more to perform programming within the configuration (although not using xml directly for that).&lt;br/&gt;
Further it has to be considered how to reference values and references of the &quot;normal&quot; configuration from within the cripting code.&lt;/p&gt;

&lt;p&gt;Andreas&lt;/p&gt;</comment>
                            <comment id="10677" author="ben_hutchison" created="Fri, 23 Jul 2004 13:06:45 +0000"  >&lt;p&gt;I would prefer to use XML. I dont know groovy and I dont want to learn it simply to configure my application context. I would like to do all my context setup in one place, where I do it now.&lt;/p&gt;

&lt;p&gt;The line between configuration and programming is a fine and indisinct one. Are you suggesting invoking a method &quot;add(Value)&quot; is programming, whilst &quot;setValue(value)&quot; is not? IMHO, an good indicator of &quot;programming&quot; is the presence of conditional &amp;amp; looping constructs.&lt;/p&gt;

&lt;p&gt;My motivations for using an app context XML file are to specify the static initial state, relationships and dependencies of my application in a declarative, textual form, that faciltitates automatic dependecy injection. &lt;/p&gt;

&lt;p&gt;If I need to call methods of arbritrary signature to express these states/relationships, I wish to be able to.&lt;/p&gt;</comment>
                            <comment id="12469" author="sgarlatm" created="Mon, 28 Feb 2005 03:35:00 +0000"  >&lt;p&gt;You might want to take a look at the OGNL plug in for Spring.  It&apos;s not formally released but you might be able to push it to release if you&apos;re interested in it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ognl.org/resources/ognl-spring.zip&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.ognl.org/resources/ognl-spring.zip&lt;/a&gt; &lt;/p&gt;</comment>
                            <comment id="16205" author="robh" created="Thu, 26 Jan 2006 21:21:35 +0000"  >&lt;p&gt;After much discussion we have decided the approach to take here is to support a simple convention in the container and then rely on further configuration mechanisms (such as scripting) and expression languages in the container.&lt;/p&gt;

&lt;p&gt;The convention we are going to support is:&lt;/p&gt;

&lt;p&gt;addXXX(Object o) where meets this contract (!(o instanceof Collection) &amp;amp;&amp;amp; !(o.getClass().isArray)).&lt;/p&gt;

&lt;p&gt;We have yet to decide on the final XML syntax but it is expected to be similar to this:&lt;/p&gt;

&lt;p&gt;&amp;lt;property name=&quot;location&quot; mode=&quot;autodetect|add|set&quot;&amp;gt;&lt;br/&gt;
  &amp;lt;list&amp;gt;&lt;br/&gt;
    &amp;lt;value&amp;gt;foo.txt&amp;lt;/value&amp;gt;&lt;br/&gt;
  &amp;lt;/list&amp;gt;&lt;br/&gt;
&amp;lt;/property&amp;gt;&lt;/p&gt;

&lt;p&gt;We believe this hits the sweet spot of covering a reasonable number of use cases without resorting to programming in XML. Full on method invocations will be supported by scripting.&lt;/p&gt;

&lt;p&gt;Rob&lt;/p&gt;</comment>
                            <comment id="20711" author="stolsvik" created="Thu, 9 Nov 2006 08:52:21 +0000"  >&lt;p&gt;This bug can be considered the mother of &lt;a href=&quot;https://jira.spring.io/browse/SPR-1018&quot; title=&quot;support &amp;quot;add&amp;quot;-style List injection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-1018&quot;&gt;&lt;del&gt;SPR-1018&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://jira.spring.io/browse/SPR-2533&quot; title=&quot;Support JavaBean Eventing methods in Spring&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-2533&quot;&gt;&lt;del&gt;SPR-2533&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://jira.spring.io/browse/SPR-2801&quot; title=&quot;&amp;quot;adder&amp;quot; injection in addition to &amp;quot;setter&amp;quot; (invoke addXX() instead of setXX())&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-2801&quot;&gt;&lt;del&gt;SPR-2801&lt;/del&gt;&lt;/a&gt; (the children are dupes) :&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://jira.spring.io/browse/SPR-1018&quot; title=&quot;support &amp;quot;add&amp;quot;-style List injection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-1018&quot;&gt;&lt;del&gt;SPR-1018&lt;/del&gt;&lt;/a&gt;: &quot;Some classes don&apos;t expose a plublic setter for internal list (as an example, commons-configuration CompositeConfiguration) bue some addXXX(item) method.&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://jira.spring.io/browse/SPR-2533&quot; title=&quot;Support JavaBean Eventing methods in Spring&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-2533&quot;&gt;&lt;del&gt;SPR-2533&lt;/del&gt;&lt;/a&gt;: asks for &quot;adder injection&quot; based on the requirement of registering event listeners, which often are registered/injected in beans using addListener methods.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://jira.spring.io/browse/SPR-2801&quot; title=&quot;&amp;quot;adder&amp;quot; injection in addition to &amp;quot;setter&amp;quot; (invoke addXX() instead of setXX())&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-2801&quot;&gt;&lt;del&gt;SPR-2801&lt;/del&gt;&lt;/a&gt;: &quot;adder&quot; injection in addition to &quot;setter&quot; (invoke addXX() instead of setXX()), and in addition possibilities for arbitrary method invocations (ala Jetty configuration).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And I personally don&apos;t see the big deal about &quot;programming in XML&quot;: why not leave the possibilities open to support old/legacy &quot;beans&quot; and other kind of libraries?&lt;/p&gt;

&lt;p&gt;You do supply a bunch of &quot;hack-tools&quot; to do the exact same thing - in particular the org.springframework.beans.factory.config.MethodInvokingFactoryBean. This would just clean up the syntax - it gets &lt;em&gt;really&lt;/em&gt; dirty by using these hack-tools - or one have to resort to &lt;em&gt;actual code&lt;/em&gt; and/or tie-ins with the container.&lt;/p&gt;

&lt;p&gt;Considering how many forum-posts that result in suggestions around &quot;oh, just make a factory-bean that does it for you&quot;, &quot;use a post-processor&quot; and whatnot, it clearly points to a need to more easily and cleanly do such set-up tasks.&lt;/p&gt;</comment>
                            <comment id="21335" author="david_syer" created="Sun, 17 Dec 2006 20:48:07 +0000"  >&lt;p&gt;Should it be possible to add more than one element to a collection using the addXXX method?  This is more of a problem because the bean factory doesn&apos;t like having more than one reference to the same property within a single bean definition.  I.e. you can&apos;t do this:&lt;/p&gt;

&lt;p&gt;	&amp;lt;bean id=&quot;bar&quot; parent=&quot;foo&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;comment&quot; value=&quot;bucket&quot; mode=&quot;add&quot;/&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;comment&quot; value=&quot;crap&quot; mode=&quot;add&quot;/&amp;gt;&lt;br/&gt;
	&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;without some special case logic in the bean factory.&lt;/p&gt;</comment>
                            <comment id="21336" author="david_syer" created="Sun, 17 Dec 2006 20:53:46 +0000"  >&lt;p&gt;N.B. if you only need to be able to add a single object using addX you can do it within the normal Java Beans framework (no need for changes to bean factory) - create a BeanInfo for the object that has the addX method and specify adX as the setter for property &quot;x&quot;.  Most of the use cases for this enhancement might be satisfied with that simple solution.  Where there are large libraries of legacy objects (like Swing) I guess it might be more onerous, but it might not be if the adders are sufficiently high up in the class hierarchy (which they certainly are for listeners etc.).&lt;/p&gt;

&lt;p&gt;Example BeanInfo for addComment method on class Bogus:&lt;/p&gt;

&lt;p&gt;public class BogusBeanInfo extends SimpleBeanInfo {&lt;br/&gt;
	public BeanInfo[] getAdditionalBeanInfo() {&lt;br/&gt;
		BeanInfo info = new SimpleBeanInfo() {&lt;br/&gt;
			public PropertyDescriptor[] getPropertyDescriptors() {&lt;br/&gt;
				Method setter = ClassUtils.getMethodIfAvailable(Bogus.class, &quot;addComment&quot;, new Class[] &lt;/p&gt;
{ String.class }
&lt;p&gt;);&lt;br/&gt;
				PropertyDescriptor comment;&lt;br/&gt;
				try &lt;/p&gt;
{
					comment = new PropertyDescriptor(&quot;comment&quot;, null, setter);
				}
&lt;p&gt; catch (IntrospectionException e) &lt;/p&gt;
{
					throw new BeanDefinitionValidationException(&quot;Cannot modify descriptor for comment in Bogus&quot;);
				}
&lt;p&gt;				return new PropertyDescriptor[] &lt;/p&gt;
{ comment }
&lt;p&gt;;&lt;br/&gt;
			}&lt;br/&gt;
		};&lt;br/&gt;
		return new BeanInfo[] &lt;/p&gt;
{ info }
&lt;p&gt;;&lt;br/&gt;
	}&lt;br/&gt;
}&lt;/p&gt;</comment>
                            <comment id="21337" author="stolsvik" created="Sun, 17 Dec 2006 20:58:06 +0000"  >&lt;p&gt;That should most definitely and obviously be possible if the feature is implemented, less it be a very crippled and strange implementation (&quot;add&quot; definately sounds like a thing you could do more than once), re &lt;a href=&quot;https://jira.spring.io/browse/SPR-2533&quot; title=&quot;Support JavaBean Eventing methods in Spring&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-2533&quot;&gt;&lt;del&gt;SPR-2533&lt;/del&gt;&lt;/a&gt; but in particular &lt;a href=&quot;https://jira.spring.io/browse/SPR-1018&quot; title=&quot;support &amp;quot;add&amp;quot;-style List injection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-1018&quot;&gt;&lt;del&gt;SPR-1018&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
  For myself, i will do &quot;pane.addTab()&quot;-style stuff, and yes, I&apos;d like to add more than one tab. Same goes for event listeners, and general collection-oriented stuff: The sole reason for the bean having an &quot;add&quot; instead of &quot;set&quot; is this exact point.&lt;/p&gt;

&lt;p&gt;PS: Why not make the arbitrary method invocation feature while you&apos;re at it? (Check out &lt;a href=&quot;https://jira.spring.io/browse/SPR-2801&quot; title=&quot;&amp;quot;adder&amp;quot; injection in addition to &amp;quot;setter&amp;quot; (invoke addXX() instead of setXX())&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-2801&quot;&gt;&lt;del&gt;SPR-2801&lt;/del&gt;&lt;/a&gt; for a syntax-idea)&lt;/p&gt;</comment>
                            <comment id="21667" author="juergen.hoeller" created="Sun, 7 Jan 2007 07:04:24 +0000"  >&lt;p&gt;This has not been implemented yet, and there is no work in progress yet (else this issue would be marked as &apos;in progress&apos;).&lt;/p&gt;

&lt;p&gt;We&apos;re currently working on the Spring 2.0.2 and subsequently 2.0.3 release. Spring 2.1 (which might address this issue) is scheduled for Q2 2007.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="22169" author="manifoldronin" created="Sat, 10 Feb 2007 15:41:51 +0000"  >&lt;p&gt;Over the weekend I actually set out to try and implement a patch for the add(Object o) approach Rob proposed above, but soon realized that add(Object o) would have some significant limitation on usability, because if a real bean (such as a domain object) decides to expose a collection only through addSomething(), chances are that addSomething() is going to take a parameter type more specific than Object, and can&apos;t be &quot;pinpointed&quot; through reflection (blindly taking the first addSomething that has one parameter seems a bit arbitrary...).&lt;/p&gt;

&lt;p&gt;I have voted for this issue, and if I could vote for a solution, I now think I would vote for the one Andreas proposed, which allows for a formal description of the adder method.&lt;/p&gt;

&lt;p&gt;I might add that I have read at various places that Spring forces designs - especially DDD - to open up what would have been completely internal collections. Fixing this issue will go a long way towards addressing that concern (however exaggerated it may be &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  ).&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;br/&gt;
Jing Xue&lt;/p&gt;</comment>
                            <comment id="28869" author="juergen.hoeller" created="Mon, 7 Jan 2008 21:57:51 +0000"  >&lt;p&gt;The current plan is to support this through the @Autowired annotation, annotating add-style methods that will be invoked for each matching bean in the context. There are no plans to support this with external metadata as well, mainly because there&apos;s no universally agreed-on format for externally specifying such add methods (in contrast to standard bean properties and constructor arguments, where the patterns are essentially older than Spring as a product).&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="41409" author="iterator" created="Sun, 30 Nov 2008 21:51:57 +0000"  >&lt;p&gt;I go with Andreas Senft and would see the described method tag as a very valuable feature. Limiting spring to simple bean properties is not powerfull enough to connect all kind of objects. Calling an arbitrary method is not more or less programming than calling a setter method. The method feature is very clean in design while the other suggestions like add properties are interfering with the property logic where properties are uniqe. Method calls should be able to be repeated for the same method like in the add case needed.&lt;/p&gt;

&lt;p&gt;I really miss such a feature and like to encourage Juergen to think about it. Connecting objects that were never written to work with Spring or that are written to work not only with Spring should be supported as well. Since the existing constructor call is doing almost the same like the required method tag, it should not be that difficult to create such a feature.&lt;/p&gt;

&lt;p&gt;Juergen, if you consider enabling the feature, I will offer you my help.&lt;/p&gt;</comment>
                            <comment id="41410" author="iterator" created="Sun, 30 Nov 2008 21:56:41 +0000"  >&lt;p&gt;To the naming of the feature. I think method is not the right terminus since this wouldn&apos;t be a method declaration. I would like to suggest two suitable names:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;call&lt;/li&gt;
	&lt;li&gt;invoke&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The method method should be called before the init method would be called just like it is in the case of the setters.&lt;/p&gt;</comment>
                            <comment id="43241" author="tawek" created="Sat, 21 Mar 2009 21:52:52 +0000"  >&lt;p&gt;Another proposed approach (+patch).&lt;/p&gt;

&lt;p&gt;The idea is not to introduce any new &quot;call&quot; or &quot;invoke&quot; syntax but reuse existing &quot;property&quot; elements to call arbitrary methods. The binding between property name and the method is defined used new &quot;define&quot; elements.&lt;/p&gt;

&lt;p&gt;&amp;lt;bean id=&quot;rod&quot; class=&quot;test.beans.TestBean&quot;&amp;gt;    &lt;br/&gt;
        &amp;lt;define name=&quot;friend&quot; write=&quot;addFriend&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;friend&quot;&amp;gt;&lt;br/&gt;
                &amp;lt;ref local=&quot;jenny&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;friend&quot;&amp;gt;&lt;br/&gt;
                &amp;lt;ref local=&quot;david&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;&lt;br/&gt;
&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;Above defines new property called friend which when set will call &quot;addFriend&quot; method.&lt;br/&gt;
If method is not overloaded then name of the method alone will suffice, otherwise you need to specify parameters like this &quot;addFriend(java.lang.Object)&quot;.&lt;br/&gt;
Properties defined with &quot;define&quot; by default can be set multiple times. This is specified with attribute &quot;multiple&quot; which is &quot;true&quot; by default.&lt;/p&gt;

&lt;p&gt;Things like nested properties are also supported.&lt;/p&gt;

&lt;p&gt;     &amp;lt;bean id=&quot;parentWithChild&quot; class=&quot;org.springframework.beans.factory.xml.XmlBeanCustomPropertyDescriptorTests$Parent&quot;&amp;gt;&lt;br/&gt;
        &amp;lt;define name=&quot;childArr.elements&quot; write=&quot;addElement&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;childArr&quot;&amp;gt;&lt;br/&gt;
            &amp;lt;list&amp;gt;&lt;br/&gt;
                &amp;lt;bean class=&quot;org.springframework.beans.factory.xml.XmlBeanCustomPropertyDescriptorTests$Child&quot;/&amp;gt;&lt;br/&gt;
                &amp;lt;bean class=&quot;org.springframework.beans.factory.xml.XmlBeanCustomPropertyDescriptorTests$Child&quot;/&amp;gt;&lt;br/&gt;
            &amp;lt;/list&amp;gt;&lt;br/&gt;
        &amp;lt;/property&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;childArr&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.elements&quot; value=&quot;SomeElement1&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;childArr&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.elements&quot; value=&quot;SomeElement2&quot;/&amp;gt;&lt;br/&gt;
        &amp;lt;property name=&quot;childArr&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.elements&quot; value=&quot;SomeElement3&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;Also properties can be inherited from parent.&lt;/p&gt;

&lt;p&gt;Behind the scenes it works by overriding the property descriptors obtained from CachedIntrospectionResults per BeanWrapper instance (not globally per jvm).&lt;br/&gt;
So each bean &quot;define&quot; tags are local to a bean.&lt;/p&gt;

&lt;p&gt;Patch against r678 of &lt;a href=&quot;https://src.springframework.org/svn/spring-framework/trunk&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://src.springframework.org/svn/spring-framework/trunk&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="43242" author="iterator" created="Sat, 21 Mar 2009 22:49:04 +0000"  >&lt;p&gt;Dzien dobry Tomasz,&lt;/p&gt;

&lt;p&gt;thank you for caring about this issue. I think your approach has to some disadvantages. It introduces a new construct, that again handles special methods that take only one parameter. Also there is the issue that the same property name can now appear more than once which confuses concepts and thus also validation.&lt;/p&gt;

&lt;p&gt;I still suggest to support arbitrary method calling beside normal properties. The argument that this would be programming is not correct because it depends on the case. Of course it could be misused. But this is with everything the case. For example there are setters to some classes that are not meaned for configuration. They could also be called. Image a legacy method like this: registerXForY(Y key, Y value). How would you cover that by your current approach?&lt;/p&gt;

&lt;p&gt;BTW: I would suggest to introduce an annotation that allows to mark methods including simple setters. This annotation could be @Configurable. IDEs like SpringIDE could suggest those methods or properties in code completion in before others that do no have this annotation.&lt;/p&gt;

&lt;p&gt;I still think limiting DI to properties covers a lot but is not sufficient. The property based DI could be sufficient in a programming language that is designed with IOC/DI in mind. It could have special properties or annotations that mark normal properties from the beginning when meaned for DI. But a language like Java contains so many legacy stuff that there is no clear concept of properties in the means of configuration and there is no clear concept of properties at all since they are just a naming convention and not a language pattern.&lt;/p&gt;

&lt;p&gt;Please evaluate my thoughts.&lt;/p&gt;</comment>
                            <comment id="43243" author="tawek" created="Sun, 22 Mar 2009 08:30:11 +0000"  >&lt;p&gt;Dirk, thanks for your interest in my patch.&lt;/p&gt;

&lt;p&gt;In fact the patch contains support for calling arbitrary methods. Example below:&lt;/p&gt;

&lt;p&gt;&amp;lt;bean id=&quot;literalMap&quot; class=&quot;org.springframework.beans.factory.xml.HasMap&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;define name=&quot;map&quot; write=&quot;addEntry(java.lang.Object,java.lang.Object)&quot;/&amp;gt; &amp;lt;!-- if addEntry is not overloaded params are optional --&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;map&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;list&amp;gt;&amp;lt;value&amp;gt;foo&amp;lt;/value&amp;gt;&amp;lt;value&amp;gt;bar&amp;lt;/value&amp;gt;&amp;lt;/list&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;map&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;list&amp;gt;&amp;lt;value&amp;gt;fi&amp;lt;/value&amp;gt;&amp;lt;value&amp;gt;fum&amp;lt;/value&amp;gt;&amp;lt;/list&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
		&amp;lt;property name=&quot;map&quot;&amp;gt;&lt;br/&gt;
			&amp;lt;list&amp;gt;&amp;lt;value&amp;gt;fa&amp;lt;/value&amp;gt;&amp;lt;null/&amp;gt;&amp;lt;/list&amp;gt;&lt;br/&gt;
		&amp;lt;/property&amp;gt;&lt;br/&gt;
&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;The direct answer to multi-param method support is : any method is in fact a &quot;property setter&quot;, only you have array of params instead of a single parameter.&lt;/p&gt;

&lt;p&gt;The nice (or ugly) thing about this proposal is that in fact it is an extension to well known BeanWrapperImpl and reuses all the things supported by it (like implicit conversions for instance and property editors).&lt;/p&gt;

&lt;p&gt;I&apos;ve tried to be as little disruptive to current &quot;property&quot; element syntax as possible, and reuse it as much as possible, and also to introduce as few new concepts as possible. But probably it may not feel as &quot;native&quot; as special &quot;invoke&quot; or &quot;call&quot; element. The validation of multiple instances of &quot;property&quot; elements is handled correctly by the patch. But yes it seems clunky to set the same property multiple times if we all recognize that &quot;property&quot; can be set only once. So probably some parts of a patch (like BeanWrapperImpl work) could be accepted and the rest (like xml configuration syntax) reworked to have better look and feel.&lt;/p&gt;

&lt;p&gt;I guess the target syntax would be:&lt;/p&gt;

&lt;p&gt;&amp;lt;bean id=&quot;literalMap&quot; class=&quot;org.springframework.beans.factory.xml.HasMap&quot;&amp;gt;&lt;br/&gt;
	&amp;lt;invoke method=&quot;addEntry&quot;&amp;gt;&amp;lt;value&amp;gt;foo&amp;lt;/value&amp;gt;&amp;lt;value&amp;gt;bar&amp;lt;/value&amp;gt;&amp;lt;/invoke&amp;gt;&lt;br/&gt;
	&amp;lt;invoke method=&quot;addEntry&quot;&amp;gt;&amp;lt;value&amp;gt;fi&amp;lt;/value&amp;gt;&amp;lt;value&amp;gt;fum&amp;lt;/value&amp;gt;&amp;lt;/invoke&amp;gt;&lt;br/&gt;
	&amp;lt;invoke method=&quot;addEntry&quot;&amp;gt;&amp;lt;value&amp;gt;fa&amp;lt;/value&amp;gt;&amp;lt;null/&amp;gt;&amp;lt;/invoke&amp;gt;&lt;br/&gt;
&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;Feel free to check patch for junit tests, xml configurtion examples and the internal changes made to BeanWrapperImpl and other classes.&lt;br/&gt;
Thanks for comments!&lt;/p&gt;</comment>
                            <comment id="43244" author="iterator" created="Sun, 22 Mar 2009 08:51:42 +0000"  >&lt;p&gt;@Tomasz&lt;/p&gt;

&lt;p&gt;I am lucky about your answer because:&lt;/p&gt;

&lt;p&gt;1. arbitrary method calling would be possible&lt;br/&gt;
2. you see the issue with muliple instances for the same property and consider an invoke element&lt;br/&gt;
3. normal conversion stuff is working (does this include PropertyEditors?)&lt;/p&gt;

&lt;p&gt;I think this would be a nice improvment and I hope the &quot;programming&quot; issue has not so much weight.&lt;/p&gt;

&lt;p&gt;What do you think about the @Configurable property for setters and other methods, that could give configurators a better support in what they actually should use with property and invoke elements and what not? A strict designed system could even validate against that and warn the configurator that he addressed properties or methods that are not meaned for configuration. Also imaginable would be an inverse annotation: @NotConfigurable. The two annotations @Configurable and @NotConfigurable would be also a step towards the folks that argument with the &quot;programming&quot; abuse.&lt;/p&gt;</comment>
                            <comment id="43263" author="tawek" created="Mon, 23 Mar 2009 03:05:10 +0000"  >&lt;p&gt;As for annotation stuff I don&apos;t use it much and I&apos;ve been using spring since its 1.0 times with xml configuration only. Juergen had proposed to support this feature using @Autowired annotations (see comments above). Probably it could have been made that way but from my point of view the xml syntax is still the king and it has to be supported approach.&lt;/p&gt;

&lt;p&gt;At least simple &amp;lt;util:invoke&amp;gt; to simplify the (mis)use of MethodInvocationFactoryBean could be introduced if there is too much resistance to introduce new things in &quot;beans&quot; namespace.&lt;/p&gt;

&lt;p&gt;Or maybe we should look at simple invocation facility from different perspective which escapes &quot;programming in xml&quot; argument. If we are doing COP with spring then when calling a method what we are really doing is registering a new plugin (or listener or collaborator in general). Look at &lt;a href=&quot;https://jira.spring.io/browse/SPR-2533&quot; title=&quot;Support JavaBean Eventing methods in Spring&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-2533&quot;&gt;&lt;del&gt;SPR-2533&lt;/del&gt;&lt;/a&gt; and other similar issues.&lt;/p&gt;

&lt;p&gt;Currently spring supports only specifying collaborators at target site like below:&lt;/p&gt;


&lt;p&gt;&amp;lt;bean name=&quot;composite&quot;&amp;gt;&lt;br/&gt;
  &amp;lt;property name=&quot;component&quot; ref=&quot;componentA&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;bean name=&quot;componentA&quot;/&amp;gt;&lt;/p&gt;


&lt;p&gt;and it supports only one collaborator per property specified at target - &quot;composite&quot; site. What if we &quot;IoC&quot;?&lt;/p&gt;


&lt;p&gt;&amp;lt;bean name=&quot;composite&quot;/&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;plugin target=&quot;composite&quot; role=&quot;component&quot;&amp;gt;&lt;br/&gt;
   &amp;lt;bean name=&quot;componentA&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;/plugin&amp;gt;&lt;/p&gt;


&lt;p&gt;Not very different but opens a lot of other possibilities like:&lt;/p&gt;

&lt;p&gt;1. you don&apos;t have to connect plugins at composite site, rather at component (plugin) site - this would typically require postprocessors.&lt;br/&gt;
2. you can register many &quot;plugins&quot; if target &quot;composite&quot; supports it.&lt;br/&gt;
3. you could specify what methods not only to register but also what methods to use to unregister the plugin!&lt;br/&gt;
4. you could even use interface name instead as role name - so that you don&apos;t specify the target name - this is similar to @Autowire by type&lt;/p&gt;

&lt;p&gt;Also you can then specify the name of register/unregister methods at &quot;composite&quot; or &quot;plugin&quot; site. I would argue to define such &quot;plug-points&quot; at &quot;composite&quot; site like this:&lt;/p&gt;

&lt;p&gt;&amp;lt;bean name=&quot;composite&quot;&amp;gt;&lt;br/&gt;
  &amp;lt;plug-point&lt;br/&gt;
	role=&quot;component&quot;  // this is an association name - like property name - &lt;br/&gt;
	[register-method=&quot;add&lt;/p&gt;
{role}&quot;] // optional method name to register plugin, by default it can follow &quot;add{role}
&lt;p&gt;&quot; or &quot;register&lt;/p&gt;
{role}&quot; pattern &lt;br/&gt;
	[unregister-method=&quot;remove{role}
&lt;p&gt;&quot;] // optional method name with reverse effect to register&lt;br/&gt;
	&lt;span class=&quot;error&quot;&gt;&amp;#91;cardinality=&amp;quot;0..n&amp;quot;&amp;#93;&lt;/span&gt; // how may collaborators are supported&lt;br/&gt;
  /&amp;gt;&lt;br/&gt;
&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;Lots of new ground to cover, but we really start talking plugins! &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; But probably too much to make it into 3.0.&lt;/p&gt;


</comment>
                            <comment id="43265" author="iterator" created="Mon, 23 Mar 2009 04:28:32 +0000"  >&lt;p&gt;Probably you misunderstood the annotations. They are not a replacement for the XML and they are not comparable to @Autowired. But let us forget the annotations because they seem not to belong here. So I am fully with you to discuss the invocation xml stuff.&lt;/p&gt;

&lt;p&gt;I think we should not forget that this feature is not only a search for the best design but mainly a helper for legacy objects that are NOT designed with Spring in mind. So I would still see the best way by having the invocation element as you typed some posts before. A higher level design could be a parallel approach with more efforts to avoid programing in xml.&lt;/p&gt;

&lt;p&gt;I find the suggestion to place it in the util namespace (&amp;lt;util:invoke&amp;gt;) very good. So developers dedicated to a clear cut regarding programming in xml and with a pure spring friendly program design will not find it as a core feature of the beans namespace. My opinion is that you should go that way:&lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;bean&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: gray; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: blue; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&quot;someBean&quot;&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: gray; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: blue; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&quot;SomeClass&quot;&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;  &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;util&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;:invoke &lt;/span&gt;&lt;span style=&quot;color: gray; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;method&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: blue; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&quot;addEntry&quot;&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&amp;gt;foo&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&amp;gt;bar&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;  &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;util&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;:invoke&amp;gt;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #008200; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&amp;lt;!-- alternatively in cases where neccessary because of overloading --&amp;gt;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;  &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;util&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;:invoke &lt;/span&gt;&lt;span style=&quot;color: gray; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;method&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: blue; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&quot;addEntry(java.lang.String,java.lang.String)&quot;&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&amp;gt;foo&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&amp;gt;bar&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;  &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;util&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;:invoke&amp;gt;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;bean&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;</comment>
                            <comment id="43267" author="iterator" created="Mon, 23 Mar 2009 04:44:16 +0000"  >&lt;p&gt;Regarding the higher level approach. Where I am basically with you is the point that linking should be reversable. But this is should also be possible for normal properties. I think a real good IoC container would manage not only DI (Dependency Injection) but also DS (Dependency Seperation) which would be running after the lifecycle of some bean is beeing finished. I have often tought about this. My dream is a language design for a programming language that has IoC in mind. Java is not really made for that. I am sure that there will come a time where this will be the conclusion of all the IoC experiences: Create a new language that supports separation of concerns (implementation vs. wiring) and this language should have a more direct syntax than XML for wiring. This would be very funny to discuss about such a language. Probably one should start some thread about that idea.&lt;/p&gt;</comment>
                            <comment id="43806" author="jerryshea" created="Wed, 22 Apr 2009 12:01:10 +0000"  >&lt;p&gt;my 2 cents: I just want to able to do event wiring in Spring java just like Spring.NET&lt;/p&gt;</comment>
                            <comment id="68190" author="cbeams" created="Thu, 7 Jul 2011 18:11:38 +0000"  >&lt;p&gt;Most if not all of the use cases represented here can be addressed with Spring 3.0 and 3.1 using the code-based &lt;tt&gt;@Configuration&lt;/tt&gt; class approach.&lt;/p&gt;

&lt;p&gt;Please take a look at this style if you haven&apos;t already &amp;#8211; we think that it represents a flexible and natural way to configure any Java object, especially when injection needs don&apos;t closely fit the JavaBeans model.&lt;/p&gt;

&lt;p&gt;You can get started by looking at the Javadoc for &lt;tt&gt;@Configuration&lt;/tt&gt;, which is rather extensive and complete with cross-references to the other types you&apos;ll need to know about. &lt;a href=&quot;http://static.springsource.org/spring/docs/3.1.0.M2/javadoc-api/org/springframework/context/annotation/Configuration.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://static.springsource.org/spring/docs/3.1.0.M2/javadoc-api/org/springframework/context/annotation/Configuration.html&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="14868">SPR-2506</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="14908">SPR-2533</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="15410">SPR-2801</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="11681">SPR-1018</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="15243" name="SPR-230.patch" size="140589" author="tawek" created="Sat, 21 Mar 2009 21:53:36 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        5 years, 25 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 22 Jul 2004 18:09:57 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i038vb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>18979</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>