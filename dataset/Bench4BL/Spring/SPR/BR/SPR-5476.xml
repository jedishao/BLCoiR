<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:38:23 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-5476/SPR-5476.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-5476] ReloadableResourceBundleMessageSource performance issue when using many resource files</title>
                <link>https://jira.spring.io/browse/SPR-5476</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;When using many property files and a cacheSeconds value of bigger than 0 the lookup time increases rapidly. I saw a 15% performance boost in my application when putting all my properties in the same file. The problem is the nested for loops in resolveCode and resolveCodeWithoutArguments.&lt;/p&gt;</description>
            <key id="25626">SPR-5476</key>
            <summary>ReloadableResourceBundleMessageSource performance issue when using many resource files</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="nibe01">Nikos Beis</reporter>
                        <labels>
                    </labels>
                <created>Thu, 12 Feb 2009 02:12:45 +0000</created>
                <updated>Thu, 4 Feb 2016 11:49:12 +0000</updated>
                            <resolved>Thu, 4 Feb 2016 11:49:12 +0000</resolved>
                                                                    <component>Core</component>
                        <due></due>
                            <votes>3</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="72827" author="vjouenne" created="Fri, 18 Nov 2011 06:37:56 +0000"  >&lt;p&gt;I am experiencing performance issues as well. Under load, many threads are waiting for the lock on the Map  in the getProperties method. The global lock on the Map prevents other threads to execute despite the efficiency of the check. &lt;/p&gt;

&lt;p&gt;Locking on a PropertyHolder instead of the Map would make it better but ultimately it would be beneficial to perform the refresh on a background thread and swap the Map reference once the refresh is done. &lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
protected PropertiesHolder getProperties(String filename) {&lt;br/&gt;
		synchronized (this.cachedProperties) {&lt;/p&gt;</comment>
                            <comment id="78018" author="emmanuel.vasseur" created="Mon, 30 Apr 2012 02:51:39 +0000"  >&lt;p&gt;I confirm the performance issue.&lt;br/&gt;
Synchronized blocks lock reads, in this way it is better to use ConcurrentHashMap.&lt;/p&gt;

&lt;p&gt;Furthermore there is no need to use a locking behavior. Messages can be load during spring context loading, and reload can be scheduled with a spring (or other) scheduling task.&lt;/p&gt;

&lt;p&gt;Sure there is a risk on multiple handler replacements, but it can be evict if there is only one Map and if all methods look into only one time (by using a local handler).&lt;br/&gt;
If messages are preload, cachedMergedProperties is the only Map to keep.&lt;/p&gt;</comment>
                            <comment id="78662" author="cbeams" created="Fri, 11 May 2012 05:16:34 +0000"  >&lt;p&gt;Emmanuel, would you be interested in contributing a fix here?  It sounds like you&apos;re already pretty familiar with the relevant code.  Check out the &lt;a href=&quot;https://github.com/SpringSource/spring-framework/wiki/Contributor-guidelines&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;contributor guidelines&lt;/a&gt;; we&apos;d appreciate it!&lt;/p&gt;</comment>
                            <comment id="95960" author="lhotari" created="Wed, 27 Nov 2013 20:28:27 +0000"  >&lt;p&gt;Grails would be happy to use an optimized solution too: &lt;a href=&quot;http://jira.grails.org/browse/GRAILS-10852&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jira.grails.org/browse/GRAILS-10852&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="95966" author="lhotari" created="Thu, 28 Nov 2013 04:12:31 +0000"  >&lt;p&gt;I have rewrited the caching logic of ReloadableResourceBundleMessageSource for Grails: &lt;a href=&quot;https://github.com/grails/grails-core/compare/7ee51f668...GRAILS-10852&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/grails/grails-core/compare/7ee51f668...GRAILS-10852&lt;/a&gt; . I can port this to Spring when the work is finished.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/grails/grails-core/blob/GRAILS-10852/grails-core/src/main/groovy/org/codehaus/groovy/grails/context/support/ReloadableResourceBundleMessageSource.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/grails/grails-core/blob/GRAILS-10852/grails-core/src/main/groovy/org/codehaus/groovy/grails/context/support/ReloadableResourceBundleMessageSource.java&lt;/a&gt;&lt;/p&gt;


</comment>
                            <comment id="104657" author="jhkuperus" created="Fri, 20 Jun 2014 06:32:09 +0000"  >&lt;p&gt;We&apos;ve run into the problem where a lot of threads are locked during the refresh of this MessageSource. Especially if the underlying filesystem is slow.&lt;/p&gt;

&lt;p&gt;I&apos;ve modified the ReloadableResourceBundleMessageSource to allow for background reloading of source files. This should only be used in environments where it is not a problem to serve &quot;stale&quot; data while the data is being reloaded. Would you guys prefer a way to switch this behaviour inside the ReloadableResourceBundleMessageSource? Or would you rather have a separate class with this behaviour like ConcurrentReloadableResourceBundleMessageSource?&lt;/p&gt;

&lt;p&gt;I&apos;ll read up on the contributor guidelines and prepare a pull request.&lt;/p&gt;</comment>
                            <comment id="104659" author="lhotari" created="Fri, 20 Jun 2014 06:51:18 +0000"  >&lt;p&gt;Grails 2.4 uses this modified version of RRBMS class:&lt;br/&gt;
&lt;a href=&quot;https://github.com/grails/grails-core/blob/2.4.x/grails-core/src/main/groovy/org/codehaus/groovy/grails/context/support/ReloadableResourceBundleMessageSource.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/grails/grails-core/blob/2.4.x/grails-core/src/main/groovy/org/codehaus/groovy/grails/context/support/ReloadableResourceBundleMessageSource.java&lt;/a&gt;&lt;br/&gt;
to get around the blocking issues. I&apos;m on mobile now so I cannot check if it serves the stale version while updating, but that&apos;s supported in the simple CacheEntry class that&apos;s used within a ConcurrentHashMap.&lt;/p&gt;</comment>
                            <comment id="123480" author="juergen.hoeller" created="Thu, 4 Feb 2016 11:49:12 +0000"  >&lt;p&gt;This looks a duplicate of &lt;a href=&quot;https://jira.spring.io/browse/SPR-10500&quot; title=&quot;ReloadableResourceBundleMessageSource locks properties hashmap and fails under load.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-10500&quot;&gt;&lt;del&gt;SPR-10500&lt;/del&gt;&lt;/a&gt; at this point, as released in 4.1. I don&apos;t really see much we can do beyond that. Please give 4.1/4.2 a try and feel free to reopen this issue if any concerns remain.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="48361">SPR-10500</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10151">
                    <name>Relate</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="47473">SPR-10314</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        46 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 18 Nov 2011 06:37:56 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>juergen.hoeller</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02bzz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>13653</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>