<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:24:12 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-2223/SPR-2223.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-2223] different clear synchronization behavior after 2.0-m4</title>
                <link>https://jira.spring.io/browse/SPR-2223</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;The jcr project part of Spring Modules contains a Local TransactionManager for jackrabbit. After upgrading to 2.0-m5 or rc1 one of the tests if failing - it passes if 2.0-m4- is used.&lt;br/&gt;
The stack trace is :&lt;br/&gt;
java.lang.IllegalStateException: Cannot deactivate transaction synchronization - not active&lt;br/&gt;
 at org.springframework.transaction.support.TransactionSynchronizationManager.clearSynchronization(TransactionSynchronizationManager.java:261)&lt;br/&gt;
 at org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion(AbstractPlatformTransactionManager.java:785)&lt;br/&gt;
 at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:580)&lt;br/&gt;
 at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:509)&lt;br/&gt;
 at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)&lt;br/&gt;
 at org.springmodules.jcr.jackrabbit.LocalTransactionManagerTests.testTransactionRollbackOnlyWithPrebound(LocalTransactionManagerTests.java:350)&lt;br/&gt;
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
 at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
 at junit.framework.TestCase.runTest(TestCase.java:154)&lt;br/&gt;
 at junit.framework.TestCase.runBare(TestCase.java:127)&lt;br/&gt;
 at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
 at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
 at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
 at junit.framework.TestCase.run(TestCase.java:118)&lt;br/&gt;
 at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
 at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)&lt;br/&gt;
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)&lt;br/&gt;
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)&lt;/p&gt;

&lt;p&gt;while the test that fails is called testTransactionRollbackOnlyWithPrebound() and can be found here: &lt;a href=&quot;https://springmodules.dev.java.net/source/browse/springmodules/projects/jcr/src/test/org/springmodules/jcr/jackrabbit/LocalTransactionManagerTests.java?rev=1.2&amp;amp;view=markup&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://springmodules.dev.java.net/source/browse/springmodules/projects/jcr/src/test/org/springmodules/jcr/jackrabbit/LocalTransactionManagerTests.java?rev=1.2&amp;amp;view=markup&lt;/a&gt;&lt;/p&gt;</description>
            <key id="14393">SPR-2223</key>
            <summary>different clear synchronization behavior after 2.0-m4</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="costin">Costin Leau</reporter>
                        <labels>
                    </labels>
                <created>Thu, 29 Jun 2006 23:17:11 +0000</created>
                <updated>Tue, 19 Jun 2012 03:52:21 +0000</updated>
                            <resolved>Tue, 8 Aug 2006 01:03:05 +0000</resolved>
                                    <version>2.0 M5</version>
                    <version>2.0 RC1</version>
                                    <fixVersion>2.0 RC3</fixVersion>
                                    <component>Transaction</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="18407" author="juergen.hoeller" created="Wed, 5 Jul 2006 01:42:42 +0000"  >&lt;p&gt;I&apos;m unfortunately unable to find any changes in that area since 2.0 M4. Can you please debug that failing JCR test and see what happens? Somehow either the synchronizations never become active, or they get cleared to early... That IllegalStateException is essentially an assertion that failed - and we need to find out who violated the expected state there.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="18562" author="costin" created="Thu, 13 Jul 2006 01:05:54 +0000"  >&lt;p&gt;I&apos;ve attached a file containing the logs - I have the UnexpectedRollbackException catched (not sure why I get it) but with post 2.0-m4 I get an IllegalArgumentException. I&apos;ll try to see what&apos;s the cause of the exception and report back.&lt;/p&gt;</comment>
                            <comment id="18564" author="costin" created="Thu, 13 Jul 2006 01:51:28 +0000"  >&lt;p&gt;The problem seems to be that with newer Spring files instead of getting an UnexpectedRollbackException, a commit is attempted. Here are important log snippets:&lt;/p&gt;

&lt;p&gt;up to 2.0-m4&lt;/p&gt;

&lt;p&gt;2006-07-13 17:01:06,906 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; DEBUG org.springmodules.jcr.jackrabbit.LocalTransactionManager - Setting JCR transaction on session &lt;span class=&quot;error&quot;&gt;&amp;#91;EasyMock for interface org.apache.jackrabbit.core.XASession&amp;#93;&lt;/span&gt; rollback-only&lt;br/&gt;
2006-07-13 17:01:06,906 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; DEBUG org.springmodules.jcr.jackrabbit.LocalTransactionManager - Cannot register Spring after-completion synchronization with existing transaction - performing Spring after-completion callbacks immediately, with outcome status &apos;unknown&apos;&lt;br/&gt;
2006-07-13 17:01:06,906 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; DEBUG org.springframework.transaction.support.TransactionSynchronizationManager - Clearing transaction synchronization&lt;br/&gt;
org.springframework.transaction.UnexpectedRollbackException: Transaction has been rolled back because it has been marked as rollback-only &amp;lt;-- exception is thrown&lt;br/&gt;
2006-07-13 17:01:06,906 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; DEBUG org.springframework.transaction.support.TransactionSynchronizationManager - Removed value &lt;span class=&quot;error&quot;&gt;&amp;#91;org.springmodules.jcr.jackrabbit.support.UserTxSessionHolder@194ca6c&amp;#93;&lt;/span&gt; for key &lt;span class=&quot;error&quot;&gt;&amp;#91;EasyMock for interface org.springmodules.jcr.SessionFactory&amp;#93;&lt;/span&gt; from thread &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;after 2.0-m4 the logs show:&lt;/p&gt;

&lt;p&gt;2006-07-13 17:43:40,453 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; DEBUG org.springmodules.jcr.jackrabbit.LocalTransactionManager - Cannot register Spring after-completion synchronization with existing transaction - performing Spring after-completion callbacks immediately, with outcome status &apos;unknown&apos;&lt;br/&gt;
2006-07-13 17:43:57,296 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; DEBUG org.springframework.transaction.support.TransactionSynchronizationManager - Clearing transaction synchronization&lt;br/&gt;
2006-07-13 17:44:52,484 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; DEBUG org.springmodules.jcr.jackrabbit.LocalTransactionManager - Triggering beforeCommit synchronization &amp;lt;-- commit &lt;br/&gt;
2006-07-13 17:44:59,796 &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; DEBUG org.springmodules.jcr.jackrabbit.LocalTransactionManager - Triggering beforeCompletion synchronization&lt;/p&gt;

&lt;p&gt;As I haven&apos;t changed any of my classes I assume that somehow the contract internally has changed. I&apos;ll continue the investigation and report back if I have some news.&lt;/p&gt;</comment>
                            <comment id="18567" author="costin" created="Thu, 13 Jul 2006 02:37:36 +0000"  >&lt;p&gt;I think I found the problem - after 2.0-m4 the following change occured in AbstractPlatformManager:&lt;/p&gt;

&lt;p&gt;processRollback(defStatus);&lt;br/&gt;
			throw new UnexpectedRollbackException(&quot;Transaction has been rolled back because it has been marked as rollback-only&quot;);&lt;/p&gt;

&lt;p&gt;was changed into:&lt;/p&gt;

&lt;p&gt;// Throw UnexpectedRollbackException only at outermost transaction boundary&lt;br/&gt;
			// or if explicitly asked to.&lt;br/&gt;
			if (status.isNewTransaction() || isFailEarlyOnGlobalRollbackOnly()) &lt;/p&gt;
{
				throw new UnexpectedRollbackException(
						&quot;Transaction rolled back because it has been marked as rollback-only&quot;);
			}

&lt;p&gt;However, this causes the exception to not be thrown and will try to do a commit. Not sure if my test is broken as it simply adds a transactionObject to the thread and calls the template - please see the link given above.&lt;/p&gt;</comment>
                            <comment id="18947" author="juergen.hoeller" created="Tue, 8 Aug 2006 01:03:05 +0000"  >&lt;p&gt;This was indeed an issue in AbstractPlatformTransactionManager, even though one that&apos;s rarely encountered in practice: It only arises when participating in an outer transaction where the outer transaction manager has &lt;b&gt;not&lt;/b&gt; turned on transaction synchronization, in combination with lazy throwing of UnexpectedRollbackException. This is rare, but your test case managed to produce exactly such a scenario &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I&apos;ve fixed AbstractPlatformTransactionManager to not invoke commit synchronization in case of propagated rollback-only flag, that is, to return early when not throwing an UnexpectedRollbackException. That was a simple &quot;return;&quot; mssing there at the end of the if clause, applying when no UnexpectedRollbackException caused an exit before...&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="11803" name="logs.txt" size="7274" author="costin" created="Thu, 13 Jul 2006 01:05:54 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 21 weeks, 2 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 5 Jul 2006 01:42:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i011zb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6198</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>