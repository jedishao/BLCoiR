<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:42:01 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1066/SPR-1066.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1066] Unable to suspend transaction in TransactionSynchronization.afterCompletion() in certain cases</title>
                <link>https://jira.spring.io/browse/SPR-1066</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;org.springframework.orm.hibernate3.SessionFactoryUtils has an inner class, &quot;SpringSessionSynchronization&quot;, that is instantiated and registered against the current transaction when using Spring for session management.  During transaction suspend and resume, this implementation will &lt;b&gt;always&lt;/b&gt; call TransactionSynchronizationManager.unbindResource(this.sessionFactory) and TransactionSynchronizationManager.bindResource(this.sessionFactory, this.sessionHolder), respectively.  When Spring performs a commit, it calls synchronization methods in this order:&lt;br/&gt;
  1. beforeCommit&lt;br/&gt;
  2. beforeCompletion&lt;br/&gt;
  3. afterCompletion&lt;/p&gt;

&lt;p&gt;In beforeCompletion, SpringSessionSynchronization will unbindResource(this.sessionFactory), and sometimes close the Hibernate &lt;br/&gt;
Session.  However, SpringSessionSynchronization will not reflect this in its internal state in any way.  Now imagine that a TransactionSynchronization implementation suspends the transaction in afterCompletion.  SessionFactoryUtils.SpringSessionSynchronization will have its suspend method called, which will attempt to unbindResource(this.sessionFactory), causing an exception since it has already been unbound.  Moreover, even if it performed a check and did not unbind the resource, resume() would still attempt to rebind the resource (whose Hibernate Session was most likely closed in beforeCompletion), leaving that closed resource bound to the current thread even after the main transaction has been committed.&lt;/p&gt;

&lt;p&gt;Basically, SpringSessionSynchronization needs to be modified to handle this call sequence:&lt;br/&gt;
  1. beforeCommit&lt;br/&gt;
  2. beforeCompletion&lt;br/&gt;
  3. suspend&lt;br/&gt;
  4. resume&lt;br/&gt;
  5. afterCompletion&lt;br/&gt;
Which it does not now support (though this was working in older versions of Spring).&lt;br/&gt;
Much more detail can be found in the related developer list thread: &lt;a href=&quot;http://news.gmane.org/find-root.php?message_id=%3c200506201528.08175.andy%40marathon%2dman.com%3e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://news.gmane.org/find-root.php?message_id=%3c200506201528.08175.andy%40marathon%2dman.com%3e&lt;/a&gt;&lt;/p&gt;</description>
            <key id="11811">SPR-1066</key>
            <summary>Unable to suspend transaction in TransactionSynchronization.afterCompletion() in certain cases</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="adepue">Andy DePue</reporter>
                        <labels>
                    </labels>
                <created>Tue, 21 Jun 2005 09:42:42 +0000</created>
                <updated>Wed, 22 Jun 2005 20:18:58 +0000</updated>
                            <resolved>Wed, 22 Jun 2005 20:18:58 +0000</resolved>
                                    <version>1.2.1</version>
                                    <fixVersion>1.2.2</fixVersion>
                                    <component>Data</component>
                    <component>Transaction</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13611" author="adepue" created="Tue, 21 Jun 2005 09:46:30 +0000"  >&lt;p&gt;Fixes the bug against Hibernate3&apos;s SessionFactoryUtils.SpringSessionSynchronization by not attempting to unbind the resource in suspend() if it is not currently bound, and also remembering whether it unbound the resource in suspend().  Upon resume(), the resource will be rebound only if it was unbound by suspend().&lt;/p&gt;</comment>
                            <comment id="13612" author="adepue" created="Tue, 21 Jun 2005 09:50:20 +0000"  >&lt;p&gt;I haven&apos;t checked yet, but my guess is that other synchronizations may be plagued by the same issue (such as Hibernate 2 support).  I just don&apos;t have time to look into other synchronization implementations...&lt;/p&gt;</comment>
                            <comment id="13621" author="juergen.hoeller" created="Wed, 22 Jun 2005 20:18:58 +0000"  >&lt;p&gt;Solved through the introdoction of a &quot;sessionHolderActive&quot; flag in SpringSessionSynchronization, tracking whether the SessionHolder has already been officially unbound in &quot;beforeCompletion&quot;. suspend/resume just kicks in when that flag is still &quot;true&quot;. This applies to Hibernate 2.1 as well as Hibernate3.&lt;/p&gt;

&lt;p&gt;This should be available in tonight&apos;s nightly snapshot, and in public CVS (within a few hours). Please give this a try if you have the chance. It will be released in Spring 1.2.2, scheduled for tomorrow.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="10820" name="SessionFactoryUtils.java.patch" size="1851" author="adepue" created="Tue, 21 Jun 2005 09:46:30 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        11 years, 28 weeks ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 22 Jun 2005 20:18:58 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i01f9z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8352</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>