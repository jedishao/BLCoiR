<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 18:41:26 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-9728/SPR-9728.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-9728] Provide a callback mechanism for when a DeferredResult is set or expires</title>
                <link>https://jira.spring.io/browse/SPR-9728</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;DeferredResult.setResultHandler should be used to &quot;doSomething&quot; when the request is ended (with success or from the timeout)&lt;/p&gt;

&lt;p&gt;but this function is overrided in WebAsyncManager.startDeferredResultProcessing :-/&lt;/p&gt;</description>
            <key id="45069">SPR-9728</key>
            <summary>Provide a callback mechanism for when a DeferredResult is set or expires</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="rstoya05-aop">Rossen Stoyanchev</assignee>
                                    <reporter username="sylvek">sylvain maucourt</reporter>
                        <labels>
                            <label>asynchronous</label>
                    </labels>
                <created>Sun, 26 Aug 2012 02:20:09 +0000</created>
                <updated>Mon, 4 Nov 2013 11:44:07 +0000</updated>
                            <resolved>Mon, 4 Nov 2013 11:44:07 +0000</resolved>
                                    <version>3.2 M2</version>
                                                    <component>Web</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="83071" author="rstoya05-aop" created="Thu, 30 Aug 2012 08:33:44 +0000"  >&lt;p&gt;The ResultHandler is for the one that handles the result. That&apos;s usually Spring MVC but may also be your code for example during testing. There is only one ResultHandler though!&lt;/p&gt;

&lt;p&gt;Currently there is no concept of a &quot;result listener&quot;. Mainly this is because it&apos;s the application that creates and sets the DeferredResult. In other words you should know when the result is set with success.&lt;/p&gt;

&lt;p&gt;That said do you have a specific case in mind?&lt;/p&gt;</comment>
                            <comment id="83073" author="sylvek" created="Thu, 30 Aug 2012 08:43:50 +0000"  >&lt;p&gt;yes..&lt;br/&gt;
i have a JMS custom like service to read messages.&lt;/p&gt;

&lt;p&gt;I have a service that reads messages only when my customer calls a specific url. This url returns a DeferredResult.&lt;br/&gt;
I need to know exactly when the value is set inside the DeferredResult because i need to stop the listening of the messages for my specific customer.. I found the pattern of &quot;ResultHandler&quot; adapted for that&lt;/p&gt;</comment>
                            <comment id="83079" author="sylvek" created="Thu, 30 Aug 2012 09:44:29 +0000"  >&lt;p&gt;in special case where the value never happened &quot;ResultHandler&quot; is the best way to stop listening into an infinite loop my messages broker.&lt;/p&gt;</comment>
                            <comment id="83080" author="rstoya05-aop" created="Thu, 30 Aug 2012 10:26:46 +0000"  >&lt;p&gt;Well, we can consider a callback option on DeferredResult but I should mention that you can also check &lt;tt&gt;deferredResult.isSetOrExpired()&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;I&apos;m not not convinced that a JMS listener&apos;s start/stop lifecycle should coincide with the setting of a DeferredResult. After a DeferredResult is set, the same user may likely send another request as part of &lt;a href=&quot;http://blog.springsource.org/2012/05/08/spring-mvc-3-2-preview-techniques-for-real-time-updates/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;long polling&lt;/a&gt;. This is why the chat sample uses an type called &lt;a href=&quot;https://github.com/rstoyanchev/spring-mvc-chat/blob/master/src/main/java/org/springframework/samples/async/chat/ChatParticipant.java#L24&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;ChatParticipant&lt;/a&gt; and has a &lt;a href=&quot;https://github.com/rstoyanchev/spring-mvc-chat/blob/master/src/main/java/org/springframework/samples/async/chat/ChatController.java#L71&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;request to unsubscribe&lt;/a&gt; from the chat. It is at this point when the user leaves the chat, not when a DeferredResult is set.&lt;/p&gt;

&lt;p&gt;I&apos;m also wondering if a JMS listener wouldn&apos;t more likely be servicing more than one user. In other words, a JMS listener container continuously receives messages and passes them on as long as there are active users listening (i.e. active DeferredResult instances). This listener wouldn&apos;t necessarily go away when one DeferredResult is set or even when a exits altogether. &lt;/p&gt;






</comment>
                            <comment id="83081" author="sylvek" created="Thu, 30 Aug 2012 10:35:19 +0000"  >&lt;p&gt;I concede that my architecture is unique, but would it be possible to remove at the final word of the class?&lt;/p&gt;</comment>
                            <comment id="83431" author="rstoya05-aop" created="Mon, 10 Sep 2012 19:18:25 +0000"  >&lt;p&gt;Removing the final keyword from DeferredResult is just one, and probably not the best, option. Help me to understand more specifically what you need so we can consider the right set of changes. This is why I provided my thoughts above. &lt;/p&gt;</comment>
                            <comment id="83433" author="sylvek" created="Mon, 10 Sep 2012 23:18:52 +0000"  >&lt;p&gt;you were right, I managed to bypass my problem architecture.&lt;br/&gt;
however, being able to have a &quot;doSomething&quot; when DefferredResult is &quot;set&quot; or reaches the timeout might interest.&lt;br/&gt;
could this possibly be to add a trace in the logs or notify another thread that await the end of the execution.&lt;br/&gt;
in my case, it was off the tap that I had opened previously.&lt;br/&gt;
I found this cleaner to handle in the same function that was open, that is to say, where I created the DefferredResult. I managed to close the other hand, in another thread.&lt;/p&gt;</comment>
                            <comment id="83516" author="rstoya05-aop" created="Wed, 12 Sep 2012 18:47:00 +0000"  >&lt;p&gt;I&apos;m leaving this open but we do need more concrete examples to better understand the requirements. &lt;/p&gt;

&lt;p&gt;A potential callback mechanism could be as simple as registering a Runnable with the DeferredResult. The callback would occur when the DeferredResult is set or expires. Or it could involve registering a more specialized type that provides access to the result. There are actually several options for the latter since a DeferredResult could be set normally, using the timeoutResult provided to the constructor, or never set.&lt;/p&gt;

&lt;p&gt;Yet another option is a listener mechanism that is registered more globally to receive information about every DeferredResult that gets set or expires. This could also include a callback for when a Callable produces a result or the underlying response expires.&lt;/p&gt;</comment>
                            <comment id="95161" author="rstoya05-aop" created="Mon, 4 Nov 2013 11:44:07 +0000"  >&lt;p&gt;This was resolved a while back (see &lt;a href=&quot;https://jira.spring.io/browse/SPR-9914&quot; title=&quot;Provide a way to handle timeouts for Servlet 3 async requests&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-9914&quot;&gt;&lt;del&gt;SPR-9914&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        3 years, 7 weeks, 3 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 30 Aug 2012 08:33:44 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>rstoya05-aop</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i05t2v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33917</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>