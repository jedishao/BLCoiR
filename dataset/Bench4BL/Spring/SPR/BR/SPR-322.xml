<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:32:01 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-322/SPR-322.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-322] SingletonBeanFactoryLocator uses URL *Strings* instead of object-references for resources</title>
                <link>https://jira.spring.io/browse/SPR-322</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;Spring&apos;s BeanFactory uses the UrlResource to reference a resource. It does this by using the String representation of a resource (instead of the URL object returned by Class.getResource()).&lt;/p&gt;

&lt;p&gt;Orion ApplicationServer (but other appserver may experience the same behaviour) returns a jndi://.. String, which it cannot interpret later on. &lt;/p&gt;

&lt;p&gt;The offending line:&lt;br/&gt;
resources&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; = url.toExternalForm();&lt;/p&gt;

&lt;p&gt;Proposed solution: use object-references (instead of Strings) to locate resources.&lt;/p&gt;

&lt;p&gt;Stacktrace:&lt;br/&gt;
org.springframework.beans.factory.BeanDefinitionStoreException: Bad URL when loading definition; nested exception is java.net.MalformedURLException: unknown protocol: jndi&lt;br/&gt;
java.net.MalformedURLException: unknown protocol: jndi&lt;br/&gt;
	at java.net.URL.&amp;lt;init&amp;gt;(URL.java:544)&lt;br/&gt;
	at java.net.URL.&amp;lt;init&amp;gt;(URL.java:434)&lt;br/&gt;
	at java.net.URL.&amp;lt;init&amp;gt;(URL.java:383)&lt;br/&gt;
	at org.springframework.core.io.UrlResource.&amp;lt;init&amp;gt;(UrlResource.java:54)&lt;br/&gt;
	at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.createDefinition(SingletonBeanFactoryLocator.java:477)&lt;br/&gt;
	at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:385)&lt;/p&gt;</description>
            <key id="10544">SPR-322</key>
            <summary>SingletonBeanFactoryLocator uses URL *Strings* instead of object-references for resources</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="colin.sampaleanu">Colin Sampaleanu</assignee>
                                    <reporter username="barryl">Barry Lagerweij</reporter>
                        <labels>
                    </labels>
                <created>Wed, 8 Sep 2004 22:38:40 +0000</created>
                <updated>Sun, 26 Sep 2004 09:23:19 +0000</updated>
                            <resolved>Fri, 24 Sep 2004 09:22:52 +0000</resolved>
                                                    <fixVersion>1.1.1</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="11014" author="chrisborrill" created="Thu, 9 Sep 2004 16:21:56 +0000"  >&lt;p&gt;I too have encountered this bug in, but I my case in Oracle OC4J (v9.0.4).  To solve the problem I created my own version of this class as follows.  Changes are a new version of getAllDefinitionResources(), replacing new UrlResource() with new ClassPathResource() in createDefinition() and commenting out url stuff in useBeanFactory().&lt;/p&gt;

&lt;p&gt;public class SingletonBeanFactoryLocator implements BeanFactoryLocator {&lt;/p&gt;

&lt;p&gt;	public static final String BEANS_REFS_XML_NAME = &quot;beanRefFactory.xml&quot;;&lt;/p&gt;

&lt;p&gt;	protected static final Log logger = LogFactory.getLog(SingletonBeanFactoryLocator.class);&lt;/p&gt;

&lt;p&gt;	// the keyed singleton instances&lt;br/&gt;
	private static Map instances = new HashMap();&lt;/p&gt;


&lt;p&gt;	// we map BeanFactoryGroup objects by String keys, and by the definition object&lt;br/&gt;
	private Map bfgInstancesByKey = new HashMap();&lt;/p&gt;

&lt;p&gt;	private Map bfgInstancesByObj = new HashMap();&lt;/p&gt;

&lt;p&gt;	private String resourceName;&lt;/p&gt;


&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Returns an instance which uses the default &quot;beanRefFactory.xml&quot;, as the name of the&lt;/li&gt;
	&lt;li&gt;definition file(s). All resources returned by the current thread&apos;s context&lt;/li&gt;
	&lt;li&gt;classloader&apos;s getResources() method with this name will be combined to create a&lt;/li&gt;
	&lt;li&gt;definition, which is just a BeanFactory.&lt;br/&gt;
	 */&lt;br/&gt;
	public static BeanFactoryLocator getInstance() throws FatalBeanException 
{
		return getInstance(BEANS_REFS_XML_NAME);
	}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Returns an instance which uses the the specified selector, as the name of the&lt;/li&gt;
	&lt;li&gt;definition file(s). All resources returned by the current thread&apos;s context&lt;/li&gt;
	&lt;li&gt;classloader&apos;s getResources() method with this name will be combined to create a&lt;/li&gt;
	&lt;li&gt;definition, which is just a a BeanFactory.&lt;/li&gt;
	&lt;li&gt;@param selector the name of the resource(s) which will be read and combine to&lt;/li&gt;
	&lt;li&gt;form the definition for the SingletonBeanFactoryLocator instance&lt;br/&gt;
	 */&lt;br/&gt;
	public static BeanFactoryLocator getInstance(String selector) throws FatalBeanException {&lt;br/&gt;
		synchronized (instances) 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {			// debugging trace only			//if (logger.isDebugEnabled()) {
			//	logger.debug(&quot;SingletonBeanFactoryLocator.getInstance(): instances.hashCode=&quot; +
			//	             instances.hashCode() + &quot;, instances=&quot; + instances);
			//}			BeanFactoryLocator bfl = (BeanFactoryLocator) instances.get(selector);			if (bfl == null) {
				bfl = new SingletonBeanFactoryLocator(selector);
				instances.put(selector, bfl);
			}			return bfl;		}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;	}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructor which uses the default &quot;beanRefFactory.xml&quot;, as the name of the&lt;/li&gt;
	&lt;li&gt;definition file(s). All resources returned by the definition classloader&apos;s&lt;/li&gt;
	&lt;li&gt;getResources() method with this name will be combined to create a definition.&lt;br/&gt;
	 */&lt;br/&gt;
	protected SingletonBeanFactoryLocator() 
{
		this.resourceName = BEANS_REFS_XML_NAME;
	}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Constructor which uses the the specified name as the name of the&lt;/li&gt;
	&lt;li&gt;definition file(s). All resources returned by the definition classloader&apos;s&lt;/li&gt;
	&lt;li&gt;getResources() method with this name will be combined to create a definition&lt;/li&gt;
	&lt;li&gt;definition.&lt;br/&gt;
	 */&lt;br/&gt;
	protected SingletonBeanFactoryLocator(String resourceName) 
{
		this.resourceName = resourceName;
	}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	// see superclass JavaDoc: org.springframework.beans.factory.access.BeanFactoryLocator#useBeanFactory(java.lang.String)&lt;br/&gt;
	public BeanFactoryReference useBeanFactory(String factoryKey) throws BeansException {&lt;br/&gt;
		synchronized (this.bfgInstancesByKey) {&lt;br/&gt;
			BeanFactoryGroup bfg = (BeanFactoryGroup) this.bfgInstancesByKey&lt;br/&gt;
					.get(this.resourceName);&lt;/p&gt;

&lt;p&gt;			if (bfg != null) {&lt;br/&gt;
				// debugging trace only&lt;br/&gt;
				//if (logger.isDebugEnabled()) &lt;/p&gt;
{
				//	logger.debug(&quot;Factory group with resourceName &apos;&quot; + this.resourceName
				//			+ &quot;&apos; requested. Using existing instance.&quot;);
				//}
&lt;p&gt;				bfg.refCount++;&lt;br/&gt;
			}&lt;br/&gt;
			else {&lt;br/&gt;
				// this group definition doesn&apos;t exist, we need to try to load it&lt;br/&gt;
				String [] resources;&lt;br/&gt;
				resources = getAllDefinitionResources(this.resourceName);&lt;/p&gt;

&lt;p&gt;				if (logger.isDebugEnabled()) &lt;/p&gt;
{
					logger.debug(&quot;Factory group with resourceName &apos;&quot; + this.resourceName
							+ &quot;&apos; requested. Creating new instance.&quot;);
				}

&lt;p&gt;				int numResources = resources.length;&lt;br/&gt;
				if (numResources == 0)&lt;br/&gt;
					throw new FatalBeanException(&lt;br/&gt;
							&quot;Unable to find definition for specified definition. Group:&quot;&lt;br/&gt;
									+ this.resourceName + &quot;, contextId:&quot; + factoryKey);&lt;br/&gt;
/*&lt;br/&gt;
				String[] resources = new String&lt;span class=&quot;error&quot;&gt;&amp;#91;numResources&amp;#93;&lt;/span&gt;;&lt;br/&gt;
				Iterator it = resourceUrls.iterator();&lt;br/&gt;
				for (int i = 0; i &amp;lt; numResources; ++i) &lt;/p&gt;
{
					URL url = (URL) it.next();
					resources[i] = url.toExternalForm();
          logger.debug(&quot;URL:&quot; + url + &quot;-&amp;gt; resourse:&quot; + resources[i]);
				}
&lt;p&gt;*/&lt;br/&gt;
				BeanFactory groupContext = createDefinition(resources);&lt;/p&gt;

&lt;p&gt;				bfg = new BeanFactoryGroup();&lt;br/&gt;
				bfg.definition = groupContext;&lt;br/&gt;
				bfg.refCount = 1;&lt;br/&gt;
				this.bfgInstancesByKey.put(this.resourceName, bfg);&lt;br/&gt;
				this.bfgInstancesByObj.put(groupContext, bfg);&lt;br/&gt;
			}&lt;/p&gt;

&lt;p&gt;			final BeanFactory groupContext = bfg.definition;&lt;/p&gt;

&lt;p&gt;			String lookupId = factoryKey;&lt;br/&gt;
			Object bean;&lt;br/&gt;
			try &lt;/p&gt;
{
				bean = groupContext.getBean(lookupId);
			}
&lt;p&gt;			catch (BeansException e) &lt;/p&gt;
{
				throw new FatalBeanException(
						&quot;Unable to return specified BeanFactory instance: factoryKey=&quot;
								+ factoryKey + &quot;, from group with resourceName: &quot;
								+ this.resourceName, e);
			}

&lt;p&gt;			if (bean instanceof String) {&lt;br/&gt;
				// we have some indirection&lt;br/&gt;
				lookupId = (String) bean;&lt;br/&gt;
				try &lt;/p&gt;
{
					bean = groupContext.getBean(lookupId);
				}
&lt;p&gt;				catch (BeansException e) &lt;/p&gt;
{
					throw new FatalBeanException(
							&quot;Unable to return specified BeanFactory instance: lookupId=&quot;
									+ lookupId + &quot;, factoryKey=&quot; + factoryKey
									+ &quot;, from group with resourceName: &quot;
									+ this.resourceName, e);
				}
&lt;p&gt;			}&lt;/p&gt;

&lt;p&gt;			if (!(bean instanceof BeanFactory))&lt;br/&gt;
				throw new FatalBeanException(&lt;br/&gt;
						&quot;Returned bean is not BeanFactory or its subclass. lookupId=&quot;&lt;br/&gt;
								+ lookupId + &quot;, factoryKey=&quot; + factoryKey&lt;br/&gt;
								+ &quot;, from group with resourceName: &quot; + this.resourceName&lt;br/&gt;
								+ &quot;. Returned cbject class is: &quot; + bean.getClass());&lt;/p&gt;

&lt;p&gt;			final BeanFactory beanFactory = (BeanFactory) bean;&lt;/p&gt;

&lt;p&gt;			return new BeanFactoryReference() {&lt;/p&gt;

&lt;p&gt;				BeanFactory groupContextRef;&lt;/p&gt;

&lt;p&gt;				// constructor&lt;/p&gt;
				{
					this.groupContextRef = groupContext;
				}

&lt;p&gt;				public BeanFactory getFactory() &lt;/p&gt;
{
					return beanFactory;
				}

&lt;p&gt;				public void release() throws FatalBeanException {&lt;br/&gt;
					synchronized (bfgInstancesByKey) {&lt;br/&gt;
						BeanFactoryGroup bfg = (BeanFactoryGroup) bfgInstancesByObj.get(this.groupContextRef);&lt;br/&gt;
						if (bfg != null) {&lt;br/&gt;
							bfg.refCount--;&lt;br/&gt;
							if (bfg.refCount == 0) &lt;/p&gt;
{
								destroyDefinition(this.groupContextRef, resourceName);
								bfgInstancesByKey.remove(resourceName);
								bfgInstancesByObj.remove(this.groupContextRef);
							}
&lt;p&gt;						}&lt;br/&gt;
						else &lt;/p&gt;
{
							logger.warn(&quot;Tried to release a SingletonBeanFactoryLocator (or subclass) group definition &quot; +
													&quot;more times than it has actually been used. resourceName=&apos;&quot; + resourceName + &quot;&apos;&quot;);
						}
&lt;p&gt;					}&lt;br/&gt;
				}&lt;br/&gt;
			};&lt;br/&gt;
		}&lt;br/&gt;
	}&lt;/p&gt;

&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Actually creates definition in the form of a BeanFactory, given an array of URLs&lt;/li&gt;
	&lt;li&gt;representing resources which should be combined. This is split out as a separate&lt;/li&gt;
	&lt;li&gt;method so that subclasses can override the actual type uses (to be an&lt;/li&gt;
	&lt;li&gt;ApplicationContext, for example).&lt;br/&gt;
	 */&lt;br/&gt;
	protected BeanFactory createDefinition(String[] resources) throws BeansException 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {		DefaultListableBeanFactory factory = new DefaultListableBeanFactory();		XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(factory);		for (int i = 0; i &amp;lt; resources.length; ++i) {
			//reader.loadBeanDefinitions(new UrlResource(resources[i]));
			reader.loadBeanDefinitions(new ClassPathResource(resources[i]));
		}		factory.preInstantiateSingletons();		return factory;	}&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Destroy definition in separate method so subclass may work with other definition types&lt;br/&gt;
     */&lt;br/&gt;
	protected void destroyDefinition(BeanFactory groupDef, String resourceName) throws BeansException {&lt;br/&gt;
		if (groupDef instanceof ConfigurableBeanFactory) 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {			// debugging trace only			if (logger.isDebugEnabled()) {
				logger.debug(&quot;Factory group with resourceName &apos;&quot;
						+ resourceName
						+ &quot;&apos; being released, as no more references.&quot;);
			}			((ConfigurableBeanFactory) groupDef).destroySingletons();		}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;	}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Method which returns resources (as URLs) which make up the definition of one&lt;/li&gt;
	&lt;li&gt;bean factory/application context.&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;Protected so that test cases may subclass this class and override this&lt;/li&gt;
	&lt;li&gt;method to avoid the need for multiple classloaders to test multi-file&lt;/li&gt;
	&lt;li&gt;capability in the rest of the class.&lt;br/&gt;
	 &lt;b&gt;//&lt;/b&gt;&lt;br/&gt;
	protected Collection getAllDefinitionResources(String resourceName) throws IOException 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {		ClassLoader cl = Thread.currentThread().getContextClassLoader();		// don&amp;#39;t depend on JDK 1.4, do our own conversion		Enumeration resourceEnum = cl.getResources(resourceName);		Collection list = new ArrayList();		while (resourceEnum.hasMoreElements()) {
			list.add(resourceEnum.nextElement());
		}		return list;	}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;*/&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  protected String [] getAllDefinitionResources(String resourceName) {&lt;br/&gt;
    String beanFactoryPath = null;&lt;br/&gt;
		try &lt;/p&gt;
{
			beanFactoryPath = (String) (new JndiTemplate()).lookup(resourceName);
			logger.info(&quot;BeanFactoryPath from JNDI is [&quot; + beanFactoryPath + &quot;]&quot;);
			String[] paths = StringUtils.tokenizeToStringArray(beanFactoryPath,
				JndiBeanFactoryLocator.BEAN_FACTORY_PATH_DELIMITERS, true, true);
			return paths;
		}
&lt;p&gt;		catch (NamingException ex) &lt;/p&gt;
{
			throw new BootstrapException(&quot;Define an environment variable &apos;ejb/BeanFactoryPath&apos; containing &quot; +
			                             &quot;the class path locations of XML bean definition files&quot;, ex);
		}
&lt;p&gt;  }&lt;/p&gt;



&lt;p&gt;	// We track BeanFactory instances with this class&lt;br/&gt;
	private static class BeanFactoryGroup &lt;/p&gt;
{

		private BeanFactory definition;

		private int refCount = 0;
	}

&lt;p&gt;}&lt;/p&gt;</comment>
                            <comment id="11047" author="juergen.hoeller" created="Fri, 17 Sep 2004 02:08:02 +0000"  >&lt;p&gt;Colin, could you please have a look at this issue till 1.1.1, due in two weeks? If you don&apos;t have the chance within that timeframe, I&apos;ll look at it myself.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="11048" author="colin.sampaleanu" created="Fri, 17 Sep 2004 18:46:53 +0000"  >&lt;p&gt;I will look at this after the 21st, when I am back home&lt;/p&gt;</comment>
                            <comment id="11072" author="juergen.hoeller" created="Thu, 23 Sep 2004 05:41:28 +0000"  >&lt;p&gt;Colin, have you already had a chance to look at this? If it&apos;s easy enough, it would be great to have this fix for 1.1.1 (till Monday). Else, let&apos;s simply defer it till 1.1.2.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                            <comment id="11073" author="colin.sampaleanu" created="Thu, 23 Sep 2004 06:35:32 +0000"  >&lt;p&gt;Just took a look at this.&lt;/p&gt;

&lt;p&gt;The reason I originally used the (external) string representation of the URL returned by getResource is that in the ContextSingletonBeanFactoryLocator subclass, I feed the resource locations (external form) as the String-form constructor argument (configLocations) to the FileSystemXmlApplicationContext. The URL objects can not be used directly since of course the AppContext can be refreshed later.&lt;/p&gt;

&lt;p&gt;Now in the meantime, Spring has added support for classpath names of the form:&lt;br/&gt;
  classpath*:xxxxx&lt;/p&gt;

&lt;p&gt;where this can be fed directly as a ClasspathXmlApplicationContext constructor param. So the work that SingletonBeanFactoryLocator does to load all the definition files with the same name can now be delegated to Spring itself, just by prepending &apos;classpath*:&apos; to the resource name. It should be quite trivial to make this change, with no ill-effects for users of the unmodified classes. However, this will break things for anybody that has subclassed these classes. I don&apos;t know whether this is acceptable or not, although the only reason anybody has probably subclassed these classes is to actually fix this behaviour.&lt;/p&gt;

&lt;p&gt;Comments?&lt;/p&gt;</comment>
                            <comment id="11084" author="juergen.hoeller" created="Fri, 24 Sep 2004 02:38:35 +0000"  >&lt;p&gt;Sounds plausible to me. I don&apos;t expect anyone to having subclasses these anyway, and I do think that the new version would be nicer. I vote to go for it for 1.1.1 (which I plan to release Tuesday morning).&lt;/p&gt;

&lt;p&gt;Juergen &lt;/p&gt;</comment>
                            <comment id="11100" author="colin.sampaleanu" created="Fri, 24 Sep 2004 09:22:52 +0000"  >&lt;p&gt;Modified both SingletonBeanFactoryLocator and ContextSingletonBeanFactoryLocator to no longer use the URL external form. The code now uses the &apos;classpath*:XXXX&apos; form for refering to the definition file(s), and for SingletonBeanFactoryLocator uses Spring&apos;s support libs for resolving that to one or more Resources which are used to build the BeanFactory, while for ContextSingletonBeanFactoryLocator, the resourcename is just fed as-is to the ClassPathXmlApplicationContext constructor, since that can deal with config locatins with that prefix.&lt;/p&gt;

&lt;p&gt;Existing users of the classes should not be affected at all. Existing custom subclasses of the classes will probably break, although it is unlikely almost anybody has actually subclassed them.&lt;/p&gt;

&lt;p&gt;Barry and Chris, is there any chance you can pull the code from CVS and try it in your environment?&lt;/p&gt;</comment>
                            <comment id="11118" author="barryl" created="Sun, 26 Sep 2004 09:23:19 +0000"  >&lt;p&gt;Did a fresh checkout from CVS: Works like a charm !&lt;/p&gt;

&lt;p&gt;Thanks for the quick fix.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        12 years, 14 weeks, 4 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 9 Sep 2004 16:21:56 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>true</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04y7b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>28915</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>