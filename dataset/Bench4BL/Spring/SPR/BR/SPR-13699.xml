<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 19:35:03 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-13699/SPR-13699.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-13699] My suggestion for Spring Cache</title>
                <link>https://jira.spring.io/browse/SPR-13699</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;I  know there is a Cacheable annotation which first check whether there exists a value ,and if it is null , it  invokes the target method and then  put the result into cache. But this operation has a  &quot;put if null&quot;  race condition in muti-thread situation. &lt;/p&gt;

&lt;p&gt;My suggestion is : 1, remove @Cacheable  2, create a new  @CacheGet ,this annotation will get value from the cache, if it is null ,it simply invokes  the target method and do nothing else,when value returns, it returns it  3, in order to  realize the function of @Cacheable ,we can  annotated a method with two annotations ,one is  @CacheGet ,another is @CachePut ,the @Cacheput means to  put the result into cache after the method executes (may also add a condition attribute to judge whether to put the value into cache).  &lt;/p&gt;

&lt;p&gt;Now , @CacheGet and @CachePut  are  atomic  operations  ,this will provide more flexible for user ,it&apos;s like invoking get and put method directly  on cache.  &lt;/p&gt;
</description>
            <key id="66770">SPR-13699</key>
            <summary>My suggestion for Spring Cache</summary>
                <type id="4" iconUrl="https://jira.spring.io/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="snicoll">St&#233;phane Nicoll</assignee>
                                    <reporter username="luchy0120">Lu Qi</reporter>
                        <labels>
                            <label>spring</label>
                    </labels>
                <created>Wed, 18 Nov 2015 13:01:07 +0000</created>
                <updated>Wed, 25 Nov 2015 12:00:32 +0000</updated>
                            <resolved>Wed, 25 Nov 2015 12:00:32 +0000</resolved>
                                    <version>4.2.1</version>
                                                    <component>Caching</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="121876" author="snicoll" created="Wed, 25 Nov 2015 12:00:32 +0000"  >&lt;p&gt;That problem is going to be handled in &lt;a href=&quot;https://jira.spring.io/browse/SPR-9254&quot; title=&quot;Provide means to configure multithreaded access for cache abstraction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-9254&quot;&gt;&lt;del&gt;SPR-9254&lt;/del&gt;&lt;/a&gt; - Removing &lt;tt&gt;@Cacheable&lt;/tt&gt; is not an option as it would totally break backward compatibility.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        1 year, 4 weeks, 1 day ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 25 Nov 2015 12:00:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>snicoll</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i08wqn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>