<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 20:09:17 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/SPR-1891/SPR-1891.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[SPR-1891] Deadlock possible when closing AbstractApplicationContext while a separate thread tries to create bean</title>
                <link>https://jira.spring.io/browse/SPR-1891</link>
                <project id="10000" key="SPR">Spring Framework</project>
                    <description>&lt;p&gt;A deadlock can occur if a thread closes an application context and a second thread then tries to get a singleton bean which it needs to create (bean has not been created yet). The two threads are trying to synchronize on two locks but in opposite order.&lt;/p&gt;

&lt;p&gt;A simple fix may be to change AbstractApplicationContext.destroySingletons() to:&lt;br/&gt;
synchronized (this.singletonCache) {&lt;br/&gt;
    synchronized (this.disposableBeans) {&lt;br/&gt;
            String[] disposableBeanName = StringUtils.toStringArray(this.disposableBeans.keySet());&lt;br/&gt;
            for (int i = 0; i &amp;lt; disposableBeanName.length; i++) &lt;/p&gt;
{
                destroyDisposableBean(disposableBeanName[i]);
            }
&lt;p&gt;        }&lt;br/&gt;
    this.singletonCache.clear();&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;But I have not tested that fix or investigated the code enough to know the implications of that change.&lt;/p&gt;

&lt;p&gt;Stack trace from version 1.2.7.&lt;/p&gt;

&lt;p&gt;Thread 1:&lt;br/&gt;
at org.springframework.beans.factory.support.AbstractBeanFactory.removeSingleton(AbstractBeanFactory.java:520)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;waiting to lock &amp;lt;0x00002aaafa700b70&amp;gt; (a java.util.HashMap)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractBeanFactory.destroyDisposableBean(AbstractBeanFactory.java:995)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractBeanFactory.destroyBean(AbstractBeanFactory.java:1024)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractBeanFactory.destroyDisposableBean(AbstractBeanFactory.java:1002)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractBeanFactory.destroyBean(AbstractBeanFactory.java:1024)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractBeanFactory.destroyDisposableBean(AbstractBeanFactory.java:1002)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractBeanFactory.destroyBean(AbstractBeanFactory.java:1024)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractBeanFactory.destroyDisposableBean(AbstractBeanFactory.java:1002)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractBeanFactory.destroySingletons(AbstractBeanFactory.java:566)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0x00002aaafa7220d0&amp;gt; (a java.util.LinkedHashMap)&lt;br/&gt;
        at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:512)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thread 2:&lt;br/&gt;
 at org.springframework.beans.factory.support.AbstractBeanFactory.registerDisposableBeanIfNecessary(AbstractBeanFactory.java:905)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;waiting to lock &amp;lt;0x00002aaafa7220d0&amp;gt; (a java.util.LinkedHashMap)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:408)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:233)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0x00002aaafa700b70&amp;gt; (a java.util.HashMap)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)&lt;br/&gt;
        at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:186)&lt;br/&gt;
        at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1046)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:857)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:378)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:233)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0x00002aaafa700b70&amp;gt; (a java.util.HashMap)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)&lt;br/&gt;
        at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:186)&lt;br/&gt;
        at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1046)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:857)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:378)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:233)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0x00002aaafa700b70&amp;gt; (a java.util.HashMap)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)&lt;br/&gt;
        at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:186)&lt;br/&gt;
        at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1046)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:857)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:378)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:252)&lt;br/&gt;
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)&lt;br/&gt;
        at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:537)&lt;/li&gt;
&lt;/ul&gt;
</description>
            <key id="13738">SPR-1891</key>
            <summary>Deadlock possible when closing AbstractApplicationContext while a separate thread tries to create bean</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="juergen.hoeller">Juergen Hoeller</assignee>
                                    <reporter username="babsjr77">Richie Jefts</reporter>
                        <labels>
                    </labels>
                <created>Wed, 12 Apr 2006 07:40:11 +0000</created>
                <updated>Tue, 19 Jun 2012 03:52:44 +0000</updated>
                            <resolved>Tue, 18 Apr 2006 03:30:09 +0000</resolved>
                                    <version>1.2.7</version>
                    <version>2.0 M3</version>
                                    <fixVersion>1.2.8</fixVersion>
                    <fixVersion>2.0 M4</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="17227" author="juergen.hoeller" created="Tue, 18 Apr 2006 03:30:09 +0000"  >&lt;p&gt;Thanks for the report! I have adopted your suggestion: Obtaining the singletonCache lock early seems to be correct in the overall process anyway.&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10180" key="com.atlassian.jira.toolkit:dayslastcommented">
                        <customfieldname>Days since last comment</customfieldname>
                        <customfieldvalues>
                                        10 years, 37 weeks, 2 days ago
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 18 Apr 2006 03:30:09 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10181" key="com.atlassian.jira.toolkit:lastusercommented">
                        <customfieldname>Last commented by a User</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>false</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10182" key="com.atlassian.jira.toolkit:lastupdaterorcommenter">
                        <customfieldname>Last updater</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>tmarshall</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i04cev:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>25385</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>