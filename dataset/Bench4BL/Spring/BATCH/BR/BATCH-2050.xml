<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 12:27:12 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/BATCH-2050/BATCH-2050.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[BATCH-2050] AbstractItemCountingItemStreamItemReader.read() shouldn&apos;t be final</title>
                <link>https://jira.spring.io/browse/BATCH-2050</link>
                <project id="10090" key="BATCH">Spring Batch</project>
                    <description>&lt;p&gt;when you use FlatfileItemWriter with StepScope (proxyTargetClass=true --&amp;gt; CGLib-Subclassing) the final method read() cannot be proxied correctly. So the &lt;b&gt;AbstractItemCountingItemStreamItemReader.currentItemCount&lt;/b&gt; is always persisted as 0 to the jobRepository.&lt;/p&gt;

&lt;p&gt;Code:&lt;/p&gt;

&lt;p&gt;&amp;lt;bean class=&quot;org.springframework.batch.core.scope.StepScope&quot; p:proxyTargetClass=&quot;true&quot; /&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;bean id=&quot;reader&quot; class=&quot;org.springframework.batch.item.file.FlatFileItemReader&quot; scope=&quot;step&quot;&amp;gt;&lt;br/&gt;
&amp;lt;property name=&quot;resource&quot; value=&quot;#&lt;/p&gt;
{jobParameters[pathToFile]}
&lt;p&gt;&quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;br/&gt;
&amp;lt;property name=&quot;lineMapper&quot; ref=&quot;lineMapper&quot;/&amp;gt;&lt;br/&gt;
&amp;lt;/bean&amp;gt;&lt;/p&gt;

&lt;p&gt;thx &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

</description>
                <environment></environment>
        <key id="49208">BATCH-2050</key>
            <summary>AbstractItemCountingItemStreamItemReader.read() shouldn&apos;t be final</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://jira.spring.io/images/icons/priorities/critical.png">Critical</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="8">Complete</resolution>
                                        <assignee username="mminella">Michael Minella</assignee>
                                    <reporter username="mahartma">Max Hartmann</reporter>
                        <labels>
                    </labels>
                <created>Tue, 18 Jun 2013 08:34:34 +0000</created>
                <updated>Fri, 13 Dec 2013 19:53:59 +0000</updated>
                            <resolved>Wed, 17 Jul 2013 12:04:19 +0000</resolved>
                                    <version>2.2.0</version>
                                    <fixVersion>2.2.1</fixVersion>
                                    <component>Infrastructure</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="91123" author="tobias79" created="Fri, 21 Jun 2013 06:01:05 +0000"  >&lt;p&gt;This is a very critical issue, because it affects the new JavaConfig configuration style. When using @StepScope, CGLIB is the default (with a good reason, because without CGLIB proxying, it&apos;s not possible to give a FlatFileItemReader step scope). This test reproduces the error: &lt;a href=&quot;https://github.com/codecentric/spring-batch-javaconfig/blob/master/src/test/java/de/codecentric/batch/FlatfileToDbWithParametersJobTests.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/codecentric/spring-batch-javaconfig/blob/master/src/test/java/de/codecentric/batch/FlatfileToDbWithParametersJobTests.java&lt;/a&gt;.&lt;br/&gt;
The CheckItemCountItemStream logs the read.count variable from the FlatFileItemReader. When executing the test, it always logs 0. When patching the read method of AbstractItemCountingItemStreamItemReader to not be final, the correct numbers are logged.&lt;/p&gt;

&lt;p&gt;It&apos;s critical because restart doesn&apos;t work anymore, but nobody will realize it until the mess is there.&lt;/p&gt;</comment>
                            <comment id="91126" author="mminella" created="Fri, 21 Jun 2013 06:30:31 +0000"  >&lt;p&gt;I&apos;m looking at this now, however I&apos;m thinking must be more to this.  All of the reader implementations provided by Spring Batch have the read method marked as final and have been for as long as I&apos;m aware (implying that this would have never worked). &lt;/p&gt;</comment>
                            <comment id="91143" author="mminella" created="Fri, 21 Jun 2013 10:02:40 +0000"  >&lt;p&gt;The issue seems to be not so much that the AbstractItemCountingItemStreamItemReader#read() is final, but that there is a mismatch between the read and update (either make them both final/not proxied or not/proxied).  However, this seems to be a very old issue (see &lt;a href=&quot;https://jira.spring.io/browse/SPR-1211&quot; title=&quot;problem when proxy class using CGLIB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;SPR-1211&quot;&gt;&lt;del&gt;SPR-1211&lt;/del&gt;&lt;/a&gt;), so I&apos;m wondering if there isn&apos;t another fix.  I&apos;m not in favor of making the read not final.  I would be more comfortable with making the update final (a couple other readers would need to be updated), however I still need to do a bit of research around that old issue first.&lt;/p&gt;</comment>
                            <comment id="91144" author="david_syer" created="Fri, 21 Jun 2013 10:03:00 +0000"  >&lt;p&gt;CGLib is only the default for Java config (and therefore only since 2.2.0 as well). No legacy code will be affected I think, unless it explicitly changed the default.&lt;/p&gt;</comment>
                            <comment id="91146" author="david_syer" created="Fri, 21 Jun 2013 10:07:00 +0000"  >&lt;p&gt;Rob&apos;s comment on that issue reminds me that I looked at this myself during the Spring 3.2 release.  The WARN log is all you get to tell you that it&apos;s using a fallback of some sort and it should be heeded.  I&apos;m pretty sure there is no way to tell the difference at runtime from the framework point of view between a dangerous error and a simple inconvenience.&lt;/p&gt;</comment>
                            <comment id="91147" author="mminella" created="Fri, 21 Jun 2013 10:07:42 +0000"  >&lt;p&gt;&lt;a href=&quot;https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer&quot; class=&quot;user-hover&quot; rel=&quot;david_syer&quot;&gt;Dave Syer&lt;/a&gt;, Are you referring to making the update final or making the read non-final?  Making the read final would require the HibernateCursorItemReader and at least one other to be refactored (they directly override the update method instead of a doUpdate).&lt;/p&gt;</comment>
                            <comment id="91153" author="mminella" created="Fri, 21 Jun 2013 14:46:48 +0000"  >&lt;p&gt;PR: &lt;a href=&quot;https://github.com/SpringSource/spring-batch/pull/191&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/SpringSource/spring-batch/pull/191&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="91154" author="jpraet" created="Fri, 21 Jun 2013 15:54:22 +0000"  >&lt;p&gt;I think making those open, update and close methods final won&apos;t solve the problem. Final methods are called directly on the CGLIB proxy instance, which will be shared across multiple step executions. Also, if subclasses of the AbstractItemCountingItemStreamItemReader are calling getCurrentItemCount() they will get 0.&lt;/p&gt;</comment>
                            <comment id="91310" author="tobias79" created="Wed, 26 Jun 2013 23:08:12 +0000"  >&lt;p&gt;I agree with Jimmy. If CGLIB cannot override those final methods, it cannot delegate its execution to the correct instance, that&apos;s why the methods are called directly on the proxy, which is possibly shared by different threads.&lt;br/&gt;
I agree that design-wise it would be much nicer to make all those methods final, but I don&apos;t see much of a choice here if you want to support CGLIB.&lt;br/&gt;
I would appreciate it if this issue could be solved in a soon to be released 2.2.1, because I really would like to use the JavaConfig features.&lt;/p&gt;</comment>
                            <comment id="91358" author="jpraet" created="Thu, 27 Jun 2013 13:45:42 +0000"  >&lt;p&gt;As a workaround you can configure the FlatFileItemReader as follows with JavaConfig:&lt;/p&gt;

&lt;p/&gt;
&lt;div id=&quot;syntaxplugin&quot; class=&quot;syntaxplugin&quot; style=&quot;border: 1px dashed #bbb; border-radius: 5px !important; overflow: auto; max-height: 30em;&quot;&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot; style=&quot;font-size: 1em; line-height: 1.4em !important; font-weight: normal; font-style: normal; color: black;&quot;&gt;
		&lt;tbody &gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;  margin-top: 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: gray; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;@Bean&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: gray; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;@Scope&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;(value=&lt;/span&gt;&lt;span style=&quot;color: blue; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&quot;step&quot;&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;, proxyMode=ScopedProxyMode.INTERFACES)&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; ItemStreamReader&amp;lt;Partner&amp;gt; reader(&lt;/span&gt;&lt;span style=&quot;color: gray; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;@Value&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: blue; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;&quot;#{jobParameters[pathToFile]}&quot;&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;) String pathToFile){&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;		FlatFileItemReader&amp;lt;Partner&amp;gt; itemReader = &lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; FlatFileItemReader&amp;lt;Partner&amp;gt;();&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;		itemReader.setLineMapper(lineMapper());&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;		itemReader.setResource(&lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; ClassPathResource(pathToFile));&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;		&lt;/span&gt;&lt;span style=&quot;color: #006699; font-weight: bold; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt; itemReader;&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
				&lt;tr id=&quot;syntaxplugin_code_and_gutter&quot;&gt;
						&lt;td  style=&quot; line-height: 1.4em !important; padding: 0em; vertical-align: top;&quot;&gt;
					&lt;pre style=&quot;font-size: 1em; margin: 0 10px;   margin-bottom: 10px;  width: auto; padding: 0;&quot;&gt;&lt;span style=&quot;color: black; font-family: &apos;Consolas&apos;, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace !important;&quot;&gt;	}	&lt;/span&gt;&lt;/pre&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
			&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p/&gt;

&lt;p&gt;Note the use of the ItemStreamReader interface. If you use ItemReader it doesn&apos;t work (the writer doesn&apos;t get registered as a stream).&lt;/p&gt;</comment>
                            <comment id="91364" author="tobias79" created="Thu, 27 Jun 2013 22:53:48 +0000"  >&lt;p&gt;Thanks for the workaround, Jimmy, I didn&apos;t know that interface existed.&lt;/p&gt;</comment>
                            <comment id="95701" author="belugabehr" created="Tue, 19 Nov 2013 21:08:25 +0000"  >&lt;p&gt;Just one more thought on this... sorry to raise the dead.  I came across this issue because I was going to request the same thing, but for another reason.  I wanted to create a synchronized JdbcCursorItemReader class by simply extending JdbcCursorItemReader and overriding the read() method with a synchronized version.  I was unable to do so because the method was final.  Consider removing &apos;final&apos; from all reader&apos;s read methods.&lt;/p&gt;</comment>
                            <comment id="95714" author="mminella" created="Wed, 20 Nov 2013 06:57:45 +0000"  >&lt;p&gt;&lt;a href=&quot;https://jira.spring.io/secure/ViewProfile.jspa?name=belugabehr&quot; class=&quot;user-hover&quot; rel=&quot;belugabehr&quot;&gt;David M&lt;/a&gt;, what would the benefit of a synchronized JdbcCursorItemReader be?&lt;/p&gt;</comment>
                            <comment id="95799" author="belugabehr" created="Thu, 21 Nov 2013 16:56:50 +0000"  >&lt;p&gt;I was using SB 2.1.9 so I was stuck.  I finally upgraded to 2.2.x and I was a bit disappointed that I had to upgrade to Spring-Core 3.x to accept it!  Shouldn&apos;t that have been SB 3.0?  It left me with a lot of regression/integration testing!  Anyway, I digress.  Upgrading did allow me to easily override the read() method in my JdbcCursorItemReader.  One of the jobs that I have is to copy files into a remote and backed-up archive directory.&lt;/p&gt;

&lt;p&gt;Archive Job:&lt;br/&gt;
1) Reader reads the list of files to archive from a database&lt;br/&gt;
2) Processor copies each file to a remote archive directory&lt;br/&gt;
3) Writer does a batch-update of a date field in the database to indicate that the files have been archived&lt;/p&gt;

&lt;p&gt;When there was only a single thread doing this job, it would take longer than desired by the customer.  By making the read() method synchronized and allowing for the inclusion of a task-executor I was able to almost double the through-put.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="95812" author="tobias79" created="Fri, 22 Nov 2013 05:37:13 +0000"  >&lt;p&gt;Just favor delegation over inheritance, and you wouldn&apos;t have been stuck &lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. It&apos;s easy to implement a synchronized ItemReader that delegates to the real ItemReader.&lt;/p&gt;</comment>
                            <comment id="95836" author="belugabehr" created="Fri, 22 Nov 2013 14:36:37 +0000"  >&lt;p&gt;Tobias,  I would suggest that one comes pre-packaged with SB.  Has there already been discussion on that?  Also, while I don&apos;t disagree with your suggetion, it felt a little silly to have to create a new delegating class when I already have to sub-class JdbcCursorItemReader.&lt;/p&gt;</comment>
                            <comment id="95837" author="mminella" created="Fri, 22 Nov 2013 14:44:27 +0000"  >&lt;p&gt;&lt;a href=&quot;https://jira.spring.io/secure/ViewProfile.jspa?name=belugabehr&quot; class=&quot;user-hover&quot; rel=&quot;belugabehr&quot;&gt;David M&lt;/a&gt;, &lt;a href=&quot;https://jira.spring.io/secure/ViewProfile.jspa?name=tobias79&quot; class=&quot;user-hover&quot; rel=&quot;tobias79&quot;&gt;Tobias Flohre&lt;/a&gt; is correct in the recommended way of handling that scenario.  Beyond that, we typically recommend the JdbcPagingItemReader for thread safe Jdbc reading (still doesn&apos;t provide restart functionality, but it&apos;s a better option typically).  Is there a reason you didn&apos;t select that option?&lt;/p&gt;</comment>
                            <comment id="96508" author="belugabehr" created="Fri, 13 Dec 2013 19:14:23 +0000"  >&lt;p&gt;Sorry for the long gap.  Why was it decided that PagingItemReader should be thread-safe, but not the JdbcCursorItemReader?  Why should I endure the overhead of paging when all I want to do is use a table as a queue and have different consuming threads?  Maybe I am not understanding the difference, but I just read the documentation again and it doesn&apos;t make it very clear why I should choose to use one over the other except to say that I found one forum post that mentions &quot;Cursors are the responsibility of the RDBMS vendor, so you might expect that they would be fairly robust. Unfortunately that isn&apos;t always the case.&quot;&lt;/p&gt;</comment>
                            <comment id="96509" author="mminella" created="Fri, 13 Dec 2013 19:53:59 +0000"  >&lt;p&gt;&lt;a href=&quot;https://jira.spring.io/secure/ViewProfile.jspa?name=belugabehr&quot; class=&quot;user-hover&quot; rel=&quot;belugabehr&quot;&gt;David M&lt;/a&gt; The short answer is that a ResultSet is not thread safe.  In the JdbcCurosrItemReader, all threads are accessing a shared ResultSet.  This is not a safe operation.  However, with the JdbcPagingItemReader, the shared resource the items are being returned from is a thread safe Collection (a CopyOnWriteArrayList to be specific).  It is because of this, that a JdbcCurosrItemReader is not considered thread safe and the JdbcPagingItemReader is.  In either case, state management must be turned off because it is not maintained in an accurate way (eliminating restart capabilities).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 21 Jun 2013 06:01:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35716</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i06dxj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37295</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35418</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>