<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 12:00:45 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/BATCH-1753/BATCH-1753.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[BATCH-1753] Problems With FlatFileItemWriter: error while trying to restart an execution </title>
                <link>https://jira.spring.io/browse/BATCH-1753</link>
                <project id="10090" key="BATCH">Spring Batch</project>
                    <description>&lt;p&gt;We are having problems with property &quot;shouldDeleteIfEmpty&quot; from FlatFileItemWriter.&lt;/p&gt;

&lt;p&gt;If an error occurs during an execution, we are unable to restart application because the re-execution cannot find the files created at first time. For example:&lt;/p&gt;

&lt;p&gt;Application functionality:&lt;br/&gt;
We have an application which receive an input file &quot;INPUT.TXT&quot;. The invalid data from input file gets a &quot;rejected&quot; status and are recorded in a file named &quot;INPUT.TXT.REJ&quot;. The valid data are processed and generate an output file &quot;OUTPUT.TXT&quot;.&lt;br/&gt;
Both files, output and rejected, are generated by FlatFileItemWriter, and they have property &quot;shouldDeleteIfEmpty&quot; with value=true.&lt;/p&gt;

&lt;p&gt;Error scenario:&lt;br/&gt;
If we didn&apos;t give reading permission and execute the application, it will not be able to read INPUT.TXT file. So an exception is thrown. Then we give reading permission, and try to re-execute the application. Another Exception is thrown because the application cannot read the output file or the rejected file that were created at first execution. The files were deleted because when the error occurred both files were empty.&lt;/p&gt;

&lt;p&gt;Because of these problems we can&apos;t execute reprocessing. I believe the re-execution should be able to create a new file if it doesn&apos;t exists.&lt;/p&gt;</description>
                <environment>Linux 2.6.18-194.el5</environment>
        <key id="38043">BATCH-1753</key>
            <summary>Problems With FlatFileItemWriter: error while trying to restart an execution </summary>
                <type id="7" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Defect</type>
                                            <priority id="2" iconUrl="https://jira.spring.io/images/icons/priorities/critical.png">Critical</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="8">Complete</resolution>
                                        <assignee username="david_syer">Dave Syer</assignee>
                                    <reporter username="allan.guerra">Allan Barrach Guerra</reporter>
                        <labels>
                            <label>error-reporting</label>
                    </labels>
                <created>Thu, 19 May 2011 09:36:12 +0000</created>
                <updated>Wed, 27 Jun 2012 02:34:38 +0000</updated>
                            <resolved>Wed, 27 Jun 2012 02:34:38 +0000</resolved>
                                    <version>2.1.7</version>
                                    <fixVersion>2.1.9</fixVersion>
                                    <component>Infrastructure</component>
                        <due></due>
                            <votes>3</votes>
                                    <watches>7</watches>
                                    <timeoriginalestimate seconds="115200">4d</timeoriginalestimate>
                            <timeestimate seconds="115200">4d</timeestimate>
                                        <comments>
                            <comment id="66575" author="lucas.l.ward" created="Thu, 19 May 2011 10:19:37 +0000"  >&lt;p&gt;Let me reword this slightly, to make sure I understand:  The FlatFileItemWriter operates on the assumption in a restart scenario that at a minimum the file was at least created even if no data was written to it.  However, in your scenario if the ItemReader fails on ItemStream#open, then it&apos;s possible (if not likely) that the subsequent open call isn&apos;t made on the writer.  Thus, when the second execution of the instance starts the writer rightly assumes its a restart and looks for the file to either append or delete if it&apos;s empty (depending upon config).  However, due to the aforementioned problem there is no file and the FFIW fails spectacularly.  Since no data is read, you can work around this by forcing a new instance (i.e. change parameters)  However, that is less than ideal.  I would need to verify this behavior in a test case.  However, given my cursory glance at the code, I can see how that behavior can happen.  I don&apos;t think there is any contract in the ItemStream interface indicating that if one stream fails to open they will all be called before the execution fails.  Therefore, the reader should handle that gracefully.&lt;/p&gt;</comment>
                            <comment id="66609" author="allan.guerra" created="Fri, 20 May 2011 07:27:51 +0000"  >&lt;p&gt;Good morning Lucas,&lt;/p&gt;

&lt;p&gt;I made some research on my application here and I noticed that the error occurs in another scenario. I mean, in the one described on my other post the error won&apos;t happen, it works perfectly. Sorry about the confusion, I will describe the right scenario here, the one that actually have the error. &lt;/p&gt;

&lt;p&gt;Application functionality is the same as described before.&lt;/p&gt;

&lt;p&gt;Error scenario: &lt;br/&gt;
We have a large input file to process, it have the read/execute permission and the application starts to process it. But, for some reason we suddenly need to stop the application. We use the option &quot;-stop&quot; to stop the job. When we do this, the application will finish processing the current block, will commit it and then finally stop. If one of the files, output or rejected, are empty the job deletes it on stop.&lt;br/&gt;
When we restart the application the mentioned error occurs. The job don&apos;t find the file that were created on prior execution and can&apos;t continue the processing.&lt;/p&gt;

&lt;p&gt;This is the right scenario, sorry again about the confusion.&lt;/p&gt;</comment>
                            <comment id="66613" author="lucas.l.ward" created="Fri, 20 May 2011 09:00:45 +0000"  >&lt;p&gt;I&apos;m confused.  The shouldDeleteIfEmpty setting controls whether the file will deleted.   If false it won&apos;t delete it.  Have you set it to be true?  (It&apos;s false by default)&lt;/p&gt;

&lt;p&gt;We have to be very careful here, as 99% of the cases the file not existing on a restart is an error that should definitely cause the job to fail.  I wouldn&apos;t want to make file output restart more dangerous to handle the 1% scenario that only happens if a the default setting is changed.  Having said that, its probably worth looking into some of the restart scenarios and how the saved state can give us clues.  Meaning, a lack of entires in the EC, or a count of 0 might lead us to handling the scenario better.(if shouldDeleteIfExists is true)  However, if there is any doubt at all, SB is going to fail.  Its better to fail than cause records to go missing in a restart scenario.  Most users can code around scenarios if they deem it necessary, but only because they know their situation completely and can make assumptions that a framework simply can&apos;t.  Its still worth writing up some test cases though.  Feel free to write some up yourself as well.  If you fork on git hub and make a pull request, we&apos;ll look into it.&lt;/p&gt;</comment>
                            <comment id="66615" author="allan.guerra" created="Fri, 20 May 2011 09:42:06 +0000"  >&lt;p&gt;Yes we set the shouldDeleteIfEmpty to be true. &lt;/p&gt;

&lt;p&gt;I understand the problem of records to go missing, but I can&apos;t see how it can happen. If you have a file and the shouldDeleteIfEmpty is false, the file won&apos;t be deleted, either if it is empty or not. But if you have a file with the property as true, the file would only be deleted if it&apos;s empty, and, if it&apos;s empty, there&apos;s no data missing. &lt;/p&gt;

&lt;p&gt;I believe spring batch shouldn&apos;t delete the file before the execution is completely finished. The option is avaiable but it doesn&apos;t work properly. If you have the option to set it true, this configuration should be able to execute the restart.&lt;/p&gt;
</comment>
                            <comment id="66616" author="lucas.l.ward" created="Fri, 20 May 2011 11:57:10 +0000"  >&lt;p&gt;So, the problem is that nothing in infrastructure knows anything about core.  This was done intentionally such that someone can use all of our readers and writers without pulling in the entire processing framework.  I&apos;ve used it more than once to read large files in a web app.  Unfortunately, that also means when close is called, the writers have no context as to why.  They&apos;re just supposed to clean up after themselves as best they can.  So, there is no way for the FFIW to know that the close was called because of a failure or not, and when it&apos;s opened again as in a restart scenario.  If it were me, I wouldn&apos;t use shouldDeleteFileIfEmpty at all.  I would add an afterStep listener and delete the file if status is complete, and then there wouldn&apos;t be a problem at all.&lt;/p&gt;

&lt;p&gt;I would like to make one point though, regarding this statement:&lt;/p&gt;

&lt;p&gt;I understand the problem of records to go missing, but I can&apos;t see how it can happen. If you have a file and the shouldDeleteIfEmpty is false, the file won&apos;t be deleted, either if it is empty or not. But if you have a file with the property as true, the file would only be deleted if it&apos;s empty, and, if it&apos;s empty, there&apos;s no data missing. &lt;/p&gt;

&lt;p&gt;There&apos;s a big assumption here: that SB is the only thing ever possibly touching these files.  While it should be the case, there&apos;s a whole number of reasons why that might not be true.  I&apos;ve had it happen before.  Years ago, (Pre SB) I was doing support work on a batch system and there was a separate system that did file moving across the enterprise.  Something went wrong, and it prematurely moved a file from one of our database exports, which wasn&apos;t caught until after being uploaded, and then was very tricky to debug.  Why is the file missing half its data?  It can be tricky to debug.  Of course, anytime you have a lot of headless operations going on, making sure the interactions between the disparate system is right is always going to be a challenge.  I once went to a client site where a log file on production showed someone doing: &apos;vim script, ./script, vim script, ./script&apos;.  So, in general when dealing with files, SB doesn&apos;t assume its the only thing touching them.&lt;/p&gt;

&lt;p&gt;However, we can probably handle this scenario better.  On open we would check the state in the execution context, and if it&apos;s at 0, then we can check the shouldDeleteIfEmpty variable, if it&apos;s true, we assume that we won&apos;t be appending and create the file again.   If it&apos;s greater than 0 and the file isn&apos;t there, it can blow up. Once I verify this with test cases, it should be fine.  Although, I still think this scenario is probably best left to an afterStep listener rather than the FFIW (which just doesn&apos;t have enough information)&lt;/p&gt;</comment>
                            <comment id="66736" author="allan.guerra" created="Tue, 24 May 2011 09:20:28 +0000"  >&lt;p&gt;Let&apos;s see if I understood the solution you proposed. When you say we would check the state in the execution context, you mean that this 0 value is the total amount of bytes that FFIW have already written in the output file, right? So, if nothing is written the FFIW creates a new file, if it has already written something and doesn&apos;t find the file, it blows up. &lt;/p&gt;

&lt;p&gt;If it&apos;s what you meant, I think this is the best solution we could have. &lt;br/&gt;
Actually, it&apos;s exactly how I imagined ShouldDeleteIfEmpty works. &lt;br/&gt;
It would solve our problems in restart with the property ShouldDeleteIfEmpty.&lt;/p&gt;

&lt;p&gt;As for the afterStep solution, I think it&apos;s not the most appropriate solution because it would be a workaround and everytime that we use FFIW we would need to implement this afterStep to do something this property were supposed do. I believe the best way we could solve this, is by using the first solution.&lt;/p&gt;

&lt;p&gt;So, is it possible to implement the solution &quot;check the state in the execution context&quot;? It would be just perfect.&lt;/p&gt;</comment>
                            <comment id="66933" author="allan.guerra" created="Tue, 31 May 2011 11:13:13 +0000"  >&lt;p&gt;Lucas, still don&apos;t have updates on this issue?&lt;/p&gt;

&lt;p&gt;I tryed the afterStep solution and I noticed it doesn&apos;t works in Windows environment. &lt;br/&gt;
The file keeps blocked until the end of the step and the afterStep can&apos;t delete it.&lt;/p&gt;</comment>
                            <comment id="66937" author="lucas.l.ward" created="Tue, 31 May 2011 12:49:46 +0000"  >&lt;p&gt;Sorry about the delay.&lt;/p&gt;

&lt;p&gt;So, file delete in java on Windows doesn&apos;t work.  It doesn&apos;t matter whether the FFIW does it, or an afterStep does.  It&apos;s a pretty well known problem: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4722539&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4722539&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&apos;m assuming you&apos;re actually running the jobs in production on some kind of *nix variant?  If so, it should work fine there. Either way, it&apos;s the same problem regardless of whether the writer or a listener is doing the deleting.  In terms of when this issue might get fixed, I need to check with Dave (who is on vacation) to see if we&apos;re going to do another point release or just do 2.2.  I believe its the later, as I don&apos;t think we have enough bugs to put into a point release, and really need 2.2 out, since I represents a complete shift to spring 3.x which is long overdo.  However, the listener workaround should work fine until 2.2 is released.  (again, still need to check with Dave on that)&lt;/p&gt;</comment>
                            <comment id="81190" author="david_syer" created="Wed, 27 Jun 2012 02:34:37 +0000"  >&lt;p&gt;I added a test for this (org.springframework.batch.item.file.FlatFileItemWriterTests.testDeleteOnExitReopen()).  If I understand correctly it should fail, but doesn&apos;t so I&apos;m going to assume that it was fixed as part of another change.  Please squawk if you still have a problem, and tell me how to fix the test.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 19 May 2011 10:19:37 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>235</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00jwn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3270</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4678</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>