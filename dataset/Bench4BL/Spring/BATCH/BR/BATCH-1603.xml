<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 12:07:45 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/BATCH-1603/BATCH-1603.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[BATCH-1603] MultiResourceItemReader infinite read/exception loop after a failed delegate.open() when skip policy is very lax</title>
                <link>https://jira.spring.io/browse/BATCH-1603</link>
                <project id="10090" key="BATCH">Spring Batch</project>
                    <description>&lt;p&gt;The behaviour of MRIR &quot;resource jumping&quot; relies on the following contract from ItemReader : &quot;Implementations must return null at the end of the input data set&quot;.  &lt;/p&gt;

&lt;p&gt;The handling code is optimistically based on the packaged Reader and Resource implementations.  After a failed delegate.open() it will throw an exception and the next read call will call delegate.read() expecting a nice &quot;null&quot; to be returned.  When I used a custom Resource, I found it quite easy to end up in a loop such that delegate.open() on a StaxEventItemReader failed leaving it fundamentally uninitialised and throwing exceptions on each read() call. MRIR won&apos;t &quot;jump to the next resource&quot; unless it reads a &quot;null&quot; and therefore the step looped infinitely until we added some skip logic to contain the problem.&lt;/p&gt;

&lt;p&gt;I am working on a patch (will attach when ready) to make ResourceAwareItemReaders a bit more pessimistic in their use of &quot;noInput = true&quot;.  They erroneously assume resource.exists()=true means there will be no exception thrown in resource.getInputStream()&lt;/p&gt;

&lt;p&gt;[&lt;br/&gt;
PS. I&apos;m not 100% sold on the open-&amp;gt;exception/loop/read-&amp;gt;null pattern of fallback but have not fully thought through the implications. &lt;br/&gt;
]&lt;/p&gt;</description>
                <environment></environment>
        <key id="32375">BATCH-1603</key>
            <summary>MultiResourceItemReader infinite read/exception loop after a failed delegate.open() when skip policy is very lax</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://jira.spring.io/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="8">Complete</resolution>
                                        <assignee username="david_syer">Dave Syer</assignee>
                                    <reporter username="drekbour">drekbour</reporter>
                        <labels>
                    </labels>
                <created>Sun, 25 Jul 2010 23:53:49 +0000</created>
                <updated>Tue, 3 Aug 2010 00:14:26 +0000</updated>
                            <resolved>Tue, 3 Aug 2010 00:13:52 +0000</resolved>
                                    <version>2.1.2</version>
                                    <fixVersion>2.1.3</fixVersion>
                                    <component>Infrastructure</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                    <timeoriginalestimate seconds="0">0d</timeoriginalestimate>
                            <timeestimate seconds="0">0d</timeestimate>
                                        <comments>
                            <comment id="56034" author="drekbour" created="Mon, 26 Jul 2010 03:20:58 +0000"  >&lt;p&gt;Attached an SVN generated patch of testcases + fixes to StaxEventItemReader and FlatFileItemReader.  Patch root is &lt;a href=&quot;https://src.springframework.org/svn/spring-batch/trunk/spring-batch-infrastructure&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://src.springframework.org/svn/spring-batch/trunk/spring-batch-infrastructure&lt;/a&gt; rev: 4114&lt;/p&gt;</comment>
                            <comment id="56070" author="david_syer" created="Mon, 26 Jul 2010 20:06:25 +0000"  >&lt;p&gt;Thanks for the patch.  I&apos;m not sure I would choose to fix a problem using MultiResourceitemReader by modifying FlatFile- and StaxItemReaders though.  If they throw an exception on open() doesn&apos;t that mean something useful? I presume the problem only manifests itself if you are using MultiResourceItemReader along with a lax skip policy that ignores the exception from open()?&lt;/p&gt;</comment>
                            <comment id="56275" author="drekbour" created="Mon, 2 Aug 2010 05:04:27 +0000"  >&lt;p&gt;Accepted about the lax skip policy, that is indeed how we first ran into this. The problem is that MRIR &lt;b&gt;cannot&lt;/b&gt; get past the bad resource once on this path.&lt;/p&gt;

&lt;p&gt;The patched was based on:&lt;br/&gt;
1) Unpatched FlatFile* and Stax* react differently to open-&amp;gt;exception/loop/read-&amp;gt;null.  This should be consistent, no matter what the behaviour is.&lt;br/&gt;
2) MRIR is coded to the contract of the IR.read() javadoc &quot;Implementations &lt;b&gt;must&lt;/b&gt; return null at the end of the input data set&quot;.  This sentence is clearly aimed at normal operation but is not precise about what read() must do after open() fails.&lt;/p&gt;

&lt;p&gt;To put those together: Flatfile*.read() throws ReaderNotOpenException and Stax-*.read() throws an NPE.  I took the direction of harmonising those ResourceAwareItemReaders and assuming they should return null if could not be opened. &lt;/p&gt;

&lt;p&gt;The other option is to throw ReaderNotOpenException consistently and amend MRIR to &quot;jump resources&quot; immediately if delegate.open() fails or try the open again on the next call.  I expect this should be configurable but neither is current behaviour (it gets locked onto the failing delegate.read() without retrying delegate.open())&lt;/p&gt;

&lt;p&gt;What do you think?  I&apos;m happy to patch like this as well but want to get our behavioural expectations clear first.&lt;/p&gt;</comment>
                            <comment id="56383" author="david_syer" created="Tue, 3 Aug 2010 00:13:51 +0000"  >&lt;p&gt;OK, I buy that.  ItemReader, of course, cannot say anything about resources being open or not in its contract, but I think your idea of the least surprising behaviour might be correct, as long as we don&apos;t change the fact that open() can throw an exception.  Applied the patch and committed.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="16938" name="BATCH-1603.svnpatch.txt" size="7563" author="drekbour" created="Mon, 26 Jul 2010 03:20:58 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 26 Jul 2010 20:06:25 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11126</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i03uz3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22560</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>19035</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>