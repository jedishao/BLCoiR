<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 11:47:20 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/BATCH-1804/BATCH-1804.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[BATCH-1804] Retry does not work if additional exception occurs in the ItemWriter during scan for failure</title>
                <link>https://jira.spring.io/browse/BATCH-1804</link>
                <project id="10090" key="BATCH">Spring Batch</project>
                    <description>&lt;p&gt;I expect the configuration &amp;lt;chunk commit-interval=&quot;5&quot; retry-limit=&quot;5&quot; skip-limit=&quot;5&quot;&amp;gt; to be applied for both processor and writer. This does not seem to work as expected with the writer, where retry is non at all, if the writer runs in &quot;recoverer&quot;.&lt;/p&gt;

&lt;p&gt;The attachment contains a maven-project that demonstrates the issue:&lt;/p&gt;

&lt;p&gt;1. springbatch.test.components.batch.retry_in_writer.RetryInWriterTest&lt;br/&gt;
2. springbatch.test.components.batch.retry_in_processor.RetryInProcessorTest&lt;/p&gt;

&lt;p&gt;The first test will do all work in the writer and the batch fails because a functional error causes the writer to be run in recoverer. The first item will be skipped. The second item will get a deadlock on the first try, this is not handled with a retry and causes the batch to fail.&lt;/p&gt;

&lt;p&gt;The second test does the work in the processor (which seems like the right thing to do, but that is not the point&lt;img class=&quot;emoticon&quot; src=&quot;https://jira.spring.io/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. The first item will be skipped. The second item will get the deadlock, retried and the processor will continue to process the rest of the chunk.&lt;/p&gt;

&lt;p&gt;It seems that the errorhandling works as expected in the processor, but not in the writer. Our solution is to use the processor and just do flush in the writer, but it would be nice to have the same errorhandling in the writer or an explanation on why not.&lt;/p&gt;</description>
                <environment>&amp;#39;Windows XP / Linux</environment>
        <key id="40606">BATCH-1804</key>
            <summary>Retry does not work if additional exception occurs in the ItemWriter during scan for failure</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="8">Complete</resolution>
                                        <assignee username="david_syer">Dave Syer</assignee>
                                    <reporter username="perottobc">Per Otto Bergum Christensen</reporter>
                        <labels>
                            <label>error</label>
                            <label>handling</label>
                    </labels>
                <created>Fri, 28 Oct 2011 07:39:15 +0000</created>
                <updated>Wed, 27 Jun 2012 07:52:00 +0000</updated>
                            <resolved>Wed, 27 Jun 2012 07:52:00 +0000</resolved>
                                    <version>2.1.8</version>
                                    <fixVersion>2.1.9</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                    <timeoriginalestimate seconds="0">0d</timeoriginalestimate>
                            <timeestimate seconds="0">0d</timeestimate>
                                        <comments>
                            <comment id="81186" author="david_syer" created="Wed, 27 Jun 2012 01:18:09 +0000"  >&lt;p&gt;Thanks for the test project.  If I change your OrderFacade so that there are no FunctionalExceptions it works fine, so it looks like a more accurate description of the problem is that a new exception encountered during recovery from a failure in the writer cannot be retried.  We&apos;ll take a look and see if anything can be fixed in 2.1.9, otherwise it&apos;s 2.2.&lt;/p&gt;</comment>
                            <comment id="81200" author="david_syer" created="Wed, 27 Jun 2012 07:52:00 +0000"  >&lt;p&gt;I think I fixed this.  The key is that the FaultTolerantChunkProcessor should scan() differently if it is recovering or having a normal retry attempt, and only on recovery should it re-throw an un-retryable wrapper exception.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="19023" name="spring-retry-test-batch-simple.zip" size="19755" author="perottobc" created="Fri, 28 Oct 2011 07:39:15 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 27 Jun 2012 01:18:09 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>27914</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00jm7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3223</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4644</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>