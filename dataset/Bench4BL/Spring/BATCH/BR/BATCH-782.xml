<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 12:25:30 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/BATCH-782/BATCH-782.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[BATCH-782] Synchronization issue in ItemOrientedStep if exception is throw in chunk processing</title>
                <link>https://jira.spring.io/browse/BATCH-782</link>
                <project id="10090" key="BATCH">Spring Batch</project>
                    <description>&lt;p&gt;I have read source code of 1.0.x and 1.1.x and both share similar problem&lt;/p&gt;

&lt;p&gt;In ItemOrientedStep:&lt;br/&gt;
Code:&lt;/p&gt;

&lt;p&gt;protected ExitStatus doExecute(final StepExecution stepExecution) throws Exception {&lt;br/&gt;
    // blablabla&lt;/p&gt;

&lt;p&gt;    return stepOperations.iterate(new RepeatCallback() {&lt;/p&gt;

&lt;p&gt;        public ExitStatus doInIteration(RepeatContext context) throws Exception {&lt;br/&gt;
            // balblabla&lt;br/&gt;
            try {&lt;br/&gt;
                // Process chunk .... (1)&lt;br/&gt;
                try &lt;/p&gt;
{
                    synchronizer.lock(stepExecution);
                }
&lt;p&gt;                catch (InterruptedException e) &lt;/p&gt;
{
                    stepExecution.setStatus(BatchStatus.STOPPED);
                    Thread.currentThread().interrupt();
                }
&lt;p&gt;                // step execution persistence&lt;/p&gt;

&lt;p&gt;            }&lt;br/&gt;
            catch (Error e) &lt;/p&gt;
{
                processRollback(stepExecution, contribution, fatalException, transaction);
                throw e;
            }&lt;br/&gt;
            catch (Exception e) {                processRollback(stepExecution, contribution, fatalException, transaction);                throw e;            }
&lt;p&gt;            finally &lt;/p&gt;
{
                synchronizer.release(stepExecution);
            }
&lt;p&gt;            //blblabla&lt;br/&gt;
            return exitStatus;&lt;br/&gt;
        }&lt;br/&gt;
    });&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;In case of any exception occured in (1) or during synchronizer.lock(), the internal semaphore in synchronizer is NOT acquired. However, the outer final block releases synchronizer, and hence, releasing the semaphore.&lt;/p&gt;

&lt;p&gt;From JDK API of 1.5, it stated that Semaphore can be released by another thread which is not the original acquirer of semaphore.&lt;/p&gt;

&lt;p&gt;So, in case of parallel processing, I may goes into some case:&lt;/p&gt;

&lt;p&gt;Thread 1 acquired the semaphore and doing those step execution persistence stuff.&lt;/p&gt;

&lt;p&gt;Thread 2 have exception in processChunk, and hence releasing the semaphore.&lt;/p&gt;

&lt;p&gt;Thread 3, originally waiting for semaphore, is now acquired the semaphore because Thread 2 releases it, and hence, it goes to the peresistence block of code.&lt;/p&gt;

&lt;p&gt;In such case, Thread 1 and 3 goes into the should-be-protected block of code for step execution persistence.&lt;/p&gt;

&lt;p&gt;In my environment, I throwed an exception in my writer, and it caused this exception:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; SimpleAsyncTaskExecutor-1 &lt;span class=&quot;error&quot;&gt;&amp;#91;step.AbstractStep&amp;#93;&lt;/span&gt; Encountered an error executing the step&lt;br/&gt;
org.springframework.batch.core.step.AbstractStep$FatalException: Fatal error detected during save of step execution context&lt;br/&gt;
// stack trace deleted&lt;br/&gt;
Caused by: org.springframework.dao.OptimisticLockingFailureException: Attempt to update step execution id=609 with wrong version (5), where current version is 4&lt;br/&gt;
// stack trace deleted&lt;/p&gt;

&lt;p&gt;It is caused by concurrent access and persistence of step execution because of the above mentioned issue.  &lt;/p&gt;

&lt;p&gt;Upon happening, in DB, the step execution will be updated with UNKNOWN status, and hence, preventing it from re-run.&lt;/p&gt;

&lt;p&gt;A quick fix is to set a flag after synchronizer lock, and only release if flag is set.  However it does not cater for interruption exception during synchronizer locking.&lt;/p&gt;</description>
                <environment>JDK 1.5</environment>
        <key id="23613">BATCH-782</key>
            <summary>Synchronization issue in ItemOrientedStep if exception is throw in chunk processing</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://jira.spring.io/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thomas.risberg">Thomas Risberg</assignee>
                                    <reporter username="adrianshum">Adrian Shum</reporter>
                        <labels>
                    </labels>
                <created>Wed, 13 Aug 2008 21:48:54 +0000</created>
                <updated>Tue, 23 Sep 2008 11:05:34 +0000</updated>
                            <resolved>Thu, 14 Aug 2008 01:33:49 +0000</resolved>
                                    <version>1.0.1</version>
                    <version>1.1.1</version>
                                    <fixVersion>1.1.2</fixVersion>
                    <fixVersion>2.0.0.M2</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                    <timeoriginalestimate seconds="3600">1h</timeoriginalestimate>
                            <timeestimate seconds="3600">1h</timeestimate>
                                        <comments>
                            <comment id="38921" author="david_syer" created="Wed, 13 Aug 2008 23:37:39 +0000"  >&lt;p&gt;I think the quick fix is actually the best one - the flag is a local variable so is stack-confined.  If the lock operation is interrupted I assume the semaphore is not acquired, in which case we only need to set the flag in the try block where the lock is taken.  Patched 1.1.2 and trunk.&lt;/p&gt;</comment>
                            <comment id="38922" author="david_syer" created="Wed, 13 Aug 2008 23:38:06 +0000"  >&lt;p&gt;Assigned for review&lt;/p&gt;</comment>
                            <comment id="38928" author="adrianshum" created="Thu, 14 Aug 2008 02:51:20 +0000"  >&lt;p&gt;I am not sure if the quick fix is the right way.&lt;/p&gt;

&lt;p&gt;In case two thread is awaken from the semaphore lock wait due to thread interruption, both thread will goes thru the block of step execution persistence (for which should be synchronized).&lt;/p&gt;

&lt;p&gt;Though I am not sure in what case interruption exception will be thrown, this may need to be taken into consideration.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 13 Aug 2008 23:37:39 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11829</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0209j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11752</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11678</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>