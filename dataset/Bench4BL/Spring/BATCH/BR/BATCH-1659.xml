<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 12:01:36 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/BATCH-1659/BATCH-1659.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[BATCH-1659] FileUtils setUpOutputFile fails on NAS from linux</title>
                <link>https://jira.spring.io/browse/BATCH-1659</link>
                <project id="10090" key="BATCH">Spring Batch</project>
                    <description>&lt;p&gt;FlatFileItemWriter is failing on a NAS running on linux. It fails in FileUtils.setUpOutputFile where it calls file.createNewFile();&lt;/p&gt;

&lt;p&gt;A simple test program reproduces the problem. If I run this once I get the exception, but it successfully creates the file. If I run it a second time it works.&lt;/p&gt;

&lt;p&gt;public class TestNAS &lt;br/&gt;
{&lt;br/&gt;
    public static void main( String[] args ) throws IOException&lt;/p&gt;
    {
        File file = new File(&quot;./test.txt&quot;);
        file.createNewFile();
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;The exception is &lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; java.lang.reflect.InvocationTargetException&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
        at com.simontuffs.onejar.Boot.run(Boot.java:329)&lt;br/&gt;
        at com.simontuffs.onejar.Boot.main(Boot.java:164)&lt;br/&gt;
Caused by: java.io.IOException: Permission denied&lt;br/&gt;
        at java.io.UnixFileSystem.createFileExclusively(Native Method)&lt;br/&gt;
        at java.io.File.createNewFile(File.java:883)&lt;br/&gt;
        at com.jpmorgan.wss.test.TestNAS.main(TestNAS.java:16)&lt;br/&gt;
        ... 6 more&lt;/p&gt;</description>
                <environment>linux 2.6.18-92.1.22.el5 #1 SMP Fri Dec 5 09:28:22 EST 2008 x86_64 x86_64 x86_64 GNU/Linux&lt;br/&gt;
</environment>
        <key id="35079">BATCH-1659</key>
            <summary>FileUtils setUpOutputFile fails on NAS from linux</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://jira.spring.io/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="8">Complete</resolution>
                                        <assignee username="david_syer">Dave Syer</assignee>
                                    <reporter username="andersmholmgren">Anders Holmgren</reporter>
                        <labels>
                    </labels>
                <created>Tue, 23 Nov 2010 23:21:42 +0000</created>
                <updated>Sun, 28 Nov 2010 15:18:40 +0000</updated>
                            <resolved>Fri, 26 Nov 2010 03:02:14 +0000</resolved>
                                    <version>2.1.1</version>
                                    <fixVersion>2.1.6</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                    <timeoriginalestimate seconds="0">0d</timeoriginalestimate>
                            <timeestimate seconds="0">0d</timeestimate>
                                        <comments>
                            <comment id="60899" author="david_syer" created="Wed, 24 Nov 2010 00:04:11 +0000"  >&lt;p&gt;Interesting.  Some kind of race condition in native code?  Is it deterministic (always fails)?  What if you catch the exception and try again immediately from the same JVM?&lt;/p&gt;</comment>
                            <comment id="60909" author="lucas.l.ward" created="Wed, 24 Nov 2010 08:49:32 +0000"  >&lt;p&gt;My first thoughts are:&lt;/p&gt;

&lt;p&gt;1.  Should you be writing to a NAS drive in your batch process?  Seems like it would be better to write to a faster drive and move it later, maybe with a Spring Integration piece?&lt;/p&gt;

&lt;p&gt;2. A very interesting JVM implementation issue.  I wonder how other operating systems handle it?  I remember a couple years ago running into an issue where the JVM on Windows wouldn&apos;t actually delete a file on a file.delete() call.  I&apos;m not sure what we can do outside of provide mechanism for custom methods to provide the File object for these types of cases.&lt;/p&gt;</comment>
                            <comment id="60918" author="andersmholmgren" created="Wed, 24 Nov 2010 14:46:09 +0000"  >&lt;p&gt;Yes it always fails on linux, but I haven&apos;t seen it fail to the same NAS folder from windows (same user).&lt;/p&gt;

&lt;p&gt;I amended the program to give more info as follows.&lt;/p&gt;

&lt;p&gt;public class TestNAS &lt;br/&gt;
{&lt;br/&gt;
    public static void main( String[] args ) throws IOException&lt;/p&gt;
    {
        File file = new File(&quot;./test.txt&quot;);
        System.out.println(&quot;=========================================&quot;);
        tryCreate(file);
        System.out.println(&quot;=========================================&quot;);
        tryCreate(file);
    }

&lt;p&gt;    private static void tryCreate(File file)&lt;br/&gt;
    {&lt;br/&gt;
        boolean fileExists = file.exists();&lt;br/&gt;
        System.out.println(&quot;File does&quot; + (fileExists ? &quot;&quot; : &quot; NOT&quot;) + &quot; exist before&quot;);&lt;/p&gt;

&lt;p&gt;        try&lt;/p&gt;
        {
            boolean isCreated = file.createNewFile();
            System.out.println(&quot;File was&quot; + (isCreated ? &quot;&quot; : &quot; NOT&quot;) + &quot; created&quot;);
        }
&lt;p&gt;        catch (IOException e)&lt;/p&gt;
        {
            System.out.println(&quot;createNewFile failed with &quot; + e.getMessage());
        }

&lt;p&gt;        fileExists = file.exists();&lt;br/&gt;
        System.out.println(&quot;File does&quot; + (fileExists ? &quot;&quot; : &quot; NOT&quot;) + &quot; exist after&quot;);&lt;/p&gt;

&lt;p&gt;    }&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;The output was.&lt;/p&gt;


&lt;p&gt;=========================================&lt;br/&gt;
File does NOT exist before&lt;br/&gt;
createNewFile failed with Permission denied&lt;br/&gt;
File does exist after&lt;br/&gt;
=========================================&lt;br/&gt;
File does exist before&lt;br/&gt;
File was NOT created&lt;br/&gt;
File does exist after&lt;/p&gt;


&lt;p&gt;So the createNewFile does work but thinks it failed.&lt;/p&gt;

&lt;p&gt;On the one hand it&apos;s obviously a java.io.File issue but still affects users of spring batch. I&apos;ll look more closely in the core java bug db today and raise a bug if there too if it&apos;s new.&lt;/p&gt;

&lt;p&gt;I know that others here have experienced issues with java.io.File on the NAS and got around them by using commons io. I&apos;ll have a dig around to see if I can figure out what commons io does to avoid this problem.&lt;/p&gt;

&lt;p&gt;Lucas, I was considering a two stage write / move (either using spring integration or a second step in spring batch with commons io file move) as a work around. Other than fixing the problem it&apos;s not really adding value in this case as the batch runs once a day and produces small files. So performance wise we wouldn&apos;t really notice the difference and it complicates our set up. But may be what I end up doing for now as a work around.&lt;/p&gt;</comment>
                            <comment id="60919" author="andersmholmgren" created="Wed, 24 Nov 2010 14:51:21 +0000"  >&lt;p&gt;At the risk of stating the obvious, a simple, but admittedly not very pretty, workaround would be to add something like the following to FileUtils&lt;/p&gt;


&lt;p&gt;    private static boolean createNewFile(File file) throws IOException&lt;br/&gt;
    {&lt;br/&gt;
        try&lt;/p&gt;
        {
            return file.createNewFile();
        }&lt;br/&gt;
        catch (IOException e)&lt;br/&gt;
        {            return file.createNewFile();        }
&lt;p&gt;    }&lt;/p&gt;</comment>
                            <comment id="60927" author="andersmholmgren" created="Wed, 24 Nov 2010 19:07:06 +0000"  >&lt;p&gt;OK my example was rather broken (not atomic and different behaviour to file.createNewFile()). Something like the following might work in this case though as I&apos;m not sure it matters too much whether it is atomic???&lt;/p&gt;

&lt;p&gt;    private static boolean createNewFile(File file) throws IOException&lt;br/&gt;
    {&lt;br/&gt;
        if (file.exists())&lt;/p&gt;
        {
            return false;
        }

&lt;p&gt;        try&lt;/p&gt;
        {
            return file.createNewFile();
        }
&lt;p&gt;        catch (IOException e)&lt;br/&gt;
        {&lt;br/&gt;
            if (file.exists())&lt;/p&gt;
            {
                return true;
            }
&lt;p&gt;            else&lt;/p&gt;
            {
                throw e;
            }
&lt;p&gt;        }&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;I looked at the jdk bug database and couldn&apos;t find something exactly for this. Closest I found was &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6493808&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6493808&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It may well be some bug with the OS that causes strange behaviour on the NAS.&lt;/p&gt;</comment>
                            <comment id="60955" author="david_syer" created="Fri, 26 Nov 2010 03:02:13 +0000"  >&lt;p&gt;I&apos;m happy to catch the exception and test again.  Done.&lt;/p&gt;</comment>
                            <comment id="60976" author="andersmholmgren" created="Sun, 28 Nov 2010 15:18:40 +0000"  >&lt;p&gt;Just verified that the nightly snapshot now works on the NAS. Thx&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 24 Nov 2010 00:04:11 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11081</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i03uo7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22511</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>18968</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>