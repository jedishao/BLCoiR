<!-- 
RSS generated by JIRA (6.4.11#64026-sha1:78f6ec473a3f058bd5d6c30e9319c7ab376bdb9c) at Thu Dec 22 12:28:54 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://jira.spring.io/si/jira.issueviews:issue-xml/BATCH-364/BATCH-364.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>Spring JIRA</title>
    <link>https://jira.spring.io</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.4.11</version>
        <build-number>64026</build-number>
        <build-date>25-08-2015</build-date>
    </build-info>

<item>
            <title>[BATCH-364] StepScope responsibilities can be assumed by Step (not ApplicationContext)</title>
                <link>https://jira.spring.io/browse/BATCH-364</link>
                <project id="10090" key="BATCH">Spring Batch</project>
                    <description>&lt;p&gt;StepScope responsibilities can be assumed by Step (not ApplicationContext).  The aim (to clarify issues raised below), is to make scope=&quot;step&quot; strongly advised but not mandatory for item readers and writers in simple steps.  Application programmers are very welcome to use scope=&quot;step&quot; where they need access to the context through StepContextAware, since this is consistent with other custom scope usages.  They are also advised to use scope=&quot;step&quot; wherever there is a possibility of more than one thread executing the same step - as in the case of a JMX launcher (see samples) or a web service that runs jobs.  Step scope is not necessary for single JVM, single Job processes, but it would be recommended to use it anyway, in case the job is ever run in a mult-threaded container.&lt;/p&gt;</description>
                <environment></environment>
        <key id="20593">BATCH-364</key>
            <summary>StepScope responsibilities can be assumed by Step (not ApplicationContext)</summary>
                <type id="1" iconUrl="https://jira.spring.io/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://jira.spring.io/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://jira.spring.io/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="lucas.l.ward">Lucas Ward</assignee>
                                    <reporter username="david_syer">Dave Syer</reporter>
                        <labels>
                    </labels>
                <created>Thu, 14 Feb 2008 02:48:01 +0000</created>
                <updated>Thu, 7 Aug 2008 02:06:50 +0000</updated>
                            <resolved>Mon, 25 Feb 2008 17:44:09 +0000</resolved>
                                    <version>1.0.0.m4</version>
                                    <fixVersion>1.0.0.m5</fixVersion>
                                    <component>Core</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                    <timeoriginalestimate seconds="0">0d</timeoriginalestimate>
                            <timeestimate seconds="0">0d</timeestimate>
                                        <comments>
                            <comment id="32094" author="david_syer" created="Fri, 15 Feb 2008 01:51:08 +0000"  >&lt;p&gt;Still in progress.  Most if not all samples can probably now have the scope=&quot;step&quot; removed from their readers and writers.&lt;/p&gt;</comment>
                            <comment id="32101" author="douglas.c.kaminsky" created="Fri, 15 Feb 2008 02:50:26 +0000"  >&lt;p&gt;I always thought step scope was a very powerful and Spring-oriented feature. It seems odd to me for a subproject of Spring that has a very useful implementation of a Spring feature to deprecate it in favor of a less configurable and more programmatic solution. Can you please expand on the reasoning behind such a change?&lt;/p&gt;</comment>
                            <comment id="32165" author="david_syer" created="Sun, 17 Feb 2008 17:47:55 +0000"  >&lt;p&gt;There&apos;s no deprecation - step scope is very powerful and useful (hopefully).  The object of this exercise is to make step scope into good practice, without it being &lt;b&gt;required&lt;/b&gt; for a job to work.  There are no other examples of Spring custom scopes where their use is mandatory, so we are just trying to make step scope more like the others.  From the application programmer&apos;s point of view it should continue to behave as before, and we will recommend that step scope is used for readers and writers because they are usually stateful, but it won&apos;t be required.&lt;/p&gt;</comment>
                            <comment id="32232" author="douglas.c.kaminsky" created="Tue, 19 Feb 2008 00:38:57 +0000"  >&lt;p&gt;Then I&apos;m not sure what exactly you are proposing to do. How would this change the use case for step scope?&lt;/p&gt;

&lt;p&gt;The consensus with Lucas, Wayne, Robert and Scott seemed to be that this issue needs a more detailed description. Can you describe in more detail what your intentions are?&lt;/p&gt;</comment>
                            <comment id="32233" author="douglas.c.kaminsky" created="Tue, 19 Feb 2008 00:42:05 +0000"  >&lt;p&gt;Sorry, I just saw your edit of the issue description above. I disagree with your assessment that step scope is not necessary in single threaded environments. Take the example of a job that writes a file in one step, then reads it in the next. Depending on how the OS handles file access, you can create a race condition where the flushing of output does not actually occur in the first step because the file handle is not closed, so the second step only sees an empty file, and its read lock prevents the writer from writing.&lt;/p&gt;

&lt;p&gt;This is something that actually happened to me a few months ago. It was also really tricky since without step scope the job worked in Windows but not under Solaris.&lt;/p&gt;</comment>
                            <comment id="32234" author="douglas.c.kaminsky" created="Tue, 19 Feb 2008 00:44:55 +0000"  >&lt;p&gt;Caveat to the above comment: I do recognize that ItemStream does solve for some of this, but it feels much clunkier than step scope - step scope actually makes a lot of sense and since it is controlled via configuration, it is pretty elegant (minus the aop:scoped-proxy business).&lt;/p&gt;</comment>
                            <comment id="32236" author="nebhale" created="Tue, 19 Feb 2008 00:54:47 +0000"  >&lt;p&gt; (In reply to comment #5)&lt;br/&gt;
&amp;gt; Take the example of a job that writes a file in one step, then reads it in the&lt;br/&gt;
&amp;gt; next. Depending on how the OS handles file access, you can create a race&lt;br/&gt;
&amp;gt; condition where the flushing of output does not actually occur in the first step&lt;br/&gt;
&amp;gt; because the file handle is not closed, so the second step only sees an empty&lt;br/&gt;
&amp;gt; file, and its read lock prevents the writer from writing.&lt;/p&gt;

&lt;p&gt;Step scope doesn&apos;t solve this problem either.  Only properly closing a reader or writer will solve this problem.  The ItemStream contract makes this possible and the framework is guaranteeing a close on these resources when the step is completed (either successfully or with errors).  I realize that the implementation of Step scope may close them as well, but the framework should not be dependent on this behavior.  If I don&apos;t &lt;b&gt;need&lt;/b&gt; to use step scope I shouldn&apos;t be forced to, and many of the usecases that we though Step scope was required to implement can instead be implemented with a singleton factory that returns a new instance every time.&lt;/p&gt;

&lt;p&gt;In general the use of scopes is for situations where the framework or application is not driving the lifecycle, but rather is in a container that drives it.  The perfect example is the request/session scopes where the servlet container is dirving lifecycle and there is no way an application could get proper access to the lifecycle of an instance.  In our case, the framework is driving all executions and can instantiate objects at the proper time (I&apos;m still a fan of a factory here and it&apos;s not unprecedented in the portfolio) removing the need for a magical scoping mechanism.  You could use step scope where it&apos;s appropriate, but if I am only single threading a single execution through a single reader I should require all of the &amp;lt;aop:scoped-proxy/&amp;gt; shenanigans.&lt;/p&gt;</comment>
                            <comment id="32245" author="david_syer" created="Tue, 19 Feb 2008 06:00:08 +0000"  >&lt;p&gt;Even single-threaded use will still still require step scope and &amp;lt;aop:scoped-proxy/&amp;gt; if an application developer wants to take advantage of the StepContext injection callback.  I think step scope is here to stay - we just don&apos;t require it any more.&lt;/p&gt;

&lt;p&gt;And the StreamManager takes care of the close() callback, so even without scope=&quot;step&quot; the files will be properly handled.  I don&apos;t think this is clunky.&lt;/p&gt;</comment>
                            <comment id="32284" author="douglas.c.kaminsky" created="Wed, 20 Feb 2008 01:40:51 +0000"  >&lt;p&gt;Re: Ben&apos;s last post&lt;/p&gt;

&lt;p&gt;That&apos;s my point - using the existing init-method / destroy-method and InitializingBean / DisposableBean paradigms to properly close readers and writers via step scope makes things a lot cleaner and more in tune with existing Spring functionality.&lt;/p&gt;

&lt;p&gt;Having a factory or a prototype scope is fine for creating new objects that don&apos;t clash with existing objects, but does nothing for resource management.&lt;/p&gt;</comment>
                            <comment id="32478" author="lucas.l.ward" created="Mon, 25 Feb 2008 07:20:03 +0000"  >&lt;p&gt;Dave,&lt;/p&gt;

&lt;p&gt;What&apos;s the status on this issue?  As far as I can tell, open and close is called on ItemStream by the SimpleStreamManager.  Only the ItemReader and ItemWriter that are wired into the step appear to be registered for this.  Is there anything left on this issue?  It&apos;s assigned to me, so I wanted to make sure.&lt;/p&gt;</comment>
                            <comment id="32482" author="david_syer" created="Mon, 25 Feb 2008 07:33:43 +0000"  >&lt;p&gt;That&apos;s where I think we are too, just checking.  It&apos;s a little irritating actually - I had to go in and add a couple of instanceof to things like DelegatingItem* today.  But if you are happy that open/close are actually called in the step we are good to close this one.&lt;/p&gt;</comment>
                            <comment id="32483" author="lucas.l.ward" created="Mon, 25 Feb 2008 08:04:18 +0000"  >&lt;p&gt;I have a couple of things I would like to change, but they are more related to &lt;a href=&quot;https://jira.spring.io/browse/BATCH-365&quot; title=&quot;ItemStream rework&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BATCH-365&quot;&gt;&lt;del&gt;BATCH-365&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mostly, it&apos;s that open() and restoreFrom(EC) could just as easily be open(EC), I also think the getExecutionAttributes() with aggregation can be removed as well, as long as there&apos;s a fairly trivial hook in the readers and writers to allow for specifying the key (a la name, but you could call it anything) I&apos;ve mentioned it before, but again, more related to hte item stream rework.&lt;/p&gt;</comment>
                            <comment id="32672" author="david_syer" created="Thu, 28 Feb 2008 19:56:35 +0000"  >&lt;p&gt;OK, I lied.  It looks like StepScope is going to die (&lt;a href=&quot;https://jira.spring.io/browse/BATCH-378&quot; title=&quot;RepeatListener is confusing and too generic to use for &amp;#39;intercepting&amp;#39; a step&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BATCH-378&quot;&gt;&lt;del&gt;BATCH-378&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://jira.spring.io/browse/BATCH-398&quot; title=&quot;That old stateful / stateless thing again....&quot; class=&quot;issue-link&quot; data-issue-key=&quot;BATCH-398&quot;&gt;&lt;del&gt;BATCH-398&lt;/del&gt;&lt;/a&gt;).  I think this is a good thing on the whole (get ri dof that &amp;lt;aop:scoped-proxy/&amp;gt; funkiness).&lt;/p&gt;</comment>
                            <comment id="32957" author="wordywordy" created="Thu, 6 Mar 2008 17:45:05 +0000"  >&lt;p&gt;Please consider to add back Step scope and add Job scope.&lt;/p&gt;

&lt;p&gt;Scope concepts are important and good pattern for life-cycle management of resource.  Job and step scope are definitely crucial concept for Spring Batch framework, which intended to make &quot;Job&quot; and &quot;Step&quot; as the first class citizen.  If such a common and general requirement is needed to re-implement or mimic by custom approaches, the value (or attractiveness) of the Spring Batch framework will be largely reduced.&lt;/p&gt;

&lt;p&gt;Another drawback of custom implement may induce incomplete (or improper) clean up of shared resources.&lt;/p&gt;</comment>
                            <comment id="32961" author="david_syer" created="Thu, 6 Mar 2008 18:42:30 +0000"  >&lt;p&gt;I am generally suspicious, but still a little sympathetic to this requirement.  It is important to understand that any such volatile context will significantly reduce the robustness of a batch job - it just won&apos;t be there if the lights go out and the job has to be restarted.  &lt;/p&gt;

&lt;p&gt;If someone comes up with some good use cases we can think about how to implement them.  I suggest you post on the forum and try and get a discussion going there.&lt;/p&gt;</comment>
                            <comment id="38470" author="david_syer" created="Thu, 7 Aug 2008 02:06:50 +0000"  >&lt;p&gt;Assume closed as resolved and released&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10011">
                    <name>Depends</name>
                                                                <inwardlinks description="is depended on by">
                                        <issuelink>
            <issuekey id="20597">BATCH-366</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_10170" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>First Response Date</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 15 Feb 2008 02:50:26 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10280" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12076</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10880" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0577b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10380" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30373</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10381" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Ranking</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>27379</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10171" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>