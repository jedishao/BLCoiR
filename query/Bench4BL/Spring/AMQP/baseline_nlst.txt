125	Unreliable lock algorithm in SimpleMessageListenerContainer  Unreliable lock algorithm in SimpleMessageListenerContainer leads to container not waiting for stop   if some listeners have failed
190	CachingConnectionFactory leaks channels when synchronized with a TransactionManager  It seems that when I use RabbitTemplate  channelTransacted true  to convertAndSend   a message to an exchange within the context of a synchronized TransactionManager  e g  an active transaction on the current thread   the channel is never closed  hence new publishes will always get their  own   shiny  new channel  that is never closed or released to the channel pool  until Rabbit can t handle any more channels  See Forum Reference for more info  The problem is not observed on the consumer side  e g  MessageListenerContainer    Its observed on the publishing side   e g  RabbitTemplate    It is observed both if I use the RabbitTemplate  natively    or if I use spring integration and the &lt int amqp outbound channel adapter   &gt  tag  BTW  the observed  channel leak  goes away when I choose channelTransacted false  I will look to supply a simple recreate  if I can scrounge the time
223	Too Many Threads Running in SimpleListenerContainerIf doStart   is called twice  we end up with two threads running in each consumer  This can happen  say  if spring integration amqp declares an adapter that uses an externally defined listener container  The container itself is started  and then started again by the adapter  This can cause acks to go out asynchronously  Need to protect against running the consumers multiple times
243	AmqpAppender and log4j synchronization issues resulting in messages lossThe Log4j AmqpAppender is subject to synchronization issues because of the Log4j PatternLayout  Problem is at the following line   String routingKey   routingKeyLayout format logEvent   We must either use another pattern like the EnhancedPatternLayoutlike suggested by the PatternLayout JavaDoc or add synchronization code  The consequence is message lost because of the routing key badly generated
249	Issues with RabbitTemplate Temporary Reply QueuesTemporary  Reply Queues are configured autoAck false  but we don t ack the reply  If using a cached channel  this causes accounting problems on the Rabbit admin  channel shows unacked count   Also  since the replyHandoff is a SynchronizedQueue  there is a race condition in the case the timeout is exceeded just as the reply is received  the consumer thread hangs on the put   because there is nobody in take
260	Hanging thread when using RabbitTransactionManager with a listener container where channelTransacted true  When using the following configuration  the message will never be acknowledged   &lt bean id  connectionFactory  class  org springframework amqp rabbit connection CachingConnectionFactory &gt   &lt constructor arg value  localhost  &gt    &lt property name  username  value  guest  &gt   &lt property name  password  value  guest  &gt   &lt  bean&gt    &lt bean id  rabbitTransactionManager  class  org springframework amqp rabbit transaction RabbitTransactionManager &gt      &lt property name  connectionFactory  ref  connectionFactory   &gt    &lt  bean&gt      &lt bean class  org springframework amqp rabbit listener SimpleMessageListenerContainer &gt      &lt property name  connectionFactory  ref  connectionFactory   &gt      &lt property name  queueNames  value  Queue   &gt      &lt property name  messageListener &gt      &lt bean class  org springframework amqp rabbit listener adapter MessageListenerAdapter &gt      &lt property name  delegate  ref  endpoint   &gt      &lt  bean&gt      &lt  property&gt      &lt property name  transactionManager  ref  rabbitTransactionManager   &gt      &lt property name  channelTransacted  value  true   &gt      &lt  bean&gt   &lt bean id  endpoint  class  amqp Endpoint   &gt    &lt rabbit admin connection factory  connectionFactory   &gt   &lt rabbit queue name  Queue   &gt    Attached is a zip file with a sample demo project that reproduces the issue  PS  The test was done with both 1 1 1 RELEASE and 1 1 2 BUID SNAPSHOT  This may be related to AMQP 190
262	ConcurrentModificationException with publish confirms  I m getting random ConcurrentModificationExceptions in the publish confirm code when sending messages from multiple threads  using the same rabbit template  Caused by  java util ConcurrentModificationException at java util TreeMap NavigableSubMap SubMapIterator nextEntry TreeMap java 1594  at java util TreeMap NavigableSubMap SubMapEntryIterator next TreeMap java 1642  at java util TreeMap NavigableSubMap SubMapEntryIterator next TreeMap java 1636  at org springframework amqp rabbit support PublisherCallbackChannelImpl processAck PublisherCallbackChannelImpl java 493  at org springframework amqp rabbit support PublisherCallbackChannelImpl handleAck PublisherCallbackChannelImpl java 474  at com rabbitmq client impl ChannelN callConfirmListeners ChannelN java 435  at com rabbitmq client impl ChannelN processAsync ChannelN java 351  at com rabbitmq client impl AMQChannel handleCompleteInboundCommand AMQChannel java 144  at com rabbitmq client impl AMQChannel handleFrame AMQChannel java 91  at com rabbitmq client impl AMQConnection MainLoop run AMQConnection java 526  Looking at the code  it seems that PublisherCallbackChannelImpl addPendingConfirm   is thread unsafe  It should synchronize the access to this pendingConfirms  just like processAck   does  I ve attached a possible fix
274	Listener Container Local Transactions Not Properly Set Up  When using local transactions  no external tx manager  and exposeListenerChannel is true  default   the synchronized resource does not have the synchronizedWithTransaction property set to true  This causes a downstream RabbitTemplate to close   the channel
275	Race Condition When Stopping Listener ContainerRace condition where messages can be rejected requeued during container stop before the consumer was canceled  The message can be redelivered to the blocking queue before the cancel  1  Cancel the consumer first 2  Drain the queue with reject requeue
331	When java lang Error e g OutOfMemory  occurs  threads do not abort  When an OutOfMemory occurs  threads do not abort  But  it is expected that threads will be abort in this situation
355	Fix Race Condition in Test CaseThe ErrorHandler is not called unless the container is active  the container is stopped as soon as the 3rd message is received  on exit from the onMessage method   So there is a  small  possibility that the container is not active when it&amp apos s time to invoke the ErrorHandler and the verify fails because it was only called twice
365	Fix Race Condition in Consumer Recovery Test CasesAnalysis  The test cases send 10 messages  The consumer uses manual ack and does a double ack on the first message causing the channel to be closed  It is a race between the broker closing the channel and the second message being received by the listener  The listener counts down a latch that the test is waiting on  If the broker loses the race  the channel is closed AFTER the second message is received by the listener and the message is redelivered after the consumer is recovered  This results in 11 messages being received and the final test for a null message fails  Solution In the listener  only count down the latch if the message is NOT a redelivery  because the latch would have already been counted down for this message   However  we can t just test the redelivered flag   the message might have been sent by the broker but not actually received by the listener  Add the message to a Set and only countdown the latch if it s not already received
469	Thread safety of ErlangTemplateErlangTemplate executeErlangRpc is not threadsafe when used with SingleConnectionFactory  The code in ErlangTemplate executeErlangRpc first calls connection sendRPC then calls connection receiveRPC    When used with the SingleConnectionFactory this means that another thread could also be using the same connection  The end result of this is that connection sendRPC and connection receiveRPC   requests become interleaved  I believe  but have not checked  that with SimpleConnectionFactory  this would not happen as each thread would have its own connection  I understand that thread safety is not documented  so should be not assumed  so I am issuing this bug mainly to request documentation on the thread safety of the ErlangTemplate  If ErlangTemplate is intended to be thread safe  this bug should be raised to  Critical
506	ConcurrentModificationException on RabbitTemplate getUnconfirmed  Although we re synchronized on pendingConfirms  the values are maps and we fail to synchronize on those while iterating removing
532	ConcurrentModificationException in PublisherCallbackChannelImpl  While testing continuous publishing to a RabbitMQ node that I blocked network traffic to  simulating a network partition   I got this ConcurrentModificationException in PublisherCallbackChannelImpl  the line number indicates that this happened in the pendingConfirms map  Looking at the source code  the code is guarded by synchronizing on the map  while other places in the code where the map is accessed are synchronized on the PublisherCallbackChannelImpl itself  Stacktrace below        Caused by  java util ConcurrentModificationException  null     at java util TreeMap PrivateEntryIterator nextEntry TreeMap java 1207  ~ na 1 8 0_60      at java util TreeMap EntryIterator next TreeMap java 1243  ~ na 1 8 0_60      at java util TreeMap EntryIterator next TreeMap java 1238  ~ na 1 8 0_60      at org springframework amqp rabbit support PublisherCallbackChannelImpl generateNacksForPendingAcks PublisherCallbackChannelImpl java 637  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit support PublisherCallbackChannelImpl close PublisherCallbackChannelImpl java 630  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit connection CachingConnectionFactory getChannel CachingConnectionFactory java 333  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit connection CachingConnectionFactory access 1100 CachingConnectionFactory java 75  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit connection CachingConnectionFactory ChannelCachingConnectionProxy createChannel CachingConnectionFactory java 763  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit connection ConnectionFactoryUtils 1 createChannel ConnectionFactoryUtils java 85  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit connection ConnectionFactoryUtils doGetTransactionalResourceHolder ConnectionFactoryUtils java 134  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit connection ConnectionFactoryUtils getTransactionalResourceHolder ConnectionFactoryUtils java 67  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit core RabbitTemplate doExecute RabbitTemplate java 1035  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit core RabbitTemplate execute RabbitTemplate java 1028  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit core RabbitTemplate execute RabbitTemplate java 1004  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit core RabbitAdmin initialize RabbitAdmin java 381  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit core RabbitAdmin 11 onCreate RabbitAdmin java 323  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit connection CompositeConnectionListener onCreate CompositeConnectionListener java 32  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit connection CachingConnectionFactory createConnection CachingConnectionFactory java 446  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit connection CachingConnectionFactory createBareChannel CachingConnectionFactory java 391  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit connection CachingConnectionFactory getCachedChannelProxy CachingConnectionFactory java 364  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit connection CachingConnectionFactory getChannel CachingConnectionFactory java 357  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit connection CachingConnectionFactory access 1100 CachingConnectionFactory java 75  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit connection CachingConnectionFactory ChannelCachingConnectionProxy createChannel CachingConnectionFactory java 763  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit connection ConnectionFactoryUtils 1 createChannel ConnectionFactoryUtils java 85  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit connection ConnectionFactoryUtils doGetTransactionalResourceHolder ConnectionFactoryUtils java 134  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit connection ConnectionFactoryUtils getTransactionalResourceHolder ConnectionFactoryUtils java 67  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit core RabbitTemplate doExecute RabbitTemplate java 1035  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit core RabbitTemplate execute RabbitTemplate java 1028  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit core RabbitTemplate send RabbitTemplate java 540  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework amqp rabbit core RabbitTemplate convertAndSend RabbitTemplate java 635  ~ spring rabbit 1 4 5 RELEASE jar na      at org springframework integration amqp outbound AmqpOutboundEndpoint send AmqpOutboundEndpoint java 331  ~ spring integration amqp 4 1 5 RELEASE jar na      at org springframework integration amqp outbound AmqpOutboundEndpoint handleRequestMessage AmqpOutboundEndpoint java 323  ~ spring integration amqp 4 1 5 RELEASE jar na
551	Intermittent build failure caused by non thread safe use of MockitoLocalizedQueueConnection FactoryTests testFailOver uses a Mockito mock on multiple threads  it changes the mock&amp apos s behaviour while the listener container is running and calling the mock to cause the container to fail over   This leads to intermittent test failures as Mockito does not support such multi threaded usage  The failure is    org mockito exceptions misusing WrongTypeOfReturnValue  org mockito exceptions misusing WrongTypeOfReturnValue      Boolean cannot be returned by toString       toString   should return String             If you&amp apos re unsure why you&amp apos re getting above error read on      Due to the nature of the syntax above problem might occur because      1  This exception  might  occur in wrongly written multi threaded tests      Please refer to Mockito FAQ on limitations of concurrency testing      2  A spy is stubbed using when spy foo    then   syntax  It is safer to stub spies         with doReturn Throw   family of methods  More in javadocs for Mockito spy   method           org mockito exceptions misusing WrongTypeOfReturnValue      Boolean cannot be returned by toString       toString   should return String             If you&amp apos re unsure why you&amp apos re getting above error read on      Due to the nature of the syntax above problem might occur because      1  This exception  might  occur in wrongly written multi threaded tests      Please refer to Mockito FAQ on limitations of concurrency testing      2  A spy is stubbed using when spy foo    then   syntax  It is safer to stub spies         with doReturn Throw   family of methods  More in javadocs for Mockito spy   method           at org springframework amqp rabbit connection LocalizedQueueConnectionFactoryTests testFailOver LocalizedQueueConnectionFactoryTests java 133      at sun reflect NativeMethodAccessorImpl invoke0 Native Method      at sun reflect NativeMethodAccessorImpl invoke NativeMethodAccessorImpl java 57      at sun reflect DelegatingMethodAccessorImpl invoke DelegatingMethodAccessorImpl java 43      at java lang reflect Method invoke Method java 606      at org junit runners model FrameworkMethod 1 runReflectiveCall FrameworkMethod java 50      at org junit internal runners model ReflectiveCallable run ReflectiveCallable java 12      at org junit runners model FrameworkMethod invokeExplosively FrameworkMethod java 47      at org junit internal runners statements InvokeMethod evaluate InvokeMethod java 17      at org junit runners ParentRunner runLeaf ParentRunner java 325      at org junit runners BlockJUnit4ClassRunner runChild BlockJUnit4ClassRunner java 78      at org junit runners BlockJUnit4ClassRunner runChild BlockJUnit4ClassRunner java 57      at org junit runners ParentRunner 3 run ParentRunner java 290      at org junit runners ParentRunner 1 schedule ParentRunner java 71      at org junit runners ParentRunner runChildren ParentRunner java 288      at org junit runners ParentRunner access 000 ParentRunner java 58      at org junit runners ParentRunner 2 evaluate ParentRunner java 268      at org junit runners ParentRunner run ParentRunner java 363      at org gradle api internal tasks testing junit JUnitTestClassExecuter runTestClass JUnitTestClassExecuter java 86      at org gradle api internal tasks testing junit JUnitTestClassExecuter execute JUnitTestClassExecuter java 49      at org gradle api internal tasks testing junit JUnitTestClassProcessor processTestClass JUnitTestClassProcessor java 64      at org gradle api internal tasks testing SuiteTestClassProcessor processTestClass SuiteTestClassProcessor java 50      at sun reflect GeneratedMethodAccessor37 invoke Unknown Source      at sun reflect DelegatingMethodAccessorImpl invoke DelegatingMethodAccessorImpl java 43      at java lang reflect Method invoke Method java 606      at org gradle messaging dispatch ReflectionDispatch dispatch ReflectionDispatch java 35      at org gradle messaging dispatch ReflectionDispatch dispatch ReflectionDispatch java 24      at org gradle messaging dispatch ContextClassLoaderDispatch dispatch ContextClassLoaderDispatch java 32      at org gradle messaging dispatch ProxyDispatchAdapter DispatchingInvocationHandler invoke ProxyDispatchAdapter java 93      at com sun proxy  Proxy2 processTestClass Unknown Source      at org gradle api internal tasks testing worker TestWorker processTestClass TestWorker java 106      at sun reflect GeneratedMethodAccessor36 invoke Unknown Source      at sun reflect DelegatingMethodAccessorImpl invoke DelegatingMethodAccessorImpl java 43      at java lang reflect Method invoke Method java 606      at org gradle messaging dispatch ReflectionDispatch dispatch ReflectionDispatch java 35      at org gradle messaging dispatch ReflectionDispatch dispatch ReflectionDispatch java 24      at org gradle messaging remote internal hub MessageHub Handler run MessageHub java 360      at org gradle internal concurrent ExecutorPolicy CatchAndRecordFailures onExecute ExecutorPolicy java 54      at org gradle internal concurrent StoppableExecutorImpl 1 run StoppableExecutorImpl java 40      at java util concurrent ThreadPoolExecutor runWorker ThreadPoolExecutor java 1145      at java util concurrent ThreadPoolExecutor Worker run ThreadPoolExecutor java 615      at java lang Thread run Thread java 745
648	Container Fails to RecoverContainer configured to listen on multiple queues  Delete a queue  suspend the consumer thread in handleCancel  Stop start the broker  The issue is that we detect there are other queues so we attempt to cancel those consumers  basicCacncel  but we ll never get a handleCancelOk call because the broker had been restarted  When we cancel the other consumers  we need to properly deal with failure to cancel  VESC 715