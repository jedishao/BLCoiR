199	Synchronisation during performance tests  Hi  During performance tests  I observed that several threads were in status  blocked   Below  the stack  The tests were carried out with jmeter with read only queries    http bio 8080  exec 52    Thread t 115 java lang Thread State  BLOCKED at java lang reflect Field declaredAnnotations Field java 1013   waiting to lock &lt 27df34b4&gt   a java lang reflect Field  owned by   http bio 8080  exec 31  t 94 at java lang reflect Field getAnnotation Field java 1000  at java lang reflect AccessibleObject isAnnotationPresent AccessibleObject java 168  at org springframework data mapping AnnotationBasedPersistentProperty isTransient AnnotationBasedPersistentProperty java 74  at org springframework data mapping BasicPersistentEntity doWithProperties BasicPersistentEntity java 111  at org springframework data document mongodb convert MappingMongoConverter read MappingMongoConverter java 230  at org springframework data document mongodb convert MappingMongoConverter read MappingMongoConverter java 174  at org springframework data document mongodb convert MappingMongoConverter read MappingMongoConverter java 128  at org springframework data document mongodb MongoTemplate ReadDbObjectCallback doWith MongoTemplate java 1655  at org springframework data document mongodb MongoTemplate executeFindMultiInternal MongoTemplate java 1426  at org springframework data document mongodb MongoTemplate doFind MongoTemplate java 1186  at org springframework data document mongodb MongoTemplate find MongoTemplate java 587  at org springframework data document mongodb MongoTemplate find MongoTemplate java 557  at  MongoOperations_1314237160b find  MongoOperations_1314237160b java
532	Multithreading authentication issue  I have come across an issue which results in the following exception to be thrown    java lang RuntimeException  org springframework data mongodb CannotGetMongoDbConnectionException  Failed to authenticate to database    This appears to be caused by multiple threads trying to authenticate a single DB instance  The bug appears to be in MongoDbUtils in the doGetDB   method  The method retrieves the DB object for a given name and checks if it is authenticated  if it is not authenticated then it will authenticate it with the given username and password  However  if two threads check the same DB object they will both attempt to authenticate which leads to the exception being thrown  I have checked the latest source code in the git repository and the bug still appears to be present  To solve this issue I have replaced lines 109   118 with    if  credentialsGiven &amp &amp  db isAuthenticated          String username   credentials getUsername        String password   credentials hasPassword     credentials getPassword     null      synchronized  db        if  db isAuthenticated   &amp &amp  db authenticate username  password    null   null   password toCharArray           throw new CannotGetMongoDbConnectionException  Failed to authenticate to database      databaseName           username        username       password        password        databaseName  credentials                     The synchronized block could be moved to include both if statements which would remove the need for the second call to isAuthenticated   but it would mean that each time the doGetDb   method is called the synchronized block will be entered  Whereas the above will only be synchronized on calls to doGetDb   when the db has not been authenticated  with the compromise that the isAuthenticated   method has to be called twice  I have run the above fix  well the same fix based on the 1 0 4 RELEASE code  and it appears to solve the issue  A second issue to be aware of is the pre version 2 9 0 of the java mongo driver has a multithreading bug described in the link below  I have had a look a the latest dev version of spring mongo and it is still using 2 7 1 so it would be worth considering the upgrade  https   jira mongodb org browse JAVA 582
622	An unversioned object should be created using insert   instead of save MongoTemplate doSaveVersioned   uses doSave   to store an unversioned object  It should rather use doInsert   to avoid race conditions on concurrent inserts
737	Extra MongoSynchronizations cause TransactionSynchronizationManager to throw IllegalStateException on transaction completeMultiple Mongo databases are being accessed in a transactional test case  When the transaction is rolled back at the end of the test  the following exception is thrown  2013 08 01 19 55 56 774 ERROR  org springframework transaction support TransactionSynchronizationUtils    &lt TransactionSynchronization beforeCompletion threw exception&gt  java lang IllegalStateException  No value for key  Mongo  localhost 127 0 0 1 27017  bound to thread  main  at org springframework transaction support TransactionSynchronizationManager unbindResource TransactionSynchronizationManager java 209  at org springframework transaction support ResourceHolderSynchronization beforeCompletion ResourceHolderSynchronization java 69  at org springframework transaction support TransactionSynchronizationUtils triggerBeforeCompletion TransactionSynchronizationUtils java 106  at org springframework transaction support AbstractPlatformTransactionManager triggerBeforeCompletion AbstractPlatformTransactionManager java 937  at org springframework transaction support AbstractPlatformTransactionManager processRollback AbstractPlatformTransactionManager java 834  at org springframework transaction support AbstractPlatformTransactionManager rollback AbstractPlatformTransactionManager java 822  at org springframework test context transaction TransactionalTestExecutionListener TransactionContext endTransaction TransactionalTestExecutionListener java 519  at org springframework test context transaction TransactionalTestExecutionListener endTransaction TransactionalTestExecutionListener java 293  at org springframework test context transaction TransactionalTestExecutionListener afterTestMethod TransactionalTestExecutionListener java 186  at org springframework test context TestContextManager afterTestMethod TestContextManager java 406  at org springframework test context junit4 statements RunAfterTestMethodCallbacks evaluate RunAfterTestMethodCallbacks java 91  at org springframework test context junit4 statements SpringRepeat evaluate SpringRepeat java 72  at org springframework test context junit4 SpringJUnit4ClassRunner runChild SpringJUnit4ClassRunner java 231  at org junit runners BlockJUnit4ClassRunner runChild BlockJUnit4ClassRunner java 47  at org junit runners ParentRunner 3 run ParentRunner java 231  at org junit runners ParentRunner 1 schedule ParentRunner java 60  at org junit runners ParentRunner runChildren ParentRunner java 229  at org junit runners ParentRunner access 000 ParentRunner java 50  at org junit runners ParentRunner 2 evaluate ParentRunner java 222  at org springframework test context junit4 statements RunBeforeTestClassCallbacks evaluate RunBeforeTestClassCallbacks java 61  at org springframework test context junit4 statements RunAfterTestClassCallbacks evaluate RunAfterTestClassCallbacks java 71  at org junit runners ParentRunner run ParentRunner java 300  at org springframework test context junit4 SpringJUnit4ClassRunner run SpringJUnit4ClassRunner java 174  at org junit runner JUnitCore run JUnitCore java 157  at com intellij junit4 JUnit4IdeaTestRunner startRunnerWithArgs JUnit4IdeaTestRunner java 76  at com intellij rt execution junit JUnitStarter prepareStreamsAndStart JUnitStarter java 195  at com intellij rt execution junit JUnitStarter main JUnitStarter java 63  This is a similar stack trace that was filed for DATAMONGO 546  I looked for a code resolution to that issue  but it appears that it was closed because the reporter upgraded and the issue disappeared  After some debugging of the interaction between MongoDbUtils and TransactionSynchronizationManager  I have a working theory as to the cause  In a nutshell  MongoDbUtils invokes TransactionSynchronizationManager for each database in the same Mongo instance  This ends up registering two MongoSynchronizations that have the same holder  As such  there is only one resource bound in the TransactionSynchronizationManager   see MongoDbUtils java lines 124 139   When the transaction is completed  TransactionSynchronizationUtils triggerBeforeCompletion   is invoked and it iterates through the MongoSynchronizations in effect invoking unbindResource   for each  The first database&amp apos s synchronization unbinds the holder by Mongo key  The second fails because the holder is only bound once  I am willing to submit a patch for this issue that does one of two things  1  Override MongoSynchronization beforeCompletion   and MongoSynchronization suspend   so that they utilize unbindResourceIfPossible    or 2  Modify MongoDbUtils doGetDB   so that it only registers one MongoSynchronization per Mongo instead of one per database  I am not sure which of these two options is  better   so some feedback from the committer community would be appreciated before I get too far into the weeds