29585	Core Exception as resource tree is locked initializing classpath container  Java Model Exception  Core Exception  code 4  The resource tree is locked for modifications  at org eclipse jdt internal launching JREContainerInitializer initialize  JREContainerInitializer java 59  at org eclipse core internal runtime InternalPlatform run  InternalPlatform java 852  at org eclipse jdt internal core JavaProject getResolvedClasspath  JavaProject java 1490  at org eclipse jdt internal core JavaProject getResolvedClasspath  JavaProject java 1406  at org eclipse jdt internal core JavaProject getResolvedClasspath  JavaProject java 1382  at org eclipse jdt internal core DeltaProcessor initializeRoots  DeltaProcessor java 1076  at org eclipse jdt internal core DeltaProcessor processResourceDelta  DeltaProcessor java 1349  at org eclipse jdt internal core DeltaProcessor resourceChanged  DeltaProcessor java 1636  at org eclipse core internal events NotificationManager 1 run  NotificationManager java 137  at org eclipse core internal runtime InternalPlatform run  InternalPlatform java 852  at org eclipse core internal events NotificationManager notify  NotificationManager java 152  at org eclipse core internal events NotificationManager broadcastChanges  NotificationManager java 67  at org eclipse core internal resources Workspace broadcastChanges  Workspace java 154  at org eclipse core internal resources Workspace endOperation  Workspace java 885  at org eclipse debug internal core BreakpointManager 5 run  BreakpointManager java 690
58314	Make ASTs thread safe for multiple readers  20040413 Found this exception in the console  My guess is that came from visiting the AST from multiple threads  The cursor managment doesn t seem to be thread save  java lang NullPointerException at java lang Throwable  init  Throwable java  at java lang Throwable  init  Throwable java  at org eclipse jdt core dom ASTNode NodeList releaseCursor  ASTNode java  at org eclipse jdt core dom ASTNode acceptChildren ASTNode java  at org eclipse jdt core dom CompilationUnit accept0  CompilationUnit java   at org eclipse jdt core dom ASTNode accept ASTNode java  at org eclipse jdt internal ui javaeditor OverrideIndicatorManager updat eAnnotations OverrideIndicatorManager java  at org eclipse jdt internal ui javaeditor OverrideIndicatorManager recon ciled OverrideIndicatorManager java 271  at org eclipse jdt internal ui javaeditor CompilationUnitEditor reconcil ed CompilationUnitEditor java  at org eclipse jdt internal ui text java JavaReconcilingStrategy reconci le JavaReconcilingStrategy java  at org eclipse jdt internal ui text java JavaReconcilingStrategy reconci le JavaReconcilingStrategy java 118  at org eclipse jface text reconciler CompositeReconcilingStrategy reconc ile CompositeReconcilingStrategy java  at org eclipse jdt internal ui text JavaCompositeReconcilingStrategy rec oncile JavaCompositeReconcilingStrategy java  at org eclipse jface text reconciler MonoReconciler process  MonoReconcil er java 76  at org eclipse jface text reconciler AbstractReconciler BackgroundThread  run AbstractReconciler java
291322	Test errors when running JDT Core tests on Windows 7  Some tests randomly cause exceptions on tear down when running on Windows 7  This is caused by a known Windows issue that a lock on a file might not get freed immediately and hence subsequent calls to e g  delete the file fails  Pattern is to retry several times
327143	IndexManager should not accept new jobs if the processing thread is null  I ran into a case where a simulateExit   was called and the next touch     call failed  The consequence was that the simulateRestart   was never called  But a new jar file added ended up being added into the waiting jobs and the index manager was in an infinite loop and the number of awaiting jobs was always 1 and since the processing thread was null  that job was never run  So we must make sure that the index manager doesn t accept new jobs if the processing thread is null or if stops the loop when there is an awaiting job but the thread is null  Right now the loop never ends unless the number of awaiting jobs is 0
421473	Delayed assignment of declaring scope for arguments creates a race condition  BETA_JAVA8  Staring at LocalVariableBinding getAnnotations    I see that there is a potential race condition there  The setting of declaringScope happens far away from the creation of LVB and if there are calls in between to getAnnotations    we can t retrieve it from the annotation holder since this requires a handle to enclosing source type which is obtainable only from a scope  To circumvent this  there is a block of code in this method that manufactures an array of annotation bindings and returns it without going to the holder  However  this is problematic since with Java 8 some of the annotations could actually be type annotations which should be detached from the parameters  This block of code itself cannot filter the type annotations because there are clients that need to see all the annotations to transfer the type annotations to type  I think the solution is to set the declaring scope eagerly  At least for arguments  I don t know what side effects ensue for doing this for all locals  Patch will follow shortly
431275	Deadlock in JavaModelManager PerProjectInfo and DeltaProcessingState  An adopter product  IBM  than runs in headless mode is hitting a deadlock with monitors org eclipse jdt internal core JavaModelManager PerProjectInfo and org eclipse jdt internal core DeltaProcessingState  This product started to hit this deadlock with JDT 3 6 50 v_B79_R36x_J7  org eclipse jdt core_3 6 50 v_B79_R36x_J7 jar   They did not see this deadlock when they were using 3 6 4 v_A79_R36x  org eclipse jdt core_3 6 4 v_A79_R36x   I noticed that the patch in bugzilla https   bugs eclipse org bugs show_bug cgi id 338006 was put into the stream between those two versions  although the bugzilla was targeted to 3 7  maybe was backported   and the code added there appears in all the stack traces I have collected  specifically  the call to the new method DeltaProcessor addPackageFragmentRoot in DeltaProcessor addToParentInfo   BTW  I compared the code with the latest code in master  and the code path involved in these stacks has not changed  so I believe this could happen in master as well  Below are the stack traces  Thread Name Worker 2 State Deadlock Blocked Monitor Owns Monitor Lock on org eclipse jdt internal core DeltaProcessingState 0x0000000007292CF8 Waiting for Monitor Lock on org eclipse jdt internal core JavaModelManager PerProjectInfo 0x000000001603D008 Java Stack Thread Name main State Deadlock Blocked Monitor Owns Monitor Lock on org eclipse jdt internal core JavaModelManager PerProjectInfo 0x000000001603D008 Waiting for Monitor Lock on org eclipse jdt internal core DeltaProcessingState 0x0000000007292CF8 Java Stack      Adopter code           Adopter code           Adopter code
464570	race condition on static field CodeStream noVisibleLocals in method CodeStream init    weblogic make use of JDT to compile the translated java source from jsp files to java bytecode with multi threads  ArrayIndexOutOfBoundsException occurs intermittently as following stack showing  weblogic repackaged the jdt jar for avoiding potential class conflict   java lang ArrayIndexOutOfBoundsException This AIOOBE should be caused by race condition on the shared static field org eclipse jdt internal compiler codegen CodeStream noVisibleLocals  it s easy to figure out a case which can reproduce such AIOOBE  one of the possible fixes may be  index 8a1c987  58e40b7 100644     a org eclipse jdt core compiler org eclipse jdt internal compiler codegen CodeStream java     b org eclipse jdt core compiler org eclipse jdt internal compiler codegen CodeStream java     4108 29  4108 37    public void init ClassFile targetClassFile    this pcToSourceMapSize   0  this lastEntryPC   0  int length   this visibleLocals length          LocalVariableBinding   noVisibleLocals   this noVisibleLocals  if  noVisibleLocals length   length    noVisibleLocals   new LocalVariableBinding length                   this noVisibleLocals   noVisibleLocals    System arraycopy noVisibleLocals  0  this visibleLocals  0  length   this visibleLocalsCount   0  length   this locals length          LocalVariableBinding   noLocals   this noLocals  if  noLocals length   length    noLocals   new LocalVariableBinding length                   this noLocals   noLocals    System arraycopy noLocals  0  this locals  0  length   this allLocalsCounter   0  length   this exceptionLabels length          ExceptionLabel   noExceptionHandlers   this noExceptionHandlers  if  noExceptionHandlers length   length    noExceptionHandlers   new ExceptionLabel length                   this noExceptionHandlers   noExceptionHandlers    System arraycopy noExceptionHandlers  0  this exceptionLabels  0  length   this exceptionLabelsCounter   0  length   this labels length          BranchLabel   noLabels   this noLabels  if  noLabels length   length    noLabels   new BranchLabel length                   this noLabels   noLabels    System arraycopy noLabels  0  this labels  0  length   this countLabels   0