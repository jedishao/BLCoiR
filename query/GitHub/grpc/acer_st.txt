17	Race Netty cancel stream creation AbstractClientStream cancel won cancel stream wire appears stream allocated comment send cancellation remote side allocated stream closed server side aware stream transport notified stream destruction stream eventually created transport cancelled issue problem OkHttp transport allocates stream returning newly created stream Netty delays allocation stream headers asynchronously delayed MAX CONCURRENT STREAMS appears optimization AbstractClientStream removed outright sendCancel doc updated expectation handle cases opposed RST STREAM OkHttp Netty handling cases importantly optimization highly prone races allocation occurring transport thread AbstractClientStream cancel happening application thread normal synchronization application transport threads efficient simpler Race Netty cancel stream creation stream ping cancel close fail channel frame message
120	Remove blocking parts NettyClientTransport NettyClientTransport newStream blocking operation blocks HEADERS frame written wire behavior people asynchronous API expect blocking severe performance issues QPS Client threads created concurrent calls Threads concurrent calls OOM blocking lead deadlocking EventLoop cases DirectExecutor scenario deadlock happen EventLoop completely flush HEADERS frame wire Netty internally create task flush remaining bytes task task queue task completed EventLoop Thread blocked newStream method waiting task completed issue depends resolved Remove blocking parts NettyClientTransport server channel transport stream handler set alive service
238	Race Server handler initialization initializing incoming client connection call startAsync transport registers handler separate thread race fixed finished Service removal Symptom DEBUG channel DefaultChannelPipeline Discarded inbound message SimpleLeakAwareByteBuf PooledUnsafeDirectByteBuf ridx widx cap reached tail pipeline check pipeline configuration quickest call awaitRunning initChannel reduces rate connections connect expedient solution finished nmittler thoughts Race Server handler initialization channel stream fail handler server call client connection
330	OkHttpClientTransport onGoAway races startPendingStreams onGoAway phases lock cleanup phase collects streams terminate sets goAway startPendingStreams observe goAway creates streams failed goAway initial remove failPendingStreams simply integrate phases onGoAway phases holding lock onGoAway replace pendingStreams empty list holding lock call transportReportStatus OkHttpClientTransport onGoAway races startPendingStreams stream transport server socket set client headers message
583	OkHttp cancellation properly OkHttpClientStream sendCancel calls finishStream application thread finishStream calls transportReportStatus lock held correctly transportReportStatus called transport thread lock held usages streams lock held finishStream data data race finishStream sending DATA frames RST STREAM stream lock synchronization isn providing benefit isn leading correct code OkHttp cancellation properly listener message context cancel cancellation set call stream
605	BufferingHttp ConnectionEncoder shutdown properly channelInactive nmittler nasty race condition handling channelInactive NettyClientHandler bit NettyClientHandler channelInactive active stream report closure GRPC NettyClientHandler channelInactive Http ConnectionHandler channelInactive Http ConnectionHandler BaseDecoder channelInactive active stream call close BufferingHttp ConnectionEncoder Http ConnectionAdapter onStreamClose creating stream adds stream active list OOPS stream closed reproduces NettyClientTransportTest bufferedStreamsShouldBeClosedWhenTransportTerminates beta streams created side channel inactivation undesirable Potential fixes include Reorder teardown Http ConnectionHandler BaseDecoder channelInactive encoders closed streams closed BufferedHttp ConnectionEncoder check channel isActive create streams BufferingHttp ConnectionEncoder shutdown properly channelInactive stream fail channel close ping data transport connection
696	ChannelImpl TransportListener shutdown transportShutdown ServerImpl ServerListenerImpl InProcessTransport AbstractIdleService 2 2 serverShutdown notifyShutdown AbstractGrpcServer ServerImpl Shutdown In process transport deadlock during shutdown
887	ClientCalls CallToStreamObserverAdapter OkHttpClientStream internalSendFrame Stream MessageFramer timeoutOnSleepingServer sendFrame ClientCallImpl deliverFrame commitToSink AbstractStream 2 NullPointerException OkHttp  race between sendCancel and sendFrame
999	race condition ServerImpl start shutdown start called concurrently shared executor released actual problem ThreadSafe annotation race condition ServerImpl start shutdown call transport server callback stream context start subchannel
1253	checkState Preconditions asyncUnaryRequestCall check ClientCallImpl ForwardingClientCall ClientCalls Call startCall request Client IllegalStateException ClientCallImpl operations race with Context cancellation
1343	Deadline fire stream started ClientCallImpl deadline scheduled stream start deadline elapsed runnable executed race start looked OkHttp impacted NullPointerException thrown notify stream listener cancellation exception won logged result hung stream completes logging wrong discovered timeout sleeping server android flaky small timeout test fail awaitCompletion carl mastrangelo FYI Deadline fire stream started call deadline message stream context cancel set method
1408	Potential risk deadlock calling listeners locks Methods ClientTransport Listener ServerTransportListener called lock biggest reason locking guarantee ordering multiple methods listener listeners call channel layer code turn acquire locks forms transport lock channel lock lock order hand channel layer calls transport layer form channel lock transport lock lock order deadlock issue today implicit rule today channel layer hold lock calling transport code base grows harder track requirement solution schedule listener calls serialized executor cost thread listener order guaranteed locking options Potential risk deadlock calling listeners locks service context call listener server executor transport stream
1510	DelayedClientTransport InProcessTransport deadlock chance deadlock DelayedClientTransport linked InProcessTransport pull DelayedClientTransport InProcessTransport deadlock server stream transport set call executor message client
1981	Executor usage ClientCallImpl races channel shutdown termination ManagedChannelImpl clear scheduledExecutor shutdown releases closes executor maybeTerminateChannel newCall ClientCallImpl checks shutdown channel ClientCallImpl relies FailingClientTransport expected behavior ClientCallImpl passed executors scheduling deadline timer invoking call listener ClientCallImpl schedule deadline timer channel shut NPE runs call listener shared executor closed SharedResourceHolder DESTROY DELAY SECONDS references application calls Call start late RejectedExecutionException current tests testing cases doesn issue affect people Calls channel shutdown figure solution executor cleared returned shared pool scheduledExecutor Executor usage ClientCallImpl races channel shutdown termination channel call subchannel stream deadline time executor message
2152	ClientTransportLifecycleManager DelayedClientTransport startBackoff NettyClientTransport 4 Transport TransportSet TransportSet TransportListener operationComplete scheduleBackoff access 1500 transportShutdown fireException invokeException Deadlock found in TransportSet
2246	DelayedClientTransport TransportSet 1EndOfCurrentBackoff run hasPendingStreams ScheduledThreadPoolExecutor ScheduledFutureTask Executors RunnableAdapter LogExceptionRunnable access 201 ThreadPoolExecutor Worker ThreadPoolExecutor Transport LogException Deadlock with TransportSet
2388	DelayedClientTransport ClientCalls asyncUnaryRequestCall Call GrpcService 1 1 TransportSet BaseTransportListener blockingUnaryCall ForwardingClientCall ClientCallImpl start newStream LogException New deadlock in TransportSet and GrpcTimer
2453	Threading StatsTraceContext StatsTraceContext assumes thread safety fine RPC closed application ClientCall ServerCall thread safe RPC closed application cancelled side closed transport errors call callEnded transport thread application thread application notified closure time send messages wireBytesSent called callEnded trigger check failure data race counter fields wireBytesSent write callEnded reads threads synchronization remove preconditions checks writeBytesSent data race kind synchronization required atomics ejona Threading StatsTraceContext message server stream transport client call status set
2562	Race pick transport shutdown steps transport READY selected newStream called selected transport transport shutdown LoadBalancer channel idle mode steps Step fail spuriously work adding delay stopping selecting subchannel owns transport shutting delay longer time Step Step race won happen ideal relies timing work correctly fail extreme cases time steps longer pre set delay solution differentiate racy shutdown intended shutdown Channel shutdown good response racy shutdown transport selection retried clientTransportProvider ManagedChannelImpl position Channel shutdown clientTransportProvider call newStream start stream started stream ClientCallImpl transport Race pick transport shutdown transport ping subchannel channel ring idle create client
2865	Rare race condition Client prominent compression race occurs typical race Client starts RPC transport server DelayedClientTransport server handles RPC sends headers compressed message client sees headers executing queued stream callbacks channel executor threads transport thread client sees Data frame decompress network thread fails headers processed stream failed queued callback onHeaders executed app thread root mentioned isn compression ClientInterceptors headers data received solution temporary move OkHttp AbstractClientStream move decompression ClientCallImpl stream decompression interceptors Rare race condition Client call stream stats message fault client transport calls
3084	Potential deadlock calling callbacks holding lock InProcessClientStream InProcessServerStream InProcessClientStream serverStreamListener called InProcessClientStream vice versa application call methods ClientCall ServerCall callbacks assuming care thread safety method calls Call objects deadlock direct executor Thread InProcessClientStream serverRequested locks InProcessClientStream InProcessClientStream serverStreamListener messageRead Eventually reaches application callback calls ServerCall close InProcessServerStream close locks InProcessServerStream Thread InProcessServerStream clientRequested locks InProcessServerStream InProcessServerStream clientStreamListener messageRead Eventually reaches application callback calls ClientCall close InProcessClientStream close locks InProcessClientStream locks acquired reverse orders threads deadlock fundamental issue call application code holding lock don application code control order subsequent locking OkHttp issue OkHttpClientStream transportDataReceived call application code called lock ChannelExecutor renamed prevent calling callbacks holding lock Potential deadlock calling callbacks holding lock stream transport server call start context socket http
3207	close TestServiceImpl 6 1 MessageFramer ForwardingServerCall SimpleForwardingServerCall PartialForwardingServerCall ServerCallImpl ForwardingServerCall Server AbstractServerStream Call endOfMessages onError LogException Data race in TestServiceImpl
5015	Revisit LoadBalancer API threading model LoadBalancer main thread safe guaranteed called SynchronizationContext relieved implementors worrying synchronization auxiliary interfaces SubchannelPicker intentionally thread safe critical path Helper Subchannel critical path thread safe implemented GRPC thought making thread safe provide convenience callers client side health checking Google internal request routing work revealed cases LoadBalancer wrap delegate adding additional logic Helper Subchannel wrapped process HealthCheckingLoadBalancerFactory wraps Helper createSubchannel initialize health checking created Subchannel find easier implement createSubchannel called SynchronizationContext createSubchannel thread safe fact LoadBalancers call createSubchannel SynchronizationContext race handleSubchannelState trivial handle cancel benefits threading guarantee main LoadBalancer apparent issue createSubchannel calling SynchronizationContext log warning discuss sense Helper Subchannel thread safe require called SynchronizationContext argument thread safety Helper Subchannel thread safe based mindset implementation GRPC fact party developer wrap add logic burden logic thread safe argument thread safety Subchannel requestConnection called critical path doesn guarantee action caller caller easily enqueue SynchronizationContext Revisit LoadBalancer API threading model subchannel fail channel policy load resolution ready message
5450	Data race NameResolve Listener onError NameResolve Listener onError called concurrently threads code onError impl data race haveBackends haveBackends channelLogger log ChannelLogLevel WARNING Failed resolve error haveBackends Data race NameResolve Listener onError stream set message call transport inbound socket headers
6601	transportCreated ServerImpl ServerListenerImpl initChannel NettyServer 1 ChannelInitializer Server NettyServer DefaultPromise wait ServerImpl Impl Deadlock on start gRPC server
6641	Deadlock server transport multiple ports ServerImpl start calls NettyServer start holding ServerImpl lock NettyServer start awaits submitted runnable eventloop pending runnable executed eventloop executing task ServerListenerImpl transportCreated acquire ServerImpl lock causing deadlock deadlock multiple port server transport usecase deadlock mechanism Deadlock server transport multiple ports server call stream transport message set client context
8190	park LockSupport AbstractQueuedSynchronizer ConditionObject ClientCalls ThreadlessExecutor LinkedBlockingQueue ManagedChannelImpl blockingUnaryCall Unsafe ManagedChannelImpl LbHelperImpl waitAndDrain refreshAndResetNameResolution grpc hang due to the ELG thread placement of NameResolver refresh method
8536	BinderChannel flow control stuck load version gRPC Java head environment Linux Android Steps reproduce bug launching unary GetTile gRPC interaction Android processes Response message clients request tiles Telemetry field clients start experiencing DEADLINE EXCEEDED errors calls server process Channels succeed lowering BinderTransport TRANSACTION BYTES WINDOW requesting tiles loop reproduce symptoms locally debugger server BinderTransport transmitWindowFull stuck bytes acknowledged client server generating response messages isn wire problem BinderTransport sendTransaction updates transmitWindowFull based unsynchronized read acknowledgedOutgoingBytes include concurrent updates handleAcknowledgedBytes thread expect Binder transactions pause flow control kicks resume outstanding bytes acknowledged Outstanding bytes acknowledged transmitWindowFull remains inconsistent acknowledgedOutgoingBytes numOutgoingBytes BinderChannel flow control stuck load stream channel bytes transport set window message server
8565	Data race RetriableStream onReady stack trace RetriableStream onReady calling isReady transport thread isReady calling frame isClosed framer closed thread safe WARNING ThreadSanitizer data race pid Write size cef thread grpc internal MessageFramer close MessageFramer java grpc internal AbstractStream endOfMessages AbstractStream java grpc internal AbstractClientStream halfClose AbstractClientStream java grpc internal ForwardingClientStream halfClose ForwardingClientStream java grpc internal RetriableStream HalfCloseEntry runWith Lio grpc internal RetriableStream Substream RetriableStream java grpc internal RetriableStream delayOrExecute Lio grpc internal RetriableStream BufferEntry RetriableStream java grpc internal RetriableStream halfClose RetriableStream java grpc internal ClientCallImpl halfCloseInternal ClientCallImpl java grpc internal ClientCallImpl halfClose ClientCallImpl java grpc internal DelayedClientCall DelayedClientCall java grpc internal DelayedClientCall delayOrExecute Ljava lang Runnable DelayedClientCall java grpc internal DelayedClientCall halfClose DelayedClientCall java grpc PartialForwardingClientCall halfClose PartialForwardingClientCall java grpc ForwardingClientCall halfClose ForwardingClientCall java grpc ForwardingClientCall SimpleForwardingClientCall halfClose ForwardingClientCall java grpc PartialForwardingClientCall halfClose PartialForwardingClientCall java grpc ForwardingClientCall halfClose ForwardingClientCall java grpc ForwardingClientCall SimpleForwardingClientCall halfClose ForwardingClientCall java grpc stub ClientCalls asyncUnaryRequestCall Lio grpc ClientCall Ljava lang Object Lio grpc stub ClientCalls StartableListener ClientCalls java grpc stub ClientCalls asyncUnaryRequestCall Lio grpc ClientCall Ljava lang Object Lio grpc stub StreamObserver ClientCalls java grpc stub ClientCalls asyncUnaryCall Lio grpc ClientCall Ljava lang Object Lio grpc stub StreamObserver ClientCalls java google apphosting runtime grpc GrpcClientContext call Lio grpc Channel Lio grpc MethodDescriptor Ljava lang Object Lio grpc stub StreamObserver GrpcClientContext java google apphosting runtime anyrpc GrpcClients GrpcEvaluationRuntimeClient handleRequest Lcom google apphosting runtime anyrpc AnyRpcClientContext Lcom google apphosting base protos RuntimePb UPRequest Lcom google apphosting runtime anyrpc AnyRpcCallbac GrpcClients java google apphosting runtime anyrpc AbstractRpcCompatibilityTest
8642	CsdsService properly XdsClient code CsdsService grpc java xds src main java grpc xds CsdsService java Lines ClientConfig getClientConfigForXdsClient XdsClient xdsClient ListenersConfigDump ldsConfig dumpLdsConfig xdsClient getSubscribedResourcesMetadata ResourceType LDS xdsClient getCurrentVersion ResourceType LDS initial issue getSubscribedResourcesMetadata getCurrentVersion synchronization grpc java xds src main java grpc xds ClientXdsClient java Lines Map String ResourceMetadata getSubscribedResourcesMetadata ResourceType type Map String ResourceMetadata metadataMap HashMap Map Entry String ResourceSubscriber entry getSubscribedResourcesMap type entrySet metadataMap entry getKey entry getValue metadata metadataMap grpc java xds src main java grpc xds AbstractXdsClient java Lines String getCurrentVersion ResourceType type bad xdsClient API insufficient CSDS method calls atomic methods thread safe version match resources returned CsdsService properly XdsClient xds resource config update call stream cluster server
8914	handleTransaction sendAcknowledgeBytes BinderTransport LeakSafeOneWayBinder Binder onTransact transact handle Transaction Transport Transact binder  Deadlock due to unexpected re entrancy of transactions on process local Binder