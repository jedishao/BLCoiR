1986	IndexService getAndCreateLastIndexFile threadsafe issue  The issue tracker is ONLY used for bug report feature request need to follow RIP process   Keep in mind  please check whether there is an existing same report before your raise a new one  Alternately  especially if your communication is not a bug report   you can send mail to our mailing lists  We welcome any friendly suggestions  bug fixes  collaboration and other improvements  Please ensure that your bug report is clear and that it is complete  Otherwise  we may be unable to understand it or to reproduce it  either of which would prevent us from fixing the bug  We strongly recommend the report bug report or feature request  could include some hints as the following  BUG REPORT  Please describe the issue you observed     What did you do  The steps to reproduce     What did you expect to see  thread safe in function getAndCreateLastIndexFile   What did you see instead      Please tell us about your environment    Other information  e g  detailed explanation  logs  related issues  suggestions how to fix  etc     FEATURE REQUEST  Please describe the feature you are requesting   getAndCreateLastIndexFile execute in thread ReputMessageService  and ReputMessageService is single thread  so  1、getAndCreateLastIndexFile do not need to use lock readWriteLock。 2、if want to use readWriteLock，where IndexFile is null we try to create new file，it s not thread safe。  public IndexFile getAndCreateLastIndexFile     IndexFile indexFile   null  IndexFile prevIndexFile   null  long lastUpdateEndPhyOffset   0  long lastUpdateIndexTimestamp   0     this readWriteLock readLock   lock    if  !this indexFileList isEmpty      IndexFile tmp   this indexFileList get this indexFileList size     1   if  !tmp isWriteFull      indexFile   tmp    else   lastUpdateEndPhyOffset   tmp getEndPhyOffset    lastUpdateIndexTimestamp   tmp getEndTimestamp    prevIndexFile   tmp       this readWriteLock readLock   unlock          not thread safe here if  indexFile    null    try   String fileName   this storePath   File separator   UtilAll timeMillisToHumanString System currentTimeMillis     indexFile   new IndexFile fileName  this hashSlotNum  this indexNum  lastUpdateEndPhyOffset  lastUpdateIndexTimestamp   this readWriteLock writeLock   lock    this indexFileList add indexFile     catch  Exception e    log error  getLastIndexFile exception    e     finally   this readWriteLock writeLock   unlock       if  indexFile !  null    final IndexFile flushThisFile   prevIndexFile  Thread flushThread   new Thread new Runnable      Override public void run     IndexService this flush flushThisFile         FlushIndexFileThread     flushThread setDaemon true   flushThread start         return indexFile       Provide any additional detail on your proposed use case for this feature    Indicate the importance of this issue to you  blocker  must have  should have  nice to have   Are you currently using any workarounds to address this issue    If there are some sub tasks using     for each subtask and create a corresponding issue to map to the sub task     sub task1 issue number  sub task1 description here  sub task2 issue number  sub task2 description here
4143	Unnecessary file lock in IndexFile and IndexService  The FileLock used in IndexFile and IndexService is unnecessary  so we can remove it
4686	The lock was released in the wrong position  BUG REPORT Please describe the issue you observed  What did you do  The steps to reproduce    In org apache rocketmq namesrv kvconfig KVConfigManager putKVConfig   try   this lock writeLock   lockInterruptibly    try   HashMap String  String  kvTable   this configTable get namespace   if  null    kvTable    kvTable   new HashMap      this configTable put namespace  kvTable   log info  putKVConfig create new Namespace      namespace      final String prev   kvTable put key  value   if  null !  prev    log info  putKVConfig update config item  Namespace     Key     Value       namespace  key  value     else   log info  putKVConfig create new config item  Namespace     Key     Value       namespace  key  value       finally   this lock writeLock   unlock        catch  InterruptedException e    log error  putKVConfig InterruptedException   e      The lock should be released in the outermost layer in case the lock cannot be released due to an exception after it is acquired  What is expected to see   The lock is released in the correct position  What did you see instead   The lock is released in the wrong position  Please tell us about your environment   develop  Other information  e g  detailed explanation  logs  related issues  suggestions on how to fix  etc    The thread should return to the interrupted state after being interrupted
5039	localHostName   get stuck when constructing the BrokerIdentity object   main   1 prio 5 os_prio 31 tid 0x00007ff911809000 nid 0x1603 runnable  0x000070000933d000  java lang Thread State  RUNNABLE   locked  0x00000006c00da5d0   a java lang Object    locked  0x00000006c0090950   a org apache rocketmq broker BrokerController   The BrokerIdentity is frequently constructed in many cases  It s not a good idea to initialize an instance of InetAddress every time