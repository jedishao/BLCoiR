Pertarget aspect instantiation is not thread-safe.
The way in which pertarget aspects compiled with ajc check if a given target already has an aspect is not thread safe.
When two different threads trigger an advice on a target object for the first time at the same time, sometimes the aspect for that target gets created twice.

The following code demonstrates the problem:

The following pertarget aspect will add itself to a (synchronized) set in another class in it's constructor.


This class creates 10000 target objects and has two separate threads call a method (that causes the aspect to be instantiated) on each object. The aspects add themselves to the "aspects" set and this set's size is printed when all threads have finished.


When compiled with ajc and run, the main method prints values over 10000 (something like 10030-10060 typically), which means that some target objects get multiple aspect instances.

In my own application I sometimes also saw some threads accessing partially built aspect instances. This was quite rare however and I wasn't able to make a test case for it.

The ajc version (the current stable) used was:

The sun vm version was:

I investigated the source of this problem: the ajc compiler generates the following (decompiled) method into the aspect class:


which obviously is not thread safe.