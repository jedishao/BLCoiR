checkThreadLocalMapForLeaks has false positives.
ThreadLocal$ThreadLocalMap weakly references keys but strongly references values.
However, it appears the checkThreadLocalMapForLeaks checking reports false positives if the key is a ThreadLocal subclass (e.g., anonymous class) but the value does not strongly reference the class loader (e.g., Integer, int[] List<SimpleDateFormatter>, etc.).
Example output:
Threads are going to be renewed over time to try and avoid a probable memory leak.
For large web applications with many such false positives, this output makes tracking down (or even noticing new) real issues more difficult.
Third party libraries refuse to adjust their use of ThreadLocal because they believe (IMO rightly) their code is not causing leaks.
I have read bug 50175 comment 6, but given that the current heuristic has false positives, can some compromise be reached?  Perhaps some configuration for stifling the warning on a per key class name basis could be added?  It would even be acceptable for us if that configuration hid the per-instance message but issued a single overall "suppressing N ThreadLocal warnings based on config" info/warning message.