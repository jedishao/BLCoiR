In cluster, when using DeltaManager memory leak can occur.
Patch to remove context classloader from threads in ThreadPoolExecutor in tribes.
Tested on apache-tomcat-6.0.29 running under jdk 1.6.0_18.
When DeltaManager is instantiated and assigned in StandardContext.start(), is it done AFTER StandardContext.bindThreads().
DeltaManager, in turn, during initalization, asks for sessions in other nodes, and this may result in creating threads in ThreadPoolExecutor in tribes.
These threads created with contextClassLoader set to current webapplication WebAppClassLoader.
This results in memory leak and error message during redeployment in tomcat log:
The web application [/creditdev] appears to have started a thread named [pool-1-thread-1] but has failed to stop it.
This is very likely to create a memory leak.
Stacktrace:
Proposed solution - implement java.util.concurrent.ThreadFactory in MessageDispatch15Interceptor and pass instance on ThreadPoolExecutor executor creation.
This instance must call setContextClassLoader(null) in newThread() override method.