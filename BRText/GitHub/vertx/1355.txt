Deadlock between ClientConnection and HttpClientRequestImpl.
Hi,
After a week attached to our load balancer which does a simple poll to one of our rest end points (we have no other traffic right now) all 4 machines (4 instances) end up in deadlock and had to be "kill -9"ed , which  in theory brought down our whole DC. Since we are in testing stages this was not a big problem but I imagine to most it would be a bit hair raising.
From my simple analysis it seems that the Exception handling and the request response seem to be locking on the HttpClientRequestImpl->handleException->getlock -> (this)  and HttpClientRequestImpl->connect(this)->lamda->(this)
Also looking at the traffic it seems our load-balancer (a cisco content switch with ACE module) sends a request gets the response then resets the connection. I believe this behaviour is causing the deadlock, since this is important for us to go live I will try create a test to replicate this behaviour.
This was running 3.2.0 code (Ive seen no fixes in 3.2.1) and using JVM 1.8_74 on RHEL 6.5
Here is the jstack information.

Debugger attached successfully.
Server compiler detected.
JVM version is 25.74-b02
Deadlock Detection:
Found one Java-level deadlock:
"vert.x-eventloop-thread-0":
waiting to lock Monitor@0x0000000081060ac8 (Object@0x0000000081060ac8, a io/vertx/core/http/impl/ClientConnection),
which is held by "vert.x-eventloop-thread-7"
"vert.x-eventloop-thread-7":
waiting to lock Monitor@0x00007f6dac2a5e98 (Object@0x0000000081060bf0, a io/vertx/core/http/impl/HttpClientRequestImpl),
which is held by the"vert.x-eventloop-thread-0"
Found a total of 1 deadlock.