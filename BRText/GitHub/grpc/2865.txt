Rare race condition in Client
While more prominent when using compression, this race occurs without it as well.  The typical race looks something like:

Client starts and RPC
The transport to the server is not yet available, so a DelayedClientTransport is used.
The server handles the RPC and sends back headers and a compressed message.
The client sees there are headers, and begins executing the queued stream callbacks, on the channel executor threads instead of the transport thread
The client sees the Data frame, and tries to decompress it on the network thread.  *This fails since the headers from 4 have not yet been processed.
The stream has already failed, but the queued callback for onHeaders() is finally executed on the app thread.

This is the root cause of #2157.  As mentioned, this isn't just for compression.  ClientInterceptors will see headers after data has been received.   The solution (temporary?) seems to be to move OkHttp to used AbstractClientStream2 in #2821, and then move decompression from ClientCallImpl to the stream.  That will fix the decompression, but not interceptors.
