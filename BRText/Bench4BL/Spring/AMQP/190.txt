CachingConnectionFactory leaks channels when synchronized with a TransactionManager.
It seems that when I use RabbitTemplate, channelTransacted=true, to convertAndSend() a message to an exchange within the context of a synchronized TransactionManager (e.g. an active transaction on the current thread), the channel is never closed, hence new publishes will always get their "own", shiny, new channel (that is never closed or released to the channel pool) until Rabbit can't handle any more channels.
See Forum Reference for more info.
The problem is not observed on the consumer side (e.g. MessageListenerContainer).
Its observed on the publishing side, (e.g. RabbitTemplate).
It is observed both if I use the RabbitTemplate, natively... or if I use spring-integration and the :outbound-channel-adapter... tag.
BTW, the observed "channel leak" goes away when I choose channelTransacted=false.
I will look to supply a simple recreate, if I can scrounge the time.