HTable#close will hang forever if unchecked error/exception thrown in AsyncProcess#sendMultiActionCurrently.
in AsyncProcess#sendMultiAction, we only catch the RejectedExecutionException and let other error/exception go, which will cause decTaskCounter not invoked.
Meanwhile, the recommendation for using HTable is to close the table in the finally clause, and HTable#close will call flushCommits and wait until all task done.
The problem is when unchecked error/exception like OutOfMemoryError thrown, taskSent will never be equal to taskDone, so AsyncProcess#waitUntilDone will never return.
Especially, if autoflush is set thus no data to flush during table close, there would be no rpc call so rpcTimeOut will not break the call, and thread will wait there forever.
In our product env, the unchecked error we observed is "java.lang.OutOfMemoryError: unable to create new native thread", and we observed the client thread hang for hours