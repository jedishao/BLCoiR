LLAP: deadlock in task scheduling.


"IPC Server handler 0 on 15001":

  waiting to lock Monitor@0x00007f5d322ecb08 (Object@0x00007f67032cd2c0, a org/apache/hadoop/hive/llap/daemon/impl/TaskExecutorService$TaskWrapper),

  which is held by "ExecutionCompletionThread #0"

"ExecutionCompletionThread #0":

  waiting to lock Monitor@0x00007f6066b9e8c8 (Object@0x00007f66b6570200, a org/apache/hadoop/hive/llap/daemon/impl/QueryInfo$FinishableStateTracker),

  which is held by "IPC Server handler 0 on 15001"



Found a total of 1 deadlock.

Looks like it's caused by synchronized blocks:

TaskWrapper:

public synchronized void maybeUnregisterForFinishedStateNotifications



Eventually calls 

FinishableStateTracker

synchronized void unregisterForUpdates(FinishableStateUpdateHandler handler) {

and 

FST

synchronized void sourceStateUpdated(String sourceName) {

   

eventually calls

 public synchronized boolean isInWaitQueue() {


The latter returns the boolean, so it definitely doesn't need synchronized, however I don't know if there are other similar issues and what is necessary inside sync blocks, perhaps there's a better fix.
Overall I'd say synch methods on objects that call any other non-trivial objects should not be used. Perhaps for now it would be good to replace all sync methods by sync blocks that cover entire method, as well as remove the unnecessary ones like the isWait... one.
Then the scope of the blocks can be adjusted based on logic in future.