FTP can wait indefinitely when connection timeout occurs during connect.
In our production system we have seen cases where the FTP thread is waiting for a response indefinitely despite having set soTimeout on the connection. 
On investigation this is due to a condition that can occur where a socket is able to connect yet a firewall or the ilk then blocks further traffic.
This can be over come by setting the property ftpClient.defaultTimeout to a non-zero value.
It should be the case where if upon initial socket connection no response occurs that the socket should be deemed dead, however this is not the case.
When the following exception is thrown during initial connect to an FTP server, after the socket has connected but whilst awaiting the inital reply it can leave the RemoteFileProducer in a state where it is connected but not logged in and no attempt reconnect is attempted, if the soTimeout as set by ftpClient.defaultTimeout is set to zero then it can cause a subsequent command will wait for a reply indefinitely.

The RemoteFileProducer will enter this block as the loggedIn state has not yet been reached, however the existing broken socket is reused.

Yet the connectIfNecessary() method will return immediately since the check condition is based on socket connection and takes no account of whether login was achieved so the dead's socket is reused.

A dirty test that blocks of this blocking condition:
